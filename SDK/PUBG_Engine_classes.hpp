#pragma once

// PUBG (7.2.8.10) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "PUBG_Engine_structs.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.Actor
// 0x03B8 (0x03E8 - 0x0030)
class AActor : public UObject
{
public:
	float                                              NetUpdateFrequency;                                       // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0034(0x0014) MISSED OFFSET
	unsigned char                                      bHidden : 1;                                              // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bNetTemporary : 1;                                        // 0x0048(0x0001)
	unsigned char                                      bNetStartup : 1;                                          // 0x0048(0x0001)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                 // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bAlwaysRelevant : 1;                                      // 0x0048(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bReplicateMovement : 1;                                   // 0x0048(0x0001) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      bIsSetSpectatedDelay : 1;                                 // 0x0048(0x0001) (Net)
	unsigned char                                      bTearOff : 1;                                             // 0x0048(0x0001) (Net)
	unsigned char                                      bExchangedRoles : 1;                                      // 0x0049(0x0001) (Transient)
	unsigned char                                      UnknownData01 : 1;                                        // 0x0049(0x0001)
	unsigned char                                      bNetLoadOnClient : 1;                                     // 0x0049(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                // 0x0049(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bBlockInput : 1;                                          // 0x0049(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02 : 1;                                        // 0x0049(0x0001)
	unsigned char                                      bAllowTickBeforeBeginPlay : 1;                            // 0x0049(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData03 : 1;                                        // 0x0049(0x0001)
	unsigned char                                      UnknownData04 : 2;                                        // 0x004A(0x0001)
	unsigned char                                      bActorEnableCollision : 1;                                // 0x004A(0x0001)
	unsigned char                                      UnknownData05 : 5;                                        // 0x004A(0x0001)
	unsigned char                                      bReplayRewindable : 1;                                    // 0x004B(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x004B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FName                                       NetDriverName;                                            // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0058(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData08[0x8];                                       // 0x0059(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Actor.Owner
	struct FRepMovement                                ReplicatedMovement;                                       // 0x0068(0x0034) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      UnknownData09[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FRepAttachment                              AttachmentReplication;                                    // 0x00A0(0x0040) (Net, Transient)
	unsigned char                                      UnknownData10[0x8];                                       // 0x00E0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                          // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                NetTag;                                                   // 0x00F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CustomTimeDilation;                                       // 0x00FC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnActorEndOverlap;                                        // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakePointDamage;                                        // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorHit;                                               // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                             // 0x0130(0x0001) (BlueprintVisible)
	unsigned char                                      bCanBeDamaged : 1;                                        // 0x0130(0x0001) (Edit, BlueprintVisible, Net, SaveGame)
	unsigned char                                      bActorIsBeingDestroyed : 1;                               // 0x0130(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bCollideWhenPlacing : 1;                                  // 0x0130(0x0001)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                   // 0x0130(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRelevantForNetworkReplays : 1;                           // 0x0130(0x0001)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming : 1;           // 0x0130(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreDestroyActorFromBlueprint : 1;                     // 0x0130(0x0001) (Transient)
	unsigned char                                      bCanBeInCluster : 1;                                      // 0x0131(0x0001) (Edit)
	unsigned char                                      UnknownData11[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	TWeakObjectPtr<class UChildActorComponent>         ParentComponent;                                          // 0x0134(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                          // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0150(0x0004) MISSED OFFSET
	ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod;                             // 0x0154(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                         // 0x0155(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0156(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActorBeginOverlap;                                      // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;              // 0x0168(0x0001)
	unsigned char                                      UnknownData15 : 3;                                        // 0x0168(0x0001)
	unsigned char                                      bActorSeamlessTraveled : 1;                               // 0x0168(0x0001)
	unsigned char                                      bIgnoresOriginShifting : 1;                               // 0x0168(0x0001) (Edit)
	unsigned char                                      bEnableAutoLODGeneration : 1;                             // 0x0168(0x0001) (Edit)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	struct FGuid                                       DestructibleId;                                           // 0x016C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIsDestroyedVersion;                                      // 0x017C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               RemoveFromLevelLOD;                                       // 0x017D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x2];                                       // 0x017E(0x0002) MISSED OFFSET
	struct FActorTickFunction                          PrimaryActorTick;                                         // 0x0180(0x0058) (Edit, DisableEditOnInstance)
	TArray<class AActor*>                              Children;                                                 // 0x01D8(0x0010) (ZeroConstructor, Transient)
	class APawn*                                       Instigator;                                               // 0x01E8(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x50];                                      // 0x01F0(0x0050) MISSED OFFSET
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0240(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0241(0x0003) MISSED OFFSET
	float                                              NetPriority;                                              // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceReplicateInterleavingFreq;                           // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EInputConsumeOptions>                  InputConsumeOption;                                       // 0x0260(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData21[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                 // 0x0278(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               Layers;                                                   // 0x0288(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData22[0x8];                                       // 0x0298(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Actor.RootComponent
	int                                                InputPriority;                                            // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                        // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData24[0x10];                                      // 0x02B8(0x0010) MISSED OFFSET
	TArray<class UActorComponent*>                     InstanceComponents;                                       // 0x02C8(0x0010) (ExportObject, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnTakeAnyDamage;                                          // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData25[0x58];                                      // 0x02E8(0x0058) MISSED OFFSET
	class UInputComponent*                             InputComponent;                                           // 0x0340(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       ParentComponentActor;                                     // 0x0348(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              NetCullDistanceSquared;                                   // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialLifeSpan;                                          // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                               // 0x0358(0x0010) (ExportObject, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                        // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FName>                               Tags;                                                     // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnDestroyed;                                              // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndPlay;                                                // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData26[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                        // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MinNetUpdateFrequency;                                    // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData27[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                        // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	uint64_t                                           HiddenEditorViews;                                        // 0x03D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData28[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Actor"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.StaticMeshActor
// 0x0010 (0x03F8 - 0x03E8)
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bStaticMeshReplicateMovement;                             // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	ENavDataGatheringMode                              NavigationGeometryGatheringMode;                          // 0x03F1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshActor"));

		return ptr;
	}

};


// Class Engine.ActorComponent
// 0x01D0 (0x0200 - 0x0030)
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0030(0x00F0) MISSED OFFSET
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                     // 0x0120(0x0058) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                            // 0x0178(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0188(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01 : 3;                                        // 0x0198(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x0198(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bNetAddressable : 1;                                      // 0x0198(0x0001)
	unsigned char                                      bNetRemappable : 1;                                       // 0x0198(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0199(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData03 : 2;                                        // 0x019A(0x0001)
	unsigned char                                      bCreatedByConstructionScript : 1;                         // 0x019A(0x0001) (Deprecated)
	unsigned char                                      bInstanceComponent : 1;                                   // 0x019A(0x0001) (Deprecated)
	unsigned char                                      bAutoActivate : 1;                                        // 0x019A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsActive : 1;                                            // 0x019A(0x0001) (Net, Transient)
	unsigned char                                      bEditableWhenInherited : 1;                               // 0x019A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x1];                                       // 0x019B(0x0001) MISSED OFFSET
	struct FGuid                                       DestructibleId;                                           // 0x019C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIsDestroyedVersion;                                      // 0x01AC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x01AD(0x0003) MISSED OFFSET
	unsigned char                                      bCanEverAffectNavigation : 1;                             // 0x01B0(0x0001) (Edit)
	unsigned char                                      UnknownData06 : 2;                                        // 0x01B0(0x0001)
	unsigned char                                      bIsEditorOnly : 1;                                        // 0x01B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01B1(0x0004) MISSED OFFSET
	EComponentCreationMethod                           CreationMethod;                                           // 0x01B5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0xA];                                       // 0x01B6(0x000A) MISSED OFFSET
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                    // 0x01C0(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnComponentActivated;                                     // 0x01D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentDeactivated;                                   // 0x01E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x9];                                       // 0x01F0(0x0009) MISSED OFFSET
	unsigned char                                      bReplayRewindable : 1;                                    // 0x01F9(0x0001)
	unsigned char                                      UnknownData10[0x6];                                       // 0x01FA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ActorComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class Engine.SceneComponent
// 0x02B0 (0x04B0 - 0x0200)
class USceneComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x0208(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0210(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0211(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x0211(0x0050) UNKNOWN PROPERTY: SetProperty Engine.SceneComponent.ClientAttachedChildren
	unsigned char                                      UnknownData03 : 1;                                        // 0x0268(0x0001)
	unsigned char                                      bReplicatesAttachmentReference : 1;                       // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bReplicatesAttachment : 1;                                // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bWorldToComponentUpdated : 1;                             // 0x0268(0x0001) (Transient)
	unsigned char                                      UnknownData04 : 1;                                        // 0x0268(0x0001)
	unsigned char                                      bAbsoluteLocation : 1;                                    // 0x0268(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteRotation : 1;                                    // 0x0268(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteScale : 1;                                       // 0x0268(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bVisible : 1;                                             // 0x0269(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bHiddenInGame : 1;                                        // 0x0269(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                           // 0x0269(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;            // 0x0269(0x0001)
	unsigned char                                      bUseAttachParentBound : 1;                                // 0x0269(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableInsensitiveUpdate : 1;                             // 0x0269(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05 : 2;                                        // 0x0269(0x0001)
	unsigned char                                      UnknownData06 : 2;                                        // 0x026A(0x0001)
	unsigned char                                      bAbsoluteTranslation : 1;                                 // 0x026A(0x0001) (Deprecated)
	unsigned char                                      UnknownData07[0x1];                                       // 0x026B(0x0001) MISSED OFFSET
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                            // 0x026C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                         // 0x0278(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2C];                                      // 0x0284(0x002C) MISSED OFFSET
	TArray<class USceneComponent*>                     AttachChildren;                                           // 0x02B0(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData10[0x48];                                      // 0x02C0(0x0048) MISSED OFFSET
	struct FVector                                     ComponentVelocity;                                        // 0x0308(0x000C) (IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x0314(0x000C) (Deprecated, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0320(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	class USceneComponent*                             AttachParent;                                             // 0x0330(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData12[0x38];                                      // 0x0338(0x0038) MISSED OFFSET
	struct FVector                                     RelativeScale3D;                                          // 0x0370(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	TEnumAsByte<EComponentMobility>                    Mobility;                                                 // 0x037C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0xB];                                       // 0x037D(0x000B) MISSED OFFSET
	struct FScriptMulticastDelegate                    PhysicsVolumeChangedDelegate;                             // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AttachmentChangedDelegate;                                // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData14[0x108];                                     // 0x03A8(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneComponent"));

		return ptr;
	}


	void STATIC_ToggleVisibility(bool bPropagateToChildren);
	bool STATIC_SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void STATIC_SetWorldScale3D(const struct FVector& NewScale);
	void STATIC_SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void STATIC_SetRelativeScale3D(const struct FVector& NewScale3D);
	void STATIC_SetIsAttachmentReplicated(bool ShouldReplicate);
	void STATIC_SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void STATIC_SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void STATIC_SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void STATIC_ResetRelativeTransform();
	void STATIC_OnRep_Visibility(bool OldValue);
	void STATIC_OnRep_Transform();
	void STATIC_OnRep_AttachSocketName();
	void STATIC_OnRep_AttachParent();
	void STATIC_OnRep_AttachChildren();
	void STATIC_K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform STATIC_K2_GetComponentToWorld();
	struct FVector STATIC_K2_GetComponentScale();
	struct FRotator STATIC_K2_GetComponentRotation();
	struct FVector STATIC_K2_GetComponentLocation();
	void STATIC_K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify);
	bool STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool STATIC_K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsVisible();
	bool STATIC_IsSimulatingPhysics(const struct FName& BoneName);
	bool STATIC_IsAnySimulatingPhysics();
	struct FVector STATIC_GetUpVector();
	struct FTransform STATIC_GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator STATIC_GetSocketRotation(const struct FName& InSocketName);
	struct FQuat STATIC_GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector STATIC_GetSocketLocation(const struct FName& InSocketName);
	struct FVector STATIC_GetRightVector();
	struct FTransform STATIC_GetRelativeTransform();
	class APhysicsVolume* STATIC_GetPhysicsVolume();
	void STATIC_GetParentComponents(TArray<class USceneComponent*>* Parents);
	int STATIC_GetNumChildrenComponents();
	struct FVector STATIC_GetForwardVector();
	struct FVector STATIC_GetComponentVelocity();
	void STATIC_GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* STATIC_GetChildComponent(int ChildIndex);
	struct FName STATIC_GetAttachSocketName();
	class USceneComponent* STATIC_GetAttachParent();
	TArray<struct FName> STATIC_GetAllSocketNames();
	bool STATIC_DoesSocketExist(const struct FName& InSocketName);
	void STATIC_DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class Engine.PrimitiveComponent
// 0x0510 (0x09C0 - 0x04B0)
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET
	float                                              MinDrawDistance;                                          // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LDMaxDrawDistance;                                        // 0x04BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CachedMaxDrawDistance;                                    // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x04C4(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x04C5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04C6(0x0002) MISSED OFFSET
	unsigned char                                      UnknownData02 : 3;                                        // 0x04C8(0x0001)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                            // 0x04C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGenerateOverlapEvents : 1;                               // 0x04C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMultiBodyOverlap : 1;                                    // 0x04C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCheckAsyncSceneOnMove : 1;                               // 0x04C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTraceComplexOnMove : 1;                                  // 0x04C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableForceFromCharacter : 1;                           // 0x04C9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReturnMaterialOnMove : 1;                                // 0x04C9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x04C9(0x0001)
	unsigned char                                      bAllowCullDistanceVolume : 1;                             // 0x04C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bImportantMesh : 1;                                       // 0x04C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideCullingDistances : 1;                            // 0x04C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04CA(0x0002) MISSED OFFSET
	float                                              HLODScreenSize;                                           // 0x04CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                         // 0x04D0(0x0001)
	unsigned char                                      bVisibleInReflectionCaptures : 1;                         // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInMainPass : 1;                                    // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInMono : 1;                                        // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceivesDecals : 1;                                      // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceivesDecalsEx : 1;                                    // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOwnerNoSee : 1;                                          // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOnlyOwnerSee : 1;                                        // 0x04D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                       // 0x04D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAsOccluder : 1;                                       // 0x04D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceAsOccluder : 1;                                     // 0x04D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceOcclusionQuerying : 1;                              // 0x04D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceDisableOcclusionQuerying : 1;                       // 0x04D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelectable : 1;                                          // 0x04D1(0x0001)
	unsigned char                                      bForceMipStreaming : 1;                                   // 0x04D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                            // 0x04D1(0x0001)
	unsigned char                                      UnknownData04[0x2];                                       // 0x04D2(0x0002) MISSED OFFSET
	TEnumAsByte<EIndoorOutdoorMask>                    IndoorOutdoorMask;                                        // 0x04D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	unsigned char                                      CastShadow : 1;                                           // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                         // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDynamicShadow : 1;                                   // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastStaticShadow : 1;                                    // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                     // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelfShadowOnly : 1;                                      // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastFarShadow : 1;                                       // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastInsetShadow : 1;                                     // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCinematicShadow : 1;                                 // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastHiddenShadow : 1;                                    // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAsIfStatic : 1;                                     // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                             // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x2];                                       // 0x04DA(0x0002) MISSED OFFSET
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                             // 0x04DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	unsigned char                                      bReceiveCombinedCSMAndStaticShadowsFromStationaryLights : 1;// 0x04E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSingleSampleShadowFromStationaryLights : 1;              // 0x04E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x3];                                       // 0x04E1(0x0003) MISSED OFFSET
	struct FLightingChannels                           LightingChannels;                                         // 0x04E4(0x0003) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData09[0x1];                                       // 0x04E7(0x0001) MISSED OFFSET
	unsigned char                                      bIgnoreRadialImpulse : 1;                                 // 0x04E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreRadialForce : 1;                                   // 0x04E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bApplyImpulseOnDamage : 1;                                // 0x04E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSyncBodySleep : 1;                                       // 0x04E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      AlwaysLoadOnClient : 1;                                   // 0x04E8(0x0001)
	unsigned char                                      AlwaysLoadOnServer : 1;                                   // 0x04E8(0x0001)
	unsigned char                                      bUseEditorCompositing : 1;                                // 0x04E8(0x0001)
	unsigned char                                      bRenderCustomDepth : 1;                                   // 0x04E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x3];                                       // 0x04E9(0x0003) MISSED OFFSET
	int                                                CustomDepthStencilValue;                                  // 0x04EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ERendererStencilMask                               CustomDepthStencilWriteMask;                              // 0x04F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x04F1(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<ECollisionChannel>>             IgnoreCollisionMaskOnSweep;                               // 0x04F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                TranslucencySortPriority;                                 // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisibilityId;                                             // 0x050C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0510(0x0004) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                        // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0518(0x0008) MISSED OFFSET
	struct FBodyInstance                               BodyInstance;                                             // 0x0520(0x0240) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0760(0x0008) MISSED OFFSET
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                              // 0x0768(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0769(0x0003) MISSED OFFSET
	float                                              BoundsScale;                                              // 0x076C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LastSubmitTime;                                           // 0x0770(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastRenderTime;                                           // 0x0774(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastRenderTimeOnScreen;                                   // 0x0778(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ECanBeCharacterBase>                   CanBeCharacterBase;                                       // 0x077C(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData16[0x1];                                       // 0x077D(0x0001) MISSED OFFSET
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                     // 0x077E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x1];                                       // 0x077F(0x0001) MISSED OFFSET
	TArray<class AActor*>                              MoveIgnoreActors;                                         // 0x0780(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                     // 0x0790(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData18[0xB0];                                      // 0x07A0(0x00B0) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnComponentHit;                                           // 0x0850(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentBeginOverlap;                                  // 0x0860(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentEndOverlap;                                    // 0x0870(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentWake;                                          // 0x0880(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentSleep;                                         // 0x0890(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x10];                                      // 0x08A0(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                        // 0x08B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                          // 0x08C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x08D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x08E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                        // 0x08F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                          // 0x0900(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                        // 0x0910(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                        // 0x0920(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData20[0x28];                                      // 0x0930(0x0028) MISSED OFFSET
	class UPrimitiveComponent*                         LODParentPrimitive;                                       // 0x0958(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FPrimitiveComponentPostPhysicsTickFunction  PostPhysicsComponentTick;                                 // 0x0960(0x0058)
	unsigned char                                      UnknownData21[0x8];                                       // 0x09B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PrimitiveComponent"));

		return ptr;
	}


	void STATIC_WakeRigidBody(const struct FName& BoneName);
	void STATIC_WakeAllRigidBodies();
	void STATIC_SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void STATIC_SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void STATIC_SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void STATIC_SetSimulatePhysics(bool bSimulate);
	void STATIC_SetRenderInMono(bool bValue);
	void STATIC_SetRenderInMainPass(bool bValue);
	void STATIC_SetRenderCustomDepth(bool bValue);
	void STATIC_SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void STATIC_SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetOwnerNoSee(bool bNewOwnerNoSee);
	void STATIC_SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void STATIC_SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void STATIC_SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void STATIC_SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void STATIC_SetMassScale(const struct FName& BoneName, float InMassScale);
	void STATIC_SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void STATIC_SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void STATIC_SetLinearDamping(float InDamping);
	void STATIC_SetEnableGravity(bool bGravityEnabled);
	void STATIC_SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);
	void STATIC_SetCustomDepthStencilValue(int Value);
	void STATIC_SetCullDistance(float NewCullDistance);
	void STATIC_SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void STATIC_SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void STATIC_SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void STATIC_SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void STATIC_SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void STATIC_SetCastShadow(bool NewCastShadow);
	void STATIC_SetBoundsScale(float NewBoundsScale);
	void STATIC_SetAngularDamping(float InDamping);
	void STATIC_SetAllUseCCD(bool InUseCCD);
	void STATIC_SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void STATIC_SetAllPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void STATIC_SetAllMassScale(float InMassScale);
	struct FVector STATIC_ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void STATIC_PutRigidBodyToSleep(const struct FName& BoneName);
	bool STATIC_K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool STATIC_K2_IsQueryCollisionEnabled();
	bool STATIC_K2_IsPhysicsCollisionEnabled();
	bool STATIC_K2_IsCollisionEnabled();
	bool STATIC_IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsGravityEnabled();
	bool STATIC_IsAnyRigidBodyAwake();
	void STATIC_IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void STATIC_IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride STATIC_GetWalkableSlopeOverride();
	struct FVector STATIC_GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsAngularVelocity(const struct FName& BoneName);
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> STATIC_GetOverlapInfos();
	int STATIC_GetNumMaterials();
	class UMaterialInterface* STATIC_GetMaterialFromCollisionFaceIndex(int FaceIndex);
	class UMaterialInterface* STATIC_GetMaterial(int ElementIndex);
	float STATIC_GetMassScale(const struct FName& BoneName);
	float STATIC_GetMass();
	float STATIC_GetLinearDamping();
	struct FVector STATIC_GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<ECollisionResponse> STATIC_GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	struct FName STATIC_GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> STATIC_GetCollisionObjectType();
	TEnumAsByte<ECollisionEnabled> STATIC_GetCollisionEnabled();
	float STATIC_GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector STATIC_GetCenterOfMass(const struct FName& BoneName);
	float STATIC_GetAngularDamping();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> STATIC_CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> STATIC_CopyArrayOfMoveIgnoreActors();
	void STATIC_ClearMoveIgnoreComponents();
	void STATIC_ClearMoveIgnoreActors();
	bool STATIC_CanCharacterStepUp(class APawn* Pawn);
	void STATIC_AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void STATIC_AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void STATIC_AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void STATIC_AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.MeshComponent
// 0x0100 (0x0AC0 - 0x09C0)
class UMeshComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x09C0(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MeshComponent"));

		return ptr;
	}


	void STATIC_SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue);
	void STATIC_SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue);
	bool STATIC_IsMaterialSlotNameValid(const struct FName& MaterialSlotName);
	TArray<struct FName> STATIC_GetMaterialSlotNames();
	TArray<class UMaterialInterface*> STATIC_GetMaterials();
	int STATIC_GetMaterialIndex(const struct FName& MaterialSlotName);
};


// Class Engine.StaticMeshComponent
// 0x0090 (0x0B50 - 0x0AC0)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                           // 0x0AC0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PreviousLODLevel;                                         // 0x0AC4(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideMinLOD;                                          // 0x0AC8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0AC9(0x0003) MISSED OFFSET
	int                                                MinLOD;                                                   // 0x0ACC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 StaticMesh;                                               // 0x0AD0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideWireframeColor;                                  // 0x0AD8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0AD9(0x0003) MISSED OFFSET
	struct FColor                                      WireframeColorOverride;                                   // 0x0ADC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bOverrideNavigationExport : 1;                            // 0x0AE0(0x0001) (Transient)
	unsigned char                                      bForceNavigationObstacle : 1;                             // 0x0AE0(0x0001) (Transient)
	unsigned char                                      bDisallowMeshPaintPerInstance : 1;                        // 0x0AE0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x0AE0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideLightMapRes : 1;                                 // 0x0AE0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0AE1(0x0003) MISSED OFFSET
	int                                                OverriddenLightMapRes;                                    // 0x0AE4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCastDistanceFieldIndirectShadow : 1;                     // 0x0AE8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0AE9(0x0003) MISSED OFFSET
	float                                              DistanceFieldIndirectShadowMinVisibility;                 // 0x0AEC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x0AF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SubDivisionStepSize;                                      // 0x0AF4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSubDivisions : 1;                                     // 0x0AF8(0x0001)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0AF9(0x0007) MISSED OFFSET
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x0B00(0x0010) (ZeroConstructor, Deprecated)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x0B10(0x0010) (ZeroConstructor, Transient)
	TArray<struct FStreamingTextureBuildInfo>          StreamingTextureData;                                     // 0x0B20(0x0010) (ZeroConstructor)
	bool                                               bUseDefaultCollision;                                     // 0x0B30(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0B31(0x0003) MISSED OFFSET
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0B34(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0B4C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshComponent"));

		return ptr;
	}


	bool STATIC_SetStaticMesh(class UStaticMesh* NewMesh);
	void STATIC_SetForcedLodModel(int NewForcedLodModel);
	void STATIC_OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void STATIC_GetLocalBounds(struct FVector* Min, struct FVector* Max);
};


// Class Engine.MaterialInterface
// 0x0048 (0x0078 - 0x0030)
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                        // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                        // 0x0048(0x0014) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<struct FMaterialTextureInfo>                TextureStreamingData;                                     // 0x0060(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialInterface"));

		return ptr;
	}


	class UPhysicalMaterial* STATIC_GetPhysicalMaterial();
	class UMaterial* STATIC_GetBaseMaterial();
};


// Class Engine.MaterialInstance
// 0x0170 (0x01E8 - 0x0078)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          Parent;                                                   // 0x0080(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource : 1;                        // 0x0088(0x0001)
	unsigned char                                      bPermutationResourceInBaseMaterial : 1;                   // 0x0088(0x0001)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0088(0x0001)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                           // 0x0088(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x00C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bOverrideBaseProperties;                                  // 0x00D0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                    // 0x00D4(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0xF0];                                      // 0x00F8(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstance"));

		return ptr;
	}

};


// Class Engine.MaterialInstanceConstant
// 0x0000 (0x01E8 - 0x01E8)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceConstant"));

		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x0038 (0x0068 - 0x0030)
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialFunction*                           Function;                                                 // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Desc;                                                     // 0x0040(0x0010) (Edit, ZeroConstructor)
	struct FColor                                      BorderColor;                                              // 0x0050(0x0004) (IsPlainOldData)
	unsigned char                                      bRealtimePreview : 1;                                     // 0x0054(0x0001)
	unsigned char                                      bNeedToUpdatePreview : 1;                                 // 0x0054(0x0001) (Transient)
	unsigned char                                      bIsParameterExpression : 1;                               // 0x0054(0x0001)
	unsigned char                                      bCommentBubbleVisible : 1;                                // 0x0054(0x0001)
	unsigned char                                      bShowOutputNameOnPin : 1;                                 // 0x0054(0x0001)
	unsigned char                                      bShowMaskColorsOnPin : 1;                                 // 0x0054(0x0001)
	unsigned char                                      bHidePreviewWindow : 1;                                   // 0x0054(0x0001)
	unsigned char                                      bCollapsed : 1;                                           // 0x0054(0x0001)
	unsigned char                                      bShaderInputData : 1;                                     // 0x0055(0x0001)
	unsigned char                                      bShowInputs : 1;                                          // 0x0055(0x0001)
	unsigned char                                      bShowOutputs : 1;                                         // 0x0055(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	TArray<struct FExpressionOutput>                   Outputs;                                                  // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpression"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustomOutput"));

		return ptr;
	}

};


// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UBlueprintFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintFunctionLibrary"));

		return ptr;
	}

};


// Class Engine.Controller
// 0x0088 (0x0470 - 0x03E8)
class AController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class APlayerState*                                PlayerState;                                              // 0x03F0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	class USceneComponent*                             TransformComponent;                                       // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0408(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Controller.Character
	unsigned char                                      UnknownData03[0x10];                                      // 0x0410(0x0010) MISSED OFFSET
	struct FName                                       StateName;                                                // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ControlRotation;                                          // 0x0428(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0434(0x0014) MISSED OFFSET
	unsigned char                                      bAttachToPawn : 1;                                        // 0x0448(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsPlayerController : 1;                                  // 0x0448(0x0001)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData06[0x8];                                       // 0x0449(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Controller.Pawn
	unsigned char                                      UnknownData07[0x8];                                       // 0x0458(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                    // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Controller"));

		return ptr;
	}


	void STATIC_UnPossess();
	void STATIC_StopMovement();
	void STATIC_SetIgnoreMoveInput(bool bNewMoveInput);
	void STATIC_SetIgnoreLookInput(bool bNewLookInput);
	void STATIC_SetControlRotationBP(const struct FRotator& NewRotation);
	void STATIC_ResetIgnoreMoveInput();
	void STATIC_ResetIgnoreLookInput();
	void STATIC_ResetIgnoreInputFlags();
	void STATIC_ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void STATIC_Possess(class APawn* InPawn);
	void STATIC_OnRep_PlayerState();
	void STATIC_OnRep_Pawn();
	bool STATIC_LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* STATIC_K2_GetPawn();
	bool STATIC_IsPlayerController();
	bool STATIC_IsMoveInputIgnored();
	bool STATIC_IsLookInputIgnored();
	bool STATIC_IsLocalPlayerController();
	bool STATIC_IsLocalController();
	class AActor* STATIC_GetViewTarget();
	struct FRotator STATIC_GetDesiredRotation();
	struct FRotator STATIC_GetControlRotation();
	void STATIC_ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void STATIC_ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* STATIC_CastToPlayerController();
};


// Class Engine.UserDefinedStruct
// 0x0010 (0x0100 - 0x00F0)
class UUserDefinedStruct : public UScriptStruct
{
public:
	struct FGuid                                       Guid;                                                     // 0x00F0(0x0010) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.UserDefinedStruct"));

		return ptr;
	}

};


// Class Engine.SoundAttenuation
// 0x0130 (0x0160 - 0x0030)
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings                   Attenuation;                                              // 0x0030(0x0130) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundAttenuation"));

		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x02D0 (0x0780 - 0x04B0)
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                                    // 0x04B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                       // 0x04B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USoundClass*                                 SoundClassOverride;                                       // 0x04C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x04D0(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x04D0(0x0001)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                         // 0x04D0(0x0001)
	unsigned char                                      bAllowSpatialization : 1;                                 // 0x04D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x04D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04D1(0x0003) MISSED OFFSET
	unsigned char                                      bOverrideSubtitlePriority : 1;                            // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	unsigned char                                      bIsUISound : 1;                                           // 0x04D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableLowPassFilter : 1;                                 // 0x04D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverridePriority : 1;                                    // 0x04D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x04D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	struct FName                                       AudioComponentUserID;                                     // 0x04E0(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMin;                                       // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMax;                                       // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMin;                                      // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMax;                                      // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x04FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SubtitlePriority;                                         // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeWeightedPriorityScale;                              // 0x0504(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HighFrequencyGainMultiplier;                              // 0x050C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              LowPassFilterFrequency;                                   // 0x0510(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0518(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x0520(0x0130) (Edit, BlueprintVisible)
	class USoundConcurrency*                           ConcurrencySettings;                                      // 0x0650(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0658(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioFinished;                                          // 0x0660(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x70];                                      // 0x0670(0x0070) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioPlaybackPercent;                                   // 0x06E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x70];                                      // 0x06F0(0x0070) MISSED OFFSET
	struct FScriptDelegate                             OnQueueSubtitles;                                         // 0x0760(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0770(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AudioComponent"));

		return ptr;
	}


	void STATIC_Stop();
	void STATIC_SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void STATIC_SetVolumeMultiplier(float NewVolumeMultiplier);
	void STATIC_SetUISound(bool bInUISound);
	void STATIC_SetSubmixSend(class USoundSubmix* Submix, float SendLevel);
	void STATIC_SetSound(class USoundBase* NewSound);
	void STATIC_SetPitchMultiplier(float NewPitchMultiplier);
	void STATIC_SetPaused(bool bPause);
	void STATIC_SetIntParameter(const struct FName& InName, int inInt);
	void STATIC_SetFloatParameter(const struct FName& InName, float InFloat);
	void STATIC_SetBoolParameter(const struct FName& InName, bool InBool);
	void STATIC_Play(float StartTime);
	bool STATIC_IsPlaying();
	void STATIC_FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void STATIC_FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	bool STATIC_BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);
	void STATIC_AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void STATIC_AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
};


// Class Engine.CameraComponent
// 0x05F0 (0x0AA0 - 0x04B0)
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                              // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AspectRatio;                                              // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x04C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                // 0x04C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockToHmd : 1;                                           // 0x04C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x04C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x04C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04C9(0x0003) MISSED OFFSET
	float                                              PostProcessBlendWeight;                                   // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x04D0(0x0570) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0A40(0x0058) MISSED OFFSET
	unsigned char                                      bUseControllerViewRotation : 1;                           // 0x0A98(0x0001) (Deprecated)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0A99(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraComponent"));

		return ptr;
	}


	void STATIC_SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void STATIC_SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);
	void STATIC_SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void STATIC_SetOrthoWidth(float InOrthoWidth);
	void STATIC_SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void STATIC_SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void STATIC_SetFieldOfView(float InFieldOfView);
	void STATIC_SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void STATIC_SetAspectRatio(float InAspectRatio);
	void STATIC_GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void STATIC_AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.DecalComponent
// 0x0090 (0x0540 - 0x04B0)
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SortOrder;                                                // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeScreenSize;                                           // 0x04BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeStartDelay;                                           // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeDuration;                                             // 0x04C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDestroyOwnerAfterFade : 1;                               // 0x04C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04C9(0x0003) MISSED OFFSET
	struct FVector                                     DecalSize;                                                // 0x04CC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              NormalFadeStart;                                          // 0x04D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NormalFadeEnd;                                            // 0x04DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideOnMovableObjects;                                    // 0x04E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5F];                                      // 0x04E1(0x005F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DecalComponent"));

		return ptr;
	}


	void STATIC_SetSortOrder(int Value);
	void STATIC_SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void STATIC_SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	float STATIC_GetFadeStartDelay();
	float STATIC_GetFadeDuration();
	class UMaterialInterface* STATIC_GetDecalMaterial();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance();
};


// Class Engine.DistanceFieldCaptureComponent
// 0x0010 (0x04C0 - 0x04B0)
class UDistanceFieldCaptureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x04B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistanceFieldCaptureComponent"));

		return ptr;
	}


	void STATIC_ToggleVisibility(bool bPropagateToChildren);
	bool STATIC_SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void STATIC_SetWorldScale3D(const struct FVector& NewScale);
	void STATIC_SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void STATIC_SetRelativeScale3D(const struct FVector& NewScale3D);
	void STATIC_SetIsAttachmentReplicated(bool ShouldReplicate);
	void STATIC_SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void STATIC_SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void STATIC_SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void STATIC_ResetRelativeTransform();
	void STATIC_OnRep_Visibility(bool OldValue);
	void STATIC_OnRep_Transform();
	void STATIC_OnRep_AttachSocketName();
	void STATIC_OnRep_AttachParent();
	void STATIC_OnRep_AttachChildren();
	void STATIC_K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform STATIC_K2_GetComponentToWorld();
	struct FVector STATIC_K2_GetComponentScale();
	struct FRotator STATIC_K2_GetComponentRotation();
	struct FVector STATIC_K2_GetComponentLocation();
	void STATIC_K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify);
	bool STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool STATIC_K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsVisible();
	bool STATIC_IsSimulatingPhysics(const struct FName& BoneName);
	bool STATIC_IsAnySimulatingPhysics();
	struct FVector STATIC_GetUpVector();
	struct FTransform STATIC_GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator STATIC_GetSocketRotation(const struct FName& InSocketName);
	struct FQuat STATIC_GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector STATIC_GetSocketLocation(const struct FName& InSocketName);
	struct FVector STATIC_GetRightVector();
	struct FTransform STATIC_GetRelativeTransform();
	class APhysicsVolume* STATIC_GetPhysicsVolume();
	void STATIC_GetParentComponents(TArray<class USceneComponent*>* Parents);
	int STATIC_GetNumChildrenComponents();
	struct FVector STATIC_GetForwardVector();
	struct FVector STATIC_GetComponentVelocity();
	void STATIC_GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* STATIC_GetChildComponent(int ChildIndex);
	struct FName STATIC_GetAttachSocketName();
	class USceneComponent* STATIC_GetAttachParent();
	TArray<struct FName> STATIC_GetAllSocketNames();
	bool STATIC_DoesSocketExist(const struct FName& InSocketName);
	void STATIC_DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class Engine.ExponentialHeightFogComponent
// 0x00C0 (0x0570 - 0x04B0)
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                               // 0x04B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                FogInscatteringColor;                                     // 0x04B4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04C4(0x0004) MISSED OFFSET
	TArray<struct FFogHeightDensityPair2>              HeightDensityLayers;                                      // 0x04C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UTextureCube*                                InscatteringColorCubemap;                                 // 0x04D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InscatteringColorCubemapAngle;                            // 0x04E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                InscatteringTextureTint;                                  // 0x04E4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FullyDirectionalInscatteringColorDistance;                // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NonDirectionalInscatteringColorDistance;                  // 0x04F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringExponent;                          // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;                     // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringColor;                             // 0x0504(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FogHeightFalloff;                                         // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogMaxOpacity;                                            // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogCutoffDistance;                                        // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableVolumetricFog;                                     // 0x0524(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0525(0x0003) MISSED OFFSET
	float                                              VolumetricFogScatteringDistribution;                      // 0x0528(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      VolumetricFogAlbedo;                                      // 0x052C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                VolumetricFogEmissive;                                    // 0x0530(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              VolumetricFogExtinctionScale;                             // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogDistance;                                    // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideLightColorsWithFogInscatteringColors;            // 0x0548(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseExtendedFog;                                          // 0x0549(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x054A(0x0002) MISSED OFFSET
	float                                              ExtendedFogStartDistance;                                 // 0x054C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtendedFogStartFalloffDistance;                          // 0x0550(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtendedHeight;                                           // 0x0554(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtendedFallOff;                                          // 0x0558(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtendedFogDensity;                                       // 0x055C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UpDensity;                                                // 0x0560(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DownDensity;                                              // 0x0564(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0568(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseAtmosphereScattering;                                 // 0x056C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x056D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ExponentialHeightFogComponent"));

		return ptr;
	}


	void STATIC_SetVolumetricFogScatteringDistribution(float NewValue);
	void STATIC_SetVolumetricFogExtinctionScale(float NewValue);
	void STATIC_SetVolumetricFogEmissive(const struct FLinearColor& NewValue);
	void STATIC_SetVolumetricFogDistance(float NewValue);
	void STATIC_SetVolumetricFogAlbedo(const struct FColor& NewValue);
	void STATIC_SetVolumetricFog(bool bNewValue);
	void STATIC_SetUpDensity(float Value);
	void STATIC_SetStartDistance(float Value);
	void STATIC_SetNonDirectionalInscatteringColorDistance(float Value);
	void STATIC_SetIntensity(float Value);
	void STATIC_SetInscatteringTextureTint(const struct FLinearColor& Value);
	void STATIC_SetInscatteringColorCubemapAngle(float Value);
	void STATIC_SetInscatteringColorCubemap(class UTextureCube* Value);
	void STATIC_SetFullyDirectionalInscatteringColorDistance(float Value);
	void STATIC_SetFogMaxOpacity(float Value);
	void STATIC_SetFogInscatteringColor(const struct FLinearColor& Value);
	void STATIC_SetFogHeightFalloff(float Value);
	void STATIC_SetFogDensity(float Value);
	void STATIC_SetFogCutoffDistance(float Value);
	void STATIC_SetExtendedHeightFallOff(float Value);
	void STATIC_SetExtendedHeight(float Value);
	void STATIC_SetExtendedFogStartFalloffDistance(float Value);
	void STATIC_SetExtendedFogStartDistance(float Value);
	void STATIC_SetExtendedFogDensity(float Value);
	void STATIC_SetDownDensity(float Value);
	void STATIC_SetDirectionalInscatteringStartDistance(float Value);
	void STATIC_SetDirectionalInscatteringExponent(float Value);
	void STATIC_SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};


// Class Engine.ForceFeedbackAttenuation
// 0x00A8 (0x00D8 - 0x0030)
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings           Attenuation;                                              // 0x0030(0x00A8) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackAttenuation"));

		return ptr;
	}

};


// Class Engine.ForceFeedbackComponent
// 0x00E0 (0x0590 - 0x04B0)
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                      // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x04B8(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x04B8(0x0001)
	unsigned char                                      bLooping : 1;                                             // 0x04B8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x04B8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B9(0x0003) MISSED OFFSET
	float                                              IntensityMultiplier;                                      // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                      // 0x04C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FForceFeedbackAttenuationSettings           AttenuationOverrides;                                     // 0x04C8(0x00A8) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnForceFeedbackFinished;                                  // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0580(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackComponent"));

		return ptr;
	}


	void STATIC_Stop();
	void STATIC_SetIntensityMultiplier(float NewIntensityMultiplier);
	void STATIC_SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);
	void STATIC_Play(float StartTime);
	bool STATIC_BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings);
	void STATIC_AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings);
};


// Class Engine.InstancedDeferredDecalComponent
// 0x00A0 (0x0550 - 0x04B0)
class UInstancedDeferredDecalComponent : public USceneComponent
{
public:
	bool                                               KeepInstanceBufferCPUAccess;                              // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET
	class UMaterialInterface*                          DecalMaterial;                                            // 0x04B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x90];                                      // 0x04C0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InstancedDeferredDecalComponent"));

		return ptr;
	}


	void STATIC_SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* STATIC_GetDecalMaterial();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance();
};


// Class Engine.InstancedSplineDecalComponent
// 0x0070 (0x0520 - 0x04B0)
class UInstancedSplineDecalComponent : public USceneComponent
{
public:
	bool                                               UseDynamicInstanceBuffer;                                 // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               KeepInstanceBufferCPUAccess;                              // 0x04B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x04B2(0x0006) MISSED OFFSET
	TArray<struct FInstancedSplineDecalInstanceData>   PerInstanceDecalData;                                     // 0x04B8(0x0010) (Edit, ZeroConstructor)
	class UStaticMesh*                                 StaticMesh;                                               // 0x04C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          DecalMaterial;                                            // 0x04D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x04D8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InstancedSplineDecalComponent"));

		return ptr;
	}


	bool STATIC_SetStaticMesh(class UStaticMesh* NewMesh);
	void STATIC_SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	bool STATIC_RemoveInstance(int InstanceIndex);
	void STATIC_OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	int STATIC_GetInstanceCount();
	class UMaterialInterface* STATIC_GetDecalMaterial();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance();
	void STATIC_ClearInstances();
	int STATIC_AddInstanceWorldSpace(const struct FTransform& WorldTransform, const struct FSplineParams& SplineParams);
	int STATIC_AddInstance(const struct FTransform& InstanceTransform, const struct FSplineParams& SplineParams);
};


// Class Engine.LightComponentBase
// 0x0030 (0x04E0 - 0x04B0)
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                // 0x04B0(0x0010) (IsPlainOldData)
	float                                              Brightness;                                               // 0x04C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Intensity;                                                // 0x04C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      LightColor;                                               // 0x04C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bAffectsWorld : 1;                                        // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastShadows : 1;                                          // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastStaticShadows : 1;                                    // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastDynamicShadows : 1;                                   // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectTranslucentLighting : 1;                           // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricShadow : 1;                                // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04CD(0x0003) MISSED OFFSET
	float                                              IndirectLightingIntensity;                                // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricScatteringIntensity;                            // 0x04D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCachedCastShadow;                                        // 0x04D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightComponentBase"));

		return ptr;
	}


	void STATIC_SetCastVolumetricShadow(bool bNewValue);
	void STATIC_SetCastShadows(bool bNewValue);
	struct FLinearColor STATIC_GetLightColor();
};


// Class Engine.LightComponent
// 0x0110 (0x05F0 - 0x04E0)
class ULightComponent : public ULightComponentBase
{
public:
	float                                              Temperature;                                              // 0x04E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxDrawDistance;                                          // 0x04E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistanceFadeRange;                                     // 0x04E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseTemperature : 1;                                      // 0x04EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04ED(0x0003) MISSED OFFSET
	int                                                ShadowMapChannel;                                         // 0x04F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET
	float                                              MinRoughness;                                             // 0x04F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowResolutionScale;                                    // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBias;                                               // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSharpen;                                            // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ContactShadowLength;                                      // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      InverseSquaredFalloff : 1;                                // 0x050C(0x0001) (Deprecated)
	unsigned char                                      CastTranslucentShadows : 1;                               // 0x050C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                 // 0x050C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x050C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x050D(0x0003) MISSED OFFSET
	struct FLightingChannels                           LightingChannels;                                         // 0x0510(0x0003) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0513(0x0005) MISSED OFFSET
	class UMaterialInterface*                          LightFunctionMaterial;                                    // 0x0518(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightFunctionScale;                                       // 0x0520(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x052C(0x0004) MISSED OFFSET
	class UTextureLightProfile*                        IESTexture;                                               // 0x0530(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseIESBrightness : 1;                                    // 0x0538(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0539(0x0003) MISSED OFFSET
	float                                              IESBrightnessScale;                                       // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightFunctionFadeDistance;                                // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DisabledBrightness;                                       // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom : 1;                               // 0x0548(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0549(0x0003) MISSED OFFSET
	float                                              BloomScale;                                               // 0x054C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomThreshold;                                           // 0x0550(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      BloomTint;                                                // 0x0554(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bUseRayTracedDistanceFieldShadows;                        // 0x0558(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0559(0x0003) MISSED OFFSET
	float                                              RayStartOffsetDepthScale;                                 // 0x055C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x90];                                      // 0x0560(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightComponent"));

		return ptr;
	}


	void STATIC_SetVolumetricScatteringIntensity(float NewIntensity);
	void STATIC_SetTemperature(float NewTemperature);
	void STATIC_SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void STATIC_SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void STATIC_SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void STATIC_SetLightFunctionDisabledBrightness(float NewValue);
	void STATIC_SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void STATIC_SetIntensity(float NewIntensity);
	void STATIC_SetIndirectLightingIntensity(float NewIntensity);
	void STATIC_SetIESTexture(class UTextureLightProfile* NewValue);
	void STATIC_SetEnableLightShaftBloom(bool bNewValue);
	void STATIC_SetBloomTint(const struct FColor& NewValue);
	void STATIC_SetBloomThreshold(float NewValue);
	void STATIC_SetBloomScale(float NewValue);
	void STATIC_SetAffectTranslucentLighting(bool bNewValue);
	void STATIC_SetAffectDynamicIndirectLighting(bool bNewValue);
};


// Class Engine.DirectionalLightComponent
// 0x0080 (0x0670 - 0x05F0)
class UDirectionalLightComponent : public ULightComponent
{
public:
	unsigned char                                      bEnableLightShaftOcclusion : 1;                           // 0x05F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05F1(0x0003) MISSED OFFSET
	float                                              OcclusionMaskDarkness;                                    // 0x05F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionDepthRange;                                      // 0x05F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightShaftOverrideDirection;                              // 0x05FC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x0608(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                        // 0x060C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;                     // 0x0610(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DynamicShadowCascades;                                    // 0x0614(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeDistributionExponent;                              // 0x0618(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeTransitionFraction;                                // 0x061C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                            // 0x0620(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                    // 0x0624(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0625(0x0003) MISSED OFFSET
	int                                                FarShadowCascadeCount;                                    // 0x0628(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarShadowDistance;                                        // 0x062C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                              // 0x0630(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceAngle;                                         // 0x0634(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceDistance;                                            // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                        // 0x063C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastModulatedShadows : 1;                                // 0x064C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x064D(0x0003) MISSED OFFSET
	struct FColor                                      ModulatedShadowColor;                                     // 0x0650(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                            // 0x0654(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseGridShadow : 1;                                       // 0x0654(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0655(0x0003) MISSED OFFSET
	TArray<struct FGridShadowSplitSettings>            GridShadowSplitSettings;                                  // 0x0658(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0668(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DirectionalLightComponent"));

		return ptr;
	}


	void STATIC_SetShadowDistanceFadeoutFraction(float NewValue);
	void STATIC_SetOcclusionMaskDarkness(float NewValue);
	void STATIC_SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void STATIC_SetEnableLightShaftOcclusion(bool bNewValue);
	void STATIC_SetDynamicShadowDistanceStationaryLight(float NewValue);
	void STATIC_SetDynamicShadowDistanceMovableLight(float NewValue);
	void STATIC_SetDynamicShadowCascades(int NewValue);
	void STATIC_SetCascadeTransitionFraction(float NewValue);
	void STATIC_SetCascadeDistributionExponent(float NewValue);
};


// Class Engine.PointLightComponent
// 0x0030 (0x0620 - 0x05F0)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              Radius;                                                   // 0x05F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              AttenuationRadius;                                        // 0x05F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseInverseSquaredFalloff : 1;                            // 0x05F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05F9(0x0003) MISSED OFFSET
	float                                              LightFalloffExponent;                                     // 0x05FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceRadius;                                             // 0x0600(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceLength;                                             // 0x0604(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightmassPointLightSettings                LightmassSettings;                                        // 0x0608(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0614(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PointLightComponent"));

		return ptr;
	}


	void STATIC_SetSourceRadius(float bNewValue);
	void STATIC_SetSourceLength(float NewValue);
	void STATIC_SetLightFalloffExponent(float NewLightFalloffExponent);
	void STATIC_SetAttenuationRadius(float NewRadius);
};


// Class Engine.SpotLightComponent
// 0x0010 (0x0630 - 0x0620)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              LightShaftConeAngle;                                      // 0x0620(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0624(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SpotLightComponent"));

		return ptr;
	}


	void STATIC_SetOuterConeAngle(float NewOuterConeAngle);
	void STATIC_SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.SkyLightComponent
// 0x01B0 (0x0690 - 0x04E0)
class USkyLightComponent : public ULightComponentBase
{
public:
	TEnumAsByte<ESkyLightSourceType>                   SourceType;                                               // 0x04E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04E1(0x0007) MISSED OFFSET
	class UTextureCube*                                Cubemap;                                                  // 0x04E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CubemapResolution;                                        // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SkyDistanceThreshold;                                     // 0x04F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureEmissiveOnly;                                     // 0x04FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerHemisphereIsBlack;                                  // 0x04FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04FE(0x0002) MISSED OFFSET
	struct FLinearColor                                LowerHemisphereColor;                                     // 0x0500(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              OcclusionMaxDistance;                                     // 0x0510(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Contrast;                                                 // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionExponent;                                        // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinOcclusion;                                             // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      OcclusionTint;                                            // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode;                                     // 0x0524(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xA3];                                      // 0x0525(0x00A3) MISSED OFFSET
	class UTextureCube*                                BlendDestinationCubemap;                                  // 0x05C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC0];                                      // 0x05D0(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkyLightComponent"));

		return ptr;
	}


	void STATIC_SetVolumetricScatteringIntensity(float NewIntensity);
	void STATIC_SetOcclusionTint(const struct FColor& InTint);
	void STATIC_SetOcclusionExponent(float InOcclusionExponent);
	void STATIC_SetOcclusionContrast(float InOcclusionContrast);
	void STATIC_SetMinOcclusion(float InMinOcclusion);
	void STATIC_SetLightColor(const struct FLinearColor& NewLightColor);
	void STATIC_SetIntensity(float NewIntensity);
	void STATIC_SetIndirectLightingIntensity(float NewIntensity);
	void STATIC_SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void STATIC_SetCubemap(class UTextureCube* NewCubemap);
	void STATIC_RecaptureSky();
};


// Class Engine.LightmassPortalComponent
// 0x0010 (0x04C0 - 0x04B0)
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                               // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightmassPortalComponent"));

		return ptr;
	}

};


// Class Engine.NavigationGraphNodeComponent
// 0x0030 (0x04E0 - 0x04B0)
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	struct FNavGraphNode                               Node;                                                     // 0x04B0(0x0018)
	class UNavigationGraphNodeComponent*               NextNodeComponent;                                        // 0x04C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UNavigationGraphNodeComponent*               PrevNodeComponent;                                        // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationGraphNodeComponent"));

		return ptr;
	}

};


// Class Engine.PhysicsConstraintComponent
// 0x0240 (0x06F0 - 0x04B0)
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                         // 0x04B0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName1;                                           // 0x04B8(0x0008) (Edit)
	class AActor*                                      ConstraintActor2;                                         // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName2;                                           // 0x04C8(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x04D0(0x0010) MISSED OFFSET
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                          // 0x04E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET
	struct FConstraintInstance                         ConstraintInstance;                                       // 0x0500(0x01F0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintComponent"));

		return ptr;
	}


	void STATIC_SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void STATIC_SetOrientationDriveSLERP(bool bEnableSLERP);
	void STATIC_SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void STATIC_SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void STATIC_SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void STATIC_SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void STATIC_SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void STATIC_SetLinearPositionTarget(const struct FVector& InPosTarget);
	void STATIC_SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void STATIC_SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void STATIC_SetDisableCollision(bool bDisableCollision);
	void STATIC_SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition);
	void STATIC_SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void STATIC_SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void STATIC_SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);
	void STATIC_SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void STATIC_SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void STATIC_SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void STATIC_SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void STATIC_SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void STATIC_SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void STATIC_SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void STATIC_SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void STATIC_SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void STATIC_SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void STATIC_SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);
	float STATIC_GetCurrentTwist();
	float STATIC_GetCurrentSwing2();
	float STATIC_GetCurrentSwing1();
	void STATIC_GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void STATIC_BreakConstraint();
};


// Class Engine.PhysicsSpringComponent
// 0x0030 (0x04E0 - 0x04B0)
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                          // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringDamping;                                            // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringLengthAtRest;                                       // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringRadius;                                             // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                            // 0x04C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreSelf;                                              // 0x04C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04C2(0x0002) MISSED OFFSET
	float                                              SpringCompression;                                        // 0x04C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x04C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSpringComponent"));

		return ptr;
	}


	struct FVector STATIC_GetSpringRestingPoint();
	struct FVector STATIC_GetSpringDirection();
	struct FVector STATIC_GetSpringCurrentEndPoint();
	float STATIC_GetNormalizedCompressionScalar();
};


// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x04C0 - 0x04B0)
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                           // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x04B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsThrusterComponent"));

		return ptr;
	}

};


// Class Engine.ShapeComponent
// 0x0020 (0x09E0 - 0x09C0)
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  ShapeBodySetup;                                           // 0x09C0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                  // 0x09C8(0x0001)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                            // 0x09C8(0x0001)
	unsigned char                                      bDynamicObstacle : 1;                                     // 0x09C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x09C9(0x0007) MISSED OFFSET
	class UClass*                                      AreaClass;                                                // 0x09D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x09D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ShapeComponent"));

		return ptr;
	}

};


// Class Engine.PostProcessComponent
// 0x0590 (0x0A40 - 0x04B0)
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x04B0(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x04C0(0x0570) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x0A30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0A34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0A38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0A3C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x0A3C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0A3D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PostProcessComponent"));

		return ptr;
	}


	void STATIC_AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.ArrowComponent
// 0x0010 (0x09D0 - 0x09C0)
class UArrowComponent : public UPrimitiveComponent
{
public:
	bool                                               bIsScreenSizeScaled;                                      // 0x09C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x09C1(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x09C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTreatAsASprite : 1;                                      // 0x09C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x09C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ArrowComponent"));

		return ptr;
	}


	void STATIC_SetArrowColor(const struct FLinearColor& NewColor);
};


// Class Engine.BillboardComponent
// 0x0020 (0x09E0 - 0x09C0)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x09C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x09C1(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x09C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              U;                                                        // 0x09C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UL;                                                       // 0x09CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              V;                                                        // 0x09D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VL;                                                       // 0x09D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FColor                                      Color;                                                    // 0x09D8(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x09DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BillboardComponent"));

		return ptr;
	}


	void STATIC_SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void STATIC_SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void STATIC_SetSprite(class UTexture2D* NewSprite);
	void STATIC_SetColor(const struct FColor& ApplyColor, bool bDirty);
};


// Class Engine.BrushComponent
// 0x0020 (0x09E0 - 0x09C0)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  BrushBodySetup;                                           // 0x09C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PrePivot;                                                 // 0x09C8(0x000C) (Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x09D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BrushComponent"));

		return ptr;
	}

};


// Class Engine.ConcreteCollisionComponent
// 0x0030 (0x09F0 - 0x09C0)
class UConcreteCollisionComponent : public UPrimitiveComponent
{
public:
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                        // 0x09C0(0x0010) (ZeroConstructor)
	TArray<struct FConcreteCollisionSourceData>        SourceData;                                               // 0x09D0(0x0010) (ZeroConstructor)
	class UBodySetup*                                  BodySetup;                                                // 0x09E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x09E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ConcreteCollisionComponent"));

		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0020 (0x09E0 - 0x09C0)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	float                                              FrustumAspectRatio;                                       // 0x09C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumStartDist;                                         // 0x09C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumEndDist;                                           // 0x09C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x09CC(0x0004) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x09D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x09D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DrawFrustumComponent"));

		return ptr;
	}

};


// Class Engine.BoxComponent
// 0x0010 (0x09F0 - 0x09E0)
class UBoxComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x09E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BoxComponent"));

		return ptr;
	}


	void STATIC_SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector STATIC_GetUnscaledBoxExtent();
	struct FVector STATIC_GetScaledBoxExtent();
};


// Class Engine.GrassVolumeComponent
// 0x0000 (0x09F0 - 0x09F0)
class UGrassVolumeComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GrassVolumeComponent"));

		return ptr;
	}


	void STATIC_SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector STATIC_GetUnscaledBoxExtent();
	struct FVector STATIC_GetScaledBoxExtent();
};


// Class Engine.GrassVolumesContainerComponent
// 0x0010 (0x09D0 - 0x09C0)
class UGrassVolumesContainerComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x09C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GrassVolumesContainerComponent"));

		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0040 (0x0A00 - 0x09C0)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x09C0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LineBatchComponent"));

		return ptr;
	}


	void STATIC_WakeRigidBody(const struct FName& BoneName);
	void STATIC_WakeAllRigidBodies();
	void STATIC_SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void STATIC_SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void STATIC_SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void STATIC_SetSimulatePhysics(bool bSimulate);
	void STATIC_SetRenderInMono(bool bValue);
	void STATIC_SetRenderInMainPass(bool bValue);
	void STATIC_SetRenderCustomDepth(bool bValue);
	void STATIC_SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void STATIC_SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetOwnerNoSee(bool bNewOwnerNoSee);
	void STATIC_SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void STATIC_SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void STATIC_SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void STATIC_SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void STATIC_SetMassScale(const struct FName& BoneName, float InMassScale);
	void STATIC_SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void STATIC_SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void STATIC_SetLinearDamping(float InDamping);
	void STATIC_SetEnableGravity(bool bGravityEnabled);
	void STATIC_SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);
	void STATIC_SetCustomDepthStencilValue(int Value);
	void STATIC_SetCullDistance(float NewCullDistance);
	void STATIC_SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void STATIC_SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void STATIC_SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void STATIC_SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void STATIC_SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void STATIC_SetCastShadow(bool NewCastShadow);
	void STATIC_SetBoundsScale(float NewBoundsScale);
	void STATIC_SetAngularDamping(float InDamping);
	void STATIC_SetAllUseCCD(bool InUseCCD);
	void STATIC_SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void STATIC_SetAllPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void STATIC_SetAllMassScale(float InMassScale);
	struct FVector STATIC_ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void STATIC_PutRigidBodyToSleep(const struct FName& BoneName);
	bool STATIC_K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool STATIC_K2_IsQueryCollisionEnabled();
	bool STATIC_K2_IsPhysicsCollisionEnabled();
	bool STATIC_K2_IsCollisionEnabled();
	bool STATIC_IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsGravityEnabled();
	bool STATIC_IsAnyRigidBodyAwake();
	void STATIC_IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void STATIC_IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride STATIC_GetWalkableSlopeOverride();
	struct FVector STATIC_GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsAngularVelocity(const struct FName& BoneName);
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> STATIC_GetOverlapInfos();
	int STATIC_GetNumMaterials();
	class UMaterialInterface* STATIC_GetMaterialFromCollisionFaceIndex(int FaceIndex);
	class UMaterialInterface* STATIC_GetMaterial(int ElementIndex);
	float STATIC_GetMassScale(const struct FName& BoneName);
	float STATIC_GetMass();
	float STATIC_GetLinearDamping();
	struct FVector STATIC_GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<ECollisionResponse> STATIC_GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	struct FName STATIC_GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> STATIC_GetCollisionObjectType();
	TEnumAsByte<ECollisionEnabled> STATIC_GetCollisionEnabled();
	float STATIC_GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector STATIC_GetCenterOfMass(const struct FName& BoneName);
	float STATIC_GetAngularDamping();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> STATIC_CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> STATIC_CopyArrayOfMoveIgnoreActors();
	void STATIC_ClearMoveIgnoreComponents();
	void STATIC_ClearMoveIgnoreActors();
	bool STATIC_CanCharacterStepUp(class APawn* Pawn);
	void STATIC_AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void STATIC_AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void STATIC_AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void STATIC_AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.MaterialBillboardComponent
// 0x0010 (0x09D0 - 0x09C0)
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x09C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialBillboardComponent"));

		return ptr;
	}


	void STATIC_SetElements(TArray<struct FMaterialSpriteElement> NewElements);
	void STATIC_AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};


// Class Engine.SkinnedMeshComponent
// 0x01A0 (0x0C60 - 0x0AC0)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0AC0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                      // 0x0AC8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0AD0(0x0060) MISSED OFFSET
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                    // 0x0B30(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0B31(0x0007) MISSED OFFSET
	TArray<struct FBoxSphereBounds>                    ExtendedBoundsArray;                                      // 0x0B38(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0B48(0x0020) MISSED OFFSET
	class UPhysicsAsset*                               PhysicsAssetOverride;                                     // 0x0B68(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLodModel;                                           // 0x0B70(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MinLodModel;                                              // 0x0B74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0B78(0x0010) MISSED OFFSET
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                  // 0x0B88(0x0010) (ZeroConstructor, Transient)
	float                                              StreamingDistanceMultiplier;                              // 0x0B98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FColor                                      WireframeColor;                                           // 0x0B9C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bForceWireframe : 1;                                      // 0x0BA0(0x0001)
	unsigned char                                      bDisplayBones : 1;                                        // 0x0BA0(0x0001)
	unsigned char                                      bDisableMorphTarget : 1;                                  // 0x0BA0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideSkin : 1;                                            // 0x0BA0(0x0001)
	unsigned char                                      UnknownData04[0x17];                                      // 0x0BA1(0x0017) MISSED OFFSET
	unsigned char                                      bPerBoneMotionBlur : 1;                                   // 0x0BB8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                         // 0x0BB8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                          // 0x0BB8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSyncAttachParentLOD : 1;                                 // 0x0BB8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0BB9(0x0003) MISSED OFFSET
	TEnumAsByte<EMeshComponentUpdateFlag>              MeshComponentUpdateFlag;                                  // 0x0BBC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0BBD(0x0003) MISSED OFFSET
	unsigned char                                      bForceMeshObjectUpdate : 1;                               // 0x0BC0(0x0001) (Transient)
	unsigned char                                      bCanHighlightSelectedSections : 1;                        // 0x0BC0(0x0001) (Transient)
	unsigned char                                      bRecentlyRendered : 1;                                    // 0x0BC0(0x0001) (Transient)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0BC1(0x0003) MISSED OFFSET
	unsigned char                                      CustomSortAlternateIndexMode;                             // 0x0BC4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0BC5(0x0003) MISSED OFFSET
	unsigned char                                      bCastCapsuleDirectShadow : 1;                             // 0x0BC8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCapsuleIndirectShadow : 1;                           // 0x0BC8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0BC9(0x0003) MISSED OFFSET
	unsigned char                                      bRenderStatic : 1;                                        // 0x0BCC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0BCD(0x0003) MISSED OFFSET
	float                                              CapsuleIndirectShadowMinVisibility;                       // 0x0BD0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCPUSkinning : 1;                                         // 0x0BD4(0x0001) (Transient)
	unsigned char                                      UnknownData11[0xF];                                       // 0x0BD5(0x000F) MISSED OFFSET
	struct FBoxSphereBounds                            CachedLocalBounds;                                        // 0x0BE4(0x001C) (Transient, IsPlainOldData)
	bool                                               bCachedLocalBoundsUpToDate;                               // 0x0C00(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableUpdateRateOptimizations;                           // 0x0C01(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisplayDebugUpdateRateOptimizations;                     // 0x0C02(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4E];                                      // 0x0C03(0x004E) MISSED OFFSET
	bool                                               bShouldRefreshTransformOnce;                              // 0x0C51(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0xE];                                       // 0x0C52(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkinnedMeshComponent"));

		return ptr;
	}


	void STATIC_UnHideBoneByName(const struct FName& BoneName);
	void STATIC_TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void STATIC_TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void STATIC_SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors);
	void STATIC_SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights);
	void STATIC_SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);
	void STATIC_SetRenderStatic(bool bNewValue);
	void STATIC_SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void STATIC_SetMinLOD(int InNewMinLOD);
	void STATIC_SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	void STATIC_SetForcedLOD(int InNewForcedLOD);
	void STATIC_SetCastCapsuleIndirectShadow(bool bNewValue);
	void STATIC_SetCastCapsuleDirectShadow(bool bNewValue);
	void STATIC_SetCapsuleIndirectShadowMinVisibility(float NewValue);
	bool STATIC_IsBoneHiddenByName(const struct FName& BoneName);
	void STATIC_HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	struct FName STATIC_GetSocketBoneName(const struct FName& InSocketName);
	struct FName STATIC_GetParentBone(const struct FName& BoneName);
	int STATIC_GetNumBones();
	struct FName STATIC_GetBoneName(int BoneIndex);
	int STATIC_GetBoneIndex(const struct FName& BoneName);
	struct FName STATIC_FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation);
	void STATIC_ClearVertexColorOverride(int LODIndex);
	void STATIC_ClearSkinWeightOverride(int LODIndex);
	bool STATIC_BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
};


// Class Engine.DestructibleComponent
// 0x00C0 (0x0D20 - 0x0C60)
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	TArray<struct FFractureEffect>                     FractureEffects;                                          // 0x0C60(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	bool                                               bEnableHardSleeping;                                      // 0x0C70(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C71(0x0003) MISSED OFFSET
	float                                              LargeChunkThreshold;                                      // 0x0C74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0C78(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnComponentFracture;                                      // 0x0C88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x88];                                      // 0x0C98(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DestructibleComponent"));

		return ptr;
	}


	void STATIC_SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* STATIC_GetDestructibleMesh();
	void STATIC_ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void STATIC_ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
};


// Class Engine.PoseableMeshComponent
// 0x00E0 (0x0D40 - 0x0C60)
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0xE0];                                      // 0x0C60(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PoseableMeshComponent"));

		return ptr;
	}


	void STATIC_UnHideBoneByName(const struct FName& BoneName);
	void STATIC_TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void STATIC_TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void STATIC_SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors);
	void STATIC_SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights);
	void STATIC_SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);
	void STATIC_SetRenderStatic(bool bNewValue);
	void STATIC_SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void STATIC_SetMinLOD(int InNewMinLOD);
	void STATIC_SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	void STATIC_SetForcedLOD(int InNewForcedLOD);
	void STATIC_SetCastCapsuleIndirectShadow(bool bNewValue);
	void STATIC_SetCastCapsuleDirectShadow(bool bNewValue);
	void STATIC_SetCapsuleIndirectShadowMinVisibility(float NewValue);
	bool STATIC_IsBoneHiddenByName(const struct FName& BoneName);
	void STATIC_HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	struct FName STATIC_GetSocketBoneName(const struct FName& InSocketName);
	struct FName STATIC_GetParentBone(const struct FName& BoneName);
	int STATIC_GetNumBones();
	struct FName STATIC_GetBoneName(int BoneIndex);
	int STATIC_GetBoneIndex(const struct FName& BoneName);
	struct FName STATIC_FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation);
	void STATIC_ClearVertexColorOverride(int LODIndex);
	void STATIC_ClearSkinWeightOverride(int LODIndex);
	bool STATIC_BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
};


// Class Engine.SkeletalMeshComponent
// 0x0540 (0x11A0 - 0x0C60)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                            // 0x0C60(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0C61(0x0007) MISSED OFFSET
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                              // 0x0C68(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AnimClass;                                                // 0x0C70(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x0C78(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UAnimInstance*>                       SubInstances;                                             // 0x0C80(0x0010) (ZeroConstructor, Transient)
	class UAnimInstance*                               PostProcessAnimInstance;                                  // 0x0C90(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSingleAnimationPlayData                    AnimationData;                                            // 0x0C98(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0CB0(0x0038) MISSED OFFSET
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                                // 0x0CE8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                           // 0x0CF8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0D08(0x0020) MISSED OFFSET
	float                                              GlobalAnimRateScale;                                      // 0x0D28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EDynamicActorScene                                 UseAsyncScene;                                            // 0x0D2C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0D2D(0x0003) MISSED OFFSET
	unsigned char                                      bHasValidBodies : 1;                                      // 0x0D30(0x0001) (Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0D31(0x0003) MISSED OFFSET
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                 // 0x0D34(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode;                               // 0x0D35(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0D36(0x0002) MISSED OFFSET
	unsigned char                                      bBlendPhysics : 1;                                        // 0x0D38(0x0001) (Transient)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                      // 0x0D38(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                           // 0x0D38(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableClothSimulation : 1;                              // 0x0D38(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithEnvironment : 1;                              // 0x0D38(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithAttachedChildren : 1;                         // 0x0D38(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLocalSpaceSimulation : 1;                                // 0x0D38(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClothMorphTarget : 1;                                    // 0x0D38(0x0001) (Edit)
	unsigned char                                      bResetAfterTeleport : 1;                                  // 0x0D39(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0D3A(0x0002) MISSED OFFSET
	float                                              TeleportDistanceThreshold;                                // 0x0D3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TeleportRotationThreshold;                                // 0x0D40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x0D44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0D48(0x0004) MISSED OFFSET
	struct FVector                                     RootBoneTranslation;                                      // 0x0D4C(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      bNoSkeletonUpdate : 1;                                    // 0x0D58(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPauseAnims : 1;                                          // 0x0D58(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0D59(0x0003) MISSED OFFSET
	bool                                               bUseRefPoseOnInitAnim;                                    // 0x0D5C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0D5D(0x0003) MISSED OFFSET
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x0D60(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0D61(0x0007) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x0D68(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bOnlyAllowAutonomousTickPose : 1;                         // 0x0D70(0x0001) (Transient)
	unsigned char                                      bIsAutonomousTickPose : 1;                                // 0x0D70(0x0001) (Transient)
	unsigned char                                      bForceRefpose : 1;                                        // 0x0D70(0x0001)
	unsigned char                                      bOldForceRefPose : 1;                                     // 0x0D70(0x0001)
	unsigned char                                      bShowPrePhysBones : 1;                                    // 0x0D70(0x0001)
	unsigned char                                      bRequiredBonesUpToDate : 1;                               // 0x0D70(0x0001) (Transient)
	unsigned char                                      bAnimTreeInitialised : 1;                                 // 0x0D70(0x0001) (Transient)
	unsigned char                                      bIncludeComponentLocationIntoBounds : 1;                  // 0x0D70(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                           // 0x0D71(0x0001)
	unsigned char                                      bNeedsQueuedAnimEventsDispatched : 1;                     // 0x0D71(0x0001) (Transient)
	unsigned char                                      UnknownData11[0x2];                                       // 0x0D72(0x0002) MISSED OFFSET
	uint16_t                                           CachedAnimCurveUidVersion;                                // 0x0D74(0x0002) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x0D76(0x0002) MISSED OFFSET
	struct FVector                                     LineCheckBoundsScale;                                     // 0x0D78(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0D84(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0D88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData14[0xE8];                                      // 0x0D98(0x00E8) MISSED OFFSET
	class UClass*                                      ClothingSimulationFactory;                                // 0x0E80(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x200];                                     // 0x0E88(0x0200) MISSED OFFSET
	class UAnimSequence*                               SequenceToPlay;                                           // 0x1088(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UAnimationAsset*                             AnimToPlay;                                               // 0x1090(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bDefaultLooping : 1;                                      // 0x1098(0x0001) (Deprecated)
	unsigned char                                      bDefaultPlaying : 1;                                      // 0x1098(0x0001) (Deprecated)
	unsigned char                                      UnknownData16[0x3];                                       // 0x1099(0x0003) MISSED OFFSET
	float                                              DefaultPosition;                                          // 0x109C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DefaultPlayRate;                                          // 0x10A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	uint32_t                                           LastPoseTickFrame;                                        // 0x10A4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastPoseTickTime;                                         // 0x10A8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0xF4];                                      // 0x10AC(0x00F4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshComponent"));

		return ptr;
	}


	void STATIC_UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void STATIC_SuspendClothingSimulation();
	void STATIC_Stop();
	void STATIC_SnapshotPose(struct FPoseSnapshot* Snapshot);
	void STATIC_SetUpdateAnimationInEditor(bool NewUpdateState);
	void STATIC_SetPosition(float InPos, bool bFireNotifies);
	void STATIC_SetPlayRate(float Rate);
	void STATIC_SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void STATIC_SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void STATIC_SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void STATIC_SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void STATIC_SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void STATIC_SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void STATIC_SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void STATIC_SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void STATIC_SetClothMaxDistanceScale(float Scale);
	void STATIC_SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void STATIC_SetAnimInstanceClass(class UClass* NewClass);
	void STATIC_SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);
	void STATIC_SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void STATIC_SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void STATIC_SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void STATIC_SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void STATIC_SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void STATIC_SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void STATIC_SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void STATIC_SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void STATIC_SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void STATIC_ResumeClothingSimulation();
	void STATIC_ResetClothTeleportMode();
	void STATIC_ResetAllBodiesSimulatePhysics();
	void STATIC_PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void STATIC_Play(bool bLooping);
	void STATIC_OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	bool STATIC_K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);
	bool STATIC_IsPlaying();
	bool STATIC_IsClothingSimulationSuspended();
	bool STATIC_IsBodyGravityEnabled(const struct FName& BoneName);
	bool STATIC_HasValidAnimationInstance();
	struct FVector STATIC_GetSkeletalCenterOfMass();
	class UAnimInstance* STATIC_GetPostProcessInstance();
	float STATIC_GetPosition();
	float STATIC_GetPlayRate();
	float STATIC_GetMorphTarget(const struct FName& MorphTargetName);
	void STATIC_GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float STATIC_GetClothMaxDistanceScale();
	float STATIC_GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UAnimInstance* STATIC_GetAnimInstance();
	TEnumAsByte<EAnimationMode> STATIC_GetAnimationMode();
	void STATIC_ForceClothNextUpdateTeleportAndReset();
	void STATIC_ForceClothNextUpdateTeleport();
	struct FName STATIC_FindConstraintBoneName(int ConstraintIndex);
	void STATIC_ClearMorphTargets();
	void STATIC_BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);
	void STATIC_BindClothToMasterPoseComponent();
	void STATIC_AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void STATIC_AddForceToAllBodiesBelow(const struct FVector& force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void STATIC_AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class Engine.SplineMeshComponent
// 0x00A0 (0x0BF0 - 0x0B50)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	struct FSplineMeshParams                           SplineParams;                                             // 0x0B58(0x0058) (Edit)
	struct FVector                                     SplineUpDir;                                              // 0x0BB0(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                       // 0x0BBC(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bSmoothInterpRollScale : 1;                               // 0x0BBC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0BBD(0x0003) MISSED OFFSET
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                              // 0x0BC0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0BC1(0x0003) MISSED OFFSET
	float                                              SplineBoundaryMin;                                        // 0x0BC4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x0BC8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0BCC(0x0004) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x0BD0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                                  // 0x0BD8(0x0010) (IsPlainOldData)
	unsigned char                                      bMeshDirty : 1;                                           // 0x0BE8(0x0001) (Transient)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0BE9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SplineMeshComponent"));

		return ptr;
	}


	void STATIC_UpdateMesh();
	void STATIC_SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void STATIC_SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void STATIC_SetStartRoll(float StartRoll, bool bUpdateMesh);
	void STATIC_SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void STATIC_SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void STATIC_SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void STATIC_SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void STATIC_SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void STATIC_SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void STATIC_SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void STATIC_SetEndRoll(float EndRoll, bool bUpdateMesh);
	void STATIC_SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void STATIC_SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void STATIC_SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void STATIC_SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector STATIC_GetStartTangent();
	struct FVector2D STATIC_GetStartScale();
	float STATIC_GetStartRoll();
	struct FVector STATIC_GetStartPosition();
	struct FVector2D STATIC_GetStartOffset();
	struct FVector STATIC_GetSplineUpDir();
	TEnumAsByte<ESplineMeshAxis> STATIC_GetForwardAxis();
	struct FVector STATIC_GetEndTangent();
	struct FVector2D STATIC_GetEndScale();
	float STATIC_GetEndRoll();
	struct FVector STATIC_GetEndPosition();
	struct FVector2D STATIC_GetEndOffset();
	float STATIC_GetBoundaryMin();
	float STATIC_GetBoundaryMax();
	void STATIC_CalculateSplineMeshParams(class USplineComponent* SplineComponent, class USplineComponent* UpSplineComponent, int SegmentsCount, bool bUseSplineRotation, TArray<struct FSplineMeshParams>* SegmentParams, TArray<struct FVector>* SegmentsUpVectors);
};


// Class Engine.InstancedSplineMeshComponent
// 0x0070 (0x0BC0 - 0x0B50)
class UInstancedSplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	TArray<struct FSplineInstanceData>                 PerInstanceSMData;                                        // 0x0B58(0x0010) (Edit, ZeroConstructor)
	struct FVector                                     SplineUpDir;                                              // 0x0B68(0x000C) (IsPlainOldData)
	unsigned char                                      bSmoothInterpRollScale : 1;                               // 0x0B74(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0B75(0x0003) MISSED OFFSET
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                              // 0x0B78(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0B79(0x0003) MISSED OFFSET
	float                                              SplineBoundaryMin;                                        // 0x0B7C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x0B80(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOptimizeInstanceOrder;                                   // 0x0B84(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0B85(0x0003) MISSED OFFSET
	int                                                InstanceStartCullDistance;                                // 0x0B88(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x0B8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0B90(0x0018) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x0BA8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                                  // 0x0BB0(0x0010) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InstancedSplineMeshComponent"));

		return ptr;
	}


	void STATIC_UpdateMesh();
	void STATIC_SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void STATIC_SetCullDistances(int StartCullDistance, int EndCullDistance, bool bUpdateMesh);
	void STATIC_SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void STATIC_SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	bool STATIC_RemoveInstance(int InstanceIndex, bool bUpdateMesh);
	void STATIC_OptimizeInstancesOrder();
	bool STATIC_GetInstanceSpline(int InstanceIndex, bool bWorldSpace, struct FSplineMeshParams* OutSplineSegment, struct FVector* InSplineUpDir);
	int STATIC_GetInstanceCount();
	TEnumAsByte<ESplineMeshAxis> STATIC_GetForwardAxis();
	float STATIC_GetBoundaryMin();
	float STATIC_GetBoundaryMax();
	void STATIC_ClearInstances(bool bUpdateMesh);
	int STATIC_AddInstanceWorldSpace(const struct FSplineMeshParams& WorldSplineSegment, const struct FVector& InSplineUpDir, bool bUpdateMesh);
	int STATIC_AddInstance(const struct FSplineMeshParams& SplineSegment, const struct FVector& InSplineUpDir, bool bUpdateMesh);
};


// Class Engine.InstancedStaticMeshComponent
// 0x00E0 (0x0C30 - 0x0B50)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                        // 0x0B50(0x0010) (Edit, ZeroConstructor)
	int                                                InstancingRandomSeed;                                     // 0x0B60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InstanceStartCullDistance;                                // 0x0B64(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x0B68(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B6C(0x0004) MISSED OFFSET
	TArray<int>                                        InstanceReorderTable;                                     // 0x0B70(0x0010) (ZeroConstructor)
	TArray<int>                                        RemovedInstances;                                         // 0x0B80(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0B90(0x0078) MISSED OFFSET
	class UPhysicsSerializer*                          PhysicsSerializer;                                        // 0x0C08(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bUseWorldTransformHashAsRandom;                           // 0x0C10(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0C11(0x0003) MISSED OFFSET
	int                                                NumPendingLightmaps;                                      // 0x0C14(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                           // 0x0C18(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0C28(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InstancedStaticMeshComponent"));

		return ptr;
	}


	bool STATIC_UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	void STATIC_SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool STATIC_RemoveInstance(int InstanceIndex);
	bool STATIC_GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform);
	TArray<int> STATIC_GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	TArray<int> STATIC_GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace);
	int STATIC_GetInstanceCount();
	void STATIC_ClearInstances();
	int STATIC_AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	int STATIC_AddInstance(const struct FTransform& InstanceTransform);
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x0130 (0x0D60 - 0x0C30)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0C30(0x0060) MISSED OFFSET
	TArray<int>                                        SortedInstances;                                          // 0x0C90(0x0010) (ZeroConstructor)
	int                                                NumBuiltInstances;                                        // 0x0CA0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0CA4(0x0004) MISSED OFFSET
	struct FBox                                        BuiltInstanceBounds;                                      // 0x0CA8(0x001C) (IsPlainOldData)
	struct FBox                                        UnbuiltInstanceBounds;                                    // 0x0CC4(0x001C) (IsPlainOldData)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                // 0x0CE0(0x0010) (ZeroConstructor)
	unsigned char                                      bEnableDensityScaling : 1;                                // 0x0CF0(0x0001)
	unsigned char                                      UnknownData02[0x27];                                      // 0x0CF1(0x0027) MISSED OFFSET
	int                                                OcclusionLayerNumNodes;                                   // 0x0D18(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FBoxSphereBounds                            CacheMeshExtendedBounds;                                  // 0x0D1C(0x001C) (IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0D38(0x0004) MISSED OFFSET
	bool                                               bDisableCollision;                                        // 0x0D3C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x23];                                      // 0x0D3D(0x0023) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HierarchicalInstancedStaticMeshComponent"));

		return ptr;
	}


	bool STATIC_RemoveInstances(TArray<int> InstancesToRemove);
};


// Class Engine.GridInstancedStaticMeshComponent
// 0x0010 (0x0D70 - 0x0D60)
class UGridInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
{
public:
	int                                                MinVertsToSplitNodeForGrid;                               // 0x0D60(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0D64(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GridInstancedStaticMeshComponent"));

		return ptr;
	}

};


// Class Engine.LODParentComponent
// 0x0000 (0x0B50 - 0x0B50)
class ULODParentComponent : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LODParentComponent"));

		return ptr;
	}


	bool STATIC_SetStaticMesh(class UStaticMesh* NewMesh);
	void STATIC_SetForcedLodModel(int NewForcedLodModel);
	void STATIC_OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void STATIC_GetLocalBounds(struct FVector* Min, struct FVector* Max);
};


// Class Engine.ModelComponent
// 0x0040 (0x0A00 - 0x09C0)
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x09C0(0x0010) MISSED OFFSET
	class UBodySetup*                                  ModelBodySetup;                                           // 0x09D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x09D8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ModelComponent"));

		return ptr;
	}

};


// Class Engine.NavLinkComponent
// 0x0010 (0x09D0 - 0x09C0)
class UNavLinkComponent : public UPrimitiveComponent
{
public:
	TArray<struct FNavigationLink>                     Links;                                                    // 0x09C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkComponent"));

		return ptr;
	}

};


// Class Engine.NavLinkRenderingComponent
// 0x0000 (0x09C0 - 0x09C0)
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkRenderingComponent"));

		return ptr;
	}


	void STATIC_WakeRigidBody(const struct FName& BoneName);
	void STATIC_WakeAllRigidBodies();
	void STATIC_SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void STATIC_SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void STATIC_SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void STATIC_SetSimulatePhysics(bool bSimulate);
	void STATIC_SetRenderInMono(bool bValue);
	void STATIC_SetRenderInMainPass(bool bValue);
	void STATIC_SetRenderCustomDepth(bool bValue);
	void STATIC_SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void STATIC_SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetOwnerNoSee(bool bNewOwnerNoSee);
	void STATIC_SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void STATIC_SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void STATIC_SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void STATIC_SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void STATIC_SetMassScale(const struct FName& BoneName, float InMassScale);
	void STATIC_SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void STATIC_SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void STATIC_SetLinearDamping(float InDamping);
	void STATIC_SetEnableGravity(bool bGravityEnabled);
	void STATIC_SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);
	void STATIC_SetCustomDepthStencilValue(int Value);
	void STATIC_SetCullDistance(float NewCullDistance);
	void STATIC_SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void STATIC_SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void STATIC_SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void STATIC_SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void STATIC_SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void STATIC_SetCastShadow(bool NewCastShadow);
	void STATIC_SetBoundsScale(float NewBoundsScale);
	void STATIC_SetAngularDamping(float InDamping);
	void STATIC_SetAllUseCCD(bool InUseCCD);
	void STATIC_SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void STATIC_SetAllPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void STATIC_SetAllMassScale(float InMassScale);
	struct FVector STATIC_ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void STATIC_PutRigidBodyToSleep(const struct FName& BoneName);
	bool STATIC_K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool STATIC_K2_IsQueryCollisionEnabled();
	bool STATIC_K2_IsPhysicsCollisionEnabled();
	bool STATIC_K2_IsCollisionEnabled();
	bool STATIC_IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsGravityEnabled();
	bool STATIC_IsAnyRigidBodyAwake();
	void STATIC_IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void STATIC_IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride STATIC_GetWalkableSlopeOverride();
	struct FVector STATIC_GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsAngularVelocity(const struct FName& BoneName);
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> STATIC_GetOverlapInfos();
	int STATIC_GetNumMaterials();
	class UMaterialInterface* STATIC_GetMaterialFromCollisionFaceIndex(int FaceIndex);
	class UMaterialInterface* STATIC_GetMaterial(int ElementIndex);
	float STATIC_GetMassScale(const struct FName& BoneName);
	float STATIC_GetMass();
	float STATIC_GetLinearDamping();
	struct FVector STATIC_GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<ECollisionResponse> STATIC_GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	struct FName STATIC_GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> STATIC_GetCollisionObjectType();
	TEnumAsByte<ECollisionEnabled> STATIC_GetCollisionEnabled();
	float STATIC_GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector STATIC_GetCenterOfMass(const struct FName& BoneName);
	float STATIC_GetAngularDamping();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> STATIC_CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> STATIC_CopyArrayOfMoveIgnoreActors();
	void STATIC_ClearMoveIgnoreComponents();
	void STATIC_ClearMoveIgnoreActors();
	bool STATIC_CanCharacterStepUp(class APawn* Pawn);
	void STATIC_AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void STATIC_AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void STATIC_AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void STATIC_AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.NavMeshRenderingComponent
// 0x0010 (0x09D0 - 0x09C0)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x09C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavMeshRenderingComponent"));

		return ptr;
	}


	void STATIC_WakeRigidBody(const struct FName& BoneName);
	void STATIC_WakeAllRigidBodies();
	void STATIC_SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void STATIC_SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void STATIC_SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void STATIC_SetSimulatePhysics(bool bSimulate);
	void STATIC_SetRenderInMono(bool bValue);
	void STATIC_SetRenderInMainPass(bool bValue);
	void STATIC_SetRenderCustomDepth(bool bValue);
	void STATIC_SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void STATIC_SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetOwnerNoSee(bool bNewOwnerNoSee);
	void STATIC_SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void STATIC_SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void STATIC_SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void STATIC_SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void STATIC_SetMassScale(const struct FName& BoneName, float InMassScale);
	void STATIC_SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void STATIC_SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void STATIC_SetLinearDamping(float InDamping);
	void STATIC_SetEnableGravity(bool bGravityEnabled);
	void STATIC_SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);
	void STATIC_SetCustomDepthStencilValue(int Value);
	void STATIC_SetCullDistance(float NewCullDistance);
	void STATIC_SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void STATIC_SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void STATIC_SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void STATIC_SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void STATIC_SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void STATIC_SetCastShadow(bool NewCastShadow);
	void STATIC_SetBoundsScale(float NewBoundsScale);
	void STATIC_SetAngularDamping(float InDamping);
	void STATIC_SetAllUseCCD(bool InUseCCD);
	void STATIC_SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void STATIC_SetAllPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void STATIC_SetAllMassScale(float InMassScale);
	struct FVector STATIC_ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void STATIC_PutRigidBodyToSleep(const struct FName& BoneName);
	bool STATIC_K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool STATIC_K2_IsQueryCollisionEnabled();
	bool STATIC_K2_IsPhysicsCollisionEnabled();
	bool STATIC_K2_IsCollisionEnabled();
	bool STATIC_IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsGravityEnabled();
	bool STATIC_IsAnyRigidBodyAwake();
	void STATIC_IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void STATIC_IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride STATIC_GetWalkableSlopeOverride();
	struct FVector STATIC_GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsAngularVelocity(const struct FName& BoneName);
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> STATIC_GetOverlapInfos();
	int STATIC_GetNumMaterials();
	class UMaterialInterface* STATIC_GetMaterialFromCollisionFaceIndex(int FaceIndex);
	class UMaterialInterface* STATIC_GetMaterial(int ElementIndex);
	float STATIC_GetMassScale(const struct FName& BoneName);
	float STATIC_GetMass();
	float STATIC_GetLinearDamping();
	struct FVector STATIC_GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<ECollisionResponse> STATIC_GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	struct FName STATIC_GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> STATIC_GetCollisionObjectType();
	TEnumAsByte<ECollisionEnabled> STATIC_GetCollisionEnabled();
	float STATIC_GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector STATIC_GetCenterOfMass(const struct FName& BoneName);
	float STATIC_GetAngularDamping();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> STATIC_CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> STATIC_CopyArrayOfMoveIgnoreActors();
	void STATIC_ClearMoveIgnoreComponents();
	void STATIC_ClearMoveIgnoreActors();
	bool STATIC_CanCharacterStepUp(class APawn* Pawn);
	void STATIC_AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void STATIC_AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void STATIC_AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void STATIC_AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.NavTestRenderingComponent
// 0x0000 (0x09C0 - 0x09C0)
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavTestRenderingComponent"));

		return ptr;
	}


	void STATIC_WakeRigidBody(const struct FName& BoneName);
	void STATIC_WakeAllRigidBodies();
	void STATIC_SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void STATIC_SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void STATIC_SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void STATIC_SetSimulatePhysics(bool bSimulate);
	void STATIC_SetRenderInMono(bool bValue);
	void STATIC_SetRenderInMainPass(bool bValue);
	void STATIC_SetRenderCustomDepth(bool bValue);
	void STATIC_SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void STATIC_SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void STATIC_SetOwnerNoSee(bool bNewOwnerNoSee);
	void STATIC_SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void STATIC_SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void STATIC_SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);
	void STATIC_SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void STATIC_SetMassScale(const struct FName& BoneName, float InMassScale);
	void STATIC_SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void STATIC_SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void STATIC_SetLinearDamping(float InDamping);
	void STATIC_SetEnableGravity(bool bGravityEnabled);
	void STATIC_SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);
	void STATIC_SetCustomDepthStencilValue(int Value);
	void STATIC_SetCullDistance(float NewCullDistance);
	void STATIC_SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void STATIC_SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void STATIC_SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void STATIC_SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void STATIC_SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void STATIC_SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void STATIC_SetCastShadow(bool NewCastShadow);
	void STATIC_SetBoundsScale(float NewBoundsScale);
	void STATIC_SetAngularDamping(float InDamping);
	void STATIC_SetAllUseCCD(bool InUseCCD);
	void STATIC_SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void STATIC_SetAllPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void STATIC_SetAllMassScale(float InMassScale);
	struct FVector STATIC_ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void STATIC_PutRigidBodyToSleep(const struct FName& BoneName);
	bool STATIC_K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);
	bool STATIC_K2_IsQueryCollisionEnabled();
	bool STATIC_K2_IsPhysicsCollisionEnabled();
	bool STATIC_K2_IsCollisionEnabled();
	bool STATIC_IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsGravityEnabled();
	bool STATIC_IsAnyRigidBodyAwake();
	void STATIC_IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void STATIC_IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride STATIC_GetWalkableSlopeOverride();
	struct FVector STATIC_GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector STATIC_GetPhysicsAngularVelocity(const struct FName& BoneName);
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> STATIC_GetOverlapInfos();
	int STATIC_GetNumMaterials();
	class UMaterialInterface* STATIC_GetMaterialFromCollisionFaceIndex(int FaceIndex);
	class UMaterialInterface* STATIC_GetMaterial(int ElementIndex);
	float STATIC_GetMassScale(const struct FName& BoneName);
	float STATIC_GetMass();
	float STATIC_GetLinearDamping();
	struct FVector STATIC_GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<ECollisionResponse> STATIC_GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	struct FName STATIC_GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> STATIC_GetCollisionObjectType();
	TEnumAsByte<ECollisionEnabled> STATIC_GetCollisionEnabled();
	float STATIC_GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector STATIC_GetCenterOfMass(const struct FName& BoneName);
	float STATIC_GetAngularDamping();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* STATIC_CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UPrimitiveComponent*> STATIC_CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> STATIC_CopyArrayOfMoveIgnoreActors();
	void STATIC_ClearMoveIgnoreComponents();
	void STATIC_ClearMoveIgnoreActors();
	bool STATIC_CanCharacterStepUp(class APawn* Pawn);
	void STATIC_AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void STATIC_AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void STATIC_AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void STATIC_AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void STATIC_AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void STATIC_AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.MeshClippingUnderwaterComponent
// 0x0010 (0x0A00 - 0x09F0)
class UMeshClippingUnderwaterComponent : public UBoxComponent
{
public:
	float                                              ExtendDownwards;                                          // 0x09F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x09F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MeshClippingUnderwaterComponent"));

		return ptr;
	}


	struct FOrientedBox STATIC_GetOrientedBoxBounds(const struct FTransform& LocalToWorld);
};


// Class Engine.CapsuleComponent
// 0x0010 (0x09F0 - 0x09E0)
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                              CapsuleHeight;                                            // 0x09E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x09E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CapsuleComponent"));

		return ptr;
	}


	void STATIC_SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void STATIC_SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void STATIC_SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void STATIC_GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void STATIC_GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float STATIC_GetUnscaledCapsuleRadius();
	float STATIC_GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float STATIC_GetUnscaledCapsuleHalfHeight();
	float STATIC_GetShapeScale();
	void STATIC_GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void STATIC_GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float STATIC_GetScaledCapsuleRadius();
	float STATIC_GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float STATIC_GetScaledCapsuleHalfHeight();
};


// Class Engine.SphereComponent
// 0x0000 (0x09E0 - 0x09E0)
class USphereComponent : public UShapeComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SphereComponent"));

		return ptr;
	}


	void STATIC_SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float STATIC_GetUnscaledSphereRadius();
	float STATIC_GetShapeScale();
	float STATIC_GetScaledSphereRadius();
};


// Class Engine.DrawSphereComponent
// 0x0000 (0x09E0 - 0x09E0)
class UDrawSphereComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DrawSphereComponent"));

		return ptr;
	}


	void STATIC_SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float STATIC_GetUnscaledSphereRadius();
	float STATIC_GetShapeScale();
	float STATIC_GetScaledSphereRadius();
};


// Class Engine.SplineComponent
// 0x00E0 (0x0AA0 - 0x09C0)
class USplineComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x09C0(0x0058) MISSED OFFSET
	struct FInterpCurveVector                          SplineInfo;                                               // 0x0A18(0x0018) (Deprecated)
	struct FInterpCurveQuat                            SplineRotInfo;                                            // 0x0A30(0x0018) (Deprecated)
	struct FInterpCurveVector                          SplineScaleInfo;                                          // 0x0A48(0x0018) (Deprecated)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x0A60(0x0018) (Deprecated)
	bool                                               bAllowSplineEditingPerInstance;                           // 0x0A78(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0A79(0x0003) MISSED OFFSET
	int                                                ReparamStepsPerSegment;                                   // 0x0A7C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0A80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStationaryEndpoints;                                     // 0x0A84(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSplineHasBeenEdited;                                     // 0x0A85(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bModifiedByConstructionScript;                            // 0x0A86(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInputSplinePointsToConstructionScript;                   // 0x0A87(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawDebug;                                               // 0x0A88(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bClosedLoop;                                              // 0x0A89(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLoopPositionOverride;                                    // 0x0A8A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0A8B(0x0001) MISSED OFFSET
	float                                              LoopPosition;                                             // 0x0A8C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultUpVector;                                          // 0x0A90(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0A9C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SplineComponent"));

		return ptr;
	}


	void STATIC_UpdateSpline();
	void STATIC_SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void STATIC_SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void STATIC_SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_SetSplineWorldPoints(TArray<struct FVector> Points);
	void STATIC_SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);
	void STATIC_SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_SetSplineLocalPoints(TArray<struct FVector> Points);
	void STATIC_SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void STATIC_SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_SetDrawDebug(bool bShow);
	void STATIC_SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void STATIC_SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void STATIC_SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void STATIC_RemoveSplinePoint(int Index, bool bUpdateSpline);
	bool STATIC_IsClosedLoop();
	struct FVector STATIC_GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator STATIC_GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator STATIC_GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector STATIC_GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector STATIC_GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector STATIC_GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector STATIC_GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector STATIC_GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector STATIC_GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector STATIC_GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform STATIC_GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform STATIC_GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform STATIC_GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector STATIC_GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector STATIC_GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<ESplinePointType> STATIC_GetSplinePointType(int PointIndex);
	float STATIC_GetSplineLength();
	struct FVector STATIC_GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector STATIC_GetScaleAtSplinePoint(int PointIndex);
	struct FVector STATIC_GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator STATIC_GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator STATIC_GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator STATIC_GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float STATIC_GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float STATIC_GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float STATIC_GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector STATIC_GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	int STATIC_GetNumberOfSplinePoints();
	struct FVector STATIC_GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector STATIC_GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void STATIC_GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent);
	void STATIC_GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	float STATIC_GetLengthInRange(int StartIndex, int EndIndex);
	struct FVector STATIC_GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float STATIC_GetInputKeyAtDistanceAlongSpline(float Distance);
	float STATIC_GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct FVector STATIC_GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector STATIC_GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform STATIC_FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector STATIC_FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_FindScaleClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FRotator STATIC_FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float STATIC_FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector STATIC_FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float STATIC_FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FVector STATIC_FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void STATIC_ClearSplinePoints(bool bUpdateSpline);
	void STATIC_AddSplineWorldPoint(const struct FVector& Position);
	void STATIC_AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void STATIC_AddSplineLocalPoint(const struct FVector& Position);
	void STATIC_AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline);
	void STATIC_AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline);
};


// Class Engine.TextRenderComponent
// 0x0050 (0x0A10 - 0x09C0)
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x09C0(0x0010) MISSED OFFSET
	class UMaterialInterface*                          TextMaterial;                                             // 0x09D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UFont*                                       Font;                                                     // 0x09D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                      // 0x09E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                        // 0x09E1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x09E2(0x0002) MISSED OFFSET
	struct FColor                                      TextRenderColor;                                          // 0x09E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              XScale;                                                   // 0x09E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YScale;                                                   // 0x09EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldSize;                                                // 0x09F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InvDefaultSize;                                           // 0x09F4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HorizSpacingAdjust;                                       // 0x09F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VertSpacingAdjust;                                        // 0x09FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText : 1;                                  // 0x0A00(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0A01(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextRenderComponent"));

		return ptr;
	}


	void STATIC_SetYScale(float Value);
	void STATIC_SetXScale(float Value);
	void STATIC_SetWorldSize(float Value);
	void STATIC_SetVertSpacingAdjust(float Value);
	void STATIC_SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);
	void STATIC_SetTextRenderColor(const struct FColor& Value);
	void STATIC_SetTextMaterial(class UMaterialInterface* Material);
	void STATIC_SetText(const struct FString& Value);
	void STATIC_SetHorizSpacingAdjust(float Value);
	void STATIC_SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);
	void STATIC_SetFont(class UFont* Value);
	void STATIC_K2_SetText(const struct FText& Value);
	struct FVector STATIC_GetTextWorldSize();
	struct FVector STATIC_GetTextLocalSize();
};


// Class Engine.VectorFieldComponent
// 0x0020 (0x09E0 - 0x09C0)
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	float                                              Intensity;                                                // 0x09C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x09C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPreviewVectorField : 1;                                  // 0x09C8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x17];                                      // 0x09C9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldComponent"));

		return ptr;
	}


	void STATIC_SetIntensity(float NewIntensity);
};


// Class Engine.RadialForceComponent
// 0x0030 (0x04E0 - 0x04B0)
class URadialForceComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                  // 0x04B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B5(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bImpulseVelChange : 1;                                    // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreOwningActor : 1;                                   // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET
	float                                              ForceStrength;                                            // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamage;                                       // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                      // 0x04C8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RadialForceComponent"));

		return ptr;
	}


	void STATIC_RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);
	void STATIC_FireImpulse();
	void STATIC_AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);
};


// Class Engine.ReflectionCaptureComponent
// 0x00A0 (0x0550 - 0x04B0)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                   // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	EReflectionSourceType                              ReflectionSourceType;                                     // 0x04B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04B9(0x0007) MISSED OFFSET
	class UTextureCube*                                Cubemap;                                                  // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x04C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x04CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CaptureOffset;                                            // 0x04D0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bOverrideCullDistance;                                    // 0x04DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	float                                              CullDistance;                                             // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSharedComponent;                                         // 0x04E4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x23];                                      // 0x04E5(0x0023) MISSED OFFSET
	struct FGuid                                       StateId;                                                  // 0x0508(0x0010) (IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x0518(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ReflectionCaptureComponent"));

		return ptr;
	}

};


// Class Engine.BoxReflectionCaptureComponent
// 0x0010 (0x0560 - 0x0550)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UBoxComponent*                               PreviewInfluenceBox;                                      // 0x0550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0558(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCaptureComponent"));

		return ptr;
	}

};


// Class Engine.BoxReflectionCaptureSAComponent
// 0x0000 (0x0560 - 0x0560)
class UBoxReflectionCaptureSAComponent : public UBoxReflectionCaptureComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCaptureSAComponent"));

		return ptr;
	}

};


// Class Engine.PlaneReflectionCaptureComponent
// 0x0010 (0x0560 - 0x0550)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0558(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlaneReflectionCaptureComponent"));

		return ptr;
	}

};


// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0560 - 0x0550)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0558(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SphereReflectionCaptureComponent"));

		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0010 (0x0040 - 0x0030)
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ScriptViewportClient"));

		return ptr;
	}

};


// Class Engine.Engine
// 0x0EC0 (0x0EF0 - 0x0030)
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UFont*                                       TinyFont;                                                 // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       TinyFontName;                                             // 0x0040(0x0010) (Edit, Config, GlobalConfig)
	class UFont*                                       SmallFont;                                                // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       SmallFontName;                                            // 0x0058(0x0010) (Edit, Config, GlobalConfig)
	class UFont*                                       MediumFont;                                               // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       MediumFontName;                                           // 0x0070(0x0010) (Edit, Config, GlobalConfig)
	class UFont*                                       LargeFont;                                                // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       LargeFontName;                                            // 0x0088(0x0010) (Edit, Config, GlobalConfig)
	class UFont*                                       SubtitleFont;                                             // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       SubtitleFontName;                                         // 0x00A0(0x0010) (Edit, Config, GlobalConfig)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x00B0(0x0010) (ZeroConstructor)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       MiniFontTextureName;                                      // 0x00C8(0x0010) (Config, GlobalConfig)
	struct FColor                                      C_SemiSolidWire;                                          // 0x00D8(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	class UTexture2D*                                  DefaultTexture;                                           // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       ConsoleClassName;                                         // 0x00E8(0x0010) (Edit, Config, GlobalConfig, NoClear)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                   // 0x00F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                    // 0x0108(0x001C) (Config)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	class UClass*                                      LevelScriptActorClass;                                    // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   WireframeMaterial;                                        // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                       // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FLinearColor>                        LightComplexityColors;                                    // 0x0140(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                          // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                 // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowMatureLanguage : 1;                                 // 0x0160(0x0001) (Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              CameraRotationThreshold;                                  // 0x0164(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FLinearColor>                        QuadComplexityColors;                                     // 0x0168(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FStringClassReference                       AvoidanceManagerClassName;                                // 0x0178(0x0010) (Config, GlobalConfig, NoClear)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                          // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSubtitlesForcedOff : 1;                                  // 0x0190(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                             // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                      // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      ConsoleClass;                                             // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultBloomKernelTexture;                                // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultBokehTexture;                                      // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_VolumeCollision;                                        // 0x01C0(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              IdealLightMapDensity;                                     // 0x01D0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x01D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                  // 0x01E8(0x0010) (ZeroConstructor, Config)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                     // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                  // 0x0200(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_WorldBox;                                               // 0x0208(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x020C(0x0004) MISSED OFFSET
	struct FStringAssetReference                       DebugMeshMaterialName;                                    // 0x0210(0x0010) (Config, GlobalConfig)
	class UClass*                                      AvoidanceManagerClass;                                    // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                 // 0x0228(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;             // 0x0238(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	class UGameUserSettings*                           GameUserSettings;                                         // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              CameraTranslationThreshold;                               // 0x0258(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x025C(0x0004) MISSED OFFSET
	struct FStringClassReference                       LocalPlayerClassName;                                     // 0x0260(0x0010) (Edit, Config, GlobalConfig, NoClear)
	struct FColor                                      C_Volume;                                                 // 0x0270(0x0004) (IsPlainOldData)
	float                                              MaxLightMapDensity;                                       // 0x0274(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  LightMapDensityTexture;                                   // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                  // 0x0288(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x0298(0x0010) (ZeroConstructor, Transient)
	int                                                TickCycles;                                               // 0x02A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x02AC(0x0004) MISSED OFFSET
	struct FStringAssetReference                       DefaultBokehTextureName;                                  // 0x02B0(0x0010) (Config, GlobalConfig)
	struct FStringClassReference                       GameViewportClientClassName;                              // 0x02C0(0x0010) (Edit, Config, GlobalConfig, NoClear)
	class UTexture*                                    WeightMapPlaceholderTexture;                              // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x02D8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	struct FStringClassReference                       GameSingletonClassName;                                   // 0x02E8(0x0010) (Edit, Config, GlobalConfig, NoClear)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                      // 0x02F8(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData11[0x7];                                       // 0x02F9(0x0007) MISSED OFFSET
	struct FString                                     TransitionDescription;                                    // 0x0300(0x0010) (ZeroConstructor)
	float                                              DisplayGamma;                                             // 0x0310(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                                  // 0x0318(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x0328(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	struct FStringClassReference                       LevelScriptActorClassName;                                // 0x0330(0x0010) (Edit, Config, GlobalConfig, NoClear)
	struct FStringAssetReference                       PreviewShadowsIndicatorMaterialName;                      // 0x0340(0x0010) (Edit, Config, GlobalConfig)
	struct FStringAssetReference                       DefaultPhysMaterialName;                                  // 0x0350(0x0010) (Config, GlobalConfig)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x0360(0x0010) (Config, GlobalConfig, IsPlainOldData)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                             // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameViewportClientClass;                                  // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       GameUserSettingsClassName;                                // 0x0380(0x0010) (Config, GlobalConfig, NoClear)
	unsigned char                                      bHardwareSurveyEnabled : 1;                               // 0x0390(0x0001) (Deprecated)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                          // 0x0390(0x0001) (Edit, Config)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;           // 0x0390(0x0001) (Edit, Config)
	unsigned char                                      bAllowMultiThreadedAnimationUpdate : 1;                   // 0x0390(0x0001) (Edit, Config)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                         // 0x0390(0x0001) (Config)
	unsigned char                                      UnknownData14 : 1;                                        // 0x0390(0x0001)
	unsigned char                                      bSmoothFrameRate : 1;                                     // 0x0390(0x0001) (Edit, Config)
	unsigned char                                      bUseFixedFrameRate : 1;                                   // 0x0390(0x0001) (Edit, Config)
	unsigned char                                      UnknownData15[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	struct FStringAssetReference                       DefaultTextureName;                                       // 0x0398(0x0010) (Config, GlobalConfig)
	struct FStringClassReference                       DefaultBlueprintBaseClassName;                            // 0x03A8(0x0010) (Edit, Config, GlobalConfig, NoClear)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                         // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_AddWire;                                                // 0x03C0(0x0004) (IsPlainOldData)
	struct FColor                                      C_OrthoBackground;                                        // 0x03C4(0x0004) (IsPlainOldData)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                    // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushWire;                                              // 0x03D0(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	class UMaterial*                                   LightingTexelDensityMaterial;                             // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                    // 0x03E0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                  // 0x03F0(0x0001) (Config)
	unsigned char                                      UnknownData17[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	int                                                MaxParticleResize;                                        // 0x03F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	struct FStringClassReference                       AIControllerClassName;                                    // 0x03F8(0x0010) (Config, GlobalConfig, NoClear)
	struct FStringClassReference                       NavigationSystemClassName;                                // 0x0408(0x0010) (Config, GlobalConfig, NoClear)
	TEnumAsByte<ETransitionType>                       TransitionType;                                           // 0x0418(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x7];                                       // 0x0419(0x0007) MISSED OFFSET
	struct FString                                     WireframeMaterialName;                                    // 0x0420(0x0010) (ZeroConstructor, Config, GlobalConfig)
	int                                                GameCycles;                                               // 0x0430(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	struct FString                                     LightingTexelDensityName;                                 // 0x0438(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FStringAssetReference                       WeightMapPlaceholderTextureName;                          // 0x0448(0x0010) (Config, GlobalConfig)
	struct FColor                                      C_BSPCollision;                                           // 0x0458(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	class UAssetManager*                               AssetManager;                                             // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture*                                    DefaultDiffuseTexture;                                    // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     GameSingleton;                                            // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                MaxParticleResizeWarn;                                    // 0x0478(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x54];                                      // 0x047C(0x0054) MISSED OFFSET
	class UClass*                                      WorldSettingsClass;                                       // 0x04D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UGameViewportClient*                         GameViewport;                                             // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                          // 0x04E0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              NearClipPlane;                                            // 0x04E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FStringAssetReference                       PreIntegratedSkinBRDFTextureName;                         // 0x04E8(0x0010) (Config, GlobalConfig)
	struct FStringAssetReference                       InvalidLightmapSettingsMaterialName;                      // 0x04F8(0x0010) (Config, GlobalConfig)
	struct FString                                     VertexColorMaterialName;                                  // 0x0508(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FStringAssetReference                       DefaultBloomKernelTextureName;                            // 0x0518(0x0010) (Config, GlobalConfig)
	TArray<struct FString>                             DeferredCommands;                                         // 0x0528(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData22[0x18];                                      // 0x0538(0x0018) MISSED OFFSET
	int                                                ClientCycles;                                             // 0x0550(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	struct FStringAssetReference                       LightMapDensityTextureName;                               // 0x0558(0x0010) (Config, GlobalConfig)
	struct FColor                                      C_WireBackground;                                         // 0x0568(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData24[0xC];                                       // 0x056C(0x000C) MISSED OFFSET
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_NonSolidWire;                                           // 0x0580(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData25[0x4];                                       // 0x0584(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                             // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              FixedFrameRate;                                           // 0x0590(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                // 0x0594(0x0001) (Config)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0595(0x0003) MISSED OFFSET
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x0598(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                   // 0x059C(0x0001) (Config, GlobalConfig, Deprecated)
	unsigned char                                      UnknownData27[0x3];                                       // 0x059D(0x0003) MISSED OFFSET
	struct FColor                                      C_BrushShape;                                             // 0x05A0(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x05A4(0x0004) MISSED OFFSET
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                // 0x05A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FStringAssetReference                       ArrowMaterialName;                                        // 0x05B8(0x0010) (Config, GlobalConfig)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                 // 0x05C8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              MinDesiredFrameRate;                                      // 0x05D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FFloatRange                                 SmoothedFrameRateRange;                                   // 0x05D4(0x0010) (Edit, Config)
	unsigned char                                      UnknownData29[0x4];                                       // 0x05E4(0x0004) MISSED OFFSET
	struct FString                                     ShadedLevelColorationLitMaterialName;                     // 0x05E8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                            // 0x05F8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              MeshLODRange;                                             // 0x0600(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData30[0x4];                                       // 0x0604(0x0004) MISSED OFFSET
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                    // 0x0608(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       HighFrequencyNoiseTextureName;                            // 0x0610(0x0010) (Config, GlobalConfig)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x0620(0x0010) (Config, GlobalConfig, IsPlainOldData)
	class UTexture2D*                                  MiniFontTexture;                                          // 0x0630(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceFactor;                                  // 0x0638(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x063C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	class UClass*                                      GameUserSettingsClass;                                    // 0x0640(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x0648(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;                 // 0x064C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	class UClass*                                      LocalPlayerClass;                                         // 0x0650(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x0658(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                                      // 0x0668(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                         // 0x0678(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       WorldSettingsClassName;                                   // 0x0680(0x0010) (Edit, Config, GlobalConfig, NoClear)
	float                                              MinLightMapDensity;                                       // 0x0690(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData31[0x4];                                       // 0x0694(0x0004) MISSED OFFSET
	TArray<struct FLinearColor>                        HLODColorationColors;                                     // 0x0698(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FStringAssetReference                       DefaultDiffuseTextureName;                                // 0x06A8(0x0010) (Config, GlobalConfig)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                     // 0x06B8(0x0010) (ZeroConstructor, Config)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x06C8(0x0010) (Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x06D8(0x0010) (Transient, IsPlainOldData)
	struct FLinearColor                                SelectionOutlineColor;                                    // 0x06E8(0x0010) (Transient, IsPlainOldData)
	struct FLinearColor                                SubduedSelectionOutlineColor;                             // 0x06F8(0x0010) (Transient, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColorOverride;                            // 0x0708(0x0010) (Transient, IsPlainOldData)
	bool                                               bIsOverridingSelectedColor;                               // 0x0718(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0719(0x0003) MISSED OFFSET
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                         // 0x071C(0x0001) (Config, GlobalConfig)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x071C(0x0001) (Transient)
	unsigned char                                      bSuppressMapWarnings : 1;                                 // 0x071C(0x0001) (Config, GlobalConfig)
	unsigned char                                      bDisableAILogging : 1;                                    // 0x071C(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData33[0x3];                                       // 0x071D(0x0003) MISSED OFFSET
	uint32_t                                           bEnableVisualLogRecordingOnStart;                         // 0x0720(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData34[0x4];                                       // 0x0724(0x0004) MISSED OFFSET
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x0728(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels : 1;                                  // 0x072C(0x0001) (Transient)
	unsigned char                                      UnknownData35[0x3];                                       // 0x072D(0x0003) MISSED OFFSET
	struct FString                                     ParticleEventManagerClassPath;                            // 0x0730(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData36[0x10];                                      // 0x0740(0x0010) MISSED OFFSET
	float                                              SelectionHighlightIntensity;                              // 0x0750(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SelectionMeshSectionHighlightIntensity;                   // 0x0754(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                           // 0x0758(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              HoverHighlightIntensity;                                  // 0x075C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;                    // 0x0760(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PrimitiveBaseIntensity;                                   // 0x0764(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PrimitiveSelectedIntensity;                               // 0x0768(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PrimitiveHoverIntensity;                                  // 0x076C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData37[0x290];                                     // 0x0770(0x0290) MISSED OFFSET
	class UClass*                                      NavigationSystemClass;                                    // 0x0A00(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                // 0x0A08(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FString                                     PlayOnConsoleSaveDir;                                     // 0x0A18(0x0010) (ZeroConstructor, Config)
	class UMaterial*                                   VertexColorMaterial;                                      // 0x0A28(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   ConstraintLimitMaterial;                                  // 0x0A30(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SubtractWire;                                           // 0x0A38(0x0004) (IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                               // 0x0A3C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSubtitlesEnabled : 1;                                    // 0x0A40(0x0001) (Edit, Config)
	unsigned char                                      UnknownData38[0x7];                                       // 0x0A41(0x0007) MISSED OFFSET
	struct FString                                     LevelColorationLitMaterialName;                           // 0x0A48(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData39[0x1D8];                                     // 0x0A58(0x01D8) MISSED OFFSET
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                     // 0x0C30(0x0010) (ZeroConstructor, Transient, Config)
	TArray<struct FString>                             ServerActors;                                             // 0x0C40(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             RuntimeServerActors;                                      // 0x0C50(0x0010) (ZeroConstructor)
	unsigned char                                      bStartedLoadMapMovie : 1;                                 // 0x0C60(0x0001) (Transient)
	unsigned char                                      UnknownData40[0x7];                                       // 0x0C61(0x0007) MISSED OFFSET
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                 // 0x0C68(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                             // 0x0C70(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                             // 0x0C80(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     TransitionGameMode;                                       // 0x0C88(0x0010) (ZeroConstructor)
	struct FStringAssetReference                       RemoveSurfaceMaterialName;                                // 0x0C98(0x0010) (Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                 // 0x0CA8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x0CB0(0x0010) (Config, GlobalConfig, IsPlainOldData)
	struct FStringAssetReference                       DefaultBSPVertexTextureName;                              // 0x0CC0(0x0010) (Config, GlobalConfig)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                        // 0x0CD0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x0CE0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData41[0x4];                                       // 0x0CE4(0x0004) MISSED OFFSET
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                    // 0x0CE8(0x0010) (ZeroConstructor, Config)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x0CF8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       AssetManagerClassName;                                    // 0x0D00(0x0010) (Edit, Config, GlobalConfig, NoClear)
	float                                              NetClientTicksPerSecond;                                  // 0x0D10(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData42[0x4];                                       // 0x0D14(0x0004) MISSED OFFSET
	struct FStringClassReference                       PhysicsCollisionHandlerClassName;                         // 0x0D18(0x0010) (Edit, Config, GlobalConfig, NoClear)
	int                                                MaximumLoopIterationCount;                                // 0x0D28(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData43[0x4];                                       // 0x0D2C(0x0004) MISSED OFFSET
	class UMaterial*                                   DebugMeshMaterial;                                        // 0x0D30(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                // 0x0D38(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData44[0x18];                                      // 0x0D40(0x0018) MISSED OFFSET
	int                                                NextWorldContextHandle;                                   // 0x0D58(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData45[0x194];                                     // 0x0D5C(0x0194) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Engine"));

		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x0640 (0x0680 - 0x0040)
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x290];                                     // 0x0040(0x0290) MISSED OFFSET
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                          // 0x02D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x02E0(0x00B0) MISSED OFFSET
	unsigned char                                      UnknownData02[0x8];                                       // 0x02E0(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.GameViewportClient.GameInstance
	unsigned char                                      UnknownData03[0x158];                                     // 0x0398(0x0158) MISSED OFFSET
	class UConsole*                                    ViewportConsole;                                          // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x188];                                     // 0x04F8(0x0188) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameViewportClient"));

		return ptr;
	}


	void STATIC_SSSwapControllers();
	void STATIC_ShowTitleSafeArea();
	void STATIC_SetConsoleTarget(int PlayerIndex);
};


// Class Engine.SceneCaptureComponent
// 0x0080 (0x0530 - 0x04B0)
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                         // 0x04B0(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AActor*>                              HiddenActors;                                             // 0x04C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  ShowOnlyComponents;                                       // 0x04D0(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AActor*>                              ShowOnlyActors;                                           // 0x04E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bIsLobbyCapture;                                          // 0x04F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureEveryFrame;                                       // 0x04F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureOnMovement;                                       // 0x04F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x04F3(0x0001) MISSED OFFSET
	float                                              LODDistanceFactor;                                        // 0x04F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxViewDistanceOverride;                                  // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CaptureSortPriority;                                      // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                         // 0x0500(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0510(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponent"));

		return ptr;
	}


	void STATIC_ShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void STATIC_ShowOnlyActorComponents(class AActor* InActor);
	void STATIC_SetCaptureSortPriority(int NewCaptureSortPriority);
	void STATIC_RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void STATIC_RemoveShowOnlyActorComponents(class AActor* InActor);
	void STATIC_HideComponent(class UPrimitiveComponent* InComponent);
	void STATIC_HideActorComponents(class AActor* InActor);
	void STATIC_ClearShowOnlyComponents(class UPrimitiveComponent* InComponent);
};


// Class Engine.PlanarReflectionComponent
// 0x00E0 (0x0610 - 0x0530)
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                               // 0x0530(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              NormalDistortionStrength;                                 // 0x0538(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughness;                                       // 0x053C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughnessDistance;                               // 0x0540(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ScreenPercentage;                                         // 0x0544(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExtraFOV;                                                 // 0x0548(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeStart;                               // 0x054C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeEnd;                                 // 0x0550(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutStart;                            // 0x0554(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutEnd;                              // 0x0558(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeStart;                                  // 0x055C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeEnd;                                    // 0x0560(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRenderSceneTwoSided;                                     // 0x0564(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xAB];                                      // 0x0565(0x00AB) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlanarReflectionComponent"));

		return ptr;
	}

};


// Class Engine.SceneCaptureComponent2D
// 0x0610 (0x0B40 - 0x0530)
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	TEnumAsByte<ECameraProjectionMode>                 ProjectionType;                                           // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0531(0x0003) MISSED OFFSET
	float                                              FOVAngle;                                                 // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNearClippingValue;                                    // 0x0538(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0539(0x0003) MISSED OFFSET
	float                                              NearClippingValue;                                        // 0x053C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0544(0x0004) MISSED OFFSET
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0548(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                            // 0x0550(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode;                                            // 0x0551(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE];                                       // 0x0552(0x000E) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0560(0x0570) (Edit, BlueprintVisible)
	float                                              PostProcessBlendWeight;                                   // 0x0AD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomProjectionMatrix;                               // 0x0AD4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xB];                                       // 0x0AD5(0x000B) MISSED OFFSET
	struct FMatrix                                     CustomProjectionMatrix;                                   // 0x0AE0(0x0040) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      bIgnoreTemporalJitter : 1;                                // 0x0B20(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0B21(0x0003) MISSED OFFSET
	bool                                               bEnableClipPlane;                                         // 0x0B24(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0B25(0x0003) MISSED OFFSET
	struct FVector                                     ClipPlaneBase;                                            // 0x0B28(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     ClipPlaneNormal;                                          // 0x0B34(0x000C) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponent2D"));

		return ptr;
	}


	void STATIC_CaptureScene();
	void STATIC_AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.SceneCaptureComponentCube
// 0x0010 (0x0540 - 0x0530)
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                            // 0x0530(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0538(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponentCube"));

		return ptr;
	}


	void STATIC_CaptureScene();
};


// Class Engine.SpringArmComponent
// 0x0090 (0x0540 - 0x04B0)
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                          // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SocketOffset;                                             // 0x04B4(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     TargetOffset;                                             // 0x04C0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              ProbeSize;                                                // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                             // 0x04D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04D1(0x0003) MISSED OFFSET
	unsigned char                                      bDoCollisionTest : 1;                                     // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritPitch : 1;                                        // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritYaw : 1;                                          // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritRoll : 1;                                         // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockPitchLag : 1;                                        // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockYawLag : 1;                                          // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockRollLag : 1;                                         // 0x04D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraLag : 1;                                     // 0x04D5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraRotationLag : 1;                             // 0x04D5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseCameraLagSubstepping : 1;                             // 0x04D5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                 // 0x04D5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04D6(0x0002) MISSED OFFSET
	float                                              CameraLagSpeed;                                           // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                                     // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxDistance;                                     // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x58];                                      // 0x04E8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SpringArmComponent"));

		return ptr;
	}

};


// Class Engine.StereoLayerComponent
// 0x00A0 (0x0550 - 0x04B0)
class UStereoLayerComponent : public USceneComponent
{
public:
	unsigned char                                      bLiveTexture : 1;                                         // 0x04B0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSupportsDepth : 1;                                       // 0x04B0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoAlphaChannel : 1;                                      // 0x04B0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x04B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    LeftTexture;                                              // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bQuadPreserveTextureRatio : 1;                            // 0x04C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04C9(0x0003) MISSED OFFSET
	struct FVector2D                                   QuadSize;                                                 // 0x04CC(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, IsPlainOldData)
	struct FBox2D                                      UVRect;                                                   // 0x04D4(0x0014) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly)
	float                                              CylinderRadius;                                           // 0x04E8(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CylinderOverlayArc;                                       // 0x04EC(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CylinderHeight;                                           // 0x04F0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStereoLayerType>                      StereoLayerType;                                          // 0x04F4(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStereoLayerShape>                     StereoLayerShape;                                         // 0x04F5(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x04F6(0x0002) MISSED OFFSET
	int                                                Priority;                                                 // 0x04F8(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x54];                                      // 0x04FC(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerComponent"));

		return ptr;
	}


	void STATIC_SetUVRect(const struct FBox2D& InUVRect);
	void STATIC_SetTexture(class UTexture* InTexture);
	void STATIC_SetQuadSize(const struct FVector2D& InQuadSize);
	void STATIC_SetPriority(int InPriority);
	void STATIC_MarkTextureForUpdate();
	struct FBox2D STATIC_GetUVRect();
	class UTexture* STATIC_GetTexture();
	struct FVector2D STATIC_GetQuadSize();
	int STATIC_GetPriority();
};


// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x04D0 - 0x04B0)
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                                 // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGustAmount;                                            // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxGustAmount;                                            // 0x04BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPointWind : 1;                                           // 0x04C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xB];                                       // 0x04C5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.WindDirectionalSourceComponent"));

		return ptr;
	}


	void STATIC_SetWindType(EWindSourceType InNewType);
	void STATIC_SetStrength(float InNewStrength);
	void STATIC_SetSpeed(float InNewSpeed);
	void STATIC_SetRadius(float InNewRadius);
	void STATIC_SetMinimumGustAmount(float InNewMinGust);
	void STATIC_SetMaximumGustAmount(float InNewMaxGust);
};


// Class Engine.TimelineComponent
// 0x00F0 (0x02F0 - 0x0200)
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                              // 0x0200(0x00E0) (Net)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x02E0(0x0001)
	unsigned char                                      UnknownData00[0xF];                                       // 0x02E1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TimelineComponent"));

		return ptr;
	}


	void STATIC_Stop();
	void STATIC_SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName);
	void STATIC_SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);
	void STATIC_SetTimelineLength(float NewLength);
	void STATIC_SetPlayRate(float NewRate);
	void STATIC_SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void STATIC_SetNewTime(float NewTime);
	void STATIC_SetLooping(bool bNewLooping);
	void STATIC_SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName);
	void STATIC_SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void STATIC_SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName);
	void STATIC_ReverseFromEnd();
	void STATIC_Reverse();
	void STATIC_PlayFromStart();
	void STATIC_Play();
	void STATIC_OnRep_Timeline();
	bool STATIC_IsReversing();
	bool STATIC_IsPlaying();
	bool STATIC_IsLooping();
	float STATIC_GetTimelineLength();
	float STATIC_GetPlayRate();
	float STATIC_GetPlaybackPosition();
	bool STATIC_GetIgnoreTimeDilation();
};


// Class Engine.AISystemBase
// 0x0020 (0x0050 - 0x0030)
class UAISystemBase : public UObject
{
public:
	struct FStringClassReference                       AISystemClassName;                                        // 0x0030(0x0010) (Config, GlobalConfig, NoClear)
	struct FName                                       AISystemModuleName;                                       // 0x0040(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	bool                                               bInstantiateAISystemOnClient;                             // 0x0048(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AISystemBase"));

		return ptr;
	}

};


// Class Engine.AnimationAsset
// 0x0050 (0x0080 - 0x0030)
class UAnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	TArray<class UAnimMetaData*>                       MetaData;                                                 // 0x0060(0x0010) (Edit, ExportObject, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimationAsset"));

		return ptr;
	}

};


// Class Engine.AnimSequenceBase
// 0x0028 (0x00A8 - 0x0080)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0080(0x0010) (ZeroConstructor)
	float                                              SequenceLength;                                           // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RateScale;                                                // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawCurveTracks                             RawCurveData;                                             // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimSequenceBase"));

		return ptr;
	}


	float STATIC_GetPlayLength();
};


// Class Engine.AnimCompositeBase
// 0x0000 (0x00A8 - 0x00A8)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompositeBase"));

		return ptr;
	}


	float STATIC_GetPlayLength();
};


// Class Engine.AnimComposite
// 0x0010 (0x00B8 - 0x00A8)
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                           // 0x00A8(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimComposite"));

		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x00F8 (0x01A0 - 0x00A8)
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                  // 0x00B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x90];                                      // 0x00C0(0x0090) MISSED OFFSET
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                         // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                              // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0152(0x0006) MISSED OFFSET
	class UAnimSequence*                               RefPoseSeq;                                               // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RefFrameIndex;                                            // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                EncodingPkgVersion;                                       // 0x0164(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0168(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	EAnimInterpolationType                             Interpolation;                                            // 0x0170(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x0171(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x0172(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x0173(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRootMotionSettingsCopiedFromMontage;                     // 0x0174(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	TArray<struct FAnimSyncMarker>                     AuthoredSyncMarkers;                                      // 0x0178(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0188(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimSequence"));

		return ptr;
	}

};


// Class Engine.BlendSpaceBase
// 0x00C8 (0x0148 - 0x0080)
class UBlendSpaceBase : public UAnimationAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	bool                                               bRotationBlendInMeshSpace;                                // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              AnimLength;                                               // 0x008C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                             // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                  // 0x00A0(0x0008) (Edit)
	float                                              TargetWeightInterpolationSpeedPerSec;                     // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                        // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                SampleIndexWithMarkers;                                   // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FBlendSample>                        SampleData;                                               // 0x00C8(0x0010) (ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                              // 0x00D8(0x0010) (ZeroConstructor)
	struct FBlendParameter                             BlendParameters[0x3];                                     // 0x00E8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlendSpaceBase"));

		return ptr;
	}

};


// Class Engine.BlendSpace
// 0x0008 (0x0150 - 0x0148)
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                     // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlendSpace"));

		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x0150 - 0x0150)
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AimOffsetBlendSpace"));

		return ptr;
	}

};


// Class Engine.BlendSpace1D
// 0x0008 (0x0150 - 0x0148)
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                          // 0x0148(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlendSpace1D"));

		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x0150 - 0x0150)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AimOffsetBlendSpace1D"));

		return ptr;
	}

};


// Class Engine.PoseAsset
// 0x0110 (0x0190 - 0x0080)
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                          PoseContainer;                                            // 0x0080(0x0090)
	bool                                               bAdditivePose;                                            // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	int                                                BasePoseIndex;                                            // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x70];                                      // 0x0120(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PoseAsset"));

		return ptr;
	}

};


// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0030 - 0x0030)
class UAnimStateMachineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimStateMachineTypes"));

		return ptr;
	}

};


// Class Engine.AnimClassInterface
// 0x0000 (0x0030 - 0x0030)
class UAnimClassInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimClassInterface"));

		return ptr;
	}

};


// Class Engine.AnimClassData
// 0x0070 (0x00A0 - 0x0030)
class UAnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x0038(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x0050(0x0010) (ZeroConstructor)
	int                                                RootAnimNodeIndex;                                        // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<int>                                        OrderedSavedPoseIndices;                                  // 0x0068(0x0010) (ZeroConstructor)
	class UStructProperty*                             RootAnimNodeProperty;                                     // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UStructProperty*>                     AnimNodeProperties;                                       // 0x0080(0x0010) (ZeroConstructor)
	TArray<struct FName>                               SyncGroupNames;                                           // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimClassData"));

		return ptr;
	}

};


// Class Engine.AnimCompress
// 0x0020 (0x0050 - 0x0030)
class UAnimCompress : public UObject
{
public:
	struct FString                                     Description;                                              // 0x0030(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      bNeedsSkeleton : 1;                                       // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x0044(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x0045(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x0046(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0047(0x0001) MISSED OFFSET
	float                                              MaxCurveError;                                            // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress"));

		return ptr;
	}

};


// Class Engine.AnimCompress_Automatic
// 0x0008 (0x0058 - 0x0050)
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                              MaxEndEffectorError;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                          // 0x0054(0x0001) (Edit)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;                       // 0x0054(0x0001) (Edit)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;                      // 0x0054(0x0001) (Edit)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                               // 0x0054(0x0001) (Edit)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                         // 0x0054(0x0001) (Edit)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;                  // 0x0054(0x0001) (Edit)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                             // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_Automatic"));

		return ptr;
	}

};


// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0050 - 0x0050)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_BitwiseCompressOnly"));

		return ptr;
	}

};


// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0050 - 0x0050)
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_LeastDestructive"));

		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0058 - 0x0050)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                  // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStartAtSecondKey : 1;                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveEverySecondKey"));

		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0070 - 0x0050)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxEffectorDiff;                                          // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinEffectorDiff;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EffectorDiffSocket;                                       // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentKeyScale;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRetarget : 1;                                            // 0x006C(0x0001) (Edit)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                            // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveLinearKeys"));

		return ptr;
	}

};


// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (0x00F0 - 0x0070)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                                      // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                                      // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats;                                   // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats;                                // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedScaleFormats;                                      // 0x00A0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                   // 0x00B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              ResampledFramerate;                                       // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinKeysForResampling;                                     // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError : 1;                                    // 0x00BC(0x0001) (Edit)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                          // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                TrackHeightBias;                                          // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisor;                                         // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisorExponent;                                 // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2 : 1;                                   // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              RotationErrorSourceRatio;                                 // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                              // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PerturbationProbeSize;                                    // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x00E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_PerTrackCompression"));

		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0060 - 0x0050)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveTrivialKeys"));

		return ptr;
	}

};


// Class Engine.AnimNotify
// 0x0010 (0x0040 - 0x0030)
class UAnimNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify"));

		return ptr;
	}

};


// Class Engine.AnimInstance
// 0x0370 (0x03A0 - 0x0030)
class UAnimInstance : public UObject
{
public:
	float                                              DeltaTime;                                                // 0x0030(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	class USkeleton*                                   CurrentSkeleton;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRunUpdatesInWorkerThreads;                               // 0x0041(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bCanUseParallelUpdateAnimation;                           // 0x0042(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bUseMultiThreadedAnimationUpdate;                         // 0x0043(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bWarnAboutBlueprintUsage;                                 // 0x0044(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                     // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                         // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                           // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageInterrupted;                                     // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllMontageInstancesEnded;                               // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0098(0x0060) MISSED OFFSET
	bool                                               bQueueMontageEvents;                                      // 0x00F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x9F];                                      // 0x00F9(0x009F) MISSED OFFSET
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                    // 0x0198(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x1F8];                                     // 0x01A8(0x01F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimInstance"));

		return ptr;
	}


	void STATIC_UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	class APawn* STATIC_TryGetPawnOwner();
	void STATIC_StopSlotAnimation(float inBlendOutTime, const struct FName& SlotNodeName);
	void STATIC_SnapshotPose(struct FPoseSnapshot* Snapshot);
	void STATIC_SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);
	void STATIC_SetMorphTarget(const struct FName& MorphTargetName, float Value);
	void STATIC_SavePoseSnapshot(const struct FName& SnapshotName);
	class UAnimMontage* STATIC_PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	float STATIC_PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void STATIC_Montage_Stop(float inBlendOutTime, class UAnimMontage* Montage);
	void STATIC_Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);
	void STATIC_Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void STATIC_Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);
	void STATIC_Montage_Resume(class UAnimMontage* Montage);
	float STATIC_Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt);
	void STATIC_Montage_Pause(class UAnimMontage* Montage);
	void STATIC_Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);
	void STATIC_Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);
	bool STATIC_Montage_IsPlaying(class UAnimMontage* Montage);
	bool STATIC_Montage_IsActive(class UAnimMontage* Montage);
	float STATIC_Montage_GetPosition(class UAnimMontage* Montage);
	float STATIC_Montage_GetPlayRate(class UAnimMontage* Montage);
	bool STATIC_Montage_GetIsStopped(class UAnimMontage* Montage);
	struct FName STATIC_Montage_GetCurrentSection(class UAnimMontage* Montage);
	float STATIC_Montage_GetBlendTime(class UAnimMontage* Montage);
	void STATIC_LockAIResources(bool bLockMovement, bool LockAILogic);
	bool STATIC_IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder);
	bool STATIC_IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);
	bool STATIC_IsAnyMontagePlaying();
	bool STATIC_HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName);
	bool STATIC_GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime);
	struct FMarkerSyncAnimPosition STATIC_GetSyncGroupPosition(const struct FName& InSyncGroupName);
	float STATIC_GetStateWeight(int MachineIndex, int StateIndex);
	float STATIC_GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float STATIC_GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float STATIC_GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float STATIC_GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float STATIC_GetRelevantAnimLength(int MachineIndex, int StateIndex);
	class USkeletalMeshComponent* STATIC_GetOwningComponent();
	class AActor* STATIC_GetOwningActor();
	float STATIC_GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float STATIC_GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float STATIC_GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float STATIC_GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float STATIC_GetInstanceMachineWeight(int MachineIndex);
	float STATIC_GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float STATIC_GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float STATIC_GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float STATIC_GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float STATIC_GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float STATIC_GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float STATIC_GetCurveValue(const struct FName& CurveName);
	struct FName STATIC_GetCurrentStateName(int MachineIndex);
	float STATIC_GetCurrentStateElapsedTime(int MachineIndex);
	class UAnimMontage* STATIC_GetCurrentActiveMontage();
	float STATIC_GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
	void STATIC_ClearMorphTargets();
	float STATIC_CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void STATIC_BlueprintUpdateAnimation(float DeltaTimeX);
	void STATIC_BlueprintPostEvaluateAnimation();
	void STATIC_BlueprintInitializeAnimation();
};


// Class Engine.AnimSingleNodeInstance
// 0x0018 (0x03B8 - 0x03A0)
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                             // 0x03A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                    // 0x03A8(0x0010) (ZeroConstructor, Transient, InstancedReference)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimSingleNodeInstance"));

		return ptr;
	}


	void STATIC_StopAnim();
	void STATIC_SetReverse(bool bInReverse);
	void STATIC_SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero);
	void STATIC_SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void STATIC_SetPosition(float InPosition, bool bFireNotifies);
	void STATIC_SetPlayRate(float InPlayRate);
	void STATIC_SetPlaying(bool bIsPlaying);
	void STATIC_SetLooping(bool bIsLooping);
	void STATIC_SetBlendSpaceInput(const struct FVector& InBlendInput);
	void STATIC_SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void STATIC_PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float STATIC_GetLength();
};


// Class Engine.AnimMetaData
// 0x0000 (0x0030 - 0x0030)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimMetaData"));

		return ptr;
	}

};


// Class Engine.AnimNotify_PlayParticleEffect
// 0x0040 (0x0080 - 0x0040)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0048(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0054(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) MISSED OFFSET
	unsigned char                                      Attached : 1;                                             // 0x0070(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0078(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_PlayParticleEffect"));

		return ptr;
	}

};


// Class Engine.AnimNotify_PlaySound
// 0x0020 (0x0060 - 0x0040)
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                                  Sound;                                                    // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bFollow : 1;                                              // 0x0050(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FName                                       AttachName;                                               // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_PlaySound"));

		return ptr;
	}

};


// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify_ResetClothingSimulation"));

		return ptr;
	}

};


// Class Engine.AnimNotifyState
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState"));

		return ptr;
	}

};


// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0000 (0x0038 - 0x0038)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_DisableRootMotion"));

		return ptr;
	}

};


// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (0x0068 - 0x0038)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0048(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0054(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bDestroyAtEnd;                                            // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_TimedParticleEffect"));

		return ptr;
	}

};


// Class Engine.AnimNotifyState_Trail
// 0x0030 (0x0068 - 0x0038)
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstSocketName;                                          // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SecondSocketName;                                         // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                           // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FName                                       WidthScaleCurve;                                          // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecycleSpawnedSystems : 1;                               // 0x0060(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_Trail"));

		return ptr;
	}


	class UParticleSystem* STATIC_OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
};


// Class Engine.AnimSet
// 0x00C8 (0x00F8 - 0x0030)
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                    // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0048(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x0058(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0088(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                      // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       BestRatioSkelMeshName;                                    // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimSet"));

		return ptr;
	}

};


// Class Engine.AssetImportData
// 0x0000 (0x0030 - 0x0030)
class UAssetImportData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AssetImportData"));

		return ptr;
	}

};


// Class Engine.AssetManager
// 0x0378 (0x03A8 - 0x0030)
class UAssetManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x260];                                     // 0x0030(0x0260) MISSED OFFSET
	TArray<class UObject*>                             ObjectReferenceList;                                      // 0x0290(0x0010) (ZeroConstructor)
	bool                                               bIsGlobalAsyncScanEnvironment;                            // 0x02A0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldKeepHardRefs;                                      // 0x02A1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldGuessTypeAndName;                                  // 0x02A2(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldUseSynchronousLoad;                                // 0x02A3(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsBulkScanning;                                          // 0x02A4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsManagementDatabaseCurrent;                             // 0x02A5(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUpdateManagementDatabaseAfterScan;                       // 0x02A6(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x101];                                     // 0x02A7(0x0101) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AssetManager"));

		return ptr;
	}

};


// Class Engine.AssetMappingTable
// 0x0010 (0x0040 - 0x0030)
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                       MappedAssets;                                             // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AssetMappingTable"));

		return ptr;
	}

};


// Class Engine.AutomationTestSettings
// 0x02F8 (0x0328 - 0x0030)
class UAutomationTestSettings : public UObject
{
public:
	TArray<struct FString>                             EngineTestModules;                                        // 0x0030(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             EditorTestModules;                                        // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       AutomationTestmap;                                        // 0x0050(0x0010) (Edit, Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FStringAssetReference>               AssetsToOpen;                                             // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                       // 0x0080(0x01F0) (Edit, Config)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                              // 0x0270(0x0030) (Edit, Config)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                              // 0x02A0(0x0010) (Edit, Config)
	struct FBlueprintEditorPromotionSettings           BlueprintEditorPromotionTest;                             // 0x02B0(0x0030) (Edit, Config)
	TArray<struct FString>                             TestLevelFolders;                                         // 0x02E0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                            // 0x02F0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                              // 0x0300(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                         // 0x0310(0x0010) (Edit, ZeroConstructor, Config)
	struct FIntPoint                                   DefaultScreenshotResolution;                              // 0x0320(0x0008) (Edit, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AutomationTestSettings"));

		return ptr;
	}

};


// Class Engine.AvoidanceManager
// 0x00B8 (0x00E8 - 0x0030)
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterClean;                                       // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TestHeightDifference;                                     // 0x004C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              HeightCheckMargin;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x94];                                      // 0x0054(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AvoidanceManager"));

		return ptr;
	}


	bool STATIC_RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int STATIC_GetObjectCount();
	int STATIC_GetNewAvoidanceUID();
	struct FVector STATIC_GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID);
	struct FVector STATIC_GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	struct FVector STATIC_GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
};


// Class Engine.Skeleton
// 0x0370 (0x03A0 - 0x0030)
class USkeleton : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	TArray<struct FBoneNode>                           BoneTree;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FTransform>                          RefLocalPoses;                                            // 0x0048(0x0010) (ZeroConstructor, Deprecated)
	unsigned char                                      UnknownData01[0x110];                                     // 0x0058(0x0110) MISSED OFFSET
	struct FGuid                                       VirtualBoneGuid;                                          // 0x0168(0x0010) (IsPlainOldData)
	TArray<struct FVirtualBone>                        VirtualBones;                                             // 0x0178(0x0010) (ZeroConstructor)
	TArray<struct FSkeletonToMeshLinkup>               LinkupCache;                                              // 0x0188(0x0010) (ZeroConstructor, Transient)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x0198(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x50];                                      // 0x01A8(0x0050) MISSED OFFSET
	struct FSmartNameContainer                         SmartNames;                                               // 0x01F8(0x0050)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0248(0x0018) MISSED OFFSET
	TArray<class UBlendProfile*>                       BlendProfiles;                                            // 0x0260(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                               // 0x0270(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x110];                                     // 0x0280(0x0110) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0390(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Skeleton"));

		return ptr;
	}

};


// Class Engine.BlendProfile
// 0x0020 (0x0050 - 0x0030)
class UBlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class USkeleton*                                   OwningSkeleton;                                           // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBlendProfileBoneEntry>              ProfileEntries;                                           // 0x0040(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlendProfile"));

		return ptr;
	}

};


// Class Engine.BlueprintAsyncActionBase
// 0x0000 (0x0030 - 0x0030)
class UBlueprintAsyncActionBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintAsyncActionBase"));

		return ptr;
	}

};


// Class Engine.BlueprintCore
// 0x0028 (0x0058 - 0x0030)
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                   // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      GeneratedClass;                                           // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyNeedToPurgeSkelRefs;                               // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyGeneratedClassIsAuthoritative;                     // 0x0041(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	struct FGuid                                       BlueprintGuid;                                            // 0x0044(0x0010) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintCore"));

		return ptr;
	}

};


// Class Engine.Blueprint
// 0x0148 (0x01A0 - 0x0058)
class UBlueprint : public UBlueprintCore
{
public:
	unsigned char                                      bRecompileOnLoad : 1;                                     // 0x0058(0x0001) (Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	class UClass*                                      ParentClass;                                              // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     PRIVATE_InnermostPreviousCDO;                             // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bHasBeenRegenerated : 1;                                  // 0x0070(0x0001) (Transient)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                // 0x0070(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x0080(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x0090(0x0010) (ZeroConstructor)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                            // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                BlueprintSystemVersion;                                   // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE0];                                      // 0x00B0(0x00E0) MISSED OFFSET
	bool                                               bNativize;                                                // 0x0190(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0191(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Blueprint"));

		return ptr;
	}

};


// Class Engine.AnimBlueprint
// 0x0020 (0x01C0 - 0x01A0)
class UAnimBlueprint : public UBlueprint
{
public:
	TArray<struct FAnimGroupInfo>                      Groups;                                                   // 0x01A0(0x0010) (ZeroConstructor)
	bool                                               bUseMultiThreadedAnimationUpdate;                         // 0x01B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bWarnAboutBlueprintUsage;                                 // 0x01B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x01B2(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimBlueprint"));

		return ptr;
	}

};


// Class Engine.LevelScriptBlueprint
// 0x0000 (0x01A0 - 0x01A0)
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelScriptBlueprint"));

		return ptr;
	}

};


// Class Engine.BlueprintMapLibrary
// 0x0000 (0x0030 - 0x0030)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintMapLibrary"));

		return ptr;
	}

};


// Class Engine.Subsystem
// 0x0008 (0x0038 - 0x0030)
class USubsystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Subsystem"));

		return ptr;
	}

};


// Class Engine.DynamicSubsystem
// 0x0000 (0x0038 - 0x0038)
class UDynamicSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DynamicSubsystem"));

		return ptr;
	}

};


// Class Engine.GameInstance
// 0x0190 (0x01C0 - 0x0030)
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class UOnlineSession*                              OnlineSession;                                            // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x178];                                     // 0x0048(0x0178) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameInstance"));

		return ptr;
	}


	void STATIC_ReceiveShutdown();
	void STATIC_ReceiveInit();
	void STATIC_HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);
	void STATIC_HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);
	void STATIC_DebugRemovePlayer(int ControllerId);
	void STATIC_DebugCreatePlayer(int ControllerId);
};


// Class Engine.GameInstanceSubsystem
// 0x0000 (0x0038 - 0x0038)
class UGameInstanceSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameInstanceSubsystem"));

		return ptr;
	}

};


// Class Engine.PlatformGameInstance
// 0x00B0 (0x0270 - 0x01C0)
class UPlatformGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01C0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForRemoteNotificationsDelegate;      // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForUserNotificationsDelegate;        // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationFailedToRegisterForRemoteNotificationsDelegate;// 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedRemoteNotificationDelegate;            // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedLocalNotificationDelegate;             // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedScreenOrientationChangedNotificationDelegate;// 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0268(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlatformGameInstance"));

		return ptr;
	}


	void STATIC_PlatformScreenOrientationChangedDelegate__DelegateSignature(TEnumAsByte<EScreenOrientation> inScreenOrientation);
	void STATIC_PlatformRegisteredForUserNotificationsDelegate__DelegateSignature(int inInt);
	void STATIC_PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(TArray<unsigned char> inArray);
	void STATIC_PlatformReceivedRemoteNotificationDelegate__DelegateSignature(const struct FString& inString);
	void STATIC_PlatformReceivedLocalNotificationDelegate__DelegateSignature(const struct FString& inString, int inInt);
	void STATIC_PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(const struct FString& inString);
	void STATIC_PlatformDelegate__DelegateSignature();
};


// Class Engine.BlueprintPlatformLibrary
// 0x0000 (0x0030 - 0x0030)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintPlatformLibrary"));

		return ptr;
	}

};


// Class Engine.BlueprintSetLibrary
// 0x0000 (0x0030 - 0x0030)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintSetLibrary"));

		return ptr;
	}

};


// Class Engine.DataTable
// 0x0058 (0x0088 - 0x0030)
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DataTable"));

		return ptr;
	}

};


// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DataTableFunctionLibrary"));

		return ptr;
	}

};


// Class Engine.DebugDrawService
// 0x0000 (0x0030 - 0x0030)
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DebugDrawService"));

		return ptr;
	}

};


// Class Engine.DeveloperSettings
// 0x0010 (0x0040 - 0x0030)
class UDeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DeveloperSettings"));

		return ptr;
	}

};


// Class Engine.CollisionProfile
// 0x0120 (0x0160 - 0x0040)
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                 // 0x0040(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                  // 0x0050(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                             // 0x0060(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                         // 0x0070(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                // 0x0080(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0090(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CollisionProfile"));

		return ptr;
	}

};


// Class Engine.KismetSystemLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetSystemLibrary"));

		return ptr;
	}

};


// Class Engine.GameplayStatics
// 0x0000 (0x0030 - 0x0030)
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameplayStatics"));

		return ptr;
	}

};


// Class Engine.HeadMountedDisplayFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HeadMountedDisplayFunctionLibrary"));

		return ptr;
	}

};


// Class Engine.KismetArrayLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetArrayLibrary"));

		return ptr;
	}

};


// Class Engine.KismetGuidLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetGuidLibrary"));

		return ptr;
	}

};


// Class Engine.KismetInputLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetInputLibrary"));

		return ptr;
	}

};


// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetMaterialLibrary"));

		return ptr;
	}

};


// Class Engine.KismetMathLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetMathLibrary"));

		return ptr;
	}

};


// Class Engine.BlueprintGeneratedClass
// 0x0108 (0x03B8 - 0x02B0)
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                  // 0x02B0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                    // 0x02B8(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x02C8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x02D8(0x0010) (ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x02F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStructProperty*                             UberGraphFramePointerProperty;                            // 0x02F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UFunction*                                   UberGraphFunction;                                        // 0x0300(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEventGraphFastCallPair>             FastCallPairs;                                            // 0x0308(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bHasInstrumentation;                                      // 0x0318(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0319(0x0007) MISSED OFFSET
	TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                            // 0x0320(0x0050) (ZeroConstructor)
	bool                                               bHasNativizedParent;                                      // 0x0370(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x47];                                      // 0x0371(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlueprintGeneratedClass"));

		return ptr;
	}

};


// Class Engine.SoundBase
// 0x0078 (0x00A8 - 0x0030)
class USoundBase : public UObject
{
public:
	class USoundClass*                                 SoundClassObject;                                         // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDebug : 1;                                               // 0x0038(0x0001) (Edit)
	unsigned char                                      bOverrideConcurrency : 1;                                 // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreFocus : 1;                                         // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	class USoundConcurrency*                           SoundConcurrencySettings;                                 // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSoundConcurrencySettings                   ConcurrencyOverrides;                                     // 0x0048(0x0010) (Edit, BlueprintVisible)
	TEnumAsByte<EMaxConcurrentResolutionRule>          MaxConcurrentResolutionRule;                              // 0x0058(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	int                                                MaxConcurrentPlayCount;                                   // 0x005C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Duration;                                                 // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class USoundSubmix*                                SoundSubmixObject;                                        // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FSoundSubmixSendInfo>                SoundSubmixSends;                                         // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DefaultMasterReverbSendAmount;                            // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                        // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundBase"));

		return ptr;
	}

};


// Class Engine.SoundWave
// 0x01E0 (0x0288 - 0x00A8)
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                       // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x00AC(0x0001) (Edit)
	unsigned char                                      bStreaming : 1;                                           // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	int                                                StreamingPriority;                                        // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01 : 3;                                        // 0x00B4(0x0001)
	unsigned char                                      bMature : 1;                                              // 0x00B4(0x0001) (Edit)
	unsigned char                                      bManualWordWrap : 1;                                      // 0x00B4(0x0001) (Edit)
	unsigned char                                      bSingleLine : 1;                                          // 0x00B4(0x0001) (Edit)
	unsigned char                                      bVirtualizeWhenSilent : 1;                                // 0x00B4(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                               // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x00C0(0x0010) (Edit, ZeroConstructor)
	float                                              SubtitlePriority;                                         // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Volume;                                                   // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Pitch;                                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumChannels;                                              // 0x00DC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SampleRate;                                               // 0x00E0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                RawPCMDataSize;                                           // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x00E8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                       // 0x00F8(0x0010) (ZeroConstructor)
	class UCurveTable*                                 Curves;                                                   // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveTable*                                 InternalCurves;                                           // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x170];                                     // 0x0118(0x0170) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundWave"));

		return ptr;
	}

};


// Class Engine.Texture
// 0x00A0 (0x00D0 - 0x0030)
class UTexture : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	struct FGuid                                       LightingGuid;                                             // 0x0038(0x0010) (IsPlainOldData)
	int                                                LODBias;                                                  // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumCinematicMipLevels;                                    // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                GlobalLODBias;                                            // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SRGB : 1;                                                 // 0x0054(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      NeverStream : 1;                                          // 0x0054(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoTiling : 1;                                            // 0x0054(0x0001)
	unsigned char                                      bUseCinematicMipLevels : 1;                               // 0x0054(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0058(0x0010) (Edit, ExportObject, ZeroConstructor)
	int                                                CachedCombinedLODBias;                                    // 0x0068(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x006C(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x0071(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0072(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5D];                                      // 0x0073(0x005D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Texture"));

		return ptr;
	}

};


// Class Engine.SubsurfaceProfile
// 0x0028 (0x0058 - 0x0030)
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                 // 0x0030(0x0024) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SubsurfaceProfile"));

		return ptr;
	}

};


// Class Engine.TextPropertyTestObject
// 0x0048 (0x0078 - 0x0030)
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                            // 0x0030(0x0018)
	struct FText                                       UndefaultedText;                                          // 0x0048(0x0018)
	struct FText                                       TransientText;                                            // 0x0060(0x0018)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextPropertyTestObject"));

		return ptr;
	}

};


// Class Engine.Texture2D
// 0x0040 (0x0110 - 0x00D0)
class UTexture2D : public UTexture
{
public:
	int                                                StreamingIndex;                                           // 0x00D0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                LevelIndex;                                               // 0x00D4(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                FirstResourceMemMip;                                      // 0x00D8(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   ImportedSize;                                             // 0x00DC(0x0008) (IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	double                                             ForceMipLevelsToBeResidentTimestamp;                      // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                         // 0x00F0(0x0001) (Transient)
	unsigned char                                      bIsStreamable : 1;                                        // 0x00F0(0x0001) (Transient)
	unsigned char                                      bHasStreamingUpdatePending : 1;                           // 0x00F0(0x0001) (Transient)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                          // 0x00F0(0x0001) (Transient)
	unsigned char                                      bIgnoreStreamingMipBias : 1;                              // 0x00F0(0x0001) (Transient)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x00F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00F5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1A];                                      // 0x00F6(0x001A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Texture2D"));

		return ptr;
	}


	void STATIC_SetForceMipLevelsToBeResident(float Seconds, int CinematicTextureGroups);
	int STATIC_Blueprint_GetSizeY();
	int STATIC_Blueprint_GetSizeX();
};


// Class Engine.LightMapTexture2D
// 0x0008 (0x0118 - 0x0110)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightMapTexture2D"));

		return ptr;
	}


	void STATIC_SetForceMipLevelsToBeResident(float Seconds, int CinematicTextureGroups);
	int STATIC_Blueprint_GetSizeY();
	int STATIC_Blueprint_GetSizeX();
};


// Class Engine.ShadowMapTexture2D
// 0x0008 (0x0118 - 0x0110)
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                           // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ShadowMapTexture2D"));

		return ptr;
	}

};


// Class Engine.TextureLightProfile
// 0x0008 (0x0118 - 0x0110)
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                               // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureMultiplier;                                        // 0x0114(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextureLightProfile"));

		return ptr;
	}

};


// Class Engine.Texture2DDynamic
// 0x0018 (0x00E8 - 0x00D0)
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x00D9(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Texture2DDynamic"));

		return ptr;
	}

};


// Class Engine.TextureCube
// 0x0058 (0x0128 - 0x00D0)
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x00D0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextureCube"));

		return ptr;
	}

};


// Class Engine.TextureRenderTarget
// 0x0008 (0x00D8 - 0x00D0)
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                              // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget"));

		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0028 (0x0100 - 0x00D8)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x00DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00E0(0x0010) (IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x00F4(0x0001)
	unsigned char                                      bHDR : 1;                                                 // 0x00F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGPUSharedFlag : 1;                                       // 0x00F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoGenerateMips : 1;                                    // 0x00F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x00F8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget2D"));

		return ptr;
	}

};


// Class Engine.CanvasRenderTarget2D
// 0x0020 (0x0120 - 0x0100)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                               // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                                    // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                  // 0x0118(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0119(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CanvasRenderTarget2D"));

		return ptr;
	}


	void STATIC_UpdateResource();
	void STATIC_ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void STATIC_GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height);
};


// Class Engine.TextureRenderTargetCube
// 0x0020 (0x00F8 - 0x00D8)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00DC(0x0010) (IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x00EC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	unsigned char                                      bHDR : 1;                                                 // 0x00F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x00F0(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTargetCube"));

		return ptr;
	}

};


// Class Engine.TextureLODSettings
// 0x0010 (0x0040 - 0x0030)
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                         // 0x0030(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextureLODSettings"));

		return ptr;
	}

};


// Class Engine.DeviceProfile
// 0x0090 (0x00D0 - 0x0040)
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                               // 0x0040(0x0010) (Edit, ZeroConstructor, Config, EditConst)
	struct FString                                     BaseProfileName;                                          // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	class UObject*                                     Parent;                                                   // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0068(0x0018) MISSED OFFSET
	TArray<struct FString>                             CVars;                                                    // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0090(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfile"));

		return ptr;
	}

};


// Class Engine.ThumbnailInfo
// 0x0000 (0x0030 - 0x0030)
class UThumbnailInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ThumbnailInfo"));

		return ptr;
	}

};


// Class Engine.TimelineTemplate
// 0x0070 (0x00A0 - 0x0030)
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                               // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	unsigned char                                      bAutoPlay : 1;                                            // 0x0038(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x0038(0x0001) (Edit)
	unsigned char                                      bReplicated : 1;                                          // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bValidatedAsWired : 1;                                    // 0x0038(0x0001)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FTTEventTrack>                       EventTracks;                                              // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                              // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                             // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                        // 0x0070(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                             // 0x0090(0x0010) (DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TimelineTemplate"));

		return ptr;
	}

};


// Class Engine.TouchInterface
// 0x0030 (0x0060 - 0x0030)
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                 // 0x0030(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                            // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InactiveOpacity;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilDeactive;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilReset;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActivationDelay;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreventRecenter;                                         // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              StartupDelay;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TouchInterface"));

		return ptr;
	}

};


// Class Engine.UserDefinedEnum
// 0x0050 (0x00C8 - 0x0078)
class UUserDefinedEnum : public UEnum
{
public:
	TMap<struct FName, struct FText>                   DisplayNameMap;                                           // 0x0078(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.UserDefinedEnum"));

		return ptr;
	}

};


// Class Engine.VectorField
// 0x0020 (0x0050 - 0x0030)
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                   // 0x0030(0x001C) (Edit, IsPlainOldData)
	float                                              Intensity;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VectorField"));

		return ptr;
	}

};


// Class Engine.VectorFieldAnimated
// 0x0040 (0x0090 - 0x0050)
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                  // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                           // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	int                                                VolumeSizeX;                                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeY;                                              // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeZ;                                              // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesX;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesY;                                               // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FrameCount;                                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FramesPerSecond;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoop : 1;                                                // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	class UVectorFieldStatic*                          NoiseField;                                               // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseScale;                                               // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseMax;                                                 // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldAnimated"));

		return ptr;
	}

};


// Class Engine.VectorFieldStatic
// 0x0090 (0x00E0 - 0x0050)
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                    // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0054(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeZ;                                                    // 0x0058(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x84];                                      // 0x005C(0x0084) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldStatic"));

		return ptr;
	}

};


// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0030 - 0x0030)
class UVisualLoggerAutomationTests : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerAutomationTests"));

		return ptr;
	}

};


// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (0x0030 - 0x0030)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerDebugSnapshotInterface"));

		return ptr;
	}

};


// Class Engine.WorldComposition
// 0x0050 (0x0080 - 0x0030)
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET
	TArray<class ULevelStreaming*>                     TilesStreaming;                                           // 0x0050(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                              // 0x0060(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadAllTilesDuringCinematic;                             // 0x0068(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRebaseOriginIn3DSpace;                                   // 0x0069(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              RebaseOriginDistance;                                     // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FString>                             IgnoreStreamingPrefix;                                    // 0x0070(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.WorldComposition"));

		return ptr;
	}

};


// Class Engine.HUD
// 0x00E8 (0x04D0 - 0x03E8)
class AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                              // 0x03E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLostFocusPaused : 1;                                     // 0x03F0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bShowHUD : 1;                                             // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShowDebugInfo : 1;                                       // 0x03F0(0x0001) (BlueprintVisible)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                 // 0x03F0(0x0001) (BlueprintVisible)
	unsigned char                                      bShowOverlays : 1;                                        // 0x03F0(0x0001) (BlueprintVisible)
	unsigned char                                      bEnableDebugTextShadow : 1;                               // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	TArray<class AActor*>                              PostRenderedActors;                                       // 0x03F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	TArray<struct FName>                               DebugDisplay;                                             // 0x0410(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                   // 0x0420(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UCanvas*                                     Canvas;                                                   // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCanvas*                                     DebugCanvas;                                              // 0x0438(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x0440(0x0010) (ZeroConstructor)
	class UClass*                                      ShowDebugTargetDesiredClass;                              // 0x0450(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      ShowDebugTargetActor;                                     // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x70];                                      // 0x0460(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HUD"));

		return ptr;
	}


	void STATIC_ShowHUD();
	void STATIC_ShowDebugToggleSubCategory(const struct FName& Category);
	void STATIC_ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void STATIC_ShowDebug(const struct FName& DebugType);
	void STATIC_RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void STATIC_RemoveAllDebugStrings();
	void STATIC_ReceiveHitBoxRelease(const struct FName& BoxName);
	void STATIC_ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void STATIC_ReceiveHitBoxClick(const struct FName& BoxName);
	void STATIC_ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void STATIC_ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector STATIC_Project(const struct FVector& Location);
	void STATIC_GetTextSize(const struct FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight);
	class APlayerController* STATIC_GetOwningPlayerController();
	class APawn* STATIC_GetOwningPawn();
	void STATIC_GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors);
	void STATIC_DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void STATIC_DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void STATIC_DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void STATIC_DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void STATIC_DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void STATIC_DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void STATIC_DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void STATIC_DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void STATIC_Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void STATIC_AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void STATIC_AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};


// Class Engine.DataAsset
// 0x0008 (0x0038 - 0x0030)
class UDataAsset : public UObject
{
public:
	class UClass*                                      NativeClass;                                              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DataAsset"));

		return ptr;
	}

};


// Class Engine.Pawn
// 0x0060 (0x0448 - 0x03E8)
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	unsigned char                                      bUseControllerRotationPitch : 1;                          // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationYaw : 1;                            // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationRoll : 1;                           // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                       // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              BaseEyeHeight;                                            // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                        // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EAutoPossessAI                                     AutoPossessAI;                                            // 0x03F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET
	class UClass*                                      AIControllerClass;                                        // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	uint16_t                                           RemoteViewPitch;                                          // 0x0408(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x040A(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData04[0x8];                                       // 0x040A(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Pawn.PlayerState
	class AController*                                 Controller;                                               // 0x0418(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class AController*                                 LastHitBy;                                                // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0428(0x0008) MISSED OFFSET
	struct FVector                                     ControlInputVector;                                       // 0x0430(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     LastControlInputVector;                                   // 0x043C(0x000C) (Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Pawn"));

		return ptr;
	}


	void STATIC_SpawnDefaultController();
	void STATIC_SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void STATIC_ReceiveUnpossessed(class AController* OldController);
	void STATIC_ReceivePossessed(class AController* NewController);
	void STATIC_PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void STATIC_OnRep_PlayerState();
	void STATIC_OnRep_Controller();
	void STATIC_LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector STATIC_K2_GetMovementInputVector();
	bool STATIC_IsPlayerControlled();
	bool STATIC_IsMoveInputIgnored();
	bool STATIC_IsLocallyControlled();
	bool STATIC_IsControlled();
	struct FVector STATIC_GetPendingMovementInputVector();
	struct FVector STATIC_GetNavAgentLocation();
	class UPawnMovementComponent* STATIC_GetMovementComponent();
	class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);
	struct FVector STATIC_GetLastMovementInputVector();
	struct FRotator STATIC_GetControlRotation();
	class AController* STATIC_GetController();
	struct FRotator STATIC_GetBaseAimRotation();
	void STATIC_DetachFromControllerPendingDestroy();
	struct FVector STATIC_ConsumeMovementInputVector();
	void STATIC_AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void STATIC_AddControllerYawInput(float Val);
	void STATIC_AddControllerRollInput(float Val);
	void STATIC_AddControllerPitchInput(float Val);
};


// Class Engine.Character
// 0x03E8 (0x0830 - 0x0448)
class ACharacter : public APawn
{
public:
	unsigned char                                      bPressedJump : 1;                                         // 0x0448(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bClientUpdating : 1;                                      // 0x0448(0x0001) (Transient)
	unsigned char                                      bClientWasFalling : 1;                                    // 0x0448(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotion : 1;                          // 0x0448(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotionSources : 1;                   // 0x0448(0x0001) (Transient)
	unsigned char                                      bSimGravityDisabled : 1;                                  // 0x0448(0x0001)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;                  // 0x0448(0x0001) (Transient)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                          // 0x0448(0x0001) (Transient)
	unsigned char                                      bWasJumping : 1;                                          // 0x0449(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData00[0x6];                                       // 0x044A(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x044A(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Character.CapsuleComponent
	unsigned char                                      ReplicatedMovementMode;                                   // 0x0458(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0459(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData03[0x8];                                       // 0x0459(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Character.CharacterMovement
	bool                                               bInBaseReplication;                                       // 0x0468(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0469(0x0003) MISSED OFFSET
	float                                              AnimRootMotionTranslationScale;                           // 0x046C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FBasedMovementInfo                          BasedMovement;                                            // 0x0470(0x0030)
	unsigned char                                      UnknownData05[0x8];                                       // 0x04A0(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Character.ProneCapsuleComponent
	float                                              JumpMaxHoldTime;                                          // 0x04A8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpCurrentCount;                                         // 0x04AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FVector                                     BaseTranslationOffset;                                    // 0x04B0(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x04C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              CrouchedEyeHeight;                                        // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsCrouched : 1;                                          // 0x04CC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04CD(0x0003) MISSED OFFSET
	int                                                JumpMaxCount;                                             // 0x04D0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x04D4(0x0004) MISSED OFFSET
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                  // 0x04D8(0x0030) (Net)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0508(0x0008) MISSED OFFSET
	struct FQuat                                       BaseRotationOffset;                                       // 0x0510(0x0010) (IsPlainOldData)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;             // 0x0520(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              JumpKeyHoldTime;                                          // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                        // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x10];                                      // 0x0538(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    MovementModeChangedDelegate;                              // 0x0548(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                               // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FRootMotionSourceGroup                      SavedRootMotion;                                          // 0x0568(0x0100) (Transient)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0668(0x0008) MISSED OFFSET
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                   // 0x0670(0x0040) (Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                       // 0x06B0(0x0010) (ZeroConstructor, Transient)
	struct FRepRootMotionMontage                       RepRootMotion;                                            // 0x06C0(0x0160) (Net)
	unsigned char                                      UnknownData12[0x10];                                      // 0x0820(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Character"));

		return ptr;
	}


	void STATIC_UnCrouch(bool bClientSimulation);
	void STATIC_StopJumping();
	void STATIC_StopAnimMontage(class UAnimMontage* AnimMontage);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags);
	void STATIC_ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, unsigned char ClientStanceMode);
	void STATIC_ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode, unsigned char ClientStanceMode);
	void STATIC_ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, unsigned char ClientStanceMode);
	void STATIC_ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, unsigned char ClientStanceMode);
	void STATIC_ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, unsigned char ClientStanceMode);
	float STATIC_PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void STATIC_OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void STATIC_OnRep_RootMotion();
	void STATIC_OnRep_ReplicatedBasedMovement();
	void STATIC_OnRep_IsCrouched();
	void STATIC_OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void STATIC_OnLanded(const struct FHitResult& Hit);
	void STATIC_OnJumped();
	void STATIC_LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void STATIC_K2_UpdateCustomMovement(float DeltaTime);
	void STATIC_K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void STATIC_K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void STATIC_K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void STATIC_Jump();
	bool STATIC_IsPlayingRootMotion();
	bool STATIC_IsPlayingNetworkedRootMotionMontage();
	bool STATIC_IsJumpProvidingForce();
	class UAnimMontage* STATIC_GetCurrentMontage();
	struct FVector STATIC_GetBaseTranslationOffset();
	struct FRotator STATIC_GetBaseRotationOffsetRotator();
	float STATIC_GetAnimRootMotionTranslationScale();
	void STATIC_Crouch(bool bClientSimulation);
	void STATIC_ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, float NewRotationPitch, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void STATIC_ClientCheatWalk();
	void STATIC_ClientCheatGhost();
	void STATIC_ClientCheatFly();
	void STATIC_ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void STATIC_ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void STATIC_ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, float NewRotationPitch, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void STATIC_ClientAckGoodMove(float Timestamp);
	bool STATIC_CanJumpInternal();
	bool STATIC_CanJump();
	void STATIC_CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
};


// Class Engine.MovementComponent
// 0x0050 (0x0250 - 0x0200)
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                         // 0x0200(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                         // 0x0208(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0210(0x0004) MISSED OFFSET
	struct FVector                                     Velocity;                                                 // 0x0214(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      bConstrainToPlane : 1;                                    // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                  // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting;                               // 0x0224(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0225(0x0003) MISSED OFFSET
	struct FVector                                     PlaneConstraintNormal;                                    // 0x0228(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     PlaneConstraintOrigin;                                    // 0x0234(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                // 0x0240(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                          // 0x0240(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTickBeforeOwner : 1;                                     // 0x0240(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                        // 0x0240(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0241(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MovementComponent"));

		return ptr;
	}


	void STATIC_StopMovementImmediately();
	void STATIC_SnapUpdatedComponentToPlane();
	void STATIC_SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void STATIC_SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void STATIC_SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void STATIC_SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void STATIC_SetPlaneConstraintEnabled(bool bEnabled);
	void STATIC_SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);
	void STATIC_PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool STATIC_K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit);
	float STATIC_K2_GetModifiedMaxSpeed();
	float STATIC_K2_GetMaxSpeedModifier();
	bool STATIC_IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector STATIC_GetPlaneConstraintOrigin();
	struct FVector STATIC_GetPlaneConstraintNormal();
	EPlaneConstraintAxisSetting STATIC_GetPlaneConstraintAxisSetting();
	class APhysicsVolume* STATIC_GetPhysicsVolume();
	float STATIC_GetMaxSpeed();
	float STATIC_GetGravityZ();
	struct FVector STATIC_ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector STATIC_ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector STATIC_ConstrainDirectionToPlane(const struct FVector& Direction);
};


// Class Engine.NavMovementComponent
// 0x0030 (0x0280 - 0x0250)
class UNavMovementComponent : public UMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0250(0x0018) MISSED OFFSET
	float                                              FixedPathBrakingDistance;                                 // 0x0268(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                   // 0x026C(0x0001) (Edit)
	unsigned char                                      bUseAccelerationForPaths : 1;                             // 0x026C(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      bUseFixedBrakingDistanceForPaths : 1;                     // 0x026C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x026D(0x0003) MISSED OFFSET
	struct FMovementProperties                         MovementState;                                            // 0x0270(0x0004)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0274(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavMovementComponent"));

		return ptr;
	}


	void STATIC_StopMovementKeepPathing();
	void STATIC_StopActiveMovement();
	bool STATIC_IsSwimming();
	bool STATIC_IsMovingOnGround();
	bool STATIC_IsFlying();
	bool STATIC_IsFalling();
	bool STATIC_IsCrouching();
};


// Class Engine.PawnMovementComponent
// 0x0010 (0x0290 - 0x0280)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                // 0x0280(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0288(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PawnMovementComponent"));

		return ptr;
	}


	struct FVector STATIC_K2_GetInputVector();
	bool STATIC_IsMoveInputIgnored();
	struct FVector STATIC_GetPendingInputVector();
	class APawn* STATIC_GetPawnOwner();
	struct FVector STATIC_GetLastInputVector();
	struct FVector STATIC_ConsumeInputVector();
	void STATIC_AddInputVector(const struct FVector& WorldVector, bool bForce);
};


// Class Engine.CharacterMovementComponent
// 0x0690 (0x0920 - 0x0290)
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0290(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x0290(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.CharacterMovementComponent.CharacterOwner
	unsigned char                                      bApplyGravityWhileJumping : 1;                            // 0x02A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02A1(0x0003) MISSED OFFSET
	float                                              GravityScale;                                             // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStepHeight;                                            // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorAngle;                                       // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x02B8(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	float                                              ProneWalkableFloorAngle;                                  // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ProneWalkableFloorZ;                                      // 0x02C4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x02D0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x02D1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1E];                                      // 0x02D2(0x001E) MISSED OFFSET
	float                                              GroundFriction;                                           // 0x02F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x02F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimSpeed;                                             // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                          // 0x0314(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	float                                              BrakingDecelerationWalking;                               // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x0324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControl;                                               // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x0338(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PronedHalfHeight;                                         // 0x033C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PronedRadius;                                             // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0344(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationRate;                                             // 0x0350(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      bUseControllerDesiredRotation : 1;                        // 0x035C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement : 1;                            // 0x035C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepWhileNavWalking : 1;                                // 0x035C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07 : 2;                                        // 0x035C(0x0001)
	unsigned char                                      bMovementInProgress : 1;                                  // 0x035C(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                         // 0x035C(0x0001) (Edit)
	unsigned char                                      bForceMaxAccel : 1;                                       // 0x035C(0x0001)
	unsigned char                                      bRunPhysicsWithNoController : 1;                          // 0x035D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck : 1;                                 // 0x035D(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bShrinkProxyCapsule : 1;                                  // 0x035D(0x0001)
	unsigned char                                      bCanWalkOffLedges : 1;                                    // 0x035D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                       // 0x035D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData08 : 2;                                        // 0x035D(0x0001)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate : 1;               // 0x035D(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                            // 0x035E(0x0001)
	unsigned char                                      UnknownData09[0x1];                                       // 0x035F(0x0001) MISSED OFFSET
	class USceneComponent*                             DeferredUpdatedMoveComponent;                             // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mass;                                                     // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnablePhysicsInteraction;                                // 0x0374(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bTouchForceScaledToMass;                                  // 0x0375(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPushForceScaledToMass;                                   // 0x0376(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPushForceUsingZOffset;                                   // 0x0377(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bScalePushForceToVelocity;                                // 0x0378(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              StandingDownwardForceScale;                               // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceBraking : 1;                                        // 0x039C(0x0001) (Deprecated)
	unsigned char                                      UnknownData11[0x3];                                       // 0x039D(0x0003) MISSED OFFSET
	float                                              CrouchedSpeedMultiplier;                                  // 0x03A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              UpperImpactNormalScale;                                   // 0x03A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FVector                                     Acceleration;                                             // 0x03A8(0x000C) (IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                                       // 0x03B4(0x000C) (IsPlainOldData)
	struct FQuat                                       LastUpdateRotation;                                       // 0x03C0(0x0010) (IsPlainOldData)
	struct FVector                                     LastUpdateVelocity;                                       // 0x03D0(0x000C) (IsPlainOldData)
	float                                              ServerLastTransformUpdateTimeStamp;                       // 0x03DC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientGoodMoveAckTime;                          // 0x03E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientAdjustmentTime;                           // 0x03E4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PendingImpulseToApply;                                    // 0x03E8(0x000C) (IsPlainOldData)
	struct FVector                                     PendingForceToApply;                                      // 0x03F4(0x000C) (IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x0400(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0404(0x0008) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometry;                             // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometryAsProxy;                      // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawn;                                 // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawnAsProxy;                          // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;           // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;           // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkRadius;                                     // 0x0434(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkHalfHeight;                                 // 0x0438(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMaxSmoothUpdateDistance;                           // 0x043C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkNoSmoothUpdateDistance;                            // 0x0440(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                     // 0x0444(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                  // 0x0448(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustments;                   // 0x044C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;    // 0x0450(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkLargeClientCorrectionDistance;                     // 0x0454(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LedgeCheckThreshold;                                      // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFindFloorResult                            CurrentFloor;                                             // 0x0460(0x0098) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                  // 0x04F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                 // 0x04F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                       // 0x04FA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x04FB(0x0001) MISSED OFFSET
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                    // 0x04FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX : 1;                                 // 0x04FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY : 1;                                 // 0x04FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                 // 0x04FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                           // 0x04FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJustTeleported : 1;                                      // 0x04FC(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      bNetworkUpdateReceived : 1;                               // 0x04FC(0x0001) (Transient)
	unsigned char                                      bNetworkMovementModeChanged : 1;                          // 0x04FC(0x0001) (Transient)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;        // 0x04FD(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bNotifyApex : 1;                                          // 0x04FD(0x0001) (Edit, BlueprintVisible, EditConst)
	unsigned char                                      bCheatFlying : 1;                                         // 0x04FD(0x0001)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x04FD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                         // 0x04FD(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData15[0x2];                                       // 0x04FE(0x0002) MISSED OFFSET
	TEnumAsByte<EStanceMode>                           StanceMode;                                               // 0x0500(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStanceMode>                           WantsToStanceMode;                                        // 0x0501(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x0502(0x0002) MISSED OFFSET
	unsigned char                                      bIgnoreBaseRotation : 1;                                  // 0x0504(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFastAttachedMove : 1;                                    // 0x0504(0x0001)
	unsigned char                                      bAlwaysCheckFloor : 1;                                    // 0x0504(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                           // 0x0504(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPerformingJumpOff : 1;                                   // 0x0504(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                              // 0x0504(0x0001)
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x0504(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                        // 0x0504(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData17[0xF];                                       // 0x0505(0x000F) MISSED OFFSET
	unsigned char                                      bHasRequestedVelocity : 1;                                // 0x0514(0x0001) (Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                           // 0x0514(0x0001) (Transient)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x0514(0x0001) (Transient)
	unsigned char                                      UnknownData18 : 2;                                        // 0x0514(0x0001)
	unsigned char                                      bProjectNavMeshWalking : 1;                               // 0x0514(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;                   // 0x0514(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData19[0x13];                                      // 0x0515(0x0013) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                             // 0x0528(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                        // 0x052C(0x000C) (Transient, IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x0548(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                                    // 0x054C(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData20[0xA0];                                      // 0x0558(0x00A0) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x05FC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                             // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x0604(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavWalkingFloorDistTolerance;                             // 0x060C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0xB0];                                      // 0x0610(0x00B0) MISSED OFFSET
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                  // 0x06C0(0x0058)
	unsigned char                                      UnknownData22[0x10];                                      // 0x0718(0x0010) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x0728(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x072C(0x0004) MISSED OFFSET
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                        // 0x0730(0x0100) (Transient)
	unsigned char                                      UnknownData24[0x90];                                      // 0x0830(0x0090) MISSED OFFSET
	struct FRootMotionMovementParams                   RootMotionParams;                                         // 0x08C0(0x0040) (Transient)
	struct FVector                                     AnimRootMotionVelocity;                                   // 0x0900(0x000C) (Transient, IsPlainOldData)
	bool                                               bWasSimulatingRootMotion;                                 // 0x090C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x090D(0x0003) MISSED OFFSET
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion : 1;            // 0x0910(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData26[0xF];                                       // 0x0911(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CharacterMovementComponent"));

		return ptr;
	}


	void STATIC_SeverAddRotationVelocity(const struct FVector& RotationVelocity);
	void STATIC_SetWalkableFloorZ(float InWalkableFloorZ);
	void STATIC_SetWalkableFloorAngle(float InWalkableFloorAngle);
	void STATIC_SetProneWalkableFloorAngle(float InWalkableFloorAngle);
	void STATIC_SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void STATIC_SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void STATIC_SetGroupsToIgnore(int GroupFlags);
	void STATIC_SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void STATIC_SetGroupsToAvoid(int GroupFlags);
	void STATIC_SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void STATIC_SetAvoidanceGroup(int GroupFlags);
	void STATIC_SetAvoidanceEnabled(bool bEnable);
	float STATIC_K2_GetWalkableFloorZ();
	float STATIC_K2_GetWalkableFloorAngle();
	float STATIC_K2_GetModifiedMaxAcceleration();
	void STATIC_K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult);
	void STATIC_K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);
	bool STATIC_IsWalking();
	bool STATIC_IsWalkable(const struct FHitResult& Hit);
	float STATIC_GetValidPerchRadius();
	float STATIC_GetPerchRadiusThreshold();
	class UPrimitiveComponent* STATIC_GetMovementBase();
	float STATIC_GetMaxJumpHeightWithJumpTime();
	float STATIC_GetMaxJumpHeight();
	float STATIC_GetMaxBrakingDeceleration();
	float STATIC_GetMaxAcceleration();
	struct FVector STATIC_GetImpartedMovementBaseVelocity();
	struct FVector STATIC_GetCurrentAcceleration();
	class ACharacter* STATIC_GetCharacterOwner();
	float STATIC_GetAnalogInputModifier();
	void STATIC_DisableMovement();
	void STATIC_ClearAccumulatedForces();
	void STATIC_CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void STATIC_CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void STATIC_AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void STATIC_AddForce(const struct FVector& force);
};


// Class Engine.DamageType
// 0x0018 (0x0048 - 0x0030)
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                       // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bScaleMomentumByMass : 1;                                 // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRadialDamageVelChange : 1;                               // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              DamageImpulse;                                            // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleImpulse;                                      // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                            // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DamageType"));

		return ptr;
	}

};


// Class Engine.SkeletalMeshActor
// 0x0088 (0x0470 - 0x03E8)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	unsigned char                                      bShouldDoAnimNotifies : 1;                                // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWakeOnLevelStart : 1;                                    // 0x03F0(0x0001) (Deprecated)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x0400(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x0408(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial0;                                      // 0x0410(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial1;                                      // 0x0418(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0420(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshActor"));

		return ptr;
	}


	void STATIC_OnRep_ReplicatedPhysAsset();
	void STATIC_OnRep_ReplicatedMesh();
	void STATIC_OnRep_ReplicatedMaterial1();
	void STATIC_OnRep_ReplicatedMaterial0();
};


// Class Engine.EngineTypes
// 0x0000 (0x0030 - 0x0030)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EngineTypes"));

		return ptr;
	}

};


// Class Engine.EngineBaseTypes
// 0x0000 (0x0030 - 0x0030)
class UEngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EngineBaseTypes"));

		return ptr;
	}

};


// Class Engine.EdGraphNode
// 0x0078 (0x00A8 - 0x0030)
class UEdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                           // 0x0040(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                 // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodePosY;                                                 // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeWidth;                                                // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeHeight;                                               // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasCompilerMessage : 1;                                  // 0x0060(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	struct FString                                     NodeComment;                                              // 0x0068(0x0010) (ZeroConstructor)
	bool                                               bCommentBubblePinned;                                     // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCommentBubbleVisible;                                    // 0x0079(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCommentBubbleMakeVisible;                                // 0x007A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x007B(0x0001) MISSED OFFSET
	int                                                ErrorType;                                                // 0x007C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     ErrorMsg;                                                 // 0x0080(0x0010) (ZeroConstructor)
	struct FGuid                                       NodeGuid;                                                 // 0x0090(0x0010) (IsPlainOldData)
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                       // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData)
	ENodeEnabledState                                  EnabledState;                                             // 0x00A1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUserSetEnabledState;                                     // 0x00A2(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsNodeEnabled;                                           // 0x00A3(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EdGraphNode"));

		return ptr;
	}

};


// Class Engine.EdGraphPin_Deprecated
// 0x0118 (0x0148 - 0x0030)
class UEdGraphPin_Deprecated : public UObject
{
public:
	struct FString                                     PinName;                                                  // 0x0030(0x0010) (ZeroConstructor)
	struct FString                                     PinToolTip;                                               // 0x0040(0x0010) (ZeroConstructor)
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FEdGraphPinType                             PinType;                                                  // 0x0058(0x0080)
	struct FString                                     DefaultValue;                                             // 0x00D8(0x0010) (ZeroConstructor)
	struct FString                                     AutogeneratedDefaultValue;                                // 0x00E8(0x0010) (ZeroConstructor)
	class UObject*                                     DefaultObject;                                            // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FText                                       DefaultTextValue;                                         // 0x0100(0x0018)
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                 // 0x0118(0x0010) (ZeroConstructor)
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                  // 0x0128(0x0010) (ZeroConstructor)
	class UEdGraphPin_Deprecated*                      ParentPin;                                                // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                           // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EdGraphPin_Deprecated"));

		return ptr;
	}

};


// Class Engine.Interface_AssetUserData
// 0x0000 (0x0030 - 0x0030)
class UInterface_AssetUserData : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Interface_AssetUserData"));

		return ptr;
	}

};


// Class Engine.ChildActorComponent
// 0x0030 (0x04E0 - 0x04B0)
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                          // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ChildActor;                                               // 0x04B8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ChildActorTemplate;                                       // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x04C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ChildActorComponent"));

		return ptr;
	}


	void STATIC_SetChildActorClass(class UClass* InClass);
};


// Class Engine.Level
// 0x0310 (0x0340 - 0x0030)
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                            // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01 : 2;                                        // 0x0048(0x0001)
	unsigned char                                      bTextureStreamingRotationChanged : 1;                     // 0x0048(0x0001)
	unsigned char                                      bIsVisible : 1;                                           // 0x0048(0x0001) (Transient)
	unsigned char                                      bLocked : 1;                                              // 0x0048(0x0001)
	unsigned char                                      bIgnoreGridShadowDirtyTest : 1;                           // 0x0048(0x0001)
	unsigned char                                      UnknownData02[0x1F];                                      // 0x0049(0x001F) MISSED OFFSET
	class ANavigationObjectBase*                       NavListStart;                                             // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0070(0x0008) MISSED OFFSET
	class ANavigationObjectBase*                       NavListEnd;                                               // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	class ULevelActorContainer*                        ActorCluster;                                             // 0x0088(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UModel*                                      Model;                                                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x40];                                      // 0x0098(0x0040) MISSED OFFSET
	unsigned char                                      UnknownData06[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.Level.OwningWorld
	float                                              ShadowmapTotalSize;                                       // 0x00E0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x44];                                      // 0x00E4(0x0044) MISSED OFFSET
	TArray<struct FGuid>                               StreamingTextureGuids;                                    // 0x0128(0x0010) (ZeroConstructor)
	int                                                NumTextureStreamingDirtyResources;                        // 0x0138(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	class UMapBuildDataRegistry*                       MapBuildData;                                             // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsLightingScenario;                                      // 0x0148(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x77];                                      // 0x0149(0x0077) MISSED OFFSET
	TArray<struct FVector>                             StaticNavigableGeometry;                                  // 0x01C0(0x0010) (ZeroConstructor)
	TArray<class UModelComponent*>                     ModelComponents;                                          // 0x01D0(0x0010) (ExportObject, ZeroConstructor)
	int                                                NumTextureStreamingUnbuiltComponents;                     // 0x01E0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7C];                                      // 0x01E4(0x007C) MISSED OFFSET
	class ALevelScriptActor*                           LevelScriptActor;                                         // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FIntVector                                  LightBuildLevelOffset;                                    // 0x0268(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0274(0x0008) MISSED OFFSET
	struct FGuid                                       LevelBuildDataId;                                         // 0x027C(0x0010) (IsPlainOldData)
	float                                              LightmapTotalSize;                                        // 0x028C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData12[0x80];                                      // 0x0290(0x0080) MISSED OFFSET
	class AWorldSettings*                              WorldSettings;                                            // 0x0310(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0318(0x0008) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0320(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0330(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Level"));

		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x03F0 - 0x03E8)
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AmbientSound"));

		return ptr;
	}


	void STATIC_Stop();
	void STATIC_Play(float StartTime);
	void STATIC_FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void STATIC_FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void STATIC_AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};


// Class Engine.Brush
// 0x0038 (0x0420 - 0x03E8)
class ABrush : public AActor
{
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                // 0x03E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x03EC(0x0004) (IsPlainOldData)
	int                                                PolyFlags;                                                // 0x03F0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bColored : 1;                                             // 0x03F4(0x0001)
	unsigned char                                      bSolidWhenSelected : 1;                                   // 0x03F4(0x0001)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                           // 0x03F4(0x0001)
	unsigned char                                      bNotForClientOrServer : 1;                                // 0x03F4(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F5(0x0003) MISSED OFFSET
	class UModel*                                      Brush;                                                    // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBrushComponent*                             BrushComponent;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bInManipulation : 1;                                      // 0x0408(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x0410(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Brush"));

		return ptr;
	}

};


// Class Engine.BrushShape
// 0x0000 (0x0420 - 0x0420)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BrushShape"));

		return ptr;
	}

};


// Class Engine.Volume
// 0x0000 (0x0420 - 0x0420)
class AVolume : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Volume"));

		return ptr;
	}

};


// Class Engine.AudioVolume
// 0x0048 (0x0468 - 0x0420)
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0424(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0425(0x0003) MISSED OFFSET
	struct FReverbSettings                             Settings;                                                 // 0x0428(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FInteriorSettings                           AmbientZoneSettings;                                      // 0x0440(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0464(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AudioVolume"));

		return ptr;
	}


	void STATIC_SetReverbSettings(const struct FReverbSettings& NewReverbSettings);
	void STATIC_SetPriority(float NewPriority);
	void STATIC_SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);
	void STATIC_SetEnabled(bool bNewEnabled);
	void STATIC_OnRep_bEnabled();
};


// Class Engine.BlockingVolume
// 0x0000 (0x0420 - 0x0420)
class ABlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlockingVolume"));

		return ptr;
	}

};


// Class Engine.CameraBlockingVolume
// 0x0000 (0x0420 - 0x0420)
class ACameraBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraBlockingVolume"));

		return ptr;
	}

};


// Class Engine.CullDistanceVolume
// 0x0028 (0x0448 - 0x0420)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x0420(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                             // 0x0430(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              CullDistanceForLODActor;                                  // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CullDistanceForLODActorTooFar;                            // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseActorBound;                                           // 0x043C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x043D(0x0003) MISSED OFFSET
	float                                              IgnoreActorBoundSize;                                     // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0444(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CullDistanceVolume"));

		return ptr;
	}

};


// Class Engine.BlendableInterface
// 0x0000 (0x0030 - 0x0030)
class UBlendableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BlendableInterface"));

		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x0030 - 0x0030)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Scene"));

		return ptr;
	}

};


// Class Engine.IndoorLightVolume
// 0x0008 (0x0428 - 0x0420)
class AIndoorLightVolume : public AVolume
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0420(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	EIndoorLightVolumeShape                            VolumeShape;                                              // 0x0424(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0425(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.IndoorLightVolume"));

		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x0438 - 0x0420)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                      // 0x0420(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                    // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisabled : 1;                                            // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                           // 0x0434(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0435(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingVolume"));

		return ptr;
	}

};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x0420 - 0x0420)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightmassCharacterIndirectDetailVolume"));

		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0420 - 0x0420)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightmassImportanceVolume"));

		return ptr;
	}

};


// Class Engine.MeshMergeCullingVolume
// 0x0000 (0x0420 - 0x0420)
class AMeshMergeCullingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MeshMergeCullingVolume"));

		return ptr;
	}

};


// Class Engine.NavigationQueryFilter
// 0x0020 (0x0050 - 0x0030)
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>               Areas;                                                    // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FNavigationFilterFlags                      IncludeFlags;                                             // 0x0040(0x0004) (Edit, IsPlainOldData)
	struct FNavigationFilterFlags                      ExcludeFlags;                                             // 0x0044(0x0004) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationQueryFilter"));

		return ptr;
	}

};


// Class Engine.NavigationTypes
// 0x0000 (0x0030 - 0x0030)
class UNavigationTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationTypes"));

		return ptr;
	}

};


// Class Engine.NavMeshBoundsVolume
// 0x0008 (0x0428 - 0x0420)
class ANavMeshBoundsVolume : public AVolume
{
public:
	struct FNavAgentSelector                           SupportedAgents;                                          // 0x0420(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavMeshBoundsVolume"));

		return ptr;
	}

};


// Class Engine.NavRelevantInterface
// 0x0000 (0x0030 - 0x0030)
class UNavRelevantInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavRelevantInterface"));

		return ptr;
	}

};


// Class Engine.NavArea
// 0x0018 (0x0048 - 0x0030)
class UNavArea : public UObject
{
public:
	float                                              DefaultCost;                                              // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              FixedAreaEnteringCost;                                    // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0038(0x0004) (Edit, Config, IsPlainOldData)
	struct FNavAgentSelector                           SupportedAgents;                                          // 0x003C(0x0004) (Edit, Config)
	unsigned char                                      bSupportsAgent0 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent1 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent2 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent3 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent4 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent5 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent6 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent7 : 1;                                      // 0x0040(0x0001) (Config)
	unsigned char                                      bSupportsAgent8 : 1;                                      // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent9 : 1;                                      // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent10 : 1;                                     // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent11 : 1;                                     // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent12 : 1;                                     // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent13 : 1;                                     // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent14 : 1;                                     // 0x0041(0x0001) (Config)
	unsigned char                                      bSupportsAgent15 : 1;                                     // 0x0041(0x0001) (Config)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0042(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavArea"));

		return ptr;
	}

};


// Class Engine.NavModifierVolume
// 0x0010 (0x0430 - 0x0420)
class ANavModifierVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	class UClass*                                      AreaClass;                                                // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavModifierVolume"));

		return ptr;
	}


	void STATIC_SetAreaClass(class UClass* NewAreaClass);
};


// Class Engine.PhysicsVolume
// 0x0018 (0x0438 - 0x0420)
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                         // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Priority;                                                 // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FluidFriction;                                            // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWaterVolume : 1;                                         // 0x042C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPhysicsOnContact : 1;                                    // 0x042C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x042D(0x0003) MISSED OFFSET
	bool                                               bIsIncorrectVolumeSize;                                   // 0x0430(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0431(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsVolume"));

		return ptr;
	}

};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0438 - 0x0438)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DefaultPhysicsVolume"));

		return ptr;
	}

};


// Class Engine.KillZVolume
// 0x0000 (0x0438 - 0x0438)
class AKillZVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KillZVolume"));

		return ptr;
	}

};


// Class Engine.PainCausingVolume
// 0x0028 (0x0460 - 0x0438)
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                         // 0x0438(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                             // 0x043C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PainInterval;                                             // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEntryPain : 1;                                           // 0x044C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      BACKUP_bPainCausing : 1;                                  // 0x044C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x044D(0x0003) MISSED OFFSET
	class AController*                                 DamageInstigator;                                         // 0x0450(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PainCausingVolume"));

		return ptr;
	}

};


// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0030 - 0x0030)
class UInterface_PostProcessVolume : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Interface_PostProcessVolume"));

		return ptr;
	}

};


// Class Engine.PostProcessVolume
// 0x0590 (0x09B0 - 0x0420)
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0420(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x0430(0x0570) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x09A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x09A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x09A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x09AC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x09AC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x09AD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PostProcessVolume"));

		return ptr;
	}


	void STATIC_UpdateBlendableByIndex(int Index, float InWeight);
	void STATIC_AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x0450 - 0x0420)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                    // 0x0420(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                                  // 0x0430(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                  // 0x0440(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PrecomputedVisibilityOverrideVolume"));

		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x0420 - 0x0420)
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PrecomputedVisibilityVolume"));

		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x0420 - 0x0420)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TriggerVolume"));

		return ptr;
	}

};


// Class Engine.CameraActor
// 0x05A8 (0x0990 - 0x03E8)
class ACameraActor : public AActor
{
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                    // 0x03E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET
	class UCameraComponent*                            CameraComponent;                                          // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0400(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x0408(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                              // 0x040C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FOVAngle;                                                 // 0x0410(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x0414(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0420(0x0570) (Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraActor"));

		return ptr;
	}


	int STATIC_GetAutoActivatePlayerIndex();
};


// Class Engine.NavAgentInterface
// 0x0000 (0x0030 - 0x0030)
class UNavAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavAgentInterface"));

		return ptr;
	}

};


// Class Engine.CameraShake
// 0x0140 (0x0170 - 0x0030)
class UCameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              OscillationDuration;                                      // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OscillationBlendInTime;                                   // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OscillationBlendOutTime;                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FROscillator                                RotOscillation;                                           // 0x0040(0x0024) (Edit)
	struct FVOscillator                                LocOscillation;                                           // 0x0064(0x0024) (Edit)
	struct FFOscillator                                FOVOscillation;                                           // 0x0088(0x000C) (Edit)
	float                                              AnimPlayRate;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimScale;                                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAnimSegmentDuration;                                // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCameraAnim*                                 Anim;                                                     // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomAnimSegment : 1;                                   // 0x00B0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x17];                                      // 0x00B1(0x0017) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                              // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x88];                                      // 0x00D0(0x0088) MISSED OFFSET
	float                                              ShakeScale;                                               // 0x0158(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              OscillatorTimeRemaining;                                  // 0x015C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UCameraAnimInst*                             AnimInst;                                                 // 0x0160(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0168(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraShake"));

		return ptr;
	}


	void STATIC_ReceiveStopShake(bool bImmediately);
	void STATIC_ReceivePlayShake(float Scale);
	bool STATIC_ReceiveIsFinished();
	void STATIC_BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
};


// Class Engine.PlayerCameraManager
// 0x18C8 (0x1CB0 - 0x03E8)
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x03E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	struct FTViewTarget                                PendingViewTarget;                                        // 0x0400(0x05D0) (Transient)
	float                                              ViewRollMin;                                              // 0x09D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultAspectRatio;                                       // 0x09D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x09D8(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                        // 0x09DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x09E0(0x0004) MISSED OFFSET
	struct FVector                                     ViewTargetOffset;                                         // 0x09E4(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                     // 0x09F0(0x05C0) (Transient)
	struct FTViewTarget                                ViewTarget;                                               // 0x0FB0(0x05D0) (Transient)
	struct FVector                                     FreeCamOffset;                                            // 0x1580(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x158C(0x0010) MISSED OFFSET
	float                                              DefaultFOV;                                               // 0x159C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2C];                                      // 0x15A0(0x002C) MISSED OFFSET
	float                                              ViewRollMax;                                              // 0x15CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x15D0(0x0008) MISSED OFFSET
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x15D8(0x0010) (ZeroConstructor, Transient)
	float                                              FreeCamDistance;                                          // 0x15E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x15EC(0x0004) MISSED OFFSET
	float                                              ViewYawMin;                                               // 0x15F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMin;                                             // 0x15F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x18];                                      // 0x15F8(0x0018) MISSED OFFSET
	TArray<class UClass*>                              DefaultModifiers;                                         // 0x1610(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                        // 0x1620(0x0010) (ZeroConstructor, Transient)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                     // 0x1630(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x1638(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                    // 0x1678(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x10];                                      // 0x1688(0x0010) MISSED OFFSET
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x1698(0x0010) (ZeroConstructor, Transient)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x16A8(0x0010) (ZeroConstructor, Transient)
	class ACameraActor*                                AnimCameraActor;                                          // 0x16B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsOrthographic : 1;                                      // 0x16C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDefaultConstrainAspectRatio : 1;                         // 0x16C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData09 : 5;                                        // 0x16C0(0x0001)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                          // 0x16C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x1F];                                      // 0x16C1(0x001F) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCache;                                              // 0x16E0(0x05C0) (Transient)
	float                                              ViewYawMax;                                               // 0x1CA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x1CA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x1CA8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlayerCameraManager"));

		return ptr;
	}


	void STATIC_StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately);
	void STATIC_StopCameraFade();
	void STATIC_StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void STATIC_StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);
	void STATIC_StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void STATIC_StopAllCameraShakes(bool bImmediately);
	void STATIC_StopAllCameraAnims(bool bImmediate);
	void STATIC_StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void STATIC_SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	bool STATIC_RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void STATIC_RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraShake* STATIC_PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraAnimInst* STATIC_PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void STATIC_PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void STATIC_OnPhotographySessionStart();
	void STATIC_OnPhotographySessionEnd();
	void STATIC_OnPhotographyMultiPartCaptureStart();
	void STATIC_OnPhotographyMultiPartCaptureEnd();
	class APlayerController* STATIC_GetOwningPlayerController();
	float STATIC_GetFOVAngle();
	bool STATIC_GetForceShowUnderwaterPPVehicle();
	bool STATIC_GetForceShowUnderwaterPPOcean();
	bool STATIC_GetForceShowUnderwaterPP();
	struct FRotator STATIC_GetCameraRotation();
	struct FVector STATIC_GetCameraLocation();
	class UCameraModifier* STATIC_FindCameraModifierByClass(class UClass* ModifierClass);
	void STATIC_ClearCameraLensEffects();
	bool STATIC_BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UCameraModifier* STATIC_AddNewCameraModifier(class UClass* ModifierClass);
	class AEmitterCameraLensEffectBase* STATIC_AddCameraLensEffect(class UClass* LensEffectEmitterClass);
};


// Class Engine.InputComponent
// 0x0080 (0x0280 - 0x0200)
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0200(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class Engine.CurveBase
// 0x0008 (0x0038 - 0x0030)
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveBase"));

		return ptr;
	}

};


// Class Engine.CurveFloat
// 0x0078 (0x00B0 - 0x0038)
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                               // 0x0038(0x0070)
	bool                                               bIsEventCurve;                                            // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveFloat"));

		return ptr;
	}


	float STATIC_GetFloatValue(float InTime);
	float STATIC_GetDerivative(float InTime);
};


// Class Engine.ForceFeedbackEffect
// 0x0018 (0x0048 - 0x0030)
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                           // 0x0030(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                 // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackEffect"));

		return ptr;
	}

};


// Class Engine.PlayerController
// 0x02E0 (0x0750 - 0x0470)
class APlayerController : public AController
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0470(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.PlayerController.Player
	unsigned char                                      UnknownData01[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData02[0x8];                                       // 0x0478(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.PlayerController.AcknowledgedPawn
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                  // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0490(0x0008) MISSED OFFSET
	class AHUD*                                        MyHUD;                                                    // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData)
	class APlayerCameraManager*                        PlayerCameraManager;                                      // 0x04A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PlayerCameraManagerClass;                                 // 0x04A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoManageActiveCameraTarget;                            // 0x04B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	struct FRotator                                    TargetViewRotation;                                       // 0x04B4(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x04C0(0x000C) MISSED OFFSET
	float                                              SmoothTargetViewRotationSpeed;                            // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              HiddenActors;                                             // 0x04D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x4];                                       // 0x04E0(0x0004) MISSED OFFSET
	float                                              LastSpectatorStateSynchTime;                              // 0x04E4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastSpectatorSyncLocation;                                // 0x04E8(0x000C) (Transient, IsPlainOldData)
	struct FRotator                                    LastSpectatorSyncRotation;                                // 0x04F4(0x000C) (Transient, IsPlainOldData)
	int                                                ClientCap;                                                // 0x0500(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0504(0x0004) MISSED OFFSET
	class UCheatManager*                               CheatManager;                                             // 0x0508(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      CheatClass;                                               // 0x0510(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPlayerInput*                                PlayerInput;                                              // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                               // 0x0520(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x90];                                      // 0x0530(0x0090) MISSED OFFSET
	unsigned char                                      UnknownData09 : 3;                                        // 0x05C0(0x0001)
	unsigned char                                      bPlayerIsWaiting : 1;                                     // 0x05C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData10[0x3];                                       // 0x05C1(0x0003) MISSED OFFSET
	unsigned char                                      NetPlayerIndex;                                           // 0x05C4(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3B];                                      // 0x05C5(0x003B) MISSED OFFSET
	class UNetConnection*                              PendingSwapConnection;                                    // 0x0600(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	class UNetConnection*                              NetConnection;                                            // 0x0608(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData12[0xC];                                       // 0x0610(0x000C) MISSED OFFSET
	float                                              InputYawScale;                                            // 0x061C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputPitchScale;                                          // 0x0620(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputRollScale;                                           // 0x0624(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                                     // 0x0628(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableClickEvents : 1;                                   // 0x0628(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchEvents : 1;                                   // 0x0628(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableMouseOverEvents : 1;                               // 0x0628(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchOverEvents : 1;                               // 0x0628(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceFeedbackEnabled : 1;                                // 0x0628(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0629(0x0007) MISSED OFFSET
	TArray<struct FKey>                                ClickEventKeys;                                           // 0x0630(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                       // 0x0640(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                       // 0x0641(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                 // 0x0642(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                 // 0x0643(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitResultTraceDistance;                                   // 0x0644(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x80];                                      // 0x0648(0x0080) MISSED OFFSET
	class UInputComponent*                             InactiveStateInputComponent;                              // 0x06C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData15 : 3;                                        // 0x06D0(0x0001)
	unsigned char                                      bShouldPerformFullTickWhenPaused : 1;                     // 0x06D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData16[0x17];                                      // 0x06D1(0x0017) MISSED OFFSET
	class UTouchInterface*                             CurrentTouchInterface;                                    // 0x06E8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x40];                                      // 0x06F0(0x0040) MISSED OFFSET
	class ASpectatorPawn*                              SpectatorPawn;                                            // 0x0730(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     SpawnLocation;                                            // 0x0738(0x000C) (Net, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0744(0x0004) MISSED OFFSET
	bool                                               bIsLocalPlayerController;                                 // 0x0748(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x1];                                       // 0x0749(0x0001) MISSED OFFSET
	uint16_t                                           SeamlessTravelCount;                                      // 0x074A(0x0002) (ZeroConstructor, IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                         // 0x074C(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x2];                                       // 0x074E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlayerController"));

		return ptr;
	}


	bool STATIC_WasInputKeyJustReleased(const struct FKey& Key);
	bool STATIC_WasInputKeyJustPressed(const struct FKey& Key);
	void STATIC_ToggleSpeaking(bool bInSpeaking);
	void STATIC_SwitchLevel(const struct FString& URL);
	void STATIC_StopHapticEffect(EControllerHand Hand);
	void STATIC_StartFire(unsigned char FireModeNum);
	void STATIC_SetVirtualJoystickVisibility(bool bVisible);
	void STATIC_SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void STATIC_SetName(const struct FString& S);
	void STATIC_SetMouseLocation(int X, int Y);
	void STATIC_SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);
	void STATIC_SetControllerLightColor(const struct FColor& Color);
	void STATIC_SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void STATIC_SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void STATIC_ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void STATIC_ServerViewPrevPlayer();
	void STATIC_ServerViewNextPlayer();
	void STATIC_ServerVerifyViewTarget();
	void STATIC_ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities);
	void STATIC_ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void STATIC_ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void STATIC_ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ServerToggleAILogging();
	void STATIC_ServerShortTimeout();
	void STATIC_ServerSetSpectatorWaiting(bool bWaiting);
	void STATIC_ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void STATIC_ServerRestartPlayer();
	void STATIC_ServerPause();
	void STATIC_ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void STATIC_ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ServerCheckClientPossessionReliable();
	void STATIC_ServerCheckClientPossession();
	void STATIC_ServerChangeName(const struct FString& S);
	void STATIC_ServerCamera(const struct FName& NewMode);
	void STATIC_ServerAcknowledgePossession(class APawn* P);
	void STATIC_SendToConsole(const struct FString& Command);
	void STATIC_RestartLevel();
	bool STATIC_ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void STATIC_PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);
	void STATIC_PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void STATIC_Pause();
	void STATIC_OnServerStartedVisualLogger(bool bIsLogging);
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_LocalTravel(const struct FString& URL);
	bool STATIC_IsInputKeyDown(const struct FKey& Key);
	void STATIC_IncDISPSharpness();
	void STATIC_GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* STATIC_GetSpectatorPawn();
	bool STATIC_GetMousePosition(float* LocationX, float* LocationY);
	struct FVector STATIC_GetInputVectorKeyState(const struct FKey& Key);
	void STATIC_GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void STATIC_GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void STATIC_GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float STATIC_GetInputKeyTimeDown(const struct FKey& Key);
	void STATIC_GetInputAnalogStickStateRaw(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	void STATIC_GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float STATIC_GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* STATIC_GetHUD();
	bool STATIC_GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector STATIC_GetFocalLocation();
	void STATIC_FOV(float NewFOV);
	void STATIC_EnableTAA();
	void STATIC_EnableDLSS();
	void STATIC_EnableCheats();
	bool STATIC_DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool STATIC_DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void STATIC_DecDISPSharpness();
	void STATIC_ConsoleKey(const struct FKey& Key);
	void STATIC_ClientWasKicked(const struct FText& KickReason);
	void STATIC_ClientVoiceHandshakeComplete();
	void STATIC_ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses);
	void STATIC_ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void STATIC_ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ClientTravelInternal(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void STATIC_ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void STATIC_ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void STATIC_ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void STATIC_ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void STATIC_ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void STATIC_ClientStartOnlineSession();
	void STATIC_ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void STATIC_ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void STATIC_ClientSetSpectatorWaiting(bool bWaiting);
	void STATIC_ClientSetHUD(const struct FString& InHUDClass);
	void STATIC_ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void STATIC_ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void STATIC_ClientSetCameraMode(const struct FName& NewCamMode);
	void STATIC_ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void STATIC_ClientSetBlockOnAsyncLoading();
	void STATIC_ClientReturnToMainMenu(const struct FString& ReturnReason);
	void STATIC_ClientRetryClientRestart(class APawn* NewPawn);
	void STATIC_ClientRestart(class APawn* NewPawn);
	void STATIC_ClientReset();
	void STATIC_ClientRepObjRef(class UObject* Object);
	void STATIC_ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState02, class UObject* OptionalObject);
	void STATIC_ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void STATIC_ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void STATIC_ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void STATIC_ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void STATIC_ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void STATIC_ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void STATIC_ClientIgnoreMoveInput(bool bIgnore);
	void STATIC_ClientIgnoreLookInput(bool bIgnore);
	void STATIC_ClientGotoState(const struct FName& NewState);
	void STATIC_ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void STATIC_ClientForceGarbageCollection();
	void STATIC_ClientFlushLevelStreaming();
	void STATIC_ClientEndOnlineSession();
	void STATIC_ClientEnableNetworkVoice(bool bEnable);
	void STATIC_ClientCommitMapChange();
	void STATIC_ClientClearCameraLensEffects();
	void STATIC_ClientCapBandwidth(int Cap);
	void STATIC_ClientCancelPendingMapChange();
	void STATIC_ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void STATIC_ClearAudioListenerOverride();
	void STATIC_Camera(const struct FName& NewMode);
	void STATIC_AddYawInput(float Val);
	void STATIC_AddRollInput(float Val);
	void STATIC_AddPitchInput(float Val);
	void STATIC_ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class Engine.DebugCameraController
// 0x0048 (0x0798 - 0x0750)
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                                    // 0x0750(0x0001) (Config, GlobalConfig)
	unsigned char                                      bIsFrozenRendering : 1;                                   // 0x0750(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0751(0x0007) MISSED OFFSET
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0758(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0760(0x0020) MISSED OFFSET
	float                                              SpeedScale;                                               // 0x0780(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialMaxSpeed;                                          // 0x0784(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialAccel;                                             // 0x0788(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialDecel;                                             // 0x078C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0790(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraController"));

		return ptr;
	}


	void STATIC_ToggleDisplay();
	void STATIC_ShowDebugSelectedInfo();
	void STATIC_SetPawnMovementSpeedScale(float NewSpeedScale);
	void STATIC_ReceiveOnDeactivate(class APlayerController* RestoredPC);
	void STATIC_ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit);
	void STATIC_ReceiveOnActivate(class APlayerController* OriginalPC);
	class AActor* STATIC_GetSelectedActor();
};


// Class Engine.DecalActor
// 0x0008 (0x03F0 - 0x03E8)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                    // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DecalActor"));

		return ptr;
	}


	void STATIC_SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* STATIC_GetDecalMaterial();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance();
};


// Class Engine.DestructibleActor
// 0x0020 (0x0408 - 0x03E8)
class ADestructibleActor : public AActor
{
public:
	class UDestructibleComponent*                      DestructibleComponent;                                    // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAffectNavigation : 1;                                    // 0x03F0(0x0001) (Edit, BlueprintVisible, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActorFracture;                                          // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DestructibleActor"));

		return ptr;
	}

};


// Class Engine.DistanceFieldCapture
// 0x0008 (0x03F0 - 0x03E8)
class ADistanceFieldCapture : public AActor
{
public:
	class UDistanceFieldCaptureComponent*              CaptureComponent;                                         // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistanceFieldCapture"));

		return ptr;
	}

};


// Class Engine.DocumentationActor
// 0x0008 (0x03F0 - 0x03E8)
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DocumentationActor"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.Emitter
// 0x0050 (0x0438 - 0x03E8)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish : 1;                               // 0x03F0(0x0001)
	unsigned char                                      bPostUpdateTickGroup : 1;                                 // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCurrentlyActive : 1;                                     // 0x03F0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Emitter"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void STATIC_SetTemplate(class UParticleSystem* NewTemplate);
	void STATIC_SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void STATIC_SetFloatParameter(const struct FName& ParameterName, float Param);
	void STATIC_SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void STATIC_SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void STATIC_OnRep_bCurrentlyActive();
	void STATIC_OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool STATIC_IsActive();
	void STATIC_Deactivate();
	void STATIC_Activate();
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0068 (0x04A0 - 0x0438)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                          // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                         // 0x0440(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class APlayerCameraManager*                        BaseCamera;                                               // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTransform                                  RelativeTransform;                                        // 0x0450(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseFOV;                                                  // 0x0480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances : 1;                              // 0x0484(0x0001) (Edit)
	unsigned char                                      bResetWhenRetriggered : 1;                                // 0x0484(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0485(0x0003) MISSED OFFSET
	TArray<class UClass*>                              EmittersToTreatAsSame;                                    // 0x0488(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DistFromCamera;                                           // 0x0498(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x049C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EmitterCameraLensEffectBase"));

		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x04D0 - 0x04D0)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraHUD"));

		return ptr;
	}


	void STATIC_ShowHUD();
	void STATIC_ShowDebugToggleSubCategory(const struct FName& Category);
	void STATIC_ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void STATIC_ShowDebug(const struct FName& DebugType);
	void STATIC_RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void STATIC_RemoveAllDebugStrings();
	void STATIC_ReceiveHitBoxRelease(const struct FName& BoxName);
	void STATIC_ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void STATIC_ReceiveHitBoxClick(const struct FName& BoxName);
	void STATIC_ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void STATIC_ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector STATIC_Project(const struct FVector& Location);
	void STATIC_GetTextSize(const struct FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight);
	class APlayerController* STATIC_GetOwningPlayerController();
	class APawn* STATIC_GetOwningPawn();
	void STATIC_GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors);
	void STATIC_DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void STATIC_DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void STATIC_DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void STATIC_DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void STATIC_DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void STATIC_DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void STATIC_DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void STATIC_DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void STATIC_Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void STATIC_AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void STATIC_AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};


// Class Engine.Info
// 0x0000 (0x03E8 - 0x03E8)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Info"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.AtmosphericFog
// 0x0008 (0x03F0 - 0x03E8)
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                  // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AtmosphericFog"));

		return ptr;
	}

};


// Class Engine.ExponentialHeightFog
// 0x0010 (0x03F8 - 0x03E8)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x03F0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ExponentialHeightFog"));

		return ptr;
	}


	void STATIC_OnRep_bEnabled();
};


// Class Engine.GameModeBase
// 0x00A0 (0x0488 - 0x03E8)
class AGameModeBase : public AInfo
{
public:
	struct FString                                     OptionsString;                                            // 0x03E8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      GameSessionClass;                                         // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameStateClass;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PlayerControllerClass;                                    // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PlayerStateClass;                                         // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	struct FStringClassReference                       HUDClass;                                                 // 0x0418(0x0010) (Edit, BlueprintVisible)
	class UClass*                                      DefaultPawnClass;                                         // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       SpectatorClass;                                           // 0x0430(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                     // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class AGameSession*                                GameSession;                                              // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameStateBase*                              GameState;                                                // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FText                                       DefaultPlayerName;                                        // 0x0458(0x0018) (Edit)
	unsigned char                                      bUseSeamlessTravel : 1;                                   // 0x0470(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStartPlayersAsSpectators : 1;                            // 0x0470(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPauseable : 1;                                           // 0x0470(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0471(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameModeBase"));

		return ptr;
	}


	void STATIC_StartPlay();
	class APawn* STATIC_SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	class APawn* STATIC_SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	bool STATIC_ShouldReset(class AActor* ActorToReset);
	void STATIC_ReturnToMainMenuHost();
	void STATIC_RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);
	void STATIC_RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);
	void STATIC_RestartPlayer(class AController* NewPlayer);
	void STATIC_ResetLevel();
	bool STATIC_PlayerCanRestart(class APlayerController* Player);
	bool STATIC_MustSpectate(class APlayerController* NewPlayerController);
	void STATIC_K2_PostLogin(class APlayerController* NewPlayer);
	void STATIC_K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void STATIC_K2_OnRestartPlayer(class AController* NewPlayer);
	void STATIC_K2_OnLogout(class AController* ExitingController);
	void STATIC_K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange);
	class AActor* STATIC_K2_FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	void STATIC_InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	void STATIC_InitializeHUDForPlayer(class APlayerController* NewPlayer);
	bool STATIC_HasMatchStarted();
	void STATIC_HandleStartingNewPlayer(class APlayerController* NewPlayer);
	int STATIC_GetNumSpectators();
	int STATIC_GetNumPlayers();
	class UClass* STATIC_GetDefaultPawnClassForController(class AController* InController);
	class AActor* STATIC_FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	class AActor* STATIC_ChoosePlayerStart(class AController* Player);
	void STATIC_ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange);
	bool STATIC_CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
};


// Class Engine.GameMode
// 0x0040 (0x04C8 - 0x0488)
class AGameMode : public AGameModeBase
{
public:
	struct FName                                       MatchState;                                               // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDelayedStart : 1;                                        // 0x0490(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0491(0x0003) MISSED OFFSET
	int                                                NumSpectators;                                            // 0x0494(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumPlayers;                                               // 0x0498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumBots;                                                  // 0x049C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinRespawnDelay;                                          // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumTravellingPlayers;                                     // 0x04A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EngineMessageClass;                                       // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class APlayerState*>                        InactivePlayerArray;                                      // 0x04B0(0x0010) (ZeroConstructor)
	float                                              InactivePlayerStateLifeSpan;                              // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHandleDedicatedServerReplays;                            // 0x04C4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameMode"));

		return ptr;
	}


	void STATIC_StartMatch();
	void STATIC_SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_RestartGame();
	bool STATIC_ReadyToStartMatch();
	bool STATIC_ReadyToEndMatch();
	void STATIC_K2_OnSetMatchState(const struct FName& NewState);
	bool STATIC_IsMatchInProgress();
	bool STATIC_HasMatchEnded();
	struct FName STATIC_GetMatchState();
	void STATIC_EndMatch();
	void STATIC_AbortMatch();
};


// Class Engine.GameNetworkManager
// 0x0088 (0x0470 - 0x03E8)
class AGameNetworkManager : public AInfo
{
public:
	int                                                AdjustedNetSpeed;                                         // 0x03E8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                                   // 0x03EC(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TotalNetBandwidth;                                        // 0x03F0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MinDynamicBandwidth;                                      // 0x03F4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxDynamicBandwidth;                                      // 0x03F8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                            // 0x03FC(0x0001) (Config)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                            // 0x03FC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03FD(0x0003) MISSED OFFSET
	float                                              StandbyRxCheatTime;                                       // 0x0400(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              StandbyTxCheatTime;                                       // 0x0404(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                BadPingThreshold;                                         // 0x0408(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForRxStandby;                               // 0x040C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForTxStandby;                               // 0x0410(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentForBadPing;                                        // 0x0414(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x0418(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MoveRepSize;                                              // 0x041C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                                  // 0x0420(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                               // 0x0424(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                                   // 0x0428(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                                  // 0x042C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                         // 0x0430(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTime;                               // 0x0434(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeThrottled;                      // 0x0438(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleAtNetSpeed;                      // 0x043C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleOverPlayerCount;                 // 0x0440(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               ClientAuthorativePosition;                                // 0x0444(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	float                                              ClientErrorUpdateRateLimit;                               // 0x0448(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyDetection;                        // 0x044C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyResolution;                       // 0x044D(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x044E(0x0002) MISSED OFFSET
	float                                              MovementTimeDiscrepancyResolutionMinFPS;                  // 0x0450(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                     // 0x0454(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                     // 0x0458(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;                    // 0x045C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;                    // 0x0460(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x0464(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bUseDistanceBasedRelevancy;                               // 0x0465(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0xA];                                       // 0x0466(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameNetworkManager"));

		return ptr;
	}

};


// Class Engine.GameSession
// 0x0018 (0x0400 - 0x03E8)
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                            // 0x03E8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPlayers;                                               // 0x03EC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPartySize;                                             // 0x03F0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                             // 0x03F4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bRequiresPushToTalk;                                      // 0x03F5(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F6(0x0002) MISSED OFFSET
	struct FName                                       SessionName;                                              // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameSession"));

		return ptr;
	}

};


// Class Engine.GameStateBase
// 0x0040 (0x0428 - 0x03E8)
class AGameStateBase : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                            // 0x03E8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                        // 0x03F0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x03F8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class APlayerState*>                        PlayerArray;                                              // 0x0400(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               bReplicatedHasBegunPlay;                                  // 0x0410(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	float                                              ReplicatedWorldTimeSeconds;                               // 0x0414(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                              // 0x0418(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                    // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0420(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameStateBase"));

		return ptr;
	}


	void STATIC_OnRep_SpectatorClass();
	void STATIC_OnRep_ReplicatedWorldTimeSeconds();
	void STATIC_OnRep_ReplicatedHasBegunPlay();
	void STATIC_OnRep_GameModeClass();
	bool STATIC_HasMatchStarted();
	bool STATIC_HasBegunPlay();
	float STATIC_GetServerWorldTimeSecondsDelta();
	float STATIC_GetServerWorldTimeSeconds();
	float STATIC_GetPlayerStartTime(class AController* Controller);
	float STATIC_GetPlayerRespawnDelay(class AController* Controller);
};


// Class Engine.GameState
// 0x0020 (0x0448 - 0x0428)
class AGameState : public AGameStateBase
{
public:
	struct FName                                       MatchState;                                               // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       PreviousMatchState;                                       // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                ElapsedTime;                                              // 0x0438(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x043C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameState"));

		return ptr;
	}


	void STATIC_OnRep_MatchState();
	void STATIC_OnRep_ElapsedTime();
};


// Class Engine.PlayerState
// 0x0098 (0x0480 - 0x03E8)
class APlayerState : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x03F8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	class UClass*                                      EngineMessageClass;                                       // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsSpectator : 1;                                         // 0x0410(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bOnlySpectator : 1;                                       // 0x0410(0x0001) (Net)
	unsigned char                                      bIsABot : 1;                                              // 0x0410(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData01 : 1;                                        // 0x0410(0x0001)
	unsigned char                                      bIsInactive : 1;                                          // 0x0410(0x0001) (Net)
	unsigned char                                      bFromPreviousLevel : 1;                                   // 0x0410(0x0001) (Net)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	unsigned char                                      Ping;                                                     // 0x0414(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0415(0x0003) MISSED OFFSET
	int                                                PlayerId;                                                 // 0x0418(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	struct FUniqueNetIdRepl                            UniqueId;                                                 // 0x0420(0x0018) (Net)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0438(0x0004) MISSED OFFSET
	float                                              Score;                                                    // 0x043C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                StartTime;                                                // 0x0440(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0444(0x0004) MISSED OFFSET
	struct FString                                     SavedNetworkAddress;                                      // 0x0448(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x20];                                      // 0x0458(0x0020) MISSED OFFSET
	bool                                               bShouldUpdateReplicatedPing;                              // 0x0478(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0479(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlayerState"));

		return ptr;
	}


	void STATIC_ReceiveOverrideWith(class APlayerState* OldPlayerState);
	void STATIC_ReceiveCopyProperties(class APlayerState* NewPlayerState);
	void STATIC_OnRep_UniqueId();
	void STATIC_OnRep_Score();
	void STATIC_OnRep_PlayerName();
	void STATIC_OnRep_bIsInactive();
};


// Class Engine.SkyLight
// 0x0010 (0x03F8 - 0x03E8)
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x03F0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkyLight"));

		return ptr;
	}


	void STATIC_OnRep_bEnabled();
};


// Class Engine.WindDirectionalSource
// 0x0008 (0x03F0 - 0x03E8)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.WindDirectionalSource"));

		return ptr;
	}

};


// Class Engine.WorldSettings
// 0x01B8 (0x05A0 - 0x03E8)
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	unsigned char                                      bEnableWorldBoundsChecks : 1;                             // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableNavigationSystem : 1;                              // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableAISystem : 1;                                      // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableWorldComposition : 1;                              // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseClientSideLevelStreamingVolumes : 1;                  // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                           // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bWorldGravitySet : 1;                                     // 0x03F0(0x0001) (Transient)
	unsigned char                                      bGlobalGravitySet : 1;                                    // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              KillZ;                                                    // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AInfo*                                       LevelAttribute;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      KillZDamageType;                                          // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldGravityZ;                                            // 0x0408(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              GlobalGravityZ;                                           // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultPhysicsVolumeClass;                                // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultGameMode;                                          // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameNetworkManagerClass;                                  // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0430(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMinimizeBSPSections : 1;                                 // 0x0434(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0435(0x0003) MISSED OFFSET
	struct FVector                                     DefaultColorScale;                                        // 0x0438(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                 // 0x0444(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalDistanceFieldViewDistance;                          // 0x0448(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;             // 0x044C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility : 1;                                // 0x0450(0x0001) (Edit)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                     // 0x0450(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	int                                                VisibilityCellSize;                                       // 0x0454(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                 // 0x0458(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	unsigned char                                      bForceNoPrecomputedLighting : 1;                          // 0x045C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x045D(0x0003) MISSED OFFSET
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                        // 0x0460(0x0044) (Edit)
	unsigned char                                      UnknownData06[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x04A8(0x0018) (Edit, Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                               // 0x04C0(0x0024) (Edit, Config)
	unsigned char                                      UnknownData07[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	class USoundMix*                                   DefaultBaseSoundMix;                                      // 0x04E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WorldToMeters;                                            // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MonoCullingDistance;                                      // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBookMark*                                   BookMarks[0xA];                                           // 0x04F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UExtendedReflectionSettings*                 ReflectionSettings;                                       // 0x0548(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TimeDilation;                                             // 0x0550(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MatineeTimeDilation;                                      // 0x0554(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DemoPlayTimeDilation;                                     // 0x0558(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinGlobalTimeDilation;                                    // 0x055C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxGlobalTimeDilation;                                    // 0x0560(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0564(0x000C) MISSED OFFSET
	class APlayerState*                                Pauser;                                                   // 0x0570(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bHighPriorityLoading : 1;                                 // 0x0578(0x0001) (Net)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                            // 0x0578(0x0001)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0579(0x0007) MISSED OFFSET
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x0580(0x0010) (ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0590(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.WorldSettings"));

		return ptr;
	}


	void STATIC_OnRep_WorldGravityZ();
};


// Class Engine.InstancedDeferredDecalActor
// 0x0038 (0x0420 - 0x03E8)
class AInstancedDeferredDecalActor : public AActor
{
public:
	bool                                               bUseInstancePool;                                         // 0x03E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseDynamicInstance;                                      // 0x03E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03EA(0x0006) MISSED OFFSET
	class UMaterialInterface*                          SharedMaterial;                                           // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UInstancedDeferredDecalComponent*            RootDecalComponent;                                       // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UInstancedDeferredDecalComponent*>    decals;                                                   // 0x0400(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0410(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InstancedDeferredDecalActor"));

		return ptr;
	}


	void STATIC_SetUseInstancePool(bool bUse);
	void STATIC_SetUseDynamicInstance(bool bUse);
	void STATIC_SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	bool STATIC_GetUseInstancePool();
	bool STATIC_GetUseDynamicInstance();
	class UMaterialInterface* STATIC_GetDecalMaterial();
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance();
	void STATIC_AddInstance(const struct FVector4& InstanceTransform, const struct FVector& DecalSize);
};


// Class Engine.InstancedSplineDecalActor
// 0x0008 (0x03F0 - 0x03E8)
class AInstancedSplineDecalActor : public AActor
{
public:
	class UInstancedSplineDecalComponent*              InstancedSplineDecalComponent;                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InstancedSplineDecalActor"));

		return ptr;
	}

};


// Class Engine.LevelBounds
// 0x0008 (0x03F0 - 0x03E8)
class ALevelBounds : public AActor
{
public:
	bool                                               bAutoUpdateBounds;                                        // 0x03E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelBounds"));

		return ptr;
	}

};


// Class Engine.LevelScriptActor
// 0x0008 (0x03F0 - 0x03E8)
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled : 1;                                        // 0x03E8(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelScriptActor"));

		return ptr;
	}


	void STATIC_WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void STATIC_SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool STATIC_RemoteEvent(const struct FName& EventName);
	void STATIC_LevelReset();
};


// Class Engine.Light
// 0x0010 (0x03F8 - 0x03E8)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x03F0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Light"));

		return ptr;
	}


	void STATIC_ToggleEnabled();
	void STATIC_SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void STATIC_SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void STATIC_SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void STATIC_SetLightColor(const struct FLinearColor& NewLightColor);
	void STATIC_SetEnabled(bool bSetEnabled);
	void STATIC_SetCastShadows(bool bNewValue);
	void STATIC_SetBrightness(float NewBrightness);
	void STATIC_SetAffectTranslucentLighting(bool bNewValue);
	void STATIC_OnRep_bEnabled();
	bool STATIC_IsEnabled();
	struct FLinearColor STATIC_GetLightColor();
	float STATIC_GetBrightness();
};


// Class Engine.DirectionalLight
// 0x0000 (0x03F8 - 0x03F8)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DirectionalLight"));

		return ptr;
	}


	void STATIC_ToggleEnabled();
	void STATIC_SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void STATIC_SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void STATIC_SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void STATIC_SetLightColor(const struct FLinearColor& NewLightColor);
	void STATIC_SetEnabled(bool bSetEnabled);
	void STATIC_SetCastShadows(bool bNewValue);
	void STATIC_SetBrightness(float NewBrightness);
	void STATIC_SetAffectTranslucentLighting(bool bNewValue);
	void STATIC_OnRep_bEnabled();
	bool STATIC_IsEnabled();
	struct FLinearColor STATIC_GetLightColor();
	float STATIC_GetBrightness();
};


// Class Engine.PointLight
// 0x0008 (0x0400 - 0x03F8)
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                      // 0x03F8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PointLight"));

		return ptr;
	}


	void STATIC_SetRadius(float NewRadius);
	void STATIC_SetLightFalloffExponent(float NewLightFalloffExponent);
};


// Class Engine.SpotLight
// 0x0008 (0x0400 - 0x03F8)
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                       // 0x03F8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SpotLight"));

		return ptr;
	}


	void STATIC_SetOuterConeAngle(float NewOuterConeAngle);
	void STATIC_SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x0400 - 0x0400)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GeneratedMeshAreaLight"));

		return ptr;
	}


	void STATIC_SetOuterConeAngle(float NewOuterConeAngle);
	void STATIC_SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.LightmassPortal
// 0x0008 (0x03F0 - 0x03E8)
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*                   PortalComponent;                                          // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightmassPortal"));

		return ptr;
	}

};


// Class Engine.LODActor
// 0x0038 (0x0420 - 0x03E8)
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class AActor*>                              SubActors;                                                // 0x03F0(0x0010) (Edit, ZeroConstructor, EditConst)
	float                                              LODDrawDistance;                                          // 0x0400(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                LODLevel;                                                 // 0x0404(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class UObject*>                             SubObjects;                                               // 0x0408(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LODActor"));

		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0010 (0x03F8 - 0x03E8)
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                             // 0x03E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceActor"));

		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x00A8 (0x0490 - 0x03E8)
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                              // 0x03E8(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       MatineeControllerName;                                    // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x03F8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad : 1;                                     // 0x03FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceStartPos : 1;                                       // 0x03FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03FD(0x0003) MISSED OFFSET
	float                                              ForceStartPosition;                                       // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0404(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bRewindOnPlay : 1;                                        // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoResetOnRewind : 1;                                     // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                              // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableRadioFilter : 1;                                  // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClientSideOnly : 1;                                      // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                              // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSkippable : 1;                                         // 0x0404(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	int                                                PreferredSplitScreenNum;                                  // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableMovementInput : 1;                                // 0x040C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableLookAtInput : 1;                                  // 0x040C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidePlayer : 1;                                          // 0x040C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideHud : 1;                                             // 0x040C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                          // 0x0410(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                                      // 0x0420(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x0428(0x0010) (ZeroConstructor, Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                               // 0x0438(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying : 1;                                           // 0x0448(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst)
	unsigned char                                      bReversePlayback : 1;                                     // 0x0448(0x0001) (Net)
	unsigned char                                      bPaused : 1;                                              // 0x0448(0x0001) (Net, Transient)
	unsigned char                                      bPendingStop : 1;                                         // 0x0448(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	float                                              InterpPosition;                                           // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0450(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                                // 0x0454(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlay;                                                   // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStop;                                                   // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPause;                                                  // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MatineeActor"));

		return ptr;
	}


	void STATIC_Stop();
	void STATIC_SetPosition(float NewPosition, bool bJump);
	void STATIC_SetLoopingState(bool bNewLooping);
	void STATIC_Reverse();
	void STATIC_Play();
	void STATIC_Pause();
	void STATIC_EnableGroupByName(const struct FString& GroupName, bool bEnable);
	void STATIC_ChangePlaybackDirection();
};


// Class Engine.MatineeActorCameraAnim
// 0x0008 (0x0498 - 0x0490)
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MatineeActorCameraAnim"));

		return ptr;
	}

};


// Class Engine.NavigationData
// 0x01A0 (0x0588 - 0x03E8)
class ANavigationData : public AActor
{
public:
	class UPrimitiveComponent*                         RenderingComp;                                            // 0x03E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	struct FNavDataConfig                              NavDataConfig;                                            // 0x03F0(0x0050)
	unsigned char                                      bEnableDrawing : 1;                                       // 0x0440(0x0001) (Edit, Transient)
	unsigned char                                      bForceRebuildOnLoad : 1;                                  // 0x0440(0x0001) (Edit, Config)
	unsigned char                                      bCanBeMainNavData : 1;                                    // 0x0440(0x0001) (Edit, Config, EditConst)
	unsigned char                                      bCanSpawnOnRebuild : 1;                                   // 0x0440(0x0001) (Edit, Config, EditConst)
	unsigned char                                      bRebuildAtRuntime : 1;                                    // 0x0440(0x0001) (Config, Deprecated)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	ERuntimeGenerationType                             RuntimeGeneration;                                        // 0x0444(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	float                                              ObservedPathsTickInterval;                                // 0x0448(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           DataVersion;                                              // 0x044C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD0];                                      // 0x0450(0x00D0) MISSED OFFSET
	TArray<struct FSupportedAreaData>                  SupportedAreas;                                           // 0x0520(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x58];                                      // 0x0530(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationData"));

		return ptr;
	}

};


// Class Engine.AbstractNavData
// 0x0000 (0x0588 - 0x0588)
class AAbstractNavData : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AbstractNavData"));

		return ptr;
	}

};


// Class Engine.NavigationGraph
// 0x0000 (0x0588 - 0x0588)
class ANavigationGraph : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationGraph"));

		return ptr;
	}

};


// Class Engine.RecastNavMesh
// 0x0118 (0x06A0 - 0x0588)
class ARecastNavMesh : public ANavigationData
{
public:
	unsigned char                                      bDrawTriangleEdges : 1;                                   // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawPolyEdges : 1;                                       // 0x0588(0x0001) (Edit, Config)
	unsigned char                                      bDrawFilledPolys : 1;                                     // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawNavMeshEdges : 1;                                    // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawTileBounds : 1;                                      // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawPathCollidingGeometry : 1;                           // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawTileLabels : 1;                                      // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawPolygonLabels : 1;                                   // 0x0588(0x0001) (Edit)
	unsigned char                                      bDrawDefaultPolygonCost : 1;                              // 0x0589(0x0001) (Edit)
	unsigned char                                      bDrawLabelsOnPathNodes : 1;                               // 0x0589(0x0001) (Edit)
	unsigned char                                      bDrawNavLinks : 1;                                        // 0x0589(0x0001) (Edit)
	unsigned char                                      bDrawFailedNavLinks : 1;                                  // 0x0589(0x0001) (Edit)
	unsigned char                                      bDrawClusters : 1;                                        // 0x0589(0x0001) (Edit)
	unsigned char                                      bDrawOctree : 1;                                          // 0x0589(0x0001) (Edit)
	unsigned char                                      bDistinctlyDrawTilesBeingBuilt : 1;                       // 0x0589(0x0001) (Config)
	unsigned char                                      bDrawNavMesh : 1;                                         // 0x0589(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x058A(0x0002) MISSED OFFSET
	float                                              DrawOffset;                                               // 0x058C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bFixedTilePoolSize : 1;                                   // 0x0590(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0591(0x0003) MISSED OFFSET
	int                                                TilePoolSize;                                             // 0x0594(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TileSizeUU;                                               // 0x0598(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CellSize;                                                 // 0x059C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CellHeight;                                               // 0x05A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentRadius;                                              // 0x05A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentHeight;                                              // 0x05A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentMaxHeight;                                           // 0x05AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentMaxSlope;                                            // 0x05B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AgentMaxStepHeight;                                       // 0x05B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinRegionArea;                                            // 0x05B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MergeRegionSize;                                          // 0x05BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxSimplificationError;                                   // 0x05C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSimultaneousTileGenerationJobsCount;                   // 0x05C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                TileNumberHardLimit;                                      // 0x05C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PolyRefTileBits;                                          // 0x05CC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PolyRefNavPolyBits;                                       // 0x05D0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PolyRefSaltBits;                                          // 0x05D4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              DefaultDrawDistance;                                      // 0x05D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultMaxSearchNodes;                                    // 0x05DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultMaxHierarchicalSearchNodes;                        // 0x05E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ERecastPartitioning>                   RegionPartitioning;                                       // 0x05E4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ERecastPartitioning>                   LayerPartitioning;                                        // 0x05E5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x05E6(0x0002) MISSED OFFSET
	int                                                RegionChunkSplits;                                        // 0x05E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LayerChunkSplits;                                         // 0x05EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSortNavigationAreasByCost : 1;                           // 0x05F0(0x0001) (Edit, Config)
	unsigned char                                      bPerformVoxelFiltering : 1;                               // 0x05F0(0x0001) (Edit, Config)
	unsigned char                                      bMarkLowHeightAreas : 1;                                  // 0x05F0(0x0001) (Edit, Config)
	unsigned char                                      bDoFullyAsyncNavDataGathering : 1;                        // 0x05F0(0x0001) (Edit, Config)
	unsigned char                                      bUseBetterOffsetsFromCorners : 1;                         // 0x05F0(0x0001) (Config)
	unsigned char                                      bStoreEmptyTileLayers : 1;                                // 0x05F0(0x0001) (Config)
	unsigned char                                      bUseVirtualFilters : 1;                                   // 0x05F0(0x0001) (Config)
	unsigned char                                      bAllowNavLinkAsPathEnd : 1;                               // 0x05F0(0x0001) (Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x05F1(0x0003) MISSED OFFSET
	bool                                               bOnlySavedOnDS;                                           // 0x05F4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x05F5(0x0003) MISSED OFFSET
	unsigned char                                      bUseVoxelCache : 1;                                       // 0x05F8(0x0001) (Config)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05F9(0x0003) MISSED OFFSET
	float                                              TileSetUpdateInterval;                                    // 0x05FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              HeuristicScale;                                           // 0x0600(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VerticalDeviationFromGroundCompensation;                  // 0x0604(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x98];                                      // 0x0608(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RecastNavMesh"));

		return ptr;
	}

};


// Class Engine.NavigationGraphNode
// 0x0000 (0x03E8 - 0x03E8)
class ANavigationGraphNode : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationGraphNode"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.NavigationObjectBase
// 0x0028 (0x0410 - 0x03E8)
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         GoodSprite;                                               // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         BadSprite;                                                // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart : 1;                                    // 0x0408(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0409(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationObjectBase"));

		return ptr;
	}

};


// Class Engine.PlayerStart
// 0x0008 (0x0418 - 0x0410)
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                           // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlayerStart"));

		return ptr;
	}

};


// Class Engine.PlayerStartPIE
// 0x0000 (0x0418 - 0x0418)
class APlayerStartPIE : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlayerStartPIE"));

		return ptr;
	}

};


// Class Engine.NavPathObserverInterface
// 0x0000 (0x0030 - 0x0030)
class UNavPathObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavPathObserverInterface"));

		return ptr;
	}

};


// Class Engine.NavigationTestingActor
// 0x0108 (0x04F0 - 0x03E8)
class ANavigationTestingActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UNavigationInvokerComponent*                 InvokerComponent;                                         // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bActAsNavigationInvoker : 1;                              // 0x0408(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	struct FNavAgentProperties                         NavAgentProps;                                            // 0x0410(0x0020) (Edit)
	struct FVector                                     QueryingExtent;                                           // 0x0430(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	class ANavigationData*                             MyNavData;                                                // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     ProjectedLocation;                                        // 0x0448(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	unsigned char                                      bProjectedLocationValid : 1;                              // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bSearchStart : 1;                                         // 0x0454(0x0001) (Edit)
	unsigned char                                      bUseHierarchicalPathfinding : 1;                          // 0x0454(0x0001) (Edit)
	unsigned char                                      bGatherDetailedInfo : 1;                                  // 0x0454(0x0001) (Edit)
	unsigned char                                      bDrawDistanceToWall : 1;                                  // 0x0454(0x0001) (Edit)
	unsigned char                                      bShowNodePool : 1;                                        // 0x0454(0x0001) (Edit)
	unsigned char                                      bShowBestPath : 1;                                        // 0x0454(0x0001) (Edit)
	unsigned char                                      bShowDiffWithPreviousStep : 1;                            // 0x0454(0x0001) (Edit)
	unsigned char                                      bShouldBeVisibleInGame : 1;                               // 0x0455(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0456(0x0002) MISSED OFFSET
	TEnumAsByte<ENavCostDisplay>                       CostDisplayMode;                                          // 0x0458(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	struct FVector2D                                   TextCanvasOffset;                                         // 0x045C(0x0008) (Edit, IsPlainOldData)
	unsigned char                                      bPathExist : 1;                                           // 0x0464(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bPathIsPartial : 1;                                       // 0x0464(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bPathSearchOutOfNodes : 1;                                // 0x0464(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0465(0x0003) MISSED OFFSET
	float                                              PathfindingTime;                                          // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              PathCost;                                                 // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	int                                                PathfindingSteps;                                         // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	class ANavigationTestingActor*                     OtherActor;                                               // 0x0478(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      FilterClass;                                              // 0x0480(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ShowStepIndex;                                            // 0x0488(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	float                                              OffsetFromCornersDistance;                                // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x60];                                      // 0x0490(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationTestingActor"));

		return ptr;
	}

};


// Class Engine.NavLinkDefinition
// 0x0028 (0x0058 - 0x0030)
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                    // 0x0030(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                             // 0x0040(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkDefinition"));

		return ptr;
	}

};


// Class Engine.NavLinkHostInterface
// 0x0000 (0x0030 - 0x0030)
class UNavLinkHostInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkHostInterface"));

		return ptr;
	}

};


// Class Engine.NavLinkProxy
// 0x0050 (0x0438 - 0x03E8)
class ANavLinkProxy : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	TArray<struct FNavigationLink>                     PointLinks;                                               // 0x03F8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                             // 0x0408(0x0010) (ZeroConstructor)
	class UNavLinkCustomComponent*                     SmartLinkComp;                                            // 0x0418(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bSmartLinkIsRelevant;                                     // 0x0420(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSmartLinkReached;                                       // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkProxy"));

		return ptr;
	}


	void STATIC_SetSmartLinkEnabled(bool bEnabled);
	void STATIC_ResumePathFollowing(class AActor* Agent);
	void STATIC_ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
	bool STATIC_IsSmartLinkEnabled();
	bool STATIC_HasMovingAgents();
};


// Class Engine.Note
// 0x0000 (0x03E8 - 0x03E8)
class ANote : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Note"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.ParticleSystem
// 0x0110 (0x0140 - 0x0030)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              UpdateTime_FPS;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpdateTime_Delta;                                         // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x0048(0x0010) (ExportObject, ZeroConstructor)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x0058(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0060(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                             // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              LODDistanceCheckTime;                                     // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	TArray<float>                                      LODDistances;                                             // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bApplyLODDistanceFactorForLowFOV : 1;                     // 0x0088(0x0001) (Edit)
	unsigned char                                      bRegenerateLODDuplicate : 1;                              // 0x0088(0x0001)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	TArray<struct FParticleSystemLOD>                  LODSettings;                                              // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                         // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x00A4(0x001C) (Edit, IsPlainOldData)
	float                                              SecondsBeforeInactive;                                    // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldResetPeakCounts : 1;                               // 0x00C4(0x0001)
	unsigned char                                      bHasPhysics : 1;                                          // 0x00C4(0x0001) (Transient)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                // 0x00C4(0x0001) (Edit)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                              // 0x00C4(0x0001)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              Delay;                                                    // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayLow;                                                 // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseDelayRange : 1;                                       // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	bool                                               bAutoDeactivate;                                          // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	uint32_t                                           MinTimeBetweenTicks;                                      // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EParticleSystemInsignificanceReaction              InsignificantReaction;                                    // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	float                                              InsignificanceDelay;                                      // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EParticleSignificanceLevel                         MaxSignificanceLevel;                                     // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	struct FVector                                     MacroUVPosition;                                          // 0x00E8(0x000C) (Edit, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	struct FBox                                        CustomOcclusionBounds;                                    // 0x00FC(0x001C) (Edit, IsPlainOldData)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                             // 0x0118(0x0010) (ZeroConstructor, Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                       // 0x0128(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0138(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystem"));

		return ptr;
	}


	bool STATIC_ContainsEmitterType(class UClass* TypeData);
};


// Class Engine.ParticleSystemComponent
// 0x0280 (0x0C40 - 0x09C0)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                         // 0x09C0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                       // 0x09D0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData00 : 7;                                        // 0x09E0(0x0001)
	unsigned char                                      bResetOnDetach : 1;                                       // 0x09E0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                             // 0x09E1(0x0001)
	unsigned char                                      UnknownData01 : 2;                                        // 0x09E1(0x0001)
	unsigned char                                      bAllowRecycling : 1;                                      // 0x09E1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoManageAttachment : 1;                                // 0x09E1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x2];                                       // 0x09E2(0x0002) MISSED OFFSET
	EParticleSignificanceLevel                         RequiredSignificance;                                     // 0x09E4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xB];                                       // 0x09E5(0x000B) MISSED OFFSET
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x09F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x0A00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x0A10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x0A20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0A30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     OldPosition;                                              // 0x0A40(0x000C) (IsPlainOldData)
	struct FVector                                     PartSysVelocity;                                          // 0x0A4C(0x000C) (IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0A58(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x0A5C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWarmingUp : 1;                                           // 0x0A60(0x0001)
	unsigned char                                      UnknownData04[0xB];                                       // 0x0A61(0x000B) MISSED OFFSET
	float                                              SecondsBeforeInactive;                                    // 0x0A6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0A70(0x0008) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x0A78(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0A7C(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideLODMethod : 1;                                   // 0x0A80(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0A81(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0A84(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0A85(0x0003) MISSED OFFSET
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x0A88(0x0001)
	unsigned char                                      UnknownData09[0x1F];                                      // 0x0A89(0x001F) MISSED OFFSET
	TArray<class UParticleSystemReplay*>               ReplayClips;                                              // 0x0AA8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData10[0x60];                                      // 0x0AB8(0x0060) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x0B18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0B1C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSystemFinished;                                         // 0x0B20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                         // 0x0B30(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x0B38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AutoAttachLocationType;                                   // 0x0B40(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	EAttachmentRule                                    AutoAttachLocationRule;                                   // 0x0B41(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachRotationRule;                                   // 0x0B42(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AutoAttachScaleRule;                                      // 0x0B43(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0xFC];                                      // 0x0B44(0x00FC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemComponent"));

		return ptr;
	}


	void STATIC_SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void STATIC_SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void STATIC_SetTemplate(class UParticleSystem* NewTemplate);
	void STATIC_SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void STATIC_SetFloatParameter(const struct FName& ParameterName, float Param);
	void STATIC_SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void STATIC_SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void STATIC_SetBeamTargetTangent(int emitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void STATIC_SetBeamTargetStrength(int emitterIndex, float NewTargetStrength, int TargetIndex);
	void STATIC_SetBeamTargetPoint(int emitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void STATIC_SetBeamSourceTangent(int emitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void STATIC_SetBeamSourceStrength(int emitterIndex, float NewSourceStrength, int SourceIndex);
	void STATIC_SetBeamSourcePoint(int emitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void STATIC_SetBeamEndPoint(int emitterIndex, const struct FVector& NewEndPoint);
	void STATIC_SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType);
	void STATIC_SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule);
	void STATIC_SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	int STATIC_GetNumActiveParticles();
	class UMaterialInterface* STATIC_GetNamedMaterial(const struct FName& InName);
	bool STATIC_GetBeamTargetTangent(int emitterIndex, int TargetIndex, struct FVector* OutTangentPoint);
	bool STATIC_GetBeamTargetStrength(int emitterIndex, int TargetIndex, float* OutTargetStrength);
	bool STATIC_GetBeamTargetPoint(int emitterIndex, int TargetIndex, struct FVector* OutTargetPoint);
	bool STATIC_GetBeamSourceTangent(int emitterIndex, int SourceIndex, struct FVector* OutTangentPoint);
	bool STATIC_GetBeamSourceStrength(int emitterIndex, int SourceIndex, float* OutSourceStrength);
	bool STATIC_GetBeamSourcePoint(int emitterIndex, int SourceIndex, struct FVector* OutSourcePoint);
	bool STATIC_GetBeamEndPoint(int emitterIndex, struct FVector* OutEndPoint);
	void STATIC_GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void STATIC_EndTrails();
	class UMaterialInstanceDynamic* STATIC_CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void STATIC_BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
};


// Class Engine.ParticleEventManager
// 0x0000 (0x03E8 - 0x03E8)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleEventManager"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0030 - 0x0030)
class UInterface_CollisionDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Interface_CollisionDataProvider"));

		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x02C8 (0x02F8 - 0x0030)
class USkeletalMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBoxSphereBounds                            ImportedBounds;                                           // 0x0058(0x001C) (Transient, DuplicateTransient, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x0074(0x001C) (Transient, DuplicateTransient, IsPlainOldData)
	struct FVector                                     PositiveBoundsExtension;                                  // 0x0090(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x009C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	TArray<struct FSkeletalMaterial>                   Materials;                                                // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	float                                              UVDensityRate;                                            // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x00C0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x00D2(0x0006) MISSED OFFSET
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x00D8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                 // 0x00E8(0x0001) (Edit)
	unsigned char                                      bHasBeenSimplified : 1;                                   // 0x00E8(0x0001)
	unsigned char                                      bHasVertexColors : 1;                                     // 0x00E8(0x0001)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                       // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                          // 0x0108(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UMorphTarget*>                        MorphTargets;                                             // 0x0118(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData04[0x168];                                     // 0x0128(0x0168) MISSED OFFSET
	TArray<struct FClothingAssetData_Legacy>           ClothingAssets;                                           // 0x0290(0x0010) (ZeroConstructor, Deprecated)
	class UClass*                                      PostProcessAnimBlueprint;                                 // 0x02A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                       // 0x02A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x02B8(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData05[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x02D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x18];                                      // 0x02E0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMesh"));

		return ptr;
	}


	int STATIC_NumSockets();
	bool STATIC_IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	class USkeletalMeshSocket* STATIC_GetSocketByIndex(int Index);
	class UNodeMappingContainer* STATIC_GetNodeMappingContainer(class UBlueprint* SourceAsset);
	struct FBoxSphereBounds STATIC_GetImportedBounds();
	struct FBoxSphereBounds STATIC_GetBounds();
	class USkeletalMeshSocket* STATIC_FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex);
	class USkeletalMeshSocket* STATIC_FindSocket(const struct FName& InSocketName);
};


// Class Engine.DefaultPawn
// 0x0028 (0x0470 - 0x0448)
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                             // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UPawnMovementComponent*                      MovementComponent;                                        // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComponent;                                       // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings : 1;                          // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DefaultPawn"));

		return ptr;
	}


	void STATIC_TurnAtRate(float Rate);
	void STATIC_MoveUp_World(float Val);
	void STATIC_MoveRight(float Val);
	void STATIC_MoveForward(float Val);
	void STATIC_LookUpAtRate(float Rate);
};


// Class Engine.SpectatorPawn
// 0x0000 (0x0470 - 0x0470)
class ASpectatorPawn : public ADefaultPawn
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SpectatorPawn"));

		return ptr;
	}


	void STATIC_TurnAtRate(float Rate);
	void STATIC_MoveUp_World(float Val);
	void STATIC_MoveRight(float Val);
	void STATIC_MoveForward(float Val);
	void STATIC_LookUpAtRate(float Rate);
};


// Class Engine.ReflectionCapture
// 0x0008 (0x03F0 - 0x03E8)
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                         // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ReflectionCapture"));

		return ptr;
	}

};


// Class Engine.BoxReflectionCapture
// 0x0000 (0x03F0 - 0x03F0)
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCapture"));

		return ptr;
	}

};


// Class Engine.PlaneReflectionCapture
// 0x0000 (0x03F0 - 0x03F0)
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlaneReflectionCapture"));

		return ptr;
	}

};


// Class Engine.SphereReflectionCapture
// 0x0008 (0x03F8 - 0x03F0)
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                        // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SphereReflectionCapture"));

		return ptr;
	}

};


// Class Engine.RigidBodyBase
// 0x0000 (0x03E8 - 0x03E8)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RigidBodyBase"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.PhysicsConstraintActor
// 0x0020 (0x0408 - 0x03E8)
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AActor*                                      ConstraintActor1;                                         // 0x03F0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class AActor*                                      ConstraintActor2;                                         // 0x03F8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bDisableCollision : 1;                                    // 0x0400(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0401(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintActor"));

		return ptr;
	}

};


// Class Engine.PhysicsThruster
// 0x0008 (0x03F0 - 0x03E8)
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                        // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsThruster"));

		return ptr;
	}

};


// Class Engine.RadialForceActor
// 0x0008 (0x03F0 - 0x03E8)
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                           // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RadialForceActor"));

		return ptr;
	}


	void STATIC_ToggleForce();
	void STATIC_FireImpulse();
	void STATIC_EnableForce();
	void STATIC_DisableForce();
};


// Class Engine.SceneCapture
// 0x0008 (0x03F0 - 0x03E8)
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneCapture"));

		return ptr;
	}

};


// Class Engine.PlanarReflection
// 0x0010 (0x0400 - 0x03F0)
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlanarReflection"));

		return ptr;
	}


	void STATIC_OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCapture2D
// 0x0010 (0x0400 - 0x03F0)
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneCapture2D"));

		return ptr;
	}


	void STATIC_OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCaptureCube
// 0x0010 (0x0400 - 0x03F0)
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                     // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureCube"));

		return ptr;
	}


	void STATIC_OnInterpToggle(bool bEnable);
};


// Class Engine.MatineeAnimInterface
// 0x0000 (0x0030 - 0x0030)
class UMatineeAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MatineeAnimInterface"));

		return ptr;
	}

};


// Class Engine.SplineMeshActor
// 0x0008 (0x03F0 - 0x03E8)
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                      // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SplineMeshActor"));

		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0000 (0x03E8 - 0x03E8)
class ATargetPoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TargetPoint"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class Engine.TextRenderActor
// 0x0008 (0x03F0 - 0x03E8)
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                               // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TextRenderActor"));

		return ptr;
	}

};


// Class Engine.TriggerBase
// 0x0008 (0x03F0 - 0x03E8)
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TriggerBase"));

		return ptr;
	}

};


// Class Engine.TriggerBox
// 0x0000 (0x03F0 - 0x03F0)
class ATriggerBox : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TriggerBox"));

		return ptr;
	}

};


// Class Engine.TriggerCapsule
// 0x0000 (0x03F0 - 0x03F0)
class ATriggerCapsule : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TriggerCapsule"));

		return ptr;
	}

};


// Class Engine.TriggerSphere
// 0x0000 (0x03F0 - 0x03F0)
class ATriggerSphere : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TriggerSphere"));

		return ptr;
	}

};


// Class Engine.VectorFieldVolume
// 0x0008 (0x03F0 - 0x03E8)
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                     // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldVolume"));

		return ptr;
	}

};


// Class Engine.ApplicationLifecycleComponent
// 0x0050 (0x0250 - 0x0200)
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                        // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ApplicationLifecycleComponent"));

		return ptr;
	}


	void STATIC_ApplicationLifetimeDelegate__DelegateSignature();
};


// Class Engine.InterpToMovementComponent
// 0x00A0 (0x02F0 - 0x0250)
class UInterpToMovementComponent : public UMovementComponent
{
public:
	EInterpToBehaviourType                             BehaviourType;                                            // 0x0250(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0251(0x0003) MISSED OFFSET
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0254(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                        // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                           // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                      // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                        // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                          // 0x0298(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                            // 0x02B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x30];                                      // 0x02C0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpToMovementComponent"));

		return ptr;
	}


	void STATIC_StopSimulating(const struct FHitResult& HitResult);
	void STATIC_RestartMovement(float InitialDirection);
	void STATIC_OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void STATIC_OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void STATIC_OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void STATIC_OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void STATIC_OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void STATIC_FinaliseControlPoints();
};


// Class Engine.AssetUserData
// 0x0000 (0x0030 - 0x0030)
class UAssetUserData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AssetUserData"));

		return ptr;
	}

};


// Class Engine.AnimMontage
// 0x0108 (0x01B0 - 0x00A8)
class UAnimMontage : public UAnimCompositeBase
{
public:
	struct FAlphaBlend                                 BlendIn;                                                  // 0x00A8(0x0038) (Edit)
	float                                              BlendInTime;                                              // 0x00E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct FAlphaBlend                                 BlendOut;                                                 // 0x00E8(0x0038) (Edit)
	float                                              BlendOutTime;                                             // 0x0120(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SyncGroup;                                                // 0x0128(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SyncSlotIndex;                                            // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	struct FMarkerSyncData                             MarkerData;                                               // 0x0138(0x0020)
	TArray<struct FCompositeSection>                   CompositeSections;                                        // 0x0158(0x0010) (ZeroConstructor)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                           // 0x0168(0x0010) (ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                          // 0x0178(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bEnableRootMotionTranslation;                             // 0x0188(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotionRotation;                                // 0x0189(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x018A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x018B(0x0005) MISSED OFFSET
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                    // 0x0190(0x0010) (ZeroConstructor)
	TArray<int>                                        BranchingPointStateNotifyIndices;                         // 0x01A0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimMontage"));

		return ptr;
	}

};


// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0030 - 0x0030)
class URVOAvoidanceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RVOAvoidanceInterface"));

		return ptr;
	}

};


// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0030 - 0x0030)
class UNetworkPredictionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NetworkPredictionInterface"));

		return ptr;
	}

};


// Class Engine.FloatingPawnMovement
// 0x0010 (0x02A0 - 0x0290)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              Deceleration;                                             // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurningBoost;                                             // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPositionCorrected : 1;                                   // 0x0298(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0299(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.FloatingPawnMovement"));

		return ptr;
	}

};


// Class Engine.SpectatorPawnMovement
// 0x0010 (0x02B0 - 0x02A0)
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x02A0(0x0001)
	unsigned char                                      UnknownData00[0xF];                                       // 0x02A1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SpectatorPawnMovement"));

		return ptr;
	}

};


// Class Engine.ProjectileMovementComponent
// 0x00C0 (0x0310 - 0x0250)
class UProjectileMovementComponent : public UMovementComponent
{
public:
	unsigned char                                      bRotationFollowsVelocity : 1;                             // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShouldBounce : 1;                                        // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                         // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSimulationEnabled : 1;                                   // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepCollision : 1;                                      // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsHomingProjectile : 1;                                  // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                          // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSliding : 1;                                           // 0x0251(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bInterpMovement : 1;                                      // 0x0251(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInterpRotation : 1;                                      // 0x0251(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0252(0x0002) MISSED OFFSET
	float                                              PreviousHitTime;                                          // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FVector                                     PreviousHitNormal;                                        // 0x0258(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0268(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bounciness;                                               // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Friction;                                                 // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;                    // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFrictionFraction;                                      // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x027C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                       // 0x0280(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                         // 0x0290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                              // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                    // 0x02A4(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	float                                              MaxSimulationTimeStep;                                    // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BounceAdditionalIterations;                               // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationTime;                                       // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpRotationTime;                                       // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationMaxLagDistance;                             // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationSnapToTargetDistance;                       // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x48];                                      // 0x02C8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ProjectileMovementComponent"));

		return ptr;
	}


	void STATIC_StopSimulating(const struct FHitResult& HitResult);
	void STATIC_SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void STATIC_SetInterpolatedComponent(class USceneComponent* Component);
	void STATIC_ResetInterpolation();
	void STATIC_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void STATIC_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void STATIC_MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	struct FVector STATIC_LimitVelocity(const struct FVector& NewVelocity);
	bool STATIC_IsVelocityUnderSimulationThreshold();
	bool STATIC_IsInterpolationComplete();
};


// Class Engine.RotatingMovementComponent
// 0x0020 (0x0270 - 0x0250)
class URotatingMovementComponent : public UMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0250(0x0004) MISSED OFFSET
	struct FVector                                     PivotTranslation;                                         // 0x0254(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace : 1;                                // 0x0260(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0261(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RotatingMovementComponent"));

		return ptr;
	}

};


// Class Engine.NavigationInvokerComponent
// 0x0010 (0x0210 - 0x0200)
class UNavigationInvokerComponent : public UActorComponent
{
public:
	float                                              TileGenerationRadius;                                     // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TileRemovalRadius;                                        // 0x0204(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0208(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationInvokerComponent"));

		return ptr;
	}

};


// Class Engine.NavRelevantComponent
// 0x0030 (0x0230 - 0x0200)
class UNavRelevantComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x0200(0x0024) MISSED OFFSET
	unsigned char                                      bAttachToOwnersRoot : 1;                                  // 0x0224(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0225(0x0003) MISSED OFFSET
	class UObject*                                     CachedNavParent;                                          // 0x0228(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavRelevantComponent"));

		return ptr;
	}


	void STATIC_SetNavigationRelevancy(bool bRelevant);
};


// Class Engine.NavLinkCustomInterface
// 0x0000 (0x0030 - 0x0030)
class UNavLinkCustomInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkCustomInterface"));

		return ptr;
	}

};


// Class Engine.NavLinkCustomComponent
// 0x0110 (0x0340 - 0x0230)
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0230(0x0008) MISSED OFFSET
	uint32_t                                           NavLinkUserId;                                            // 0x0238(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	class UClass*                                      EnabledAreaClass;                                         // 0x0240(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DisabledAreaClass;                                        // 0x0248(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LinkRelativeStart;                                        // 0x0250(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LinkRelativeEnd;                                          // 0x025C(0x000C) (Edit, IsPlainOldData)
	TEnumAsByte<ENavLinkDirection>                     LinkDirection;                                            // 0x0268(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	unsigned char                                      bLinkEnabled : 1;                                         // 0x026C(0x0001) (Edit)
	unsigned char                                      bNotifyWhenEnabled : 1;                                   // 0x026C(0x0001) (Edit)
	unsigned char                                      bNotifyWhenDisabled : 1;                                  // 0x026C(0x0001) (Edit)
	unsigned char                                      bCreateBoxObstacle : 1;                                   // 0x026C(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x026D(0x0003) MISSED OFFSET
	struct FVector                                     ObstacleOffset;                                           // 0x0270(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     ObstacleExtent;                                           // 0x027C(0x000C) (Edit, IsPlainOldData)
	class UClass*                                      ObstacleAreaClass;                                        // 0x0288(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BroadcastRadius;                                          // 0x0290(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BroadcastInterval;                                        // 0x0294(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     BroadcastChannel;                                         // 0x0298(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xA7];                                      // 0x0299(0x00A7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkCustomComponent"));

		return ptr;
	}

};


// Class Engine.NavModifierComponent
// 0x0030 (0x0260 - 0x0230)
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	class UClass*                                      AreaClass;                                                // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     FailsafeExtent;                                           // 0x0238(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0244(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavModifierComponent"));

		return ptr;
	}


	void STATIC_SetAreaClass(class UClass* NewAreaClass);
};


// Class Engine.PawnNoiseEmitterComponent
// 0x0030 (0x0230 - 0x0200)
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                 // 0x0200(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0201(0x0003) MISSED OFFSET
	struct FVector                                     LastRemoteNoisePosition;                                  // 0x0204(0x000C) (IsPlainOldData)
	float                                              NoiseLifetime;                                            // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                                    // 0x0214(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseTime;                                      // 0x0218(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseVolume;                                     // 0x021C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseTime;                                       // 0x0220(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0224(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PawnNoiseEmitterComponent"));

		return ptr;
	}


	void STATIC_MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
};


// Class Engine.PhysicalAnimationComponent
// 0x0040 (0x0240 - 0x0200)
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                              StrengthMultiplyer;                                       // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x0208(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0210(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicalAnimationComponent"));

		return ptr;
	}


	void STATIC_SetStrengthMultiplyer(float InStrengthMultiplyer);
	void STATIC_SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	struct FTransform STATIC_GetBodyTargetTransform(const struct FName& BodyName);
	void STATIC_ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void STATIC_ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void STATIC_ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);
};


// Class Engine.PhysicsHandleComponent
// 0x00B0 (0x02B0 - 0x0200)
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x0200(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0208(0x000C) MISSED OFFSET
	unsigned char                                      UnknownData01 : 1;                                        // 0x0214(0x0001)
	unsigned char                                      bSoftAngularConstraint : 1;                               // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSoftLinearConstraint : 1;                                // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bInterpolateTarget : 1;                                   // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	float                                              LinearDamping;                                            // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LinearStiffness;                                          // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularDamping;                                           // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularStiffness;                                         // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x68];                                      // 0x0228(0x0068) MISSED OFFSET
	float                                              InterpolationSpeed;                                       // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x0294(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsHandleComponent"));

		return ptr;
	}


	void STATIC_SetTargetRotation(const struct FRotator& NewRotation);
	void STATIC_SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void STATIC_SetTargetLocation(const struct FVector& NewLocation);
	void STATIC_SetLinearStiffness(float NewLinearStiffness);
	void STATIC_SetLinearDamping(float NewLinearDamping);
	void STATIC_SetInterpolationSpeed(float NewInterpolationSpeed);
	void STATIC_SetAngularStiffness(float NewAngularStiffness);
	void STATIC_SetAngularDamping(float NewAngularDamping);
	void STATIC_ReleaseComponent();
	void STATIC_GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void STATIC_GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation);
	void STATIC_GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void STATIC_GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
	class UPrimitiveComponent* STATIC_GetGrabbedComponent();
};


// Class Engine.PlatformEventsComponent
// 0x0020 (0x0220 - 0x0200)
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                      // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                      // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlatformEventsComponent"));

		return ptr;
	}


	bool STATIC_SupportsConvertibleLaptops();
	void STATIC_PlatformEventDelegate__DelegateSignature();
	bool STATIC_IsInTabletMode();
	bool STATIC_IsInLaptopMode();
};


// Class Engine.AtmosphericFogComponent
// 0x0210 (0x06C0 - 0x04B0)
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              SunMultiplier;                                            // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FogMultiplier;                                            // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityMultiplier;                                        // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityOffset;                                            // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceScale;                                            // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeScale;                                            // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceOffset;                                           // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GroundOffset;                                             // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SunDiscScale;                                             // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FFogHeightDensityPair>               HeightDensityLayers;                                      // 0x04D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              DefaultBrightness;                                        // 0x04E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      DefaultLightColor;                                        // 0x04EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bDisableSunDisk : 1;                                      // 0x04F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bDisableGroundScattering : 1;                             // 0x04F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04F1(0x0003) MISSED OFFSET
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                         // 0x04F4(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTexture2D*                                  TransmittanceTexture;                                     // 0x0520(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UTexture2D*                                  IrradianceTexture;                                        // 0x0528(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x190];                                     // 0x0530(0x0190) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AtmosphericFogComponent"));

		return ptr;
	}


	void STATIC_StartPrecompute();
	void STATIC_SetSunMultiplier(float NewSunMultiplier);
	void STATIC_SetStartDistance(float NewStartDistance);
	void STATIC_SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void STATIC_SetFogMultiplier(float NewFogMultiplier);
	void STATIC_SetDistanceScale(float NewDistanceScale);
	void STATIC_SetDistanceOffset(float NewDistanceOffset);
	void STATIC_SetDensityOffset(float NewDensityOffset);
	void STATIC_SetDensityMultiplier(float NewDensityMultiplier);
	void STATIC_SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void STATIC_SetDefaultBrightness(float NewBrightness);
	void STATIC_SetAltitudeScale(float NewAltitudeScale);
	void STATIC_DisableSunDisk(bool NewSunDisk);
	void STATIC_DisableGroundScattering(bool NewGroundScattering);
};


// Class Engine.SpatializationPluginSourceSettingsBase
// 0x0000 (0x0030 - 0x0030)
class USpatializationPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SpatializationPluginSourceSettingsBase"));

		return ptr;
	}

};


// Class Engine.OcclusionPluginSourceSettingsBase
// 0x0000 (0x0030 - 0x0030)
class UOcclusionPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.OcclusionPluginSourceSettingsBase"));

		return ptr;
	}

};


// Class Engine.ReverbPluginSourceSettingsBase
// 0x0000 (0x0030 - 0x0030)
class UReverbPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ReverbPluginSourceSettingsBase"));

		return ptr;
	}

};


// Class Engine.GameUserSettings
// 0x00E0 (0x0110 - 0x0030)
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                // 0x0030(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDynamicResolution;                                    // 0x0031(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4E];                                      // 0x0032(0x004E) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                          // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                          // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                         // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                         // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosX;                                               // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosY;                                               // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FullscreenMode;                                           // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                              // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PreferredFullscreenMode;                                  // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           Version;                                                  // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AudioQualityLevel;                                        // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FrameRateLimit;                                           // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B0(0x0004) MISSED OFFSET
	int                                                DesiredScreenWidth;                                       // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDesiredScreenHeight;                                  // 0x00B8(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	int                                                DesiredScreenHeight;                                      // 0x00BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenWidth;                               // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenHeight;                              // 0x00C4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastCPUBenchmarkResult;                                   // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastGPUBenchmarkResult;                                   // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<float>                                      LastCPUBenchmarkSteps;                                    // 0x00D0(0x0010) (ZeroConstructor, Config)
	TArray<float>                                      LastGPUBenchmarkSteps;                                    // 0x00E0(0x0010) (ZeroConstructor, Config)
	float                                              LastGPUBenchmarkMultiplier;                               // 0x00F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseHDRDisplayOutput;                                     // 0x00F4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	int                                                HDRDisplayOutputNits;                                     // 0x00F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGameUserSettingsUINeedsUpdate;                          // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameUserSettings"));

		return ptr;
	}


	void STATIC_ValidateSettings();
	bool STATIC_SupportsHDRDisplayOutput();
	void STATIC_SetVSyncEnabled(bool bEnable);
	void STATIC_SetVisualEffectQuality(int Value);
	void STATIC_SetViewDistanceQuality(int Value);
	void STATIC_SetToDefaults();
	void STATIC_SetTextureQuality(int Value);
	void STATIC_SetShadowQuality(int Value);
	void STATIC_SetScreenResolution(const struct FIntPoint& Resolution);
	void STATIC_SetResolutionScaleValueEx(float NewScaleValue);
	void STATIC_SetResolutionScaleValue(int NewScaleValue);
	void STATIC_SetResolutionScaleNormalized(float NewScaleNormalized);
	void STATIC_SetPostProcessingQuality(int Value);
	void STATIC_SetOverallScalabilityLevel(int Value);
	void STATIC_SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);
	void STATIC_SetFrameRateLimit(float NewLimit);
	void STATIC_SetFoliageQuality(int Value);
	void STATIC_SetDynamicResolutionEnabled(bool bEnable);
	void STATIC_SetBenchmarkFallbackValues();
	void STATIC_SetAudioQualityLevel(int QualityLevel);
	void STATIC_SetAntiAliasingQuality(int Value);
	void STATIC_SaveSettings();
	void STATIC_RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);
	void STATIC_RevertVideoMode();
	void STATIC_ResetToCurrentSettings();
	void STATIC_LoadSettings(bool bForceReload);
	bool STATIC_IsVSyncEnabled();
	bool STATIC_IsVSyncDirty();
	bool STATIC_IsScreenResolutionDirty();
	bool STATIC_IsHDREnabled();
	bool STATIC_IsFullscreenModeDirty();
	bool STATIC_IsDynamicResolutionEnabled();
	bool STATIC_IsDynamicResolutionDirty();
	bool STATIC_IsDirty();
	int STATIC_GetVisualEffectQuality();
	int STATIC_GetViewDistanceQuality();
	int STATIC_GetTextureQuality();
	int STATIC_GetShadowQuality();
	struct FIntPoint STATIC_GetScreenResolution();
	void STATIC_GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	void STATIC_GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue);
	float STATIC_GetRecommendedResolutionScale();
	TEnumAsByte<EWindowMode> STATIC_GetPreferredFullscreenMode();
	int STATIC_GetPostProcessingQuality();
	int STATIC_GetOverallScalabilityLevel();
	struct FIntPoint STATIC_GetLastConfirmedScreenResolution();
	TEnumAsByte<EWindowMode> STATIC_GetLastConfirmedFullscreenMode();
	class UGameUserSettings* STATIC_GetGameUserSettings();
	TEnumAsByte<EWindowMode> STATIC_GetFullscreenMode();
	float STATIC_GetFrameRateLimit();
	int STATIC_GetFoliageQuality();
	struct FIntPoint STATIC_GetDesktopResolution();
	struct FIntPoint STATIC_GetDefaultWindowPosition();
	TEnumAsByte<EWindowMode> STATIC_GetDefaultWindowMode();
	float STATIC_GetDefaultResolutionScale();
	struct FIntPoint STATIC_GetDefaultResolution();
	int STATIC_GetCurrentHDRDisplayNits();
	int STATIC_GetAudioQualityLevel();
	int STATIC_GetAntiAliasingQuality();
	void STATIC_EnableHDRDisplayOutput(bool bEnable, int DisplayNits);
	void STATIC_ConfirmVideoMode();
	void STATIC_ApplySettings(bool bCheckForCommandLineOverrides);
	void STATIC_ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void STATIC_ApplyNonResolutionSettings();
	void STATIC_ApplyHardwareBenchmarkResults();
};


// Class Engine.CheatManager
// 0x0050 (0x0080 - 0x0030)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      DebugCameraControllerClass;                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0040(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CheatManager"));

		return ptr;
	}


	void STATIC_Walk();
	void STATIC_ViewSelf();
	void STATIC_ViewPlayer(const struct FString& S);
	void STATIC_ViewClass(class UClass* DesiredClass);
	void STATIC_ViewActor(const struct FName& ActorName);
	void STATIC_VidMem();
	void STATIC_ToggleDebugCamera();
	void STATIC_ToggleAILogging();
	void STATIC_TestCollisionDistance();
	void STATIC_Teleport();
	void STATIC_Summon(const struct FString& ClassName);
	void STATIC_StreamLevelOut(const struct FName& PackageName);
	void STATIC_StreamLevelIn(const struct FName& PackageName);
	void STATIC_Slomo(float NewTimeDilation);
	void STATIC_SetWorldOrigin();
	void STATIC_SetNavDrawDistance(float DrawDistance);
	void STATIC_SetMouseSensitivityToDefault();
	void STATIC_ServerToggleAILogging();
	void STATIC_ResetPeakCustomMemory();
	void STATIC_ReceiveInitCheatManager();
	void STATIC_ReceiveEndPlay();
	void STATIC_RebuildNavigation();
	void STATIC_PrivateDataSize();
	void STATIC_PlayersOnly();
	void STATIC_OnlyLoadLevel(const struct FName& PackageName);
	void STATIC_LogLoc();
	void STATIC_ListAllTextures(const struct FString& Params);
	void STATIC_ListAllStaticMeshes(const struct FString& Params);
	void STATIC_ListAllSkeletalMeshes(const struct FString& Params);
	void STATIC_ListAllRenderResources(const struct FString& Params);
	void STATIC_InvertMouse();
	void STATIC_God();
	void STATIC_Ghost();
	void STATIC_FreezeFrame(float Delay);
	void STATIC_Fly();
	void STATIC_FlushLog();
	void STATIC_EnableDebugCamera();
	void STATIC_DumpVoiceMutingState();
	void STATIC_DumpPartyState();
	void STATIC_DumpOnlineSessionState();
	void STATIC_DumpChatState();
	void STATIC_DisableDebugCamera();
	void STATIC_DestroyTarget();
	void STATIC_DestroyPawns(class UClass* aClass);
	void STATIC_DestroyAllPawnsExceptTarget();
	void STATIC_DestroyAll(class UClass* aClass);
	void STATIC_DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void STATIC_DebugCapsuleSweepPawn();
	void STATIC_DebugCapsuleSweepComplex(bool bTraceComplex);
	void STATIC_DebugCapsuleSweepClear();
	void STATIC_DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);
	void STATIC_DebugCapsuleSweepCapture();
	void STATIC_DebugCapsuleSweep();
	void STATIC_DamageTarget(float DamageAmount);
	void STATIC_CheatScript(const struct FString& ScriptName);
	void STATIC_ChangeSize(float F);
	void STATIC_BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void STATIC_BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void STATIC_BugIt(const struct FString& ScreenShotDescription);
};


// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetNodeHelperLibrary"));

		return ptr;
	}

};


// Class Engine.KismetRenderingLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetRenderingLibrary"));

		return ptr;
	}

};


// Class Engine.KismetStringLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetStringLibrary"));

		return ptr;
	}

};


// Class Engine.KismetStringTableLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetStringTableLibrary"));

		return ptr;
	}

};


// Class Engine.KismetTextLibrary
// 0x0000 (0x0030 - 0x0030)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.KismetTextLibrary"));

		return ptr;
	}

};


// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (0x0030 - 0x0030)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MeshVertexPainterKismetLibrary"));

		return ptr;
	}

};


// Class Engine.World
// 0x0B10 (0x0B40 - 0x0030)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class AParticleEventManager*                       MyParticleEventManager;                                   // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0040(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.World.CurrentLevel
	class ULineBatchComponent*                         PersistentLineBatcher;                                    // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	class AGameModeBase*                               AuthorityGameMode;                                        // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0060(0x0028) MISSED OFFSET
	class ULevel*                                      CurrentLevelPendingInvisibility;                          // 0x0088(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x58];                                      // 0x0090(0x0058) MISSED OFFSET
	class ULineBatchComponent*                         LineBatcher;                                              // 0x00E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x108];                                     // 0x00F0(0x0108) MISSED OFFSET
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                      // 0x01F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x50];                                      // 0x0200(0x0050) MISSED OFFSET
	class UDemoNetDriver*                              DemoNetDriver;                                            // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	class UNavigationSystem*                           NavigationSystem;                                         // 0x0260(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UObject*>                             ExtraReferencedObjects;                                   // 0x0268(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x70];                                      // 0x0278(0x0070) MISSED OFFSET
	class AGameNetworkManager*                         NetworkManager;                                           // 0x02E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UNetDriver*                                  NetDriver;                                                // 0x02F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAvoidanceManager*                           AvoidanceManager;                                         // 0x02F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x28];                                      // 0x0300(0x0028) MISSED OFFSET
	class ULineBatchComponent*                         ForegroundLineBatcher;                                    // 0x0328(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData10[0x18];                                      // 0x0330(0x0018) MISSED OFFSET
	class UAISystemBase*                               AISystem;                                                 // 0x0348(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x78];                                      // 0x0350(0x0078) MISSED OFFSET
	struct FString                                     StreamingLevelsPrefix;                                    // 0x03C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData12[0x398];                                     // 0x03D8(0x0398) MISSED OFFSET
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                             // 0x0770(0x0010) (ZeroConstructor, Transient)
	TArray<class ULevel*>                              Levels;                                                   // 0x0780(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                                     // 0x0790(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData13[0x50];                                      // 0x07A0(0x0050) MISSED OFFSET
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                  // 0x07F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x18];                                      // 0x07F8(0x0018) MISSED OFFSET
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0810(0x0010) (ZeroConstructor, Transient)
	class UWorldComposition*                           WorldComposition;                                         // 0x0820(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCanvas*                                     CanvasForRenderingToTarget;                               // 0x0828(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevel*                                      CurrentLevelPendingVisibility;                            // 0x0830(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0xE0];                                      // 0x0838(0x00E0) MISSED OFFSET
	class UDirectionalLightComponent*                  HeightBufferFakeLight;                                    // 0x0918(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0920(0x0008) MISSED OFFSET
	TArray<struct FLevelCollection>                    LevelCollections;                                         // 0x0928(0x0010) (ZeroConstructor, Transient)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                     // 0x0938(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x112];                                     // 0x0940(0x0112) MISSED OFFSET
	unsigned char                                      bAreConstraintsDirty : 1;                                 // 0x0A52(0x0001) (Transient)
	unsigned char                                      UnknownData18[0xED];                                      // 0x0A53(0x00ED) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.World"));

		return ptr;
	}

};


// Class Engine.NavigationSystem
// 0x0440 (0x0470 - 0x0030)
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	class ANavigationData*                             MainNavData;                                              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class ANavigationData*                             AbstractNavData;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bAutoCreateNavigationData : 1;                            // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bAllowClientSideNavigation : 1;                           // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bSupportRebuilding : 1;                                   // 0x0040(0x0001)
	unsigned char                                      bInitialBuildingLocked : 1;                               // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0040(0x0001)
	unsigned char                                      bSkipAgentHeightCheckWhenPickingNavData : 1;              // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	ENavDataGatheringModeConfig                        DataGatheringMode;                                        // 0x0044(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	unsigned char                                      bGenerateNavigationOnlyAroundNavigationInvokers : 1;      // 0x0048(0x0001) (Edit, Config, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              ActiveTilesUpdateInterval;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FNavDataConfig>                      SupportedAgents;                                          // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	float                                              DirtyAreasUpdateFreq;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<class ANavigationData*>                     NavDataSet;                                               // 0x0068(0x0010) (ZeroConstructor)
	TArray<class ANavigationData*>                     NavDataRegistrationQueue;                                 // 0x0078(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x60];                                      // 0x0088(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNavDataRegisteredEvent;                                 // 0x00E8(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnNavigationGenerationFinishedDelegate;                   // 0x00F8(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x12C];                                     // 0x0108(0x012C) MISSED OFFSET
	EFNavigationSystemRunMode                          OperationMode;                                            // 0x0234(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x23B];                                     // 0x0235(0x023B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationSystem"));

		return ptr;
	}


	void STATIC_UpdateDynamicGenerateTargetNav(bool IsAdd, const struct FDynamicGenerateTargetNavigation& GenerateTargetNav);
	void STATIC_UnregisterNavigationInvoker(class AActor* Invoker);
	void STATIC_SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);
	void STATIC_SimpleMoveToActor(class AController* Controller, class AActor* Goal);
	void STATIC_SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);
	void STATIC_SetGeometryGatheringMode(ENavDataGatheringModeConfig NewMode);
	void STATIC_ResetMaxSimultaneousTileGenerationJobsCount();
	void STATIC_RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
	struct FVector STATIC_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent);
	void STATIC_OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume);
	bool STATIC_NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, class AController* Querier, struct FVector* HitLocation);
	bool STATIC_K2_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent, struct FVector* ProjectedLocation);
	bool STATIC_K2_GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass, struct FVector* RandomLocation);
	bool STATIC_K2_GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass, struct FVector* RandomLocation);
	bool STATIC_IsNavigationBeingBuiltOrLocked(class UObject* WorldContext);
	bool STATIC_IsNavigationBeingBuilt(class UObject* WorldContext);
	struct FVector STATIC_GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<ENavigationQueryResult> STATIC_GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathLength);
	TEnumAsByte<ENavigationQueryResult> STATIC_GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathCost);
	class UNavigationSystem* STATIC_GetNavigationSystem(class UObject* WorldContext);
	class UNavigationPath* STATIC_FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
	class UNavigationPath* STATIC_FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass);
};


// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StereoLayerFunctionLibrary"));

		return ptr;
	}

};


// Class Engine.EngineSubsystem
// 0x0000 (0x0038 - 0x0038)
class UEngineSubsystem : public UDynamicSubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EngineSubsystem"));

		return ptr;
	}

};


// Class Engine.Player
// 0x0020 (0x0050 - 0x0030)
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	int                                                CurrentNetSpeed;                                          // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                                  // 0x0044(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ConfiguredLanSpeed;                                       // 0x0048(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Player"));

		return ptr;
	}

};


// Class Engine.LocalPlayer
// 0x0240 (0x0290 - 0x0050)
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0050(0x0010) MISSED OFFSET
	unsigned char                                      bSentSplitJoin : 1;                                       // 0x0060(0x0001) (Edit, Transient, EditConst)
	unsigned char                                      UnknownData01[0x7F];                                      // 0x0061(0x007F) MISSED OFFSET
	class UClass*                                      PendingLevelPlayerControllerClass;                        // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1A8];                                     // 0x00E8(0x01A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LocalPlayer"));

		return ptr;
	}

};


// Class Engine.LocalPlayerSubsystem
// 0x0000 (0x0038 - 0x0038)
class ULocalPlayerSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LocalPlayerSubsystem"));

		return ptr;
	}

};


// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SubsystemBlueprintLibrary"));

		return ptr;
	}

};


// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0030 - 0x0030)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerKismetLibrary"));

		return ptr;
	}

};


// Class Engine.PoseWatch
// 0x0010 (0x0040 - 0x0030)
class UPoseWatch : public UObject
{
public:
	class UEdGraphNode*                                Node;                                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      PoseWatchColour;                                          // 0x0038(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PoseWatch"));

		return ptr;
	}

};


// Class Engine.AnimBlueprintGeneratedClass
// 0x0070 (0x0428 - 0x03B8)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x03C0(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x03D0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x03D8(0x0010) (ZeroConstructor)
	int                                                RootAnimNodeIndex;                                        // 0x03E8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	TArray<int>                                        OrderedSavedPoseIndices;                                  // 0x03F0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0400(0x0018) MISSED OFFSET
	TArray<struct FName>                               SyncGroupNames;                                           // 0x0418(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimBlueprintGeneratedClass"));

		return ptr;
	}

};


// Class Engine.BodySetup
// 0x0390 (0x03C0 - 0x0030)
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0030(0x0048) (Edit)
	struct FName                                       BoneName;                                                 // 0x0078(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EPhysicsType>                          PhysicsType;                                              // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                // 0x0084(0x0001) (Deprecated)
	unsigned char                                      bConsiderForBounds : 1;                                   // 0x0084(0x0001) (Edit)
	unsigned char                                      bMeshCollideAll : 1;                                      // 0x0084(0x0001) (Transient)
	unsigned char                                      bDoubleSidedGeometry : 1;                                 // 0x0084(0x0001) (Edit)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                        // 0x0084(0x0001)
	unsigned char                                      bSharedCookedData : 1;                                    // 0x0084(0x0001)
	unsigned char                                      bGenerateMirroredCollision : 1;                           // 0x0084(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBodyCollisionResponse>                CollisionReponse;                                         // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionTraceFlag>                   CollisionTraceFlag;                                       // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE];                                       // 0x0092(0x000E) MISSED OFFSET
	struct FBodyInstance                               DefaultInstance;                                          // 0x00A0(0x0240) (Edit)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                    // 0x02E0(0x0010) (Edit, IsPlainOldData)
	float                                              MinContactOffset;                                         // 0x02F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BuildScale;                                               // 0x02F4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FVector                                     BuildScale3D;                                             // 0x02F8(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData03[0xBC];                                      // 0x0304(0x00BC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BodySetup"));

		return ptr;
	}

};


// Class Engine.BodySetup2D
// 0x0030 (0x03F0 - 0x03C0)
class UBodySetup2D : public UBodySetup
{
public:
	struct FAggregateGeometry2D                        AggGeom2D;                                                // 0x03C0(0x0030)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BodySetup2D"));

		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x00E8 (0x0118 - 0x0030)
class UPhysicsAsset : public UObject
{
public:
	TArray<int>                                        BoundsBodies;                                             // 0x0030(0x0010) (ZeroConstructor)
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                       // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                          // 0x0050(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      bUseAsyncScene : 1;                                       // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xA7];                                      // 0x0061(0x00A7) MISSED OFFSET
	TArray<class UBodySetup*>                          BodySetup;                                                // 0x0108(0x0010) (ExportObject, ZeroConstructor, Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsAsset"));

		return ptr;
	}

};


// Class Engine.SkeletalBodySetup
// 0x0010 (0x03D0 - 0x03C0)
class USkeletalBodySetup : public UBodySetup
{
public:
	TArray<struct FPhysicalAnimationProfile>           PhysicalAnimationData;                                    // 0x03C0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkeletalBodySetup"));

		return ptr;
	}

};


// Class Engine.BoneMaskFilter
// 0x0010 (0x0040 - 0x0030)
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                               // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BoneMaskFilter"));

		return ptr;
	}

};


// Class Engine.BookMark
// 0x0028 (0x0058 - 0x0030)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                 // 0x0030(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x003C(0x000C) (Edit, IsPlainOldData)
	TArray<struct FString>                             HiddenLevels;                                             // 0x0048(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BookMark"));

		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x0010 (0x0040 - 0x0030)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                                   // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   Location;                                                 // 0x0034(0x0008) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BookMark2D"));

		return ptr;
	}

};


// Class Engine.Breakpoint
// 0x0018 (0x0048 - 0x0030)
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0030(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	class UEdGraphNode*                                Node;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStepOnce : 1;                                            // 0x0040(0x0001)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                      // 0x0040(0x0001)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                             // 0x0040(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Breakpoint"));

		return ptr;
	}

};


// Class Engine.BrushBuilder
// 0x0058 (0x0088 - 0x0030)
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                           // 0x0030(0x0010) (ZeroConstructor)
	struct FString                                     Tooltip;                                                  // 0x0040(0x0010) (ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                                      // 0x0050(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Vertices;                                                 // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FBuilderPoly>                        Polys;                                                    // 0x0068(0x0010) (ZeroConstructor)
	struct FName                                       Layer;                                                    // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MergeCoplanars : 1;                                       // 0x0080(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.BrushBuilder"));

		return ptr;
	}

};


// Class Engine.ButtonStyleAsset
// 0x02A8 (0x02D8 - 0x0030)
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                              // 0x0030(0x02A8) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ButtonStyleAsset"));

		return ptr;
	}

};


// Class Engine.CameraAnim
// 0x05B0 (0x05E0 - 0x0030)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                        // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              AnimLength;                                               // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FBox                                        BoundingBox;                                              // 0x003C(0x001C) (IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform : 1;                          // 0x0058(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bRelativeToInitialFOV : 1;                                // 0x0058(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              BaseFOV;                                                  // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FPostProcessSettings                        BasePostProcessSettings;                                  // 0x0060(0x0570)
	float                                              BasePostProcessBlendWeight;                               // 0x05D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x05D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraAnim"));

		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x00F0 (0x0120 - 0x0030)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0040(0x0018) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x0058(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x005C(0x0014) MISSED OFFSET
	class UInterpTrackMove*                            MoveTrack;                                                // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0080(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x9F];                                      // 0x0081(0x009F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraAnimInst"));

		return ptr;
	}


	void STATIC_Stop(bool bImmediate);
	void STATIC_SetScale(float NewDuration);
	void STATIC_SetDuration(float NewDuration);
};


// Class Engine.CameraModifier
// 0x0020 (0x0050 - 0x0030)
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      bExclusive : 1;                                           // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	unsigned char                                      Priority;                                                 // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                              // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AlphaInTime;                                              // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaOutTime;                                             // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ALPHA;                                                    // 0x0048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraModifier"));

		return ptr;
	}


	bool STATIC_IsDisabled();
	class AActor* STATIC_GetViewTarget();
	void STATIC_EnableModifier();
	void STATIC_DisableModifier(bool bImmediate);
	void STATIC_BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void STATIC_BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
};


// Class Engine.CameraModifier_CameraShake
// 0x0018 (0x0068 - 0x0050)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<class UCameraShake*>                        ActiveShakes;                                             // 0x0050(0x0010) (ZeroConstructor)
	float                                              SplitScreenShakeScale;                                    // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CameraModifier_CameraShake"));

		return ptr;
	}

};


// Class Engine.Canvas
// 0x02A0 (0x02D0 - 0x0030)
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                     // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OrgY;                                                     // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipX;                                                    // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipY;                                                    // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0040(0x0004) (IsPlainOldData)
	unsigned char                                      bCenterX : 1;                                             // 0x0044(0x0001)
	unsigned char                                      bCenterY : 1;                                             // 0x0044(0x0001)
	unsigned char                                      bNoSmooth : 1;                                            // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	int                                                SizeX;                                                    // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FPlane                                      ColorModulate;                                            // 0x0050(0x0010) (IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  GradientTexture0;                                         // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	class UReporterGraph*                              ReporterGraph;                                            // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x258];                                     // 0x0078(0x0258) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Canvas"));

		return ptr;
	}


	struct FVector2D STATIC_K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D STATIC_K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct FVector STATIC_K2_Project(const struct FVector& WorldLocation);
	void STATIC_K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void STATIC_K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void STATIC_K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void STATIC_K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void STATIC_K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
	void STATIC_K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void STATIC_K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void STATIC_K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
	void STATIC_K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void STATIC_K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
};


// Class Engine.Channel
// 0x0040 (0x0070 - 0x0030)
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0038(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Channel"));

		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x0280 (0x02F0 - 0x0070)
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x278];                                     // 0x0078(0x0278) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ActorChannel"));

		return ptr;
	}

};


// Class Engine.DemoActorChannel
// 0x0018 (0x0308 - 0x02F0)
class UDemoActorChannel : public UActorChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x02F0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DemoActorChannel"));

		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0018 (0x0088 - 0x0070)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ControlChannel"));

		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x0010 (0x0080 - 0x0070)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.VoiceChannel"));

		return ptr;
	}

};


// Class Engine.CheckBoxStyleAsset
// 0x05E0 (0x0610 - 0x0030)
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                            // 0x0030(0x05E0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CheckBoxStyleAsset"));

		return ptr;
	}

};


// Class Engine.Commandlet
// 0x0058 (0x0088 - 0x0030)
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                          // 0x0030(0x0010) (ZeroConstructor)
	struct FString                                     HelpUsage;                                                // 0x0040(0x0010) (ZeroConstructor)
	struct FString                                     HelpWebLink;                                              // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamNames;                                           // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                                    // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      IsServer : 1;                                             // 0x0080(0x0001)
	unsigned char                                      IsClient : 1;                                             // 0x0080(0x0001)
	unsigned char                                      IsEditor : 1;                                             // 0x0080(0x0001)
	unsigned char                                      LogToConsole : 1;                                         // 0x0080(0x0001)
	unsigned char                                      ShowErrorCount : 1;                                       // 0x0080(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Commandlet"));

		return ptr;
	}

};


// Class Engine.PluginCommandlet
// 0x0020 (0x00A8 - 0x0088)
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0088(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PluginCommandlet"));

		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0088 - 0x0088)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SmokeTestCommandlet"));

		return ptr;
	}

};


// Class Engine.Console
// 0x0108 (0x0138 - 0x0030)
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0058(0x0018) MISSED OFFSET
	TArray<struct FString>                             HistoryBuffer;                                            // 0x0070(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0xB8];                                      // 0x0080(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Console"));

		return ptr;
	}

};


// Class Engine.ControlRigInterface
// 0x0000 (0x0030 - 0x0030)
class UControlRigInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ControlRigInterface"));

		return ptr;
	}

};


// Class Engine.CurveLinearColor
// 0x01C0 (0x01F8 - 0x0038)
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                         // 0x0038(0x0070)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveLinearColor"));

		return ptr;
	}


	struct FLinearColor STATIC_GetLinearColorValue(float InTime);
};


// Class Engine.CurveVector
// 0x0150 (0x0188 - 0x0038)
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                         // 0x0038(0x0070)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveVector"));

		return ptr;
	}


	struct FVector STATIC_GetVectorValue(float InTime);
};


// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0030 - 0x0030)
class UCurveEdPresetCurve : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveEdPresetCurve"));

		return ptr;
	}

};


// Class Engine.CurveSourceInterface
// 0x0000 (0x0030 - 0x0030)
class UCurveSourceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveSourceInterface"));

		return ptr;
	}

};


// Class Engine.CurveTable
// 0x0058 (0x0088 - 0x0030)
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0030(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CurveTable"));

		return ptr;
	}

};


// Class Engine.PrimaryDataAsset
// 0x0000 (0x0038 - 0x0038)
class UPrimaryDataAsset : public UDataAsset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PrimaryDataAsset"));

		return ptr;
	}

};


// Class Engine.PreviewMeshCollection
// 0x0018 (0x0050 - 0x0038)
class UPreviewMeshCollection : public UDataAsset
{
public:
	class USkeleton*                                   Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FPreviewMeshCollectionEntry>         SkeletalMeshes;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PreviewMeshCollection"));

		return ptr;
	}

};


// Class Engine.PrimaryAssetLabel
// 0x0038 (0x0070 - 0x0038)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                          Rules;                                                    // 0x0038(0x0010) (Edit)
	unsigned char                                      bLabelAssetsInMyDirectory : 1;                            // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<TAssetPtr<class UObject>>                   ExplicitAssets;                                           // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<TAssetPtr<class UClass>>                    ExplicitBlueprints;                                       // 0x0060(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PrimaryAssetLabel"));

		return ptr;
	}

};


// Class Engine.TireType
// 0x0008 (0x0040 - 0x0038)
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TireType"));

		return ptr;
	}

};


// Class Engine.DestructibleFractureSettings
// 0x0090 (0x00C0 - 0x0030)
class UDestructibleFractureSettings : public UObject
{
public:
	int                                                CellSiteCount;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFractureMaterial                           FractureMaterialDesc;                                     // 0x0034(0x0024) (Edit, Transient)
	int                                                RandomSeed;                                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<struct FVector>                             VoronoiSites;                                             // 0x0060(0x0010) (ZeroConstructor)
	int                                                OriginalSubmeshCount;                                     // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0078(0x0010) (ZeroConstructor)
	TArray<struct FDestructibleChunkParameters>        ChunkParameters;                                          // 0x0088(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0098(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DestructibleFractureSettings"));

		return ptr;
	}

};


// Class Engine.AnimationSettings
// 0x0038 (0x0078 - 0x0040)
class UAnimationSettings : public UDeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                                // 0x0040(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                            // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	class UClass*                                      DefaultCompressionAlgorithm;                              // 0x0058(0x0008) (Edit, ZeroConstructor, Config, NoClear, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x0060(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x0061(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	float                                              MaxCurveError;                                            // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AlternativeCompressionThreshold;                          // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               ForceRecompression;                                       // 0x006C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bOnlyCheckForMissingSkeletalMeshes;                       // 0x006D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bForceBelowThreshold;                                     // 0x006E(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                    // 0x006F(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRaiseMaxErrorToExisting;                                 // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryFixedBitwiseCompression;                              // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryPerTrackBitwiseCompression;                           // 0x0072(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryLinearKeyRemovalCompression;                          // 0x0073(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryIntervalKeyRemoval;                                   // 0x0074(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePerformanceLog;                                    // 0x0075(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStripAnimationDataOnDedicatedServer;                     // 0x0076(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0077(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AnimationSettings"));

		return ptr;
	}

};


// Class Engine.AssetManagerSettings
// 0x0068 (0x00A8 - 0x0040)
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>               PrimaryAssetTypesToScan;                                  // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FDirectoryPath>                      DirectoriesToExclude;                                     // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPrimaryAssetRulesOverride>          PrimaryAssetRules;                                        // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bOnlyCookProductionAssets;                                // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	TArray<struct FAssetManagerRedirect>               PrimaryAssetIdRedirects;                                  // 0x0078(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetTypeRedirects;                                // 0x0088(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAssetManagerRedirect>               AssetPathRedirects;                                       // 0x0098(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AssetManagerSettings"));

		return ptr;
	}

};


// Class Engine.AudioSettings
// 0x0078 (0x00B8 - 0x0040)
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FStringAssetReference                       DefaultSoundClassName;                                    // 0x0040(0x0010) (Edit, Config)
	struct FStringAssetReference                       DefaultSoundConcurrencyName;                              // 0x0050(0x0010) (Edit, Config)
	struct FStringAssetReference                       DefaultBaseSoundMix;                                      // 0x0060(0x0010) (Edit, Config)
	struct FStringAssetReference                       VoiPSoundClass;                                           // 0x0070(0x0010) (Edit, Config)
	float                                              LowPassFilterResonance;                                   // 0x0080(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaximumConcurrentStreams;                                 // 0x0084(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FAudioQualitySettings>               QualityLevels;                                            // 0x0088(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      bAllowVirtualizedSounds : 1;                              // 0x0098(0x0001) (Edit, Config)
	unsigned char                                      bDisableMasterEQ : 1;                                     // 0x0098(0x0001) (Edit, Config)
	unsigned char                                      bDisableMasterReverb : 1;                                 // 0x0098(0x0001) (Edit, Config)
	unsigned char                                      bAllowCenterChannel3DPanning : 1;                         // 0x0098(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FString                                     DialogueFilenameFormat;                                   // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.AudioSettings"));

		return ptr;
	}

};


// Class Engine.ExcludedPackageSettings
// 0x0020 (0x0060 - 0x0040)
class UExcludedPackageSettings : public UDeveloperSettings
{
public:
	TArray<struct FString>                             CommonExcludedPackages;                                   // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             MinSpecExcludedPackages;                                  // 0x0050(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ExcludedPackageSettings"));

		return ptr;
	}

};


// Class Engine.StreamingSettings
// 0x0038 (0x0078 - 0x0040)
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                            // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                              // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              TimeLimitExceededMultiplier;                              // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                           // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AsyncIOBandwidthLimit;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                          // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                         // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      LoadAllStreamingLevels : 1;                               // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              AsyncLoadingTimeLimit;                                    // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                            // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;                      // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;          // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingUnregisterComponentsTimeLimit;              // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsUnregistrationGranularity;        // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      EventDrivenLoaderEnabled : 1;                             // 0x0070(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StreamingSettings"));

		return ptr;
	}

};


// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0060 - 0x0040)
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC : 1;                                   // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      AllowParallelGC : 1;                                      // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      CreateGCClusters : 1;                                     // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      MergeGCClusters : 1;                                      // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      ActorClusteringEnabled : 1;                               // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      BlueprintClusteringEnabled : 1;                           // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	int                                                NumRetriesBeforeForcingGC;                                // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                              // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                                // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInGame;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInEditor;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GarbageCollectionSettings"));

		return ptr;
	}

};


// Class Engine.MeshSimplificationSettings
// 0x0008 (0x0048 - 0x0040)
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                                  // 0x0040(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MeshSimplificationSettings"));

		return ptr;
	}

};


// Class Engine.NetworkSettings
// 0x0010 (0x0050 - 0x0040)
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                          // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing : 1;                // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                MaxRepArraySize;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxRepArrayMemory;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NetworkSettings"));

		return ptr;
	}

};


// Class Engine.PhysicsSettings
// 0x0090 (0x00D0 - 0x0040)
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultTerminalVelocity;                                  // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultFluidFriction;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SimulateScratchMemorySize;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                RagdollAggregateThreshold;                                // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TriangleMeshTriangleMinAreaThreshold;                     // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableAsyncScene;                                        // 0x0058(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableShapeSharing;                                      // 0x0059(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableAsyncSceneOnDedicatedServer;                       // 0x005A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableShapeSharingOnDedicatedServer;                     // 0x005B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableComplexForSim;                                     // 0x005C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableComplexForSimOnDedicatedServer;                    // 0x005D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePCM;                                               // 0x005E(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableStabilization;                                     // 0x005F(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bWarnMissingLocks;                                        // 0x0060(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnable2DPhysics;                                         // 0x0061(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                               // 0x0062(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                  // 0x0063(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BounceThresholdVelocity;                                  // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode;                                      // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode;                                   // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              MaxAngularVelocity;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxDepenetrationVelocity;                                 // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ContactOffsetMultiplier;                                  // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinContactOffset;                                         // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxContactOffset;                                         // 0x007C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSimulateSkeletalMeshOnDedicatedServer;                   // 0x0080(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ECollisionTraceFlag>                   DefaultShapeComplexity;                                   // 0x0081(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDefaultHasComplexCollision;                              // 0x0082(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	bool                                               bSuppressFaceRemapTable;                                  // 0x0083(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSupportUVFromHitResults;                                 // 0x0084(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableActiveActors;                                     // 0x0085(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableCCD;                                              // 0x0086(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0087(0x0001) MISSED OFFSET
	float                                              MaxPhysicsDeltaTime;                                      // 0x0088(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubstepping;                                             // 0x008C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingAsync;                                        // 0x008D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x008E(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTime;                                      // 0x0090(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSubsteps;                                              // 0x0094(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                                 // 0x0098(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AsyncSceneSmoothingFactor;                                // 0x009C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialAverageFrameRate;                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxPhysicsDeltaTimeOnDedicatedServer;                     // 0x00A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingOnDedicatedServer;                            // 0x00A8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingAsyncOnDedicatedServer;                       // 0x00A9(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x00AA(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTimeOnDedicatedServer;                     // 0x00AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSubstepsOnDedicatedServer;                             // 0x00B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              SyncSceneSmoothingFactorOnDedicatedServer;                // 0x00B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AsyncSceneSmoothingFactorOnDedicatedServer;               // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialAverageFrameRateOnDedicatedServer;                 // 0x00BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                         // 0x00C0(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSettings"));

		return ptr;
	}

};


// Class Engine.RendererSettings
// 0x0088 (0x00C8 - 0x0040)
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileHDR : 1;                                           // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bMobileDisableVertexFog : 1;                              // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                MaxMobileCascades;                                        // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EMobileMSAASampleCount>                MobileMSAASampleCount;                                    // 0x0048(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	unsigned char                                      bDiscardUnusedQualityLevels : 1;                          // 0x004C(0x0001) (Edit, Config)
	unsigned char                                      bOcclusionCulling : 1;                                    // 0x004C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              MinScreenRadiusForLights;                                 // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                             // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                               // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                        // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bTextureStreaming : 1;                                    // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                   // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bClearCoatEnableSecondNormal : 1;                         // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	int                                                ReflectionCaptureResolution;                              // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;     // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bForwardShading : 1;                                      // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bVertexFoggingForOpaque : 1;                              // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bAllowStaticLighting : 1;                                 // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                      // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                          // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bEightBitMeshDistanceFields : 1;                          // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bGenerateLandscapeGIData : 1;                             // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bCompressMeshDistanceFields : 1;                          // 0x0065(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0066(0x0002) MISSED OFFSET
	float                                              TessellationAdaptivePixelsPerTriangle;                    // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSeparateTranslucency : 1;                                // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData05[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                    // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FVector                                     TranslucentSortAxis;                                      // 0x0074(0x000C) (Edit, Config, IsPlainOldData)
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                       // 0x0080(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	unsigned char                                      bCustomDepthTaaJitter : 1;                                // 0x0084(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureBloom : 1;                                 // 0x0084(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                      // 0x0084(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;        // 0x0084(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                          // 0x0084(0x0001) (Edit, Config)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure;                               // 0x0088(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                            // 0x008C(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                             // 0x008C(0x0001) (Edit, Config)
	unsigned char                                      bTemporalUpsampling : 1;                                  // 0x008C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData10[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing;                               // 0x0090(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	unsigned char                                      bStencilForLODDither : 1;                                 // 0x0094(0x0001) (Edit, Config)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                               // 0x0098(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned char                                      bEarlyZPassMovable : 1;                                   // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bEarlyZPassOnlyMaterialMasking : 1;                       // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bEarlyZPassForceFull : 1;                                 // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bDBuffer : 1;                                             // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData14[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                         // 0x00A0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	unsigned char                                      bBasePassOutputsVelocity : 1;                             // 0x00A4(0x0001) (Edit, Config)
	unsigned char                                      bSelectiveBasePassOutputs : 1;                            // 0x00A4(0x0001) (Edit, Config)
	unsigned char                                      bDefaultParticleCutouts : 1;                              // 0x00A4(0x0001) (Edit, Config)
	unsigned char                                      bGlobalClipPlane : 1;                                     // 0x00A4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData16[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	TEnumAsByte<EGBufferFormat>                        GBufferFormat;                                            // 0x00A8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	unsigned char                                      bUseGPUMorphTargets : 1;                                  // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bNvidiaAftermathEnabled : 1;                              // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bInstancedStereo : 1;                                     // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bMultiView : 1;                                           // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bMobileMultiView : 1;                                     // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bMobileMultiViewDirect : 1;                               // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bMonoscopicFarField : 1;                                  // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData18[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	float                                              WireframeCullThreshold;                                   // 0x00B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSupportStationarySkylight : 1;                           // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bSupportLowQualityLightmaps : 1;                          // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bSupportPointLightWholeSceneShadows : 1;                  // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bSupportAtmosphericFog : 1;                               // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkinCacheShaders : 1;                             // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers : 1;             // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowDistanceFieldShadows : 1;                     // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableDirectionalLights : 1;                 // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData19[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	uint32_t                                           MobileNumDynamicPointLights;                              // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;             // 0x00BC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData20[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	float                                              SkinCacheSceneMemoryLimitInMB;                            // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RendererSettings"));

		return ptr;
	}

};


// Class Engine.RendererOverrideSettings
// 0x0008 (0x0048 - 0x0040)
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations : 1;                        // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bForceRecomputeTangents : 1;                              // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RendererOverrideSettings"));

		return ptr;
	}

};


// Class Engine.UserInterfaceSettings
// 0x01D0 (0x0210 - 0x0040)
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	ERenderFocusRule                                   RenderFocusRule;                                          // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TMap<TEnumAsByte<EMouseCursor>, struct FHardwareCursorReference> HardwareCursors;                                          // 0x0048(0x0050) (Edit, ZeroConstructor, Config)
	TMap<TEnumAsByte<EMouseCursor>, struct FStringClassReference> SoftwareCursors;                                          // 0x0098(0x0050) (Edit, ZeroConstructor, Config)
	struct FStringClassReference                       DefaultCursor;                                            // 0x00E8(0x0010) (Config, Deprecated)
	struct FStringClassReference                       TextEditBeamCursor;                                       // 0x00F8(0x0010) (Config, Deprecated)
	struct FStringClassReference                       CrosshairsCursor;                                         // 0x0108(0x0010) (Config, Deprecated)
	struct FStringClassReference                       HandCursor;                                               // 0x0118(0x0010) (Config, Deprecated)
	struct FStringClassReference                       GrabHandCursor;                                           // 0x0128(0x0010) (Config, Deprecated)
	struct FStringClassReference                       GrabHandClosedCursor;                                     // 0x0138(0x0010) (Config, Deprecated)
	struct FStringClassReference                       SlashedCircleCursor;                                      // 0x0148(0x0010) (Config, Deprecated)
	float                                              ApplicationScale;                                         // 0x0158(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	EUIScalingRule                                     UIScaleRule;                                              // 0x015C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FStringClassReference                       CustomScalingRuleClass;                                   // 0x0160(0x0010) (Edit, Config)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                             // 0x0170(0x0078) (Edit, Config)
	bool                                               bLoadWidgetsOnDedicatedServer;                            // 0x01E8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01E9(0x0007) MISSED OFFSET
	TArray<class UObject*>                             CursorClasses;                                            // 0x01F0(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      CustomScalingRuleClassInstance;                           // 0x0200(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDPICustomScalingRule*                       CustomScalingRule;                                        // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.UserInterfaceSettings"));

		return ptr;
	}

};


// Class Engine.DeviceProfileManager
// 0x00E0 (0x0110 - 0x0030)
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                 // 0x0030(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0040(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfileManager"));

		return ptr;
	}

};


// Class Engine.DialogueVoice
// 0x0018 (0x0048 - 0x0030)
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                   // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	struct FGuid                                       LocalizationGUID;                                         // 0x0034(0x0010) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DialogueVoice"));

		return ptr;
	}

};


// Class Engine.DialogueWave
// 0x0048 (0x0078 - 0x0030)
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                              // 0x0030(0x0001) (Edit)
	unsigned char                                      bOverride_SubtitleOverride : 1;                           // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0038(0x0010) (Edit, ZeroConstructor)
	struct FString                                     SubtitleOverride;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                          // 0x0058(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                         // 0x0068(0x0010) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DialogueWave"));

		return ptr;
	}

};


// Class Engine.Distribution
// 0x0008 (0x0038 - 0x0030)
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Distribution"));

		return ptr;
	}

};


// Class Engine.DistributionFloat
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0038(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                                // 0x0038(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloat"));

		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0008 (0x0048 - 0x0040)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatConstant"));

		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0068 - 0x0048)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinInput;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxInput;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOutput;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOutput;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatParameterBase"));

		return ptr;
	}

};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0068 - 0x0068)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatParticleParameter"));

		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0058 - 0x0040)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0040(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatConstantCurve"));

		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0048 - 0x0040)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                      // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Max;                                                      // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatUniform"));

		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0058 - 0x0040)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0040(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatUniformCurve"));

		return ptr;
	}

};


// Class Engine.DistributionVector
// 0x0008 (0x0040 - 0x0038)
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0038(0x0001) (Edit)
	unsigned char                                      bIsDirty : 1;                                             // 0x0038(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                                // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVector"));

		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0018 (0x0058 - 0x0040)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0040(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x004C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorConstant"));

		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x0040 (0x0098 - 0x0058)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinInput;                                                 // 0x0060(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     MaxInput;                                                 // 0x006C(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     MinOutput;                                                // 0x0078(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     MaxOutput;                                                // 0x0084(0x000C) (Edit, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0093(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorParameterBase"));

		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x0098 - 0x0098)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorParticleParameter"));

		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0060 - 0x0040)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0040(0x0018) (Edit)
	unsigned char                                      bLockAxes : 1;                                            // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorConstantCurve"));

		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0028 (0x0068 - 0x0040)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0040(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     Min;                                                      // 0x004C(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                         // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorUniform"));

		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0068 - 0x0040)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0040(0x0018) (Edit)
	unsigned char                                      bLockAxes1 : 1;                                           // 0x0058(0x0001)
	unsigned char                                      bLockAxes2 : 1;                                           // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x005E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	unsigned char                                      bUseExtremes : 1;                                         // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorUniformCurve"));

		return ptr;
	}

};


// Class Engine.DPICustomScalingRule
// 0x0000 (0x0030 - 0x0030)
class UDPICustomScalingRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DPICustomScalingRule"));

		return ptr;
	}

};


// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0030 - 0x0030)
class UDynamicBlueprintBinding : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DynamicBlueprintBinding"));

		return ptr;
	}

};


// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ComponentDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputDelegateBinding
// 0x0000 (0x0030 - 0x0030)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                              // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputActionDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputAxisDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                             // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputAxisKeyDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0040 - 0x0040)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputVectorAxisDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                 // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputKeyDelegateBinding"));

		return ptr;
	}

};


// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                               // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputTouchDelegateBinding"));

		return ptr;
	}

};


// Class Engine.EdGraph
// 0x0090 (0x00C0 - 0x0030)
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                   // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEdGraphNode*>                        Nodes;                                                    // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable : 1;                                            // 0x0048(0x0001)
	unsigned char                                      bAllowDeletion : 1;                                       // 0x0048(0x0001)
	unsigned char                                      bAllowRenaming : 1;                                       // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x77];                                      // 0x0049(0x0077) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EdGraph"));

		return ptr;
	}

};


// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00C8 - 0x00A8)
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                     // 0x00A8(0x0010) (ZeroConstructor)
	struct FString                                     Excerpt;                                                  // 0x00B8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EdGraphNode_Documentation"));

		return ptr;
	}

};


// Class Engine.EdGraphSchema
// 0x0000 (0x0030 - 0x0030)
class UEdGraphSchema : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EdGraphSchema"));

		return ptr;
	}

};


// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0030 - 0x0030)
class UImportantToggleSettingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ImportantToggleSettingInterface"));

		return ptr;
	}

};


// Class Engine.EndUserSettings
// 0x0010 (0x0040 - 0x0030)
class UEndUserSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	bool                                               bSendAnonymousUsageDataToEpic;                            // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSendMeanTimeBetweenFailureDataToEpic;                    // 0x0039(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAllowUserIdInUsageData;                                  // 0x003A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x003B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EndUserSettings"));

		return ptr;
	}

};


// Class Engine.PendingNetGame
// 0x00A0 (0x00D0 - 0x0030)
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UNetDriver*                                  NetDriver;                                                // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                            // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x0048(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PendingNetGame"));

		return ptr;
	}

};


// Class Engine.WorldSubsystem
// 0x0000 (0x0038 - 0x0038)
class UWorldSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.WorldSubsystem"));

		return ptr;
	}

};


// Class Engine.GameEngine
// 0x0060 (0x0F50 - 0x0EF0)
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                             // 0x0EF0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerFlushLogInterval;                                   // 0x0EF4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x0EF8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0F00(0x0040) MISSED OFFSET
	TArray<class UWorld*>                              PendingDestroyWorldList;                                  // 0x0F40(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.GameEngine"));

		return ptr;
	}

};


// Class Engine.EngineHandlerComponentFactory
// 0x0000 (0x0030 - 0x0030)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EngineHandlerComponentFactory"));

		return ptr;
	}

};


// Class Engine.Exporter
// 0x0040 (0x0070 - 0x0030)
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     ExportRootScope;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             FormatExtension;                                          // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                        // 0x0050(0x0010) (ZeroConstructor)
	int                                                PreferredFormatIndex;                                     // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TextIndent;                                               // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bText : 1;                                                // 0x0068(0x0001)
	unsigned char                                      bSelectedOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bForceFileOperations : 1;                                 // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Exporter"));

		return ptr;
	}

};


// Class Engine.ExtendedReflectionSettings
// 0x0080 (0x00B0 - 0x0030)
class UExtendedReflectionSettings : public UObject
{
public:
	float                                              GlobalOverrideIntensity;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                StreamingSectionSize;                                     // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FExtendedReflectionSharedCubemap>    SharedCubemaps;                                           // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<class UTextureCube*>                        ReferencedCubemaps;                                       // 0x0048(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0058(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ExtendedReflectionSettings"));

		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x00B0 (0x00E0 - 0x0030)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x0030(0x00B0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.FontImportOptions"));

		return ptr;
	}

};


// Class Engine.Font
// 0x0198 (0x01C8 - 0x0030)
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	EFontCacheType                                     FontCacheType;                                            // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FFontCharacter>                      Characters;                                               // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0050(0x0010) (ZeroConstructor)
	int                                                IsRemapped;                                               // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EmScale;                                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ascent;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Descent;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Leading;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Kerning;                                                  // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x0078(0x00B0) (Edit)
	int                                                NumCharacters;                                            // 0x0128(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                            // 0x0130(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                            // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LegacyFontSize;                                           // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LegacyFontName;                                           // 0x0148(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FCompositeFont                              CompositeFont;                                            // 0x0150(0x0028)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0178(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Font"));

		return ptr;
	}

};


// Class Engine.FontFace
// 0x0030 (0x0060 - 0x0030)
class UFontFace : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	struct FString                                     SourceFilename;                                           // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EFontHinting                                       Hinting;                                                  // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EFontLoadingPolicy                                 LoadingPolicy;                                            // 0x0049(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EFontLayoutMethod                                  LayoutMethod;                                             // 0x004A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x15];                                      // 0x004B(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.FontFace"));

		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (0x0030 - 0x0030)
class UHapticFeedbackEffect_Base : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_Base"));

		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Buffer
// 0x0040 (0x0070 - 0x0030)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                               // 0x0030(0x0010) (Edit, ZeroConstructor)
	int                                                SampleRate;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0044(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_Buffer"));

		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Curve
// 0x00F0 (0x0120 - 0x0030)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve                HapticDetails;                                            // 0x0030(0x00F0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_Curve"));

		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0038 (0x0068 - 0x0030)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                                  SoundWave;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0038(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect_SoundWave"));

		return ptr;
	}

};


// Class Engine.InheritableComponentHandler
// 0x0020 (0x0050 - 0x0030)
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                  // 0x0030(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                    // 0x0040(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InheritableComponentHandler"));

		return ptr;
	}

};


// Class Engine.PlayerInput
// 0x03A0 (0x03D0 - 0x0030)
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0030(0x00F8) MISSED OFFSET
	TArray<struct FKeyBind>                            DebugExecBindings;                                        // 0x0128(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0138(0x0030) MISSED OFFSET
	TArray<struct FName>                               InvertedAxis;                                             // 0x0168(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x258];                                     // 0x0178(0x0258) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlayerInput"));

		return ptr;
	}


	void STATIC_SetMouseSensitivity(float Sensitivity);
	void STATIC_SetGamePadSensitivityOf(const struct FKey& AxisKey, float Sensitivity);
	void STATIC_SetGamePadSensitivity(float Sensitivity);
	void STATIC_SetGamePadDeadZoneOf(const struct FKey& AxisKey, float DEADZONE);
	void STATIC_SetGamePadDeadZone(float DEADZONE);
	void STATIC_SetBind(const struct FName& BindName, const struct FString& Command);
	void STATIC_InvertAxisKey(const struct FKey& AxisKey);
	void STATIC_InvertAxis(const struct FName& AxisName);
	void STATIC_ClearSmoothing();
};


// Class Engine.InputSettings
// 0x0080 (0x00B0 - 0x0030)
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                               // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                           // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bF11TogglesFullscreen : 1;                                // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bUseMouseForTouch : 1;                                    // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bEnableMouseSmoothing : 1;                                // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      bEnableFOVScaling : 1;                                    // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              FOVScale;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DoubleClickTime;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bCaptureMouseOnLaunch;                                    // 0x004C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	EMouseCaptureMode                                  DefaultViewportMouseCaptureMode;                          // 0x004D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDefaultViewportMouseLock;                                // 0x004E(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	EMouseLockMode                                     DefaultViewportMouseLockMode;                             // 0x004F(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                           // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                             // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bAlwaysShowTouchInterface;                                // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowConsoleOnFourFingerTap;                              // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0072(0x0006) MISSED OFFSET
	struct FStringAssetReference                       DefaultTouchInterface;                                    // 0x0078(0x0010) (Edit, Config)
	struct FKey                                        ConsoleKey;                                               // 0x0088(0x0018) (Config, Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                              // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InputSettings"));

		return ptr;
	}

};


// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0048 - 0x0030)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x0030(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpCurveEdSetup"));

		return ptr;
	}

};


// Class Engine.InterpData
// 0x0048 (0x0078 - 0x0030)
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                             // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              PathBuildTime;                                            // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              EdSectionStart;                                           // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EdSectionEnd;                                             // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune : 1;                                  // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	class UInterpGroupDirector*                        CachedDirectorGroup;                                      // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FName>                               AllEventNames;                                            // 0x0068(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpData"));

		return ptr;
	}

};


// Class Engine.InterpFilter
// 0x0010 (0x0040 - 0x0030)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter"));

		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0000 (0x0040 - 0x0040)
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter_Classes"));

		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x0000 (0x0040 - 0x0040)
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter_Custom"));

		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x0028 (0x0058 - 0x0030)
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	struct FName                                       GroupName;                                                // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroupColor;                                               // 0x0050(0x0004) (Edit, IsPlainOldData)
	unsigned char                                      bCollapsed : 1;                                           // 0x0054(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x0054(0x0001) (Transient)
	unsigned char                                      bIsFolder : 1;                                            // 0x0054(0x0001)
	unsigned char                                      bIsParented : 1;                                          // 0x0054(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x0054(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpGroup"));

		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x0010 (0x0068 - 0x0058)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                           // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CompressTolerance;                                        // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupCamera"));

		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0058 - 0x0058)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupDirector"));

		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0020 (0x0050 - 0x0030)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      GroupActor;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0040(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInst"));

		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInstCamera"));

		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInstDirector"));

		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0048 (0x0078 - 0x0030)
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	TArray<class UInterpTrack*>                        SubTracks;                                                // 0x0040(0x0010) (ZeroConstructor)
	class UClass*                                      TrackInstClass;                                           // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	struct FString                                     TrackTitle;                                               // 0x0060(0x0010) (ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                         // 0x0070(0x0001)
	unsigned char                                      bDirGroupOnly : 1;                                        // 0x0070(0x0001)
	unsigned char                                      bDisableTrack : 1;                                        // 0x0070(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x0070(0x0001) (Transient)
	unsigned char                                      bIsAnimControlTrack : 1;                                  // 0x0070(0x0001)
	unsigned char                                      bSubTrackOnly : 1;                                        // 0x0070(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x0070(0x0001) (Transient)
	unsigned char                                      bIsRecording : 1;                                         // 0x0070(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrack"));

		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0018 (0x0090 - 0x0078)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                // 0x0078(0x0010) (ZeroConstructor)
	struct FName                                       PropertyName;                                             // 0x0088(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackBoolProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0018 (0x0090 - 0x0078)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x0078(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                         // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackDirector"));

		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0018 (0x0090 - 0x0078)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x0078(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0088(0x0001) (Edit)
	unsigned char                                      bUseCustomEventName : 1;                                  // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackEvent"));

		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0020 (0x0098 - 0x0078)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0078(0x0018)
	float                                              CurveTension;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatBase"));

		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x00B8 - 0x0098)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x00A0(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                   // 0x00B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackAnimControl"));

		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0018 (0x00B0 - 0x0098)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                         // 0x0098(0x0001) (Edit)
	unsigned char                                      bFadeAudio : 1;                                           // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	struct FLinearColor                                FadeColor;                                                // 0x009C(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFade"));

		return ptr;
	}

};


// Class Engine.InterpTrackFloatAnimBPParam
// 0x0020 (0x00B8 - 0x0098)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                       // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AnimClass;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParamName;                                                // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatAnimBPParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00B0 - 0x0098)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatMaterialParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x00A0 - 0x0098)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatParticleParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x00A0 - 0x0098)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0058 (0x00D0 - 0x0078)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0078(0x0018)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0090(0x0018)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x00A8(0x0010)
	struct FName                                       LookAtGroupName;                                          // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LinCurveTension;                                          // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngCurveTension;                                          // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation : 1;                                // 0x00C8(0x0001) (Edit)
	unsigned char                                      bShowArrowAtKeys : 1;                                     // 0x00C8(0x0001) (Edit)
	unsigned char                                      bDisableMovement : 1;                                     // 0x00C8(0x0001) (Edit)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                            // 0x00C8(0x0001) (Edit)
	unsigned char                                      bShowRotationOnCurveEd : 1;                               // 0x00C8(0x0001) (Edit)
	unsigned char                                      bHide3DTrack : 1;                                         // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackMove"));

		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0018 (0x00B0 - 0x0098)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                 // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x00A0(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackMoveAxis"));

		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x0098 - 0x0098)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackSlomo"));

		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0020 (0x0098 - 0x0078)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x0078(0x0018)
	float                                              CurveTension;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackLinearColorBase"));

		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x00A0 - 0x0098)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackLinearColorProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0088 - 0x0078)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                // 0x0078(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackParticleReplay"));

		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0018 (0x0090 - 0x0078)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x0078(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                            // 0x0088(0x0001) (Edit)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                        // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackToggle"));

		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0020 (0x0098 - 0x0078)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0078(0x0018)
	float                                              CurveTension;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorBase"));

		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0098 - 0x0098)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackAudioMaster"));

		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x00A0 - 0x0098)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackColorProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0098 - 0x0098)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackColorScale"));

		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0018 (0x00B0 - 0x0098)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                       // 0x00A8(0x0001) (Edit)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                           // 0x00A8(0x0001) (Edit)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x00A8(0x0001) (Edit)
	unsigned char                                      bTreatAsDialogue : 1;                                     // 0x00A8(0x0001) (Edit)
	unsigned char                                      bAttach : 1;                                              // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackSound"));

		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00B0 - 0x0098)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorMaterialParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x00A0 - 0x0098)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0098(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0018 (0x0090 - 0x0078)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                          // 0x0078(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0088(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVisibility"));

		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x0030 - 0x0030)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInst"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstAnimControl"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0030 - 0x0030)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstAudioMaster"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0030 - 0x0030)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstColorScale"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstDirector"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstEvent"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x0030 - 0x0030)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFade"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (0x0048 - 0x0030)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ResetFloat;                                               // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x003C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatAnimBPParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0068 - 0x0030)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0030(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                              // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0050(0x0010) (ZeroConstructor)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatMaterialParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatParticleParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0018 (0x0048 - 0x0030)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x0030(0x000C) (IsPlainOldData)
	struct FRotator                                    ResetRotation;                                            // 0x003C(0x000C) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstMove"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstParticleReplay"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0040 - 0x0030)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UProperty*                                   InterpProperty;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstProperty"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x0018 (0x0058 - 0x0040)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	class UBoolProperty*                               BoolProperty;                                             // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ResetBool;                                                // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstBoolProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0010 (0x0050 - 0x0040)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	struct FColor                                      ResetColor;                                               // 0x0048(0x0004) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstColorProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0010 (0x0050 - 0x0040)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                               // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0058 - 0x0040)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	struct FLinearColor                                ResetColor;                                               // 0x0048(0x0010) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstLinearColorProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0018 (0x0058 - 0x0040)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	struct FVector                                     ResetVector;                                              // 0x0048(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVectorProp"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstSlomo"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0010 (0x0040 - 0x0030)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0038(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstSound"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0010 (0x0040 - 0x0030)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSavedActiveState : 1;                                    // 0x0038(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstToggle"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0068 - 0x0030)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                             // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0050(0x0010) (ZeroConstructor)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVectorMaterialParam"));

		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0038 - 0x0030)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVisibility"));

		return ptr;
	}

};


// Class Engine.IntSerialization
// 0x0028 (0x0058 - 0x0030)
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                    // 0x0030(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	uint32_t                                           UnsignedInt32Variable;                                    // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                                    // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	int8_t                                             SignedInt8Variable;                                       // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0041(0x0001) MISSED OFFSET
	int16_t                                            SignedInt16Variable;                                      // 0x0042(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                                     // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                SignedInt32Variable;                                      // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.IntSerialization"));

		return ptr;
	}

};


// Class Engine.Layer
// 0x0020 (0x0050 - 0x0030)
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                           // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FLayerActorStats>                    ActorStats;                                               // 0x0040(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Layer"));

		return ptr;
	}

};


// Class Engine.LevelActorContainer
// 0x0010 (0x0040 - 0x0030)
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                              Actors;                                                   // 0x0030(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelActorContainer"));

		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x0150 (0x0180 - 0x0030)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                              // 0x0030(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	TAssetPtr<class UWorld>                            WorldAsset;                                               // 0x0038(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FName                                       PackageNameToLoad;                                        // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               LODPackageNames;                                          // 0x0060(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET
	struct FTransform                                  LevelTransform;                                           // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x00B0(0x0014) MISSED OFFSET
	unsigned char                                      UnknownData02 : 3;                                        // 0x00C4(0x0001)
	unsigned char                                      bShouldBeVisibleInEditor : 1;                             // 0x00C4(0x0001)
	unsigned char                                      bLocked : 1;                                              // 0x00C4(0x0001)
	unsigned char                                      bShouldBeLoaded : 1;                                      // 0x00C4(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBeVisible : 1;                                     // 0x00C4(0x0001) (BlueprintVisible)
	unsigned char                                      bIsStatic : 1;                                            // 0x00C4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bShouldBlockOnLoad : 1;                                   // 0x00C5(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData03[0x2];                                       // 0x00C6(0x0002) MISSED OFFSET
	int                                                LevelLODIndex;                                            // 0x00C8(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	unsigned char                                      bDisableDistanceStreaming : 1;                            // 0x00D0(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData05 : 1;                                        // 0x00D0(0x0001)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	struct FColor                                      DrawColor;                                                // 0x00D4(0x0004) (Deprecated, IsPlainOldData)
	struct FLinearColor                                LevelColor;                                               // 0x00D8(0x0010) (Edit, IsPlainOldData)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x00E8(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x00FC(0x000C) MISSED OFFSET
	TArray<struct FString>                             Keywords;                                                 // 0x0108(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                            // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                          // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                             // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                            // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ULevel*                                      LoadedLevel;                                              // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevel*                                      PendingUnloadLevel;                                       // 0x0160(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0168(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelStreaming"));

		return ptr;
	}


	bool STATIC_IsStreamingStatePending();
	bool STATIC_IsLevelVisible();
	bool STATIC_IsLevelLoaded();
	class ALevelScriptActor* STATIC_GetLevelScriptActor();
	class ULevelStreaming* STATIC_CreateInstance(const struct FString& UniqueInstanceName);
};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingAlwaysLoaded"));

		return ptr;
	}


	bool STATIC_IsStreamingStatePending();
	bool STATIC_IsLevelVisible();
	bool STATIC_IsLevelLoaded();
	class ALevelScriptActor* STATIC_GetLevelScriptActor();
	class ULevelStreaming* STATIC_CreateInstance(const struct FString& UniqueInstanceName);
};


// Class Engine.LevelStreamingKismet
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingKismet"));

		return ptr;
	}


	class ULevelStreamingKismet* STATIC_LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess);
};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingPersistent"));

		return ptr;
	}


	bool STATIC_IsStreamingStatePending();
	bool STATIC_IsLevelVisible();
	bool STATIC_IsLevelLoaded();
	class ALevelScriptActor* STATIC_GetLevelScriptActor();
	class ULevelStreaming* STATIC_CreateInstance(const struct FString& UniqueInstanceName);
};


// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0048 - 0x0030)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        Surfaces;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightmappedSurfaceCollection"));

		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0048 - 0x0030)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0030(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LightmassPrimitiveSettingsObject"));

		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0000 (0x0030 - 0x0030)
class ULocalMessage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.LocalMessage"));

		return ptr;
	}

};


// Class Engine.EngineMessage
// 0x0080 (0x00B0 - 0x0030)
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                       // 0x0030(0x0010) (ZeroConstructor)
	struct FString                                     MaxedOutMessage;                                          // 0x0040(0x0010) (ZeroConstructor)
	struct FString                                     EnteredMessage;                                           // 0x0050(0x0010) (ZeroConstructor)
	struct FString                                     LeftMessage;                                              // 0x0060(0x0010) (ZeroConstructor)
	struct FString                                     GlobalNameChange;                                         // 0x0070(0x0010) (ZeroConstructor)
	struct FString                                     SpecEnteredMessage;                                       // 0x0080(0x0010) (ZeroConstructor)
	struct FString                                     NewPlayerMessage;                                         // 0x0090(0x0010) (ZeroConstructor)
	struct FString                                     NewSpecMessage;                                           // 0x00A0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.EngineMessage"));

		return ptr;
	}

};


// Class Engine.MapBuildDataRegistry
// 0x00F8 (0x0128 - 0x0030)
class UMapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                     // 0x0030(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF7];                                      // 0x0031(0x00F7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MapBuildDataRegistry"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAbs"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionActorPositionWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	float                                              ConstA;                                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAdd"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAppendVector"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArccosine
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArccosine"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArccosineFast
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArccosineFast"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArcsine
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArcsine"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArcsineFast
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArcsineFast"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangent"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent2
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            X;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangent2"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent2Fast
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            X;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangent2Fast"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangentFast
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionArctangentFast"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericFogColor"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericLightColor"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericLightVector"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionBlackBody
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                     // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBlackBody"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x00C0 (0x0128 - 0x0068)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    A;                                                        // 0x0068(0x0040)
	struct FMaterialAttributesInput                    B;                                                        // 0x00A8(0x0040)
	struct FExpressionInput                            ALPHA;                                                    // 0x00E8(0x0038)
	TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType;                                  // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType;                                 // 0x0121(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0122(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBlendMaterialAttributes"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0068(0x0040)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBreakMaterialAttributes"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x00B8 (0x0120 - 0x0068)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0068(0x0038)
	struct FExpressionInput                            Height;                                                   // 0x00A0(0x0038)
	struct FExpressionInput                            HeightRatioInput;                                         // 0x00D8(0x0038)
	float                                              HeightRatio;                                              // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReferencePlane;                                           // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBumpOffset"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCameraPositionWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCameraVectorWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCeil"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x00B8 (0x0120 - 0x0068)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	struct FExpressionInput                            Min;                                                      // 0x00A0(0x0038)
	struct FExpressionInput                            Max;                                                      // 0x00D8(0x0038)
	TEnumAsByte<EClampMode>                            ClampMode;                                                // 0x0110(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              MinDefault;                                               // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDefault;                                               // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionClamp"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x0088 - 0x0068)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                               // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParameterName;                                            // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ParameterId;                                              // 0x0078(0x0010) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCollectionParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x0028 (0x0090 - 0x0068)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                    // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x006C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Text;                                                     // 0x0070(0x0010) (Edit, ZeroConstructor)
	struct FLinearColor                                CommentColor;                                             // 0x0080(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionComment"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	unsigned char                                      R : 1;                                                    // 0x00A0(0x0001) (Edit)
	unsigned char                                      G : 1;                                                    // 0x00A0(0x0001) (Edit)
	unsigned char                                      B : 1;                                                    // 0x00A0(0x0001) (Edit)
	unsigned char                                      A : 1;                                                    // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionComponentMask"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0008 (0x0070 - 0x0068)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0070 - 0x0068)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              G;                                                        // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant2Vector"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x0078 - 0x0068)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0068(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant3Vector"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0078 - 0x0068)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0068(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant4Vector"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	float                                              Bias;                                                     // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstantBiasScale"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	float                                              Period;                                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCosine"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCrossProduct"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                     // 0x0068(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomInput>                        Inputs;                                                   // 0x0090(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustom"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionClearCoatNormalCustomOutput"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTangentOutput
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTangentOutput"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexInterpolator
// 0x0048 (0x00B0 - 0x0068)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexInterpolator"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDDX
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDDX"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDDY
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDDY"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalDerivative"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalLifetimeOpacity"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                              // 0x0068(0x0038)
	float                                              ConstWidth;                                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstHeight;                                              // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalMipmapLevel"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthFade
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                // 0x0068(0x0038)
	struct FExpressionInput                            FadeDistance;                                             // 0x00A0(0x0038)
	float                                              OpacityDefault;                                           // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeDistanceDefault;                                      // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDepthFade"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                            // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FExpressionInput                            Depth;                                                    // 0x0070(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDepthOfFieldFunction"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                     // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDeriveNormalZ"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0080 (0x00E8 - 0x0068)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	struct FExpressionInput                            Fraction;                                                 // 0x00A0(0x0038)
	struct FLinearColor                                LuminanceFactors;                                         // 0x00D8(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDesaturation"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistance"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceCullFade"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceFieldGradient"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceToNearestSurface"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	float                                              ConstA;                                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDivide"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDotProduct"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x0020 (0x0088 - 0x0068)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                               // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                             // 0x0078(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDynamicParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionEyeAdaptation"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0118 (0x0180 - 0x0068)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0068(0x0038)
	struct FExpressionInput                            Inputs[0x4];                                              // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFeatureLevelSwitch"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFloor"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFmod"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x0078 - 0x0068)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontTexturePage;                                          // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFontSample"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x0098 - 0x0078)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0080(0x0010) (IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFontSampleParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFrac"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x00B8 (0x0120 - 0x0068)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                               // 0x0068(0x0038)
	float                                              Exponent;                                                 // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FExpressionInput                            BaseReflectFractionIn;                                    // 0x00A8(0x0038)
	float                                              BaseReflectFraction;                                      // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct FExpressionInput                            Normal;                                                   // 0x00E8(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFresnel"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x00D8 (0x0140 - 0x0068)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                  // 0x0068(0x0038)
	struct FString                                     InputName;                                                // 0x00A0(0x0010) (Edit, ZeroConstructor)
	struct FString                                     Description;                                              // 0x00B0(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       ID;                                                       // 0x00C0(0x0010) (IsPlainOldData)
	TEnumAsByte<EFunctionInputType>                    InputType;                                                // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x00D1(0x000F) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                             // 0x00E0(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                            // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	int                                                SortPriority;                                             // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview : 1;                            // 0x00F8(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x47];                                      // 0x00F9(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFunctionInput"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                               // 0x0068(0x0010) (Edit, ZeroConstructor)
	struct FString                                     Description;                                              // 0x0078(0x0010) (Edit, ZeroConstructor)
	int                                                SortPriority;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FExpressionInput                            A;                                                        // 0x0090(0x0038)
	unsigned char                                      bLastPreviewed : 1;                                       // 0x00C8(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	struct FGuid                                       ID;                                                       // 0x00CC(0x0010) (IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFunctionOutput"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0050 (0x00B8 - 0x0068)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0068(0x0040)
	TArray<struct FGuid>                               AttributeGetTypes;                                        // 0x00A8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionGetMaterialAttributes"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionGIReplace
// 0x00A8 (0x0110 - 0x0068)
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0068(0x0038)
	struct FExpressionInput                            StaticIndirect;                                           // 0x00A0(0x0038)
	struct FExpressionInput                            DynamicIndirect;                                          // 0x00D8(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionGIReplace"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x0128 (0x0190 - 0x0068)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	struct FExpressionInput                            AGreaterThanB;                                            // 0x00D8(0x0038)
	struct FExpressionInput                            AEqualsB;                                                 // 0x0110(0x0038)
	struct FExpressionInput                            ALessThanB;                                               // 0x0148(0x0038)
	float                                              EqualsThreshold;                                          // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAEqualsB;                                            // 0x0188(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionIf"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightmapUVs"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0068(0x0038)
	struct FExpressionInput                            Lightmass;                                                // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightmassReplace"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightVector"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x00B8 (0x0120 - 0x0068)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	struct FExpressionInput                            ALPHA;                                                    // 0x00D8(0x0038)
	float                                              ConstA;                                                   // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAlpha;                                               // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLinearInterpolate"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm2
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                        // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLogarithm2"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0578 (0x05E0 - 0x0068)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0068(0x0038)
	struct FExpressionInput                            Metallic;                                                 // 0x00A0(0x0038)
	struct FExpressionInput                            Specular;                                                 // 0x00D8(0x0038)
	struct FExpressionInput                            Roughness;                                                // 0x0110(0x0038)
	struct FExpressionInput                            EmissiveColor;                                            // 0x0148(0x0038)
	struct FExpressionInput                            Opacity;                                                  // 0x0180(0x0038)
	struct FExpressionInput                            OpacityMask;                                              // 0x01B8(0x0038)
	struct FExpressionInput                            Normal;                                                   // 0x01F0(0x0038)
	struct FExpressionInput                            WorldPositionOffset;                                      // 0x0228(0x0038)
	struct FExpressionInput                            WorldDisplacement;                                        // 0x0260(0x0038)
	struct FExpressionInput                            TessellationMultiplier;                                   // 0x0298(0x0038)
	struct FExpressionInput                            SubsurfaceColor;                                          // 0x02D0(0x0038)
	struct FExpressionInput                            ClearCoat;                                                // 0x0308(0x0038)
	struct FExpressionInput                            ClearCoatRoughness;                                       // 0x0340(0x0038)
	struct FExpressionInput                            AmbientOcclusion;                                         // 0x0378(0x0038)
	struct FExpressionInput                            Refraction;                                               // 0x03B0(0x0038)
	struct FExpressionInput                            CustomizedUVs[0x8];                                       // 0x03E8(0x0038)
	struct FExpressionInput                            PixelDepthOffset;                                         // 0x05A8(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMakeMaterialAttributes"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0028 (0x0090 - 0x0068)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                         // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FFunctionExpressionInput>            FunctionInputs;                                           // 0x0070(0x0010) (ZeroConstructor)
	TArray<struct FFunctionExpressionOutput>           FunctionOutputs;                                          // 0x0080(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialFunctionCall"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0068(0x0038)
	struct FExpressionInput                            MaterialProxy;                                            // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialProxyReplace"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionMax
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	float                                              ConstA;                                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMax"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionMin
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	float                                              ConstA;                                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMin"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	float                                              ConstA;                                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMultiply"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionNoise
// 0x0098 (0x0100 - 0x0068)
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0068(0x0038)
	struct FExpressionInput                            FilterWidth;                                              // 0x00A0(0x0038)
	float                                              Scale;                                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Quality;                                                  // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                            // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	unsigned char                                      bTurbulence : 1;                                          // 0x00E4(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	int                                                Levels;                                                   // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMin;                                                // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMax;                                                // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LevelScale;                                               // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling : 1;                                              // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	uint32_t                                           RepeatSize;                                               // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionNoise"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionNormalize"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectBounds"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectOrientation"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectPositionWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectRadius"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionOneMinus"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x00B8 (0x0120 - 0x0068)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0068(0x0038)
	struct FExpressionInput                            Time;                                                     // 0x00A0(0x0038)
	struct FExpressionInput                            Speed;                                                    // 0x00D8(0x0038)
	float                                              SpeedX;                                                   // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedY;                                                   // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFractionalPart;                                          // 0x011C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x011D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPanner"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0020 (0x0088 - 0x0068)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0070(0x0010) (IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0010 (0x0098 - 0x0088)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SliderMin;                                                // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SliderMax;                                                // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionScalarParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x0090 - 0x0088)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticBoolParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0070 (0x0100 - 0x0090)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                        // 0x0090(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00C8(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticSwitchParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0040 (0x00C8 - 0x0088)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0088(0x0038)
	unsigned char                                      DefaultR : 1;                                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      DefaultG : 1;                                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      DefaultB : 1;                                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      DefaultA : 1;                                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticComponentMaskParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x0098 - 0x0088)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0088(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVectorParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleColor"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleDirection"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleMacroUV"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleMotionBlurFade"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticlePositionWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRadius"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRandom"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRelativeTime"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSize"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSpeed"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceFadeAmount"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceRandom"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPixelDepth"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPixelNormalWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x0068(0x0038)
	struct FExpressionInput                            Exponent;                                                 // 0x00A0(0x0038)
	float                                              ConstExponent;                                            // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPower"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPrecomputedAOMask"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreSkinnedNormal"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreSkinnedPosition"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0070 (0x00D8 - 0x0068)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            CurrentFrame;                                             // 0x0068(0x0038)
	struct FExpressionInput                            PreviousFrame;                                            // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPreviousFrameSwitch"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x00E0 (0x0148 - 0x0068)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0068(0x0038)
	struct FExpressionInput                            Inputs[0x3];                                              // 0x00A0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionQualitySwitch"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                        // 0x0068(0x0038)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                          // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionReflectionVectorWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionReroute
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionReroute : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionReroute"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00E8 (0x0150 - 0x0068)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                   // 0x0068(0x0038)
	struct FExpressionInput                            RotationAngle;                                            // 0x00A0(0x0038)
	struct FExpressionInput                            PivotPoint;                                               // 0x00D8(0x0038)
	struct FExpressionInput                            Position;                                                 // 0x0110(0x0038)
	float                                              Period;                                                   // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x014C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRotateAboutAxis"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0080 (0x00E8 - 0x0068)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0068(0x0038)
	struct FExpressionInput                            Time;                                                     // 0x00A0(0x0038)
	float                                              CenterX;                                                  // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterY;                                                  // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRotator"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionRound
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRound"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSaturate
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSaturate"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneColor
// 0x0080 (0x00E8 - 0x0068)
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038)
	struct FExpressionInput                            OffsetFraction;                                           // 0x00A8(0x0038) (Deprecated)
	struct FVector2D                                   ConstInput;                                               // 0x00E0(0x0008) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneColor"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0080 (0x00E8 - 0x0068)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038)
	struct FExpressionInput                            Coordinates;                                              // 0x00A8(0x0038) (Deprecated)
	struct FVector2D                                   ConstInput;                                               // 0x00E0(0x0008) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneDepth"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneTexelSize"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0068(0x0038)
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                           // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFiltered;                                                // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneTexture"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionScreenPosition"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (0x0088 - 0x0068)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>                    Inputs;                                                   // 0x0068(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               AttributeSetTypes;                                        // 0x0078(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSetMaterialAttributes"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSign
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSign"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	float                                              Period;                                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSine"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSpeedTree
// 0x00F0 (0x0158 - 0x0068)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                            GeometryInput;                                            // 0x0068(0x0038)
	struct FExpressionInput                            WindInput;                                                // 0x00A0(0x0038)
	struct FExpressionInput                            LODInput;                                                 // 0x00D8(0x0038)
	struct FExpressionInput                            ExtraBendWS;                                              // 0x0110(0x0038)
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                             // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                 // 0x0149(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                  // 0x014A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x014B(0x0001) MISSED OFFSET
	float                                              BillboardThreshold;                                       // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAccurateWindVelocities;                                  // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSpeedTree"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x00E8 (0x0150 - 0x0068)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	struct FExpressionInput                            Radius;                                                   // 0x00D8(0x0038)
	struct FExpressionInput                            Hardness;                                                 // 0x0110(0x0038)
	float                                              AttenuationRadius;                                        // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HardnessPercent;                                          // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSphereMask"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                  // 0x0068(0x0038)
	float                                              ConstantDensity;                                          // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSphericalParticleOpacity"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSquareRoot"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0070 - 0x0068)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticBool"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x00B0 (0x0118 - 0x0068)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038)
	struct FExpressionInput                            Value;                                                    // 0x00E0(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticSwitch"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0078 (0x00E0 - 0x0068)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0068(0x0038)
	struct FExpressionInput                            B;                                                        // 0x00A0(0x0038)
	float                                              ConstA;                                                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSubtract"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTangent
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	float                                              Period;                                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTangent"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTerrainBlend
// 0x0058 (0x00C0 - 0x0068)
class UMaterialExpressionTerrainBlend : public UMaterialExpression
{
public:
	struct FExpressionInput                            UV;                                                       // 0x0068(0x0038)
	TArray<struct FTerrainLayer>                       Inputs;                                                   // 0x00A0(0x0010) (Edit, ZeroConstructor)
	uint32_t                                           ConstCoordinate;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x00B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTerrainBlend"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTerrainBlendDesert
// 0x0060 (0x00C8 - 0x0068)
class UMaterialExpressionTerrainBlendDesert : public UMaterialExpression
{
public:
	struct FExpressionInput                            UV;                                                       // 0x0068(0x0038)
	TArray<struct FTerrainLayerDesert>                 Inputs;                                                   // 0x00A0(0x0010) (Edit, ZeroConstructor)
	uint32_t                                           ConstCoordinate;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x00B4(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTerrainBlendDesert"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureBase
// 0x0010 (0x0078 - 0x0068)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialSamplerType>                  SamplerType;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                            // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureBase"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x0078 - 0x0078)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureObject"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0178 (0x01F0 - 0x0078)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0078(0x0038)
	struct FExpressionInput                            TextureObject;                                            // 0x00B0(0x0038)
	struct FExpressionInput                            MipValue;                                                 // 0x00E8(0x0038)
	struct FExpressionInput                            CoordinatesDX;                                            // 0x0120(0x0038)
	struct FExpressionInput                            CoordinatesDY;                                            // 0x0158(0x0038)
	struct FExpressionInput                            SampleCondition;                                          // 0x0190(0x0038)
	TEnumAsByte<ETextureMipValueMode>                  MipValueMode;                                             // 0x01C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESamplerSourceMode>                    SamplerSource;                                            // 0x01C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01CA(0x0002) MISSED OFFSET
	uint32_t                                           ConstCoordinate;                                          // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ConstMipValue;                                            // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AutomaticViewMipBias : 1;                                 // 0x01D4(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	bool                                               bConditional;                                             // 0x01D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01D9(0x0003) MISSED OFFSET
	struct FLinearColor                                DefaultValue;                                             // 0x01DC(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSample"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x01F8 - 0x01F0)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x01F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSubUV"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x0210 - 0x01F0)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x01F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x01F8(0x0010) (IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0208(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x0210 - 0x0210)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureObjectParameter"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x0210 - 0x0210)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter2D"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x0218 - 0x0210)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x0210(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x0214(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0215(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAntialiasedTextureMask"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x0218 - 0x0210)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x0210(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0211(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterSubUV"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x0210 - 0x0210)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterCube"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0078 - 0x0068)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UTiling;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VTiling;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnMirrorU : 1;                                            // 0x0074(0x0001) (Edit)
	unsigned char                                      UnMirrorV : 1;                                            // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureCoordinate"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureProperty
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureObject;                                            // 0x0068(0x0038)
	TEnumAsByte<EMaterialExposedTextureProperty>       Property;                                                 // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureProperty"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0008 (0x0070 - 0x0068)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                         // 0x0068(0x0001) (Edit)
	unsigned char                                      bOverride_Period : 1;                                     // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              Period;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTime"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTransform"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x0040 (0x00A8 - 0x0068)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                      // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                            // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTransformPosition"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTruncate
// 0x0038 (0x00A0 - 0x0068)
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTruncate"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTwoSidedSign"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorNoise
// 0x0048 (0x00B0 - 0x0068)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0068(0x0038)
	TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction;                                            // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	int                                                Quality;                                                  // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling : 1;                                              // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	uint32_t                                           TileSize;                                                 // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVectorNoise"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexColor"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexLocalPosition
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionVertexLocalPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexLocalPosition"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexNormalWS"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0070 - 0x0068)
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionViewProperty"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x0068 - 0x0068)
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionViewSize"));

		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0070 - 0x0068)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionWorldPosition"));

		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0040 (0x0070 - 0x0030)
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0030(0x0010) (DuplicateTransient, IsPlainOldData)
	struct FString                                     Description;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bExposeToLibrary : 1;                                     // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	TArray<class UMaterialExpression*>                 FunctionExpressions;                                      // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      bReentrantFlag : 1;                                       // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunction"));

		return ptr;
	}

};


// Class Engine.Material
// 0x0978 (0x09F0 - 0x0078)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColorMaterialInput                         DiffuseColor;                                             // 0x0080(0x0040) (Deprecated)
	struct FColorMaterialInput                         SpecularColor;                                            // 0x00C0(0x0040) (Deprecated)
	struct FColorMaterialInput                         BaseColor;                                                // 0x0100(0x0040)
	struct FScalarMaterialInput                        Metallic;                                                 // 0x0140(0x0040)
	struct FScalarMaterialInput                        Specular;                                                 // 0x0180(0x0040)
	struct FScalarMaterialInput                        Roughness;                                                // 0x01C0(0x0040)
	struct FVectorMaterialInput                        Normal;                                                   // 0x0200(0x0048)
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x0248(0x0040)
	struct FScalarMaterialInput                        Opacity;                                                  // 0x0288(0x0040)
	struct FScalarMaterialInput                        OpacityMask;                                              // 0x02C8(0x0040)
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                           // 0x0308(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x0309(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                           // 0x030A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                    // 0x030B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x030C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x030D(0x0003) MISSED OFFSET
	float                                              OpacityMaskClipValue;                                     // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	struct FVectorMaterialInput                        WorldPositionOffset;                                      // 0x0318(0x0048)
	struct FVectorMaterialInput                        WorldDisplacement;                                        // 0x0360(0x0048)
	struct FScalarMaterialInput                        TessellationMultiplier;                                   // 0x03A8(0x0040)
	struct FColorMaterialInput                         SubsurfaceColor;                                          // 0x03E8(0x0040)
	struct FScalarMaterialInput                        ClearCoat;                                                // 0x0428(0x0040)
	struct FScalarMaterialInput                        ClearCoatRoughness;                                       // 0x0468(0x0040)
	struct FScalarMaterialInput                        AmbientOcclusion;                                         // 0x04A8(0x0040)
	struct FScalarMaterialInput                        Refraction;                                               // 0x04E8(0x0040)
	struct FVector2MaterialInput                       CustomizedUVs[0x8];                                       // 0x0528(0x0048)
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0768(0x0040)
	struct FScalarMaterialInput                        PixelDepthOffset;                                         // 0x07A8(0x0040)
	unsigned char                                      bPrepassMasked : 1;                                       // 0x07E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableSeparateTranslucency : 1;                          // 0x07E8(0x0001) (Edit)
	unsigned char                                      bEnableMobileSeparateTranslucency : 1;                    // 0x07E8(0x0001) (Edit)
	unsigned char                                      bEnableResponsiveAA : 1;                                  // 0x07E8(0x0001) (Edit)
	unsigned char                                      bScreenSpaceReflections : 1;                              // 0x07E8(0x0001) (Edit)
	unsigned char                                      TwoSided : 1;                                             // 0x07E8(0x0001) (Edit)
	unsigned char                                      DitheredLODTransition : 1;                                // 0x07E8(0x0001) (Edit)
	unsigned char                                      DitherOpacityMask : 1;                                    // 0x07E8(0x0001) (Edit)
	unsigned char                                      bAllowNegativeEmissiveColor : 1;                          // 0x07E9(0x0001) (Edit)
	unsigned char                                      bHasMaterialPermutations : 1;                             // 0x07E9(0x0001)
	unsigned char                                      UnknownData02[0x2];                                       // 0x07EA(0x0002) MISSED OFFSET
	int                                                NumCustomizedUVs;                                         // 0x07EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                 // 0x07F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x07F1(0x0003) MISSED OFFSET
	float                                              TranslucencyDirectionalLightingIntensity;                 // 0x07F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AllowTranslucentCustomDepthWrites : 1;                    // 0x07F8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x07F9(0x0003) MISSED OFFSET
	float                                              TranslucentShadowDensityScale;                            // 0x07FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                        // 0x0800(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;                  // 0x0804(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;                       // 0x0808(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                        // 0x080C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                  // 0x0810(0x0010) (Edit, IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                             // 0x0820(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableDepthTest : 1;                                    // 0x0824(0x0001) (Edit)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                    // 0x0824(0x0001) (Edit)
	unsigned char                                      bTangentSpaceNormal : 1;                                  // 0x0824(0x0001) (Edit)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                   // 0x0824(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockGI : 1;                                             // 0x0824(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x0824(0x0001) (DuplicateTransient)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                // 0x0824(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithEditorCompositing : 1;                           // 0x0824(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithParticleSprites : 1;                             // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithBeamTrails : 1;                                  // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMeshParticles : 1;                               // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraSprites : 1;                              // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraRibbons : 1;                              // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraMeshParticles : 1;                        // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticLighting : 1;                              // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMorphTargets : 1;                                // 0x0825(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                       // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedSplineMeshes : 1;                       // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedDeferredDecals : 1;                     // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsesDistortion : 1;                                      // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithClothing : 1;                                    // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithUI : 1;                                          // 0x0826(0x0001) (Deprecated)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                       // 0x0826(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bFullyRough : 1;                                          // 0x0827(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseFullPrecision : 1;                                    // 0x0827(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseLightmapDirectionality : 1;                           // 0x0827(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseHQForwardReflections : 1;                             // 0x0827(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsePlanarForwardReflections : 1;                         // 0x0827(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNormalCurvatureToRoughness : 1;                          // 0x0827(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                    // 0x0828(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0829(0x0003) MISSED OFFSET
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                         // 0x082C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                          // 0x082C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                                       // 0x082D(0x0003) MISSED OFFSET
	float                                              MaxDisplacement;                                          // 0x0830(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Wireframe : 1;                                            // 0x0834(0x0001) (Edit)
	unsigned char                                      bOutputVelocityOnBasePass : 1;                            // 0x0834(0x0001) (Edit)
	unsigned char                                      bApplyMaterialClipVolumes : 1;                            // 0x0834(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0835(0x0003) MISSED OFFSET
	struct FMaterialClipVolumeTypeMask                 MaterialClipVolumeTypes;                                  // 0x0838(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EMaterialClipVolumeImportance>         MaterialClipVolumeImportance;                             // 0x083C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x083D(0x0003) MISSED OFFSET
	float                                              MaterialClipVolumeFadeRange;                              // 0x0840(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMaterialClipVolumesUseDiscardForTranslucent : 1;         // 0x0844(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsMaterialClipVolumeWater : 1;                           // 0x0844(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseMeshClipping : 1;                                     // 0x0844(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0845(0x0003) MISSED OFFSET
	int                                                EditorX;                                                  // 0x0848(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                EditorY;                                                  // 0x084C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                EditorPitch;                                              // 0x0850(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                EditorYaw;                                                // 0x0854(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UMaterialExpression*>                 Expressions;                                              // 0x0858(0x0010) (ZeroConstructor)
	TArray<struct FMaterialFunctionInfo>               MaterialFunctionInfos;                                    // 0x0868(0x0010) (ZeroConstructor)
	TArray<struct FMaterialParameterCollectionInfo>    MaterialParameterCollectionInfos;                         // 0x0878(0x0010) (ZeroConstructor)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                            // 0x0888(0x0001)
	unsigned char                                      bIsMasked : 1;                                            // 0x0888(0x0001) (Deprecated)
	unsigned char                                      bIsPreviewMaterial : 1;                                   // 0x0888(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bUseMaterialAttributes : 1;                               // 0x0888(0x0001) (Edit)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                            // 0x0888(0x0001) (Edit)
	unsigned char                                      bComputeFogPerPixel : 1;                                  // 0x0888(0x0001) (Edit)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                       // 0x0888(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                       // 0x0888(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0889(0x0003) MISSED OFFSET
	uint32_t                                           UsageFlagWarnings;                                        // 0x088C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                        // 0x0890(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0891(0x0003) MISSED OFFSET
	int                                                BlendablePriority;                                        // 0x0894(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BlendableOutputAlpha;                                     // 0x0898(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERefractionMode>                       RefractionMode;                                           // 0x0899(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x089A(0x0002) MISSED OFFSET
	float                                              RefractionDepthBias;                                      // 0x089C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       StateId;                                                  // 0x08A0(0x0010) (IsPlainOldData)
	unsigned char                                      UnknownData13[0x130];                                     // 0x08B0(0x0130) MISSED OFFSET
	TArray<class UTexture*>                            ExpressionTextureReferences;                              // 0x09E0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Material"));

		return ptr;
	}

};


// Class Engine.MaterialInstanceDynamic
// 0x0050 (0x0238 - 0x01E8)
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01E8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceDynamic"));

		return ptr;
	}

};


// Class Engine.MaterialParameterCollection
// 0x0040 (0x0070 - 0x0030)
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0030(0x0010) (DuplicateTransient, IsPlainOldData)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                         // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                         // 0x0050(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialParameterCollection"));

		return ptr;
	}

};


// Class Engine.MaterialParameterCollectionInstance
// 0x00C0 (0x00F0 - 0x0030)
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UMaterialParameterCollection*                Collection;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UWorld*                                      World;                                                    // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA8];                                      // 0x0048(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MaterialParameterCollectionInstance"));

		return ptr;
	}

};


// Class Engine.MatineeInterface
// 0x0000 (0x0030 - 0x0030)
class UMatineeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MatineeInterface"));

		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0018 (0x0048 - 0x0030)
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MorphTarget"));

		return ptr;
	}

};


// Class Engine.NavArea_Default
// 0x0000 (0x0048 - 0x0048)
class UNavArea_Default : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavArea_Default"));

		return ptr;
	}

};


// Class Engine.NavArea_LowHeight
// 0x0000 (0x0048 - 0x0048)
class UNavArea_LowHeight : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavArea_LowHeight"));

		return ptr;
	}

};


// Class Engine.NavArea_Null
// 0x0000 (0x0048 - 0x0048)
class UNavArea_Null : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavArea_Null"));

		return ptr;
	}

};


// Class Engine.NavArea_Obstacle
// 0x0000 (0x0048 - 0x0048)
class UNavArea_Obstacle : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavArea_Obstacle"));

		return ptr;
	}

};


// Class Engine.NavAreaMeta
// 0x0000 (0x0048 - 0x0048)
class UNavAreaMeta : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavAreaMeta"));

		return ptr;
	}

};


// Class Engine.NavAreaMeta_SwitchByAgent
// 0x0080 (0x00C8 - 0x0048)
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	class UClass*                                      Agent0Area;                                               // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent1Area;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent2Area;                                               // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent3Area;                                               // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent4Area;                                               // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent5Area;                                               // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent6Area;                                               // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent7Area;                                               // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent8Area;                                               // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent9Area;                                               // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent10Area;                                              // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent11Area;                                              // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent12Area;                                              // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent13Area;                                              // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent14Area;                                              // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      Agent15Area;                                              // 0x00C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavAreaMeta_SwitchByAgent"));

		return ptr;
	}

};


// Class Engine.NavCollision
// 0x00E8 (0x0118 - 0x0030)
class UNavCollision : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET
	TArray<struct FNavCollisionCylinder>               CylinderCollision;                                        // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavCollisionBox>                    BoxCollision;                                             // 0x0090(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      AreaClass;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsDynamicObstacle : 1;                                   // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      bGatherConvexGeometry : 1;                                // 0x00A8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x6F];                                      // 0x00A9(0x006F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavCollision"));

		return ptr;
	}

};


// Class Engine.NavEdgeProviderInterface
// 0x0000 (0x0030 - 0x0030)
class UNavEdgeProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavEdgeProviderInterface"));

		return ptr;
	}

};


// Class Engine.NavigationDataChunk
// 0x0008 (0x0038 - 0x0030)
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                       // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationDataChunk"));

		return ptr;
	}

};


// Class Engine.RecastNavMeshDataChunk
// 0x0010 (0x0048 - 0x0038)
class URecastNavMeshDataChunk : public UNavigationDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RecastNavMeshDataChunk"));

		return ptr;
	}

};


// Class Engine.NavigationPath
// 0x00A0 (0x00D0 - 0x0030)
class UNavigationPath : public UObject
{
public:
	struct FScriptMulticastDelegate                    PathUpdatedNotifier;                                      // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FVector>                             PathPoints;                                               // 0x0040(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<ENavigationOptionFlag>                 RecalculateOnInvalidation;                                // 0x0050(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7F];                                      // 0x0051(0x007F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationPath"));

		return ptr;
	}


	bool STATIC_IsValid();
	bool STATIC_IsStringPulled();
	bool STATIC_IsPartial();
	float STATIC_GetPathLength();
	float STATIC_GetPathCost();
	struct FString STATIC_GetDebugString();
	void STATIC_EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation);
	void STATIC_EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
};


// Class Engine.NavigationPathGenerator
// 0x0000 (0x0030 - 0x0030)
class UNavigationPathGenerator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavigationPathGenerator"));

		return ptr;
	}

};


// Class Engine.RecastFilter_UseDefaultArea
// 0x0000 (0x0050 - 0x0050)
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.RecastFilter_UseDefaultArea"));

		return ptr;
	}

};


// Class Engine.NavLinkTrivial
// 0x0000 (0x0058 - 0x0058)
class UNavLinkTrivial : public UNavLinkDefinition
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavLinkTrivial"));

		return ptr;
	}

};


// Class Engine.NavNodeInterface
// 0x0000 (0x0030 - 0x0030)
class UNavNodeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NavNodeInterface"));

		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0488 (0x04B8 - 0x0030)
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x0038(0x0010) (ZeroConstructor, Config)
	int                                                MaxDownloadSize;                                          // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate : 1;                           // 0x004C(0x0001) (Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                NetServerMaxTickRate;                                     // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxInternetClientRate;                                    // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxClientRate;                                            // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerTravelPause;                                        // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SpawnPrioritySeconds;                                     // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RelevantTimeout;                                          // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              KeepAliveTime;                                            // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialConnectTimeout;                                    // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConnectionTimeout;                                        // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                    // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNoTimeouts;                                              // 0x0078(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	class UNetConnection*                              ServerConnection;                                         // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UNetConnection*>                      ClientConnections;                                        // 0x0088(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0098(0x0028) MISSED OFFSET
	unsigned char                                      UnknownData04[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty Engine.NetDriver.World
	class UPackage*                                    WorldPackage;                                             // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x00D0(0x0020) MISSED OFFSET
	class UClass*                                      NetConnectionClass;                                       // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UProperty*                                   RoleProperty;                                             // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UProperty*                                   RemoteRoleProperty;                                       // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x0108(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	float                                              Time;                                                     // 0x0118(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x39C];                                     // 0x011C(0x039C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NetDriver"));

		return ptr;
	}

};


// Class Engine.PackageMapClient
// 0x0290 (0x0378 - 0x00E8)
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x290];                                     // 0x00E8(0x0290) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PackageMapClient"));

		return ptr;
	}

};


// Class Engine.NetConnection
// 0x657E8 (0x65838 - 0x0050)
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>                    Children;                                                 // 0x0050(0x0010) (ZeroConstructor, Transient)
	class UNetDriver*                                  Driver;                                                   // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      PackageMapClass;                                          // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackageMap*                                 PackageMap;                                               // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UChannel*>                            OpenChannels;                                             // 0x0078(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                          // 0x0088(0x0010) (ZeroConstructor)
	class AActor*                                      ViewTarget;                                               // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      OwningActor;                                              // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                MaxPacket;                                                // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      InternalAck : 1;                                          // 0x00AC(0x0001)
	unsigned char                                      IgnoreInvalidSubObjects : 1;                              // 0x00AC(0x0001)
	unsigned char                                      UnknownData00[0xB3];                                      // 0x00AD(0x00B3) MISSED OFFSET
	struct FUniqueNetIdRepl                            PlayerId;                                                 // 0x0160(0x0018)
	unsigned char                                      UnknownData01[0x68];                                      // 0x0178(0x0068) MISSED OFFSET
	double                                             LastReceiveTime;                                          // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x65540];                                   // 0x01E8(0x65540) MISSED OFFSET
	TArray<class UChannel*>                            ChannelsToTick;                                           // 0x65728(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x100];                                     // 0x65738(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NetConnection"));

		return ptr;
	}

};


// Class Engine.DemoNetConnection
// 0x0170 (0x659A8 - 0x65838)
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x65838(0x0020) MISSED OFFSET
	struct FStringClassReference                       OverrideActorChannel;                                     // 0x65858(0x0010) (Config)
	unsigned char                                      UnknownData01[0x140];                                     // 0x65868(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DemoNetConnection"));

		return ptr;
	}

};


// Class Engine.DemoNetDriver
// 0x06E8 (0x0BA0 - 0x04B8)
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x04B8(0x00F8) MISSED OFFSET
	TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                                 // 0x05B0(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x3E0];                                     // 0x0600(0x03E0) MISSED OFFSET
	bool                                               bIsLocalReplay;                                           // 0x09E0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1BF];                                     // 0x09E1(0x01BF) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DemoNetDriver"));

		return ptr;
	}

};


// Class Engine.NodeMappingProviderInterface
// 0x0000 (0x0030 - 0x0030)
class UNodeMappingProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NodeMappingProviderInterface"));

		return ptr;
	}

};


// Class Engine.NodeMappingContainer
// 0x0070 (0x00A0 - 0x0030)
class UNodeMappingContainer : public UObject
{
public:
	TMap<struct FName, struct FNodeMap>                NodeMapping;                                              // 0x0030(0x0050) (Edit, ZeroConstructor)
	TAssetPtr<class UBlueprint>                        SourceAsset;                                              // 0x0080(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.NodeMappingContainer"));

		return ptr;
	}

};


// Class Engine.ObjectLibrary
// 0x0130 (0x0160 - 0x0030)
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                          // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHasBlueprintClasses;                                     // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<class UObject*>                             Objects;                                                  // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                              // 0x0050(0x0010) (ZeroConstructor)
	bool                                               bUseWeakReferences;                                       // 0x0060(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsFullyLoaded;                                           // 0x0061(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xFE];                                      // 0x0062(0x00FE) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ObjectLibrary"));

		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x0010 (0x0040 - 0x0030)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ObjectReferencer"));

		return ptr;
	}

};


// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (0x0030 - 0x0030)
class UOnlineBlueprintCallProxyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.OnlineBlueprintCallProxyBase"));

		return ptr;
	}

};


// Class Engine.OnlineEngineInterface
// 0x0000 (0x0030 - 0x0030)
class UOnlineEngineInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.OnlineEngineInterface"));

		return ptr;
	}

};


// Class Engine.OnlineSession
// 0x0000 (0x0030 - 0x0030)
class UOnlineSession : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.OnlineSession"));

		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0150 (0x0180 - 0x0030)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubUVDataOffset;                                          // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      ConvertedModules : 1;                                     // 0x0050(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                InitialAllocationCount;                                   // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MediumDetailSpawnRateScale;                               // 0x005C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	unsigned char                                      bIsSoloing : 1;                                           // 0x0068(0x0001) (Transient)
	unsigned char                                      bCookedOut : 1;                                           // 0x0068(0x0001)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                        // 0x0068(0x0001) (Edit)
	unsigned char                                      bDisableWhenInsignficant : 1;                             // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	EParticleSignificanceLevel                         SignificanceLevel;                                        // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              DepthSliceThickness;                                      // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10C];                                     // 0x0074(0x010C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleEmitter"));

		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x0180 - 0x0180)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleSpriteEmitter"));

		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0090 (0x00C0 - 0x0030)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                           // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UParticleModuleEventGenerator*               EventGenerator;                                           // 0x0060(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0068(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x0078(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0088(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0098(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                     // 0x00A8(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                     // 0x00B8(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleLODLevel"));

		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x0008 (0x0038 - 0x0030)
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                         // 0x0030(0x0001)
	unsigned char                                      bUpdateModule : 1;                                        // 0x0030(0x0001)
	unsigned char                                      bFinalUpdateModule : 1;                                   // 0x0030(0x0001)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                 // 0x0030(0x0001)
	unsigned char                                      bCurvesAsColor : 1;                                       // 0x0030(0x0001)
	unsigned char                                      b3DDrawMode : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      bSupported3DDrawMode : 1;                                 // 0x0030(0x0001)
	unsigned char                                      bEnabled : 1;                                             // 0x0030(0x0001)
	unsigned char                                      bEditable : 1;                                            // 0x0031(0x0001)
	unsigned char                                      LODDuplicate : 1;                                         // 0x0031(0x0001)
	unsigned char                                      bSupportsRandomSeed : 1;                                  // 0x0031(0x0001)
	unsigned char                                      bRequiresLoopingNotification : 1;                         // 0x0031(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	unsigned char                                      LODValidity;                                              // 0x0034(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModule"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                  // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0058 (0x0098 - 0x0040)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x0040(0x0050) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAcceleration"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (0x0050 - 0x0040)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                             // 0x0040(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationConstant"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDrag
// 0x0040 (0x0080 - 0x0040)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                          // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       DragCoefficientRaw;                                       // 0x0048(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationDrag"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0040 (0x0080 - 0x0040)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       DragScaleRaw;                                             // 0x0048(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationDragScaleOverLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0050 (0x0090 - 0x0040)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x0040(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationOverLifetime"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0088 (0x00C0 - 0x0038)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0038(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     EndPoint1;                                                // 0x0044(0x000C) (Edit, IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0050(0x0038) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0088(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorLine"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0040(0x0038) (Edit)
	unsigned char                                      bStrengthByDistance : 1;                                  // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       Strength;                                                 // 0x0080(0x0038) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00B8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	unsigned char                                      bRenewSource : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      bInheritSourceVel : 1;                                    // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x00C4(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorParticle"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x00C8 (0x0100 - 0x0038)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0038(0x0050) (Edit)
	struct FRawDistributionFloat                       Range;                                                    // 0x0088(0x0038) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00C0(0x0038) (Edit)
	unsigned char                                      StrengthByDistance : 1;                                   // 0x00F8(0x0001) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00F8(0x0001) (Edit)
	unsigned char                                      bOverrideVelocity : 1;                                    // 0x00F8(0x0001) (Edit)
	unsigned char                                      bUseWorldSpacePosition : 1;                               // 0x00F8(0x0001) (Edit)
	unsigned char                                      Positive_X : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x00F8(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x00F9(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x00F9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00FA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorPoint"));

		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPointGravity
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                 // 0x0038(0x000C) (Edit, IsPlainOldData)
	float                                              Radius;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UDistributionFloat*                          Strength;                                                 // 0x0048(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       StrengthRaw;                                              // 0x0050(0x0038) (Edit, NoClear)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorPointGravity"));

		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x00F0 (0x0128 - 0x0038)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x003C(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                 // 0x0040(0x0050) (Edit)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x0090(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Tangent;                                                  // 0x0098(0x0050) (Edit)
	unsigned char                                      bAbsoluteTangent : 1;                                     // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x00EC(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00F0(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamModifier"));

		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x0188 (0x01C0 - 0x0038)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                     // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                Frequency;                                                // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Frequency_LowRange;                                       // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0048(0x0050) (Edit)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x0098(0x0038) (Edit)
	unsigned char                                      bNRScaleEmitterTime : 1;                                  // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x00D8(0x0050) (Edit)
	unsigned char                                      bSmooth : 1;                                              // 0x0128(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	float                                              NoiseLockRadius;                                          // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNoiseLock : 1;                                           // 0x0130(0x0001)
	unsigned char                                      bOscillate : 1;                                           // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              NoiseLockTime;                                            // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseTension;                                             // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseNoiseTangents : 1;                                    // 0x013C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x0140(0x0038) (Edit)
	int                                                NoiseTessellation;                                        // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTargetNoise : 1;                                         // 0x017C(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	float                                              FrequencyDistance;                                        // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyNoiseScale : 1;                                     // 0x0184(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x0188(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamNoise"));

		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x0108 (0x0140 - 0x0038)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSourceAbsolute : 1;                                      // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      Source;                                                   // 0x0050(0x0050) (Edit)
	unsigned char                                      bLockSource : 1;                                          // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      SourceTangent;                                            // 0x00A8(0x0050) (Edit)
	unsigned char                                      bLockSourceTangent : 1;                                   // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0100(0x0038) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0138(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0139(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamSource"));

		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x0108 (0x0140 - 0x0038)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionVector                      Target;                                                   // 0x0048(0x0050) (Edit)
	unsigned char                                      bTargetAbsolute : 1;                                      // 0x0098(0x0001) (Edit)
	unsigned char                                      bLockTarget : 1;                                          // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      TargetTangent;                                            // 0x00A0(0x0050) (Edit)
	unsigned char                                      bLockTargetTangent : 1;                                   // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x00F8(0x0038) (Edit)
	unsigned char                                      bLockTargetStength : 1;                                   // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              LockRadius;                                               // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0138(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamTarget"));

		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCameraBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                             // 0x0038(0x0038) (Edit)
	unsigned char                                      bSpawnTimeOnly : 1;                                       // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                             // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCameraOffset"));

		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollisionBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x0188 (0x01C0 - 0x0038)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0038(0x0050) (Edit)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0088(0x0050) (Edit)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x00D8(0x0038) (Edit)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x0110(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes;                                           // 0x0118(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	unsigned char                                      bApplyPhysics : 1;                                        // 0x0130(0x0001) (Edit)
	unsigned char                                      bIgnoreTriggerVolumes : 1;                                // 0x0130(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0131(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x0138(0x0038) (Edit)
	float                                              DirScalar;                                                // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                            // 0x0174(0x0001) (Edit)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	float                                              VerticalFudgeFactor;                                      // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x0180(0x0038) (Edit)
	unsigned char                                      bDropDetail : 1;                                          // 0x01B8(0x0001) (Edit)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                // 0x01B8(0x0001) (Edit)
	unsigned char                                      bIgnoreSourceActor : 1;                                   // 0x01B8(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x01B9(0x0003) MISSED OFFSET
	float                                              MaxCollisionDistance;                                     // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollision"));

		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionGPU
// 0x0088 (0x00C0 - 0x0038)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                               // 0x0038(0x0038) (Edit)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                  // 0x0070(0x0038) (Edit)
	float                                              Friction;                                                 // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomSpread;                                             // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDistribution;                                       // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusScale;                                              // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusBias;                                               // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                 // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                            // 0x00BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00BE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollisionGPU"));

		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                               // 0x0038(0x0050) (Edit)
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0088(0x0038) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColor"));

		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x00E8 - 0x00C8)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00C8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColor_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0038(0x0050) (Edit)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0088(0x0038) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorOverLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0038(0x0050) (Edit)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0088(0x0038) (Edit)
	unsigned char                                      bEmitterTime : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorScaleOverLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                   // 0x0038(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventGenerator"));

		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0050 - 0x0048)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                        // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverKillParticles"));

		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x00A8 (0x00F0 - 0x0048)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                               // 0x0048(0x0038) (Edit)
	unsigned char                                      bUseParticleTime : 1;                                     // 0x0080(0x0001) (Edit)
	unsigned char                                      bUsePSysLocation : 1;                                     // 0x0080(0x0001) (Edit)
	unsigned char                                      bInheritVelocity : 1;                                     // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      InheritVelocityScale;                                     // 0x0088(0x0050) (Edit)
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                        // 0x00D8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bBanPhysicalMaterials : 1;                                // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverSpawn"));

		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x00A8 (0x00E0 - 0x0038)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0038(0x0050) (Edit)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0088(0x0050) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x00D8(0x0001) (Edit)
	unsigned char                                      bKillInside : 1;                                          // 0x00D8(0x0001) (Edit)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                             // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillBox"));

		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0038(0x0038) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x0070(0x0001) (Edit)
	unsigned char                                      bFloor : 1;                                               // 0x0070(0x0001) (Edit)
	unsigned char                                      bApplyPSysScale : 1;                                      // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillHeight"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetimeBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       LifeTime;                                                 // 0x0038(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetime"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x0090 - 0x0070)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0070(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetime_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleLightBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLightBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLight
// 0x0118 (0x0150 - 0x0038)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAffectsTranslucency;                                     // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreviewLightRadius;                                      // 0x003A(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003B(0x0001) MISSED OFFSET
	float                                              SpawnFraction;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0040(0x0050) (Edit)
	struct FRawDistributionFloat                       BrightnessOverLife;                                       // 0x0090(0x0038) (Edit)
	struct FRawDistributionFloat                       RadiusScale;                                              // 0x00C8(0x0038) (Edit)
	struct FRawDistributionFloat                       LightExponent;                                            // 0x0100(0x0038) (Edit)
	struct FLightingChannels                           LightingChannels;                                         // 0x0138(0x0003) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x1];                                       // 0x013B(0x0001) MISSED OFFSET
	float                                              VolumetricScatteringIntensity;                            // 0x013C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHighQualityLights;                                       // 0x0140(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShadowCastingLights;                                     // 0x0141(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0142(0x0006) MISSED OFFSET
	class UTextureLightProfile*                        IESTexture;                                               // 0x0148(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLight"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0170 - 0x0150)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0150(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLight_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0038(0x0050) (Edit)
	float                                              DistributeOverNPoints;                                    // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistributeThreshold;                                      // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocation"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0090(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocation_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0090 - 0x0090)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationWorldOffset"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0090(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationWorldOffset_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                               // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x003C(0x000C) (Edit, IsPlainOldData)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                          // 0x0048(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x005C(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x005C(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FName                                       SkelMeshActorParamName;                                   // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumPreSelectedIndices;                                    // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationBoneSocket"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0140 (0x0178 - 0x0038)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0038(0x0050) (Edit)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0088(0x0050) (Edit)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x00D8(0x0050) (Edit)
	struct FRawDistributionVector                      Direction;                                                // 0x0128(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationDirect"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0058 - 0x0038)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	unsigned char                                      InheritSourceVelocity : 1;                                // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              InheritSourceVelocityScale;                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bInheritSourceRotation : 1;                               // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              InheritSourceRotationScale;                               // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationEmitter"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationEmitterDirect"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                           // 0x0038(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x0038(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x0038(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x0038(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x0038(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x0038(0x0001) (Edit)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0038(0x0001) (Edit)
	unsigned char                                      Velocity : 1;                                             // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0040(0x0038) (Edit)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0078(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0080 (0x0148 - 0x00C8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                       // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00D0(0x0038) (Edit)
	struct FRawDistributionFloat                       StartHeight;                                              // 0x0108(0x0038) (Edit)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x0140(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0141(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0168 - 0x0148)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0148(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0038 (0x0100 - 0x00C8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00C8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0120 - 0x0100)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0100(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00F8 (0x0130 - 0x0038)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                              // 0x0038(0x0050) (Edit)
	struct FRawDistributionFloat                       Height;                                                   // 0x0088(0x0038) (Edit)
	struct FRawDistributionFloat                       Angle;                                                    // 0x00C0(0x0038) (Edit)
	struct FRawDistributionFloat                       Thickness;                                                // 0x00F8(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveTriangle"));

		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (0x0098 - 0x0038)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x003C(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0048(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0048(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0058(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                  // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	struct FVector                                     NormalToCompare;                                          // 0x006C(0x000C) (Edit, IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x007C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0080(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                  // 0x0090(0x0001) (Edit)
	unsigned char                                      bInheritUV : 1;                                           // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	uint32_t                                           InheritUVChannel;                                         // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationSkelVertSurface"));

		return ptr;
	}

};


// Class Engine.ParticleModulePivotOffset
// 0x0008 (0x0040 - 0x0038)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                              // 0x0038(0x0008) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModulePivotOffset"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                      // 0x0038(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSourceMovement"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMaterialBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0038(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshMaterial"));

		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrbitBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x0110 (0x0150 - 0x0040)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x0048(0x0050) (Edit)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationAmount;                                           // 0x00A0(0x0050) (Edit)
	struct FOrbitOptions                               RotationOptions;                                          // 0x00F0(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x00F8(0x0050) (Edit)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x0148(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x014C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrbit"));

		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrientationBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrientationAxisLock"));

		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                            // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                UpdateFlags;                                              // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsesVelocity : 1;                                        // 0x004C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterDynamic"));

		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0070 - 0x0050)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0050(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterDynamic_Seeded"));

		return ptr;
	}

};


// Class Engine.SubUVAnimation
// 0x0038 (0x0068 - 0x0030)
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                             // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0041(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0048(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SubUVAnimation"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x0148 (0x0180 - 0x0038)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EmitterOrigin;                                            // 0x0040(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    EmitterRotation;                                          // 0x004C(0x000C) (Edit, IsPlainOldData)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              MinFacingCameraBlendDistance;                             // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingCameraBlendDistance;                             // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinimalScreenSize;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLocalSpace : 1;                                       // 0x0068(0x0001) (Edit)
	unsigned char                                      bKillOnDeactivate : 1;                                    // 0x0068(0x0001) (Edit)
	unsigned char                                      bKillOnCompleted : 1;                                     // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	unsigned char                                      bUseLegacyEmitterTime : 1;                                // 0x0070(0x0001) (Edit)
	unsigned char                                      bRemoveHMDRoll : 1;                                       // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              EmitterDuration;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDurationLow;                                       // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEmitterDurationUseRange : 1;                             // 0x007C(0x0001) (Edit)
	unsigned char                                      bDurationRecalcEachLoop : 1;                              // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	int                                                EmitterLoops;                                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x0088(0x0038)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x00C0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x00C8(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                             // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDelayLow;                                          // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEmitterDelayUseRange : 1;                                // 0x00E0(0x0001) (Edit)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                  // 0x00E0(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	int                                                SubImages_Horizontal;                                     // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bScaleUV : 1;                                             // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData09[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              RandomImageTime;                                          // 0x00F4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RandomImageChanges;                                       // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV : 1;                               // 0x00FC(0x0001) (Edit)
	unsigned char                                      UnknownData10[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	struct FVector                                     MacroUVPosition;                                          // 0x0100(0x000C) (Edit, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseMaxDrawCount : 1;                                     // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	int                                                MaxDrawCount;                                             // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EParticleUVFlipMode                                UVFlippingMode;                                           // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0119(0x0007) MISSED OFFSET
	class UTexture2D*                                  CutoutTexture;                                            // 0x0120(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0129(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x012A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	struct FVector                                     NormalsSphereCenter;                                      // 0x0134(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x0140(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                 // 0x014C(0x0001) (Edit)
	unsigned char                                      UnknownData15[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	TArray<struct FName>                               NamedMaterialOverrides;                                   // 0x0150(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData16[0x20];                                      // 0x0160(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRequired"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0038(0x0050) (Edit)
	unsigned char                                      bInheritParent : 1;                                       // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotation"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0090(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotation_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0038(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotation"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0090 - 0x0070)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0070(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotation_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0038(0x0038) (Edit)
	unsigned char                                      Scale : 1;                                                // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationOverLifetime"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRateBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0038(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRate"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x00A8 - 0x0088)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0088(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRate_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0038(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRateMultiplyLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                  // 0x0038(0x0050) (Edit)
	unsigned char                                      bScaleRotRate : 1;                                        // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRateOverLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0038(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRate"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0090 - 0x0070)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0070(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRate_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0038(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRateMultiplyLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x0050 (0x0088 - 0x0038)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                // 0x0038(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSize"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x00A8 - 0x0088)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0088(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSize_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0038(0x0050) (Edit)
	unsigned char                                      MultiplyX : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      MultiplyY : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      MultiplyZ : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeMultiplyLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0058 (0x0090 - 0x0038)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0038(0x0050) (Edit)
	unsigned char                                      EnableX : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      EnableY : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      EnableZ : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeScale"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                               // 0x0038(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   MaxScale;                                                 // 0x0040(0x0008) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeScaleBySpeed"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                    // 0x0038(0x0001) (Edit)
	unsigned char                                      bProcessBurstList : 1;                                    // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x00C8 (0x0108 - 0x0040)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x0040(0x0038) (Edit)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0078(0x0038) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x00B8(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	struct FRawDistributionFloat                       BurstScale;                                               // 0x00C8(0x0038) (Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                           // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0101(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawn"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0050 (0x0090 - 0x0040)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x0048(0x0038) (Edit)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              MovementTolerance;                                        // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFrameDistance;                                         // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                // 0x008C(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                // 0x008C(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x008D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnPerUnit"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUVBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0048 (0x0080 - 0x0038)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                             Animation;                                                // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0040(0x0038) (Edit)
	unsigned char                                      bUseRealTime : 1;                                         // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUV"));

		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0048 (0x00C8 - 0x0080)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       FrameRate;                                                // 0x0088(0x0038) (Edit)
	int                                                StartingFrame;                                            // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUVMovie"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTrailBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x0068 (0x00A0 - 0x0038)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0048(0x0038) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	int                                                SourceOffsetCount;                                        // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0088(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned char                                      bInheritRotation : 1;                                     // 0x009C(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x009D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTrailSource"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0038(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0038(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TangentTessellationStepSize;                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WidthTessellationStepSize;                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataAnimTrail"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0138 (0x0170 - 0x0038)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                TextureTile;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureTileDistance;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Sheets;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxBeamCount;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InterpolationPoints;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysOn : 1;                                            // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                UpVectorStepSize;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FName                                       BranchParentName;                                         // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       Distance;                                                 // 0x0068(0x0038) (Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x00A8(0x0038) (Edit)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00E0(0x0038) (Edit)
	unsigned char                                      RenderGeometry : 1;                                       // 0x0118(0x0001) (Edit)
	unsigned char                                      RenderDirectLine : 1;                                     // 0x0118(0x0001) (Edit)
	unsigned char                                      RenderLines : 1;                                          // 0x0118(0x0001) (Edit)
	unsigned char                                      RenderTessellation : 1;                                   // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x57];                                      // 0x0119(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataBeam2"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataGpu
// 0x0438 (0x0470 - 0x0038)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                              // 0x0040(0x02C0)
	struct FGPUSpriteResourceData                      ResourceData;                                             // 0x0300(0x0160)
	float                                              CameraMotionBlurAmount;                                   // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                        // 0x0464(0x0001) (Edit)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0465(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataGpu"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0088 (0x00C0 - 0x0038)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CastShadows : 1;                                          // 0x0040(0x0001)
	unsigned char                                      DoCollisions : 1;                                         // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	unsigned char                                      bOverrideMaterial : 1;                                    // 0x0048(0x0001) (Edit)
	unsigned char                                      bOverrideDefaultMotionBlurSettings : 1;                   // 0x0048(0x0001) (Edit)
	unsigned char                                      bEnableMotionBlur : 1;                                    // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              Pitch;                                                    // 0x004C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Roll;                                                     // 0x0050(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Yaw;                                                      // 0x0054(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FRawDistributionVector                      RollPitchYawRange;                                        // 0x0058(0x0050) (Edit)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	unsigned char                                      bCameraFacing : 1;                                        // 0x00B4(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x00B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x00BA(0x0002) MISSED OFFSET
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                         // 0x00BC(0x0001) (Edit)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;               // 0x00BC(0x0001) (Edit)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                      // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataMesh"));

		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0068 - 0x0038)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SheetsPerTrail;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxTrailCount;                                            // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxParticleInTrailCount;                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0048(0x0001) (Edit)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                              // 0x0048(0x0001) (Edit)
	unsigned char                                      bClipSourceSegement : 1;                                  // 0x0048(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0048(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0048(0x0001) (Edit)
	unsigned char                                      bSpawnInitialParticle : 1;                                // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRenderGeometry : 1;                                      // 0x0054(0x0001) (Edit)
	unsigned char                                      bRenderSpawnPoints : 1;                                   // 0x0054(0x0001) (Edit)
	unsigned char                                      bRenderTangents : 1;                                      // 0x0054(0x0001) (Edit)
	unsigned char                                      bRenderTessellation : 1;                                  // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                        // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              TangentTessellationScalar;                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataRibbon"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                  // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              GlobalVectorFieldScale;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldGlobal"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                              // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x0040(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x004C(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0058(0x000C) (Edit, IsPlainOldData)
	float                                              Intensity;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform : 1;                            // 0x006C(0x0001) (Edit)
	unsigned char                                      bTileX : 1;                                               // 0x006C(0x0001) (Edit)
	unsigned char                                      bTileY : 1;                                               // 0x006C(0x0001) (Edit)
	unsigned char                                      bTileZ : 1;                                               // 0x006C(0x0001) (Edit)
	unsigned char                                      bUseFixDT : 1;                                            // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldLocal"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                       // 0x0038(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     MaxInitialRotation;                                       // 0x0044(0x000C) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldRotation"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                             // 0x0038(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldRotationRate"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScale
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                         // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleRaw;                                      // 0x0040(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldScale"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                 // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleOverLifeRaw;                              // 0x0040(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldScaleOverLife"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                        // 0x0038(0x0001) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityBase"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0088 (0x00C8 - 0x0040)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0040(0x0050) (Edit)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0090(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocity"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x00E8 - 0x00C8)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00C8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocity_Seeded"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0080 (0x00C0 - 0x0040)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                    // 0x0040(0x0038) (Edit)
	struct FRawDistributionFloat                       Velocity;                                                 // 0x0078(0x0038) (Edit)
	struct FVector                                     Direction;                                                // 0x00B0(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityCone"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x0050 (0x0090 - 0x0040)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x0040(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityInheritParent"));

		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0058 (0x0098 - 0x0040)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x0040(0x0050) (Edit)
	unsigned char                                      Absolute : 1;                                             // 0x0090(0x0001) (Edit, ExportObject)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityOverLifetime"));

		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventSendToGame"));

		return ptr;
	}

};


// Class Engine.ParticleSystemReplay
// 0x0018 (0x0048 - 0x0030)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0034(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemReplay"));

		return ptr;
	}

};


// Class Engine.DemoPendingNetGame
// 0x0000 (0x00D0 - 0x00D0)
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DemoPendingNetGame"));

		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0058 (0x0088 - 0x0030)
class UPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                 // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode;                                      // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideFrictionCombineMode;                             // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	float                                              Restitution;                                              // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode;                                   // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideRestitutionCombineMode;                          // 0x003D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	float                                              Density;                                                  // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RaiseMassToPower;                                         // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageThresholdScale;                         // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                 // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                              // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              TireFrictionScale;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FTireFrictionScalePair>              TireFrictionScales;                                       // 0x0060(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicalMaterial"));

		return ptr;
	}

};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0030 - 0x0030)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicalMaterialPropertyBase"));

		return ptr;
	}

};


// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0048 - 0x0030)
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                          // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactReFireDelay;                                        // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DefaultImpactSound;                                       // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastImpactSoundTime;                                      // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsCollisionHandler"));

		return ptr;
	}

};


// Class Engine.PhysicsConstraintTemplate
// 0x0310 (0x0340 - 0x0030)
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                         DefaultInstance;                                          // 0x0030(0x01F0) (Edit)
	TArray<struct FPhysicsConstraintProfileHandle>     ProfileHandles;                                           // 0x0220(0x0010) (ZeroConstructor)
	struct FConstraintProfileProperties                DefaultProfile;                                           // 0x0230(0x0104) (Transient)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0334(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintTemplate"));

		return ptr;
	}

};


// Class Engine.PhysicsSerializer
// 0x00A8 (0x00D8 - 0x0030)
class UPhysicsSerializer : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0030(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSerializer"));

		return ptr;
	}

};


// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0040 - 0x0030)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                             // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlatformInterfaceBase"));

		return ptr;
	}

};


// Class Engine.CloudStorageBase
// 0x0018 (0x0058 - 0x0040)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                          // 0x0040(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                               // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.CloudStorageBase"));

		return ptr;
	}

};


// Class Engine.InGameAdManager
// 0x0028 (0x0068 - 0x0040)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                              // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                   // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                        // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.InGameAdManager"));

		return ptr;
	}

};


// Class Engine.MicroTransactionBase
// 0x0030 (0x0070 - 0x0040)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                        // 0x0040(0x0010) (ZeroConstructor)
	struct FString                                     LastError;                                                // 0x0050(0x0010) (ZeroConstructor)
	struct FString                                     LastErrorSolution;                                        // 0x0060(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.MicroTransactionBase"));

		return ptr;
	}

};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0040 - 0x0040)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.TwitterIntegrationBase"));

		return ptr;
	}

};


// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B8 - 0x0030)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                              // 0x0030(0x0010) (ZeroConstructor)
	int                                                ResponseCode;                                             // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Tag;                                                      // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     StringResponse;                                           // 0x0048(0x0010) (ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0068(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.PlatformInterfaceWebResponse"));

		return ptr;
	}


	int STATIC_GetNumHeaders();
	struct FString STATIC_GetHeaderValue(const struct FString& HeaderName);
	void STATIC_GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
};


// Class Engine.ChildConnection
// 0x0008 (0x65840 - 0x65838)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                   // 0x65838(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ChildConnection"));

		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x0040 - 0x0030)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Polys"));

		return ptr;
	}

};


// Class Engine.ReporterBase
// 0x0008 (0x0038 - 0x0030)
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ReporterBase"));

		return ptr;
	}

};


// Class Engine.ReporterGraph
// 0x0078 (0x00B0 - 0x0038)
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0038(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ReporterGraph"));

		return ptr;
	}

};


// Class Engine.ReverbEffect
// 0x0030 (0x0060 - 0x0030)
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                                  // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Diffusion;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Gain;                                                     // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GainHF;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayTime;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayHFRatio;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsGain;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsDelay;                                         // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateGain;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateDelay;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirAbsorptionGainHF;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RoomRolloffFactor;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.ReverbEffect"));

		return ptr;
	}

};


// Class Engine.Rig
// 0x0020 (0x0050 - 0x0030)
class URig : public UObject
{
public:
	TArray<struct FTransformBase>                      TransformBases;                                           // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                                    // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Rig"));

		return ptr;
	}

};


// Class Engine.SaveGame
// 0x0000 (0x0030 - 0x0030)
class USaveGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SaveGame"));

		return ptr;
	}

};


// Class Engine.SimpleConstructionScript
// 0x0090 (0x00C0 - 0x0030)
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                // 0x0030(0x0010) (ZeroConstructor)
	TArray<class USCS_Node*>                           AllNodes;                                                 // 0x0040(0x0010) (ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	class USCS_Node*                                   RootNode;                                                 // 0x0058(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	TArray<class USCS_Node*>                           ActorComponentNodes;                                      // 0x0060(0x0010) (ZeroConstructor, Deprecated)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0070(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SimpleConstructionScript"));

		return ptr;
	}

};


// Class Engine.SCS_Node
// 0x0120 (0x0150 - 0x0030)
class USCS_Node : public UObject
{
public:
	class UClass*                                      ComponentClass;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UActorComponent*                             ComponentTemplate;                                        // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FBlueprintCookedComponentInstancingData     CookedComponentInstancingData;                            // 0x0040(0x0050)
	struct FName                                       VariableName;                                             // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       AttachToName;                                             // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOrVariableName;                            // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOwnerClassName;                            // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsParentComponentNative;                                 // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	TArray<class USCS_Node*>                           ChildNodes;                                               // 0x00B8(0x0010) (ZeroConstructor)
	class USCS_Node*                                   LODParentNode;                                            // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x00D0(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       VariableGuid;                                             // 0x00E0(0x0010) (IsPlainOldData)
	bool                                               bIsFalseRoot;                                             // 0x00F0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bIsNative;                                                // 0x00F1(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00F2(0x0006) MISSED OFFSET
	struct FName                                       NativeComponentName;                                      // 0x00F8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bVariableNameAutoGenerated;                               // 0x0100(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	struct FName                                       InternalVariableName;                                     // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x0110(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SCS_Node"));

		return ptr;
	}

};


// Class Engine.Selection
// 0x0068 (0x0098 - 0x0030)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0030(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Selection"));

		return ptr;
	}

};


// Class Engine.DestructibleMesh
// 0x00A8 (0x03A0 - 0x02F8)
class UDestructibleMesh : public USkeletalMesh
{
public:
	struct FDestructibleParameters                     DefaultDestructibleParameters;                            // 0x02F8(0x0088) (Edit)
	TArray<struct FFractureEffect>                     FractureEffects;                                          // 0x0380(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0390(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DestructibleMesh"));

		return ptr;
	}

};


// Class Engine.SkeletalMeshReductionSettings
// 0x0018 (0x0048 - 0x0030)
class USkeletalMeshReductionSettings : public UObject
{
public:
	TArray<struct FSkeletalMeshLODGroupSettings>       Settings;                                                 // 0x0030(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshReductionSettings"));

		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0038 (0x0068 - 0x0030)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0040(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x004C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0058(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bForceAlwaysAnimated;                                     // 0x0064(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshSocket"));

		return ptr;
	}


	void STATIC_InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector STATIC_GetSocketLocation(class USkeletalMeshComponent* SkelComp);
};


// Class Engine.SlateBrushAsset
// 0x0090 (0x00C0 - 0x0030)
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                                    // 0x0030(0x0090) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SlateBrushAsset"));

		return ptr;
	}

};


// Class Engine.SlateTextureAtlasInterface
// 0x0000 (0x0030 - 0x0030)
class USlateTextureAtlasInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SlateTextureAtlasInterface"));

		return ptr;
	}

};


// Class Engine.SoundConcurrency
// 0x0010 (0x0040 - 0x0030)
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings                   Concurrency;                                              // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundConcurrency"));

		return ptr;
	}

};


// Class Engine.SoundEffectPreset
// 0x0018 (0x0048 - 0x0030)
class USoundEffectPreset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectPreset"));

		return ptr;
	}

};


// Class Engine.SoundEffectSubmixPreset
// 0x0000 (0x0048 - 0x0048)
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectSubmixPreset"));

		return ptr;
	}

};


// Class Engine.SoundSubmix
// 0x0028 (0x0058 - 0x0030)
class USoundSubmix : public UObject
{
public:
	TArray<class USoundSubmix*>                        ChildSubmixes;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)
	class USoundSubmix*                                ParentSubmix;                                             // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                        // 0x0048(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundSubmix"));

		return ptr;
	}

};


// Class Engine.DialogueSoundWaveProxy
// 0x0020 (0x00C8 - 0x00A8)
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00A8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.DialogueSoundWaveProxy"));

		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0010 (0x0040 - 0x0030)
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNode"));

		return ptr;
	}

};


// Class Engine.SoundCue
// 0x0158 (0x0200 - 0x00A8)
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	class USoundNode*                                  FirstNode;                                                // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x00C0(0x0130) (Edit)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundCue"));

		return ptr;
	}

};


// Class Engine.SoundGroups
// 0x0060 (0x0090 - 0x0030)
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                       // 0x0030(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0040(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundGroups"));

		return ptr;
	}

};


// Class Engine.SoundWaveProcedural
// 0x0088 (0x0310 - 0x0288)
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x0288(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundWaveProcedural"));

		return ptr;
	}

};


// Class Engine.SoundClass
// 0x0058 (0x0088 - 0x0030)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                               // 0x0030(0x002C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<class USoundClass*>                         ChildClasses;                                             // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                 // 0x0070(0x0010) (Edit, ZeroConstructor)
	class USoundClass*                                 ParentClass;                                              // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundClass"));

		return ptr;
	}

};


// Class Engine.SoundEffectSourcePreset
// 0x0000 (0x0048 - 0x0048)
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectSourcePreset"));

		return ptr;
	}

};


// Class Engine.SoundEffectSourcePresetChain
// 0x0018 (0x0048 - 0x0030)
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>             Chain;                                                    // 0x0030(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bPlayEffectChainTails : 1;                                // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundEffectSourcePresetChain"));

		return ptr;
	}

};


// Class Engine.SoundMix
// 0x0060 (0x0090 - 0x0030)
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                             // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              EQPriority;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FAudioEQEffect                              EQSettings;                                               // 0x0038(0x0038) (Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                        // 0x0070(0x0010) (Edit, ZeroConstructor)
	float                                              InitialDelay;                                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeInTime;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundMix"));

		return ptr;
	}

};


// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0040 - 0x0040)
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeAssetReferencer"));

		return ptr;
	}

};


// Class Engine.SoundNodeWavePlayer
// 0x0030 (0x0070 - 0x0040)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TAssetPtr<class USoundWave>                        SoundWaveAssetPtr;                                        // 0x0040(0x0020) (Edit)
	class USoundWave*                                  SoundWave;                                                // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bLooping : 1;                                             // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeWavePlayer"));

		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x0140 (0x0180 - 0x0040)
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x0048(0x0130) (Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0178(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeAttenuation"));

		return ptr;
	}

};


// Class Engine.SoundNodeBranch
// 0x0008 (0x0048 - 0x0040)
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                        // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeBranch"));

		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0050 - 0x0040)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeConcatenator"));

		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0008 (0x0048 - 0x0040)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayMax;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDelay"));

		return ptr;
	}

};


// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0068 - 0x0040)
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                    // 0x0040(0x0020) (Edit)
	unsigned char                                      bLooping : 1;                                             // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDialoguePlayer"));

		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0050 - 0x0040)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x0040(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDistanceCrossFade"));

		return ptr;
	}

};


// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0058 - 0x0050)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeParamCrossFade"));

		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0008 (0x0048 - 0x0040)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDoppler"));

		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x0128 (0x0168 - 0x0040)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoopEnd;                                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DurationAfterLoop;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LoopCount;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                        // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                         // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRuntimeFloatCurve                          VolumeCurve;                                              // 0x0068(0x0078) (Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                               // 0x00E0(0x0078) (Edit)
	float                                              PitchMin;                                                 // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeEnveloper"));

		return ptr;
	}

};


// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0050 - 0x0040)
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                               // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeGroupControl"));

		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0008 (0x0048 - 0x0040)
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeLooping"));

		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x0040 - 0x0040)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeMature"));

		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x0010 (0x0050 - 0x0040)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0040(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeMixer"));

		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0010 (0x0050 - 0x0040)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeModulator"));

		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0080 - 0x0040)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                    // 0x0040(0x0020) (Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                   // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeModulatorContinuous"));

		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0028 (0x0068 - 0x0040)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bModulatePitch : 1;                                       // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              AmplitudeMin;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmplitudeMax;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMin;                                             // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMax;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMin;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMax;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMin;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMax;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeOscillator"));

		return ptr;
	}

};


// Class Engine.SoundNodeQualityLevel
// 0x0000 (0x0040 - 0x0040)
class USoundNodeQualityLevel : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeQualityLevel"));

		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x0070 - 0x0040)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                PreselectAtLevelLoad;                                     // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                         // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	TArray<bool>                                       HasBeenUsed;                                              // 0x0058(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                            // 0x0068(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeRandom"));

		return ptr;
	}

};


// Class Engine.SoundNodeSoundClass
// 0x0008 (0x0048 - 0x0040)
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                       // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeSoundClass"));

		return ptr;
	}

};


// Class Engine.SoundNodeSwitch
// 0x0008 (0x0048 - 0x0040)
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeSwitch"));

		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0048 - 0x0040)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeWaveParam"));

		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x0110 (0x0140 - 0x0030)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
	int                                                MinLOD;                                                   // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0050(0x0010) (ZeroConstructor, Deprecated)
	TArray<struct FStaticMaterial>                     StaticMaterials;                                          // 0x0060(0x0010) (Edit, ZeroConstructor)
	float                                              LightmapUVDensity;                                        // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                LightMapResolution;                                       // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LightMapCoordinateIndex;                                  // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UBodySetup*                                  BodySetup;                                                // 0x0080(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                LODForCollision;                                          // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bGenerateMeshDistanceField : 1;                           // 0x008C(0x0001) (Edit)
	unsigned char                                      bAllowTesselation : 1;                                    // 0x008C(0x0001) (Edit)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                     // 0x008C(0x0001) (Deprecated)
	unsigned char                                      bHasNavigationData : 1;                                   // 0x008C(0x0001) (Edit)
	unsigned char                                      bRequiresAreaWeightedSampling : 1;                        // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                        // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowCPUAccess;                                          // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x33];                                      // 0x0095(0x0033) MISSED OFFSET
	TArray<class UStaticMeshSocket*>                   Sockets;                                                  // 0x00C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x00D8(0x0010) MISSED OFFSET
	struct FVector                                     PositiveBoundsExtension;                                  // 0x00E8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x00F4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x0100(0x001C) (IsPlainOldData)
	bool                                               bIgnoreDistanceFieldData;                                 // 0x011C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	int                                                ElementToIgnoreForTexFactor;                              // 0x0120(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0128(0x0010) (Edit, ExportObject, ZeroConstructor)
	class UNavCollision*                               NavCollision;                                             // 0x0138(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StaticMesh"));

		return ptr;
	}


	int STATIC_GetNumSections(int InLOD);
	int STATIC_GetNumLODs();
	struct FBoxSphereBounds STATIC_GetBounds();
	struct FBox STATIC_GetBoundingBox();
};


// Class Engine.StaticMeshSocket
// 0x0040 (0x0070 - 0x0030)
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0038(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0044(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0050(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FString                                     Tag;                                                      // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshSocket"));

		return ptr;
	}

};


// Class Engine.StringTable
// 0x0018 (0x0048 - 0x0030)
class UStringTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.StringTable"));

		return ptr;
	}

};


// Class Engine.Model
// 0x0558 (0x0588 - 0x0030)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x558];                                     // 0x0030(0x0558) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class Engine.Model"));

		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif

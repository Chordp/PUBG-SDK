#pragma once

// PUBG (7.2.8.10) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "PUBG_TslGame_structs.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class TslGame.AbstractRespawnProcessor
// 0x0068 (0x0450 - 0x03E8)
class AAbstractRespawnProcessor : public AActor
{
public:
	float                                              StartRespawnTimeSeconds;                                  // 0x03E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RespawnPeriodSeconds;                                     // 0x03EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseGlobalRespawnTimer;                                   // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	TArray<class UClass*>                              RespawnBuffs;                                             // 0x03F8(0x0010) (Edit, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnRespawnStarted;                                         // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRespawnEnded;                                           // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRespawned;                                              // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FDeadPlayerRespawnInfo>              DeadPlayerInfoQueue;                                      // 0x0438(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AbstractRespawnProcessor"));

		return ptr;
	}

};


// Class TslGame.AirRespawnProcessor
// 0x0040 (0x0490 - 0x0450)
class AAirRespawnProcessor : public AAbstractRespawnProcessor
{
public:
	TAssetPtr<class UClass>                            AircraftClass;                                            // 0x0450(0x0020) (Edit)
	float                                              AircraftAltitude;                                         // 0x0470(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FlightStartRadiusRatio;                                   // 0x0474(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 FlyingDurationCurve;                                      // 0x0478(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class ATslCharacter*>                       RevivedCharacters;                                        // 0x0480(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AirRespawnProcessor"));

		return ptr;
	}


	void STATIC_TakeOffAircraft();
};


// Class TslGame.DeadPointRespawnProcessor
// 0x0000 (0x0450 - 0x0450)
class ADeadPointRespawnProcessor : public AAbstractRespawnProcessor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DeadPointRespawnProcessor"));

		return ptr;
	}

};


// Class TslGame.RandomRespawnProcessor
// 0x0040 (0x0490 - 0x0450)
class ARandomRespawnProcessor : public AAbstractRespawnProcessor
{
public:
	TArray<class ATslPlayerStart*>                     AllPlayerStarts;                                          // 0x0450(0x0010) (ZeroConstructor, Transient)
	float                                              MinQuadSize;                                              // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinEnemyDistance;                                         // 0x0464(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NearAllyWeight;                                           // 0x0468(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinAllyDistance;                                          // 0x046C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAllyDistance;                                          // 0x0470(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0474(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RandomRespawnProcessor"));

		return ptr;
	}

};


// Class TslGame.StartPointRespawnProcessor
// 0x0010 (0x0460 - 0x0450)
class AStartPointRespawnProcessor : public AAbstractRespawnProcessor
{
public:
	TArray<class ATslPlayerStart*>                     CachedPlayerStarts;                                       // 0x0450(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StartPointRespawnProcessor"));

		return ptr;
	}

};


// Class TslGame.CaptureAreaActor
// 0x0188 (0x0580 - 0x03F8)
class ACaptureAreaActor : public AStaticMeshActor
{
public:
	EPreoccupiedTeamType                               PreoccupiedTeamType;                                      // 0x03F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              ScorePerSecond;                                           // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckCharacterOnVehicle;                                 // 0x0400(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	float                                              ExposeOnScreenDistance;                                   // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ColorParameterName;                                       // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TryingTeamColorParameterName;                             // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ProgressParameterName;                                    // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IndicatorZOffset;                                         // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PointsNeedToCapture;                                      // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     DisplayName;                                              // 0x0428(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     BattleAreaType;                                           // 0x0438(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UAkAudioEvent*                               AkEvent_CaptureStart;                                     // 0x0448(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               AkEvent_CaptureProgress;                                  // 0x0450(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               AkEvent_CaptureEnd;                                       // 0x0458(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     AkRTPCParamName;                                          // 0x0460(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                                 RTPCByPlayerNumber;                                       // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 CaptureScorePerSecByPlayerNumber;                         // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       AboveAreaMeshName;                                        // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZOffsetAboveAreaMesh;                                     // 0x0488(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RespawnZOffset;                                           // 0x048C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                RedTeamColor;                                             // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                BlueTeamColor;                                            // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                NeuturalColor;                                            // 0x04B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              CaptureCollisionRadiusOffset;                             // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x34];                                      // 0x04C4(0x0034) MISSED OFFSET
	class UAkComponent*                                AkComponent;                                              // 0x04F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FTimerHandle                                CaptureProgressAudioDelayTimerHandle;                     // 0x0500(0x0008)
	bool                                               bActivated;                                               // 0x0508(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	int                                                CaptureTeamId;                                            // 0x050C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                TryingTeamId;                                             // 0x0510(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              CapturePoint;                                             // 0x0514(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x68];                                      // 0x0518(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CaptureAreaActor"));

		return ptr;
	}


	void STATIC_OnRep_CaptureTryingTeamId(int CaptureTryingTeamId);
	void STATIC_OnRep_CaptureTeamId(int OldCapturedTeamId);
	void STATIC_OnRep_CapturePoint(float CapturePoint);
	void STATIC_OnRep_Activated(bool bOldActviate);
	void STATIC_OnActorBeginOverlappedAtClient(class AActor* MyActor, class AActor* OverlappedActor);
	float STATIC_GetCaptureProgressNormalized();
	float STATIC_GetAreaRadius();
	void STATIC_CheckCaptureAudioByTimer();
};


// Class TslGame.SelectableRespawnProcessor
// 0x0050 (0x04B0 - 0x0460)
class ASelectableRespawnProcessor : public AStartPointRespawnProcessor
{
public:
	TMap<struct FName, class ACaptureAreaActor*>       CachedCaptureAreaActors;                                  // 0x0460(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SelectableRespawnProcessor"));

		return ptr;
	}

};


// Class TslGame.TslPopupInterface
// 0x0000 (0x0030 - 0x0030)
class UTslPopupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPopupInterface"));

		return ptr;
	}

};


// Class TslGame.ActionInputEventHolder
// 0x0028 (0x0058 - 0x0030)
class UActionInputEventHolder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ActionInputEventHolder"));

		return ptr;
	}

};


// Class TslGame.TslBaseHUD
// 0x0150 (0x0620 - 0x04D0)
class ATslBaseHUD : public AHUD
{
public:
	class UClass*                                      MainUMGHudClass;                                          // 0x04D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UAkAudioBank*>                        AutoLoadAudioBanks;                                       // 0x04D8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET
	TMap<struct FString, struct FTslWidgetState>       WidgetStateMap;                                           // 0x04F0(0x0050) (ZeroConstructor, Transient)
	TArray<class UActionInputEventHolder*>             ActionInputEventHolderArray;                              // 0x0540(0x0010) (ZeroConstructor, Transient)
	class UUserWidget*                                 MainUMGHud;                                               // 0x0550(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UBlockInputUserWidget*>               BlockInputWidgetList;                                     // 0x0558(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FName                                       GameModeAlias;                                            // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UUserWidget*>                         PendingRemoveWidgetList;                                  // 0x0570(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<struct FString>                             UseMouseWidgetStack;                                      // 0x0580(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               IsTimelineMaximize;                                       // 0x0590(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x83];                                      // 0x0591(0x0083) MISSED OFFSET
	float                                              DebugLineActorNameNear;                                   // 0x0614(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DebugLineActorNameMiddle;                                 // 0x0618(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DebugLineActorNameFar;                                    // 0x061C(0x0004) (ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseHUD"));

		return ptr;
	}


	void STATIC_WidgetToggle(const struct FString& WidgetName);
	void STATIC_WidgetShow(const struct FString& WidgetName, EWidgetShowType ShowType, class UObject* OptionalParam);
	void STATIC_WidgetCreate(const struct FString& WidgetName, const struct FTslWidgetConfig& Config);
	EKillcamDisplayCode STATIC_UpdateKillcamDisplayCode();
	void STATIC_UpdateHud();
	bool STATIC_UpdateHighlightDisplayBool();
	void STATIC_UnbindActionKeyDelegateEvent(const struct FName& ActionName, TEnumAsByte<EInputEvent> InputEvent);
	void STATIC_TestShowDialog(const struct FString& Message);
	void STATIC_ShowPopupDialog(const struct FString& PopupWidgetName, EPopupStyle PopupStyle, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
	void STATIC_ShowDefaultHud();
	void STATIC_RemoveInternalHudsExplicitly(class AActor* HudActor);
	void STATIC_ReceivePostBeginPlay();
	void STATIC_PrintShowWidgetList();
	void STATIC_PrintCreatedWidgetList();
	void STATIC_OnClickedKillcamPlay();
	void STATIC_OnClickedHighlightPlay();
	bool STATIC_IsWidgetShow(const struct FString& WidgetName);
	bool STATIC_IsMouseUse();
	bool STATIC_IsEnableHighlightShortcut();
	bool STATIC_HideWidgetByEscape();
	void STATIC_HidePopupDialog(const struct FString& PopupWidgetName);
	class UUserWidget* STATIC_GetWidget(const struct FString& WidgetName);
	class UUserWidget* STATIC_GetMainUMGHud();
	EKillcamDisplayCode STATIC_GetLastKillcamDisplayCode();
	struct FText STATIC_GetKillcamCountingText(const struct FText& InCountingTextFormat);
	void STATIC_ForceHidePopupHandler(EPopupButtonID DummyID);
	void STATIC_DisplayActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance);
	void STATIC_DestroyAllWidgets();
	void STATIC_BindActionKeyDelegateEvent(const struct FName& ActionName, TEnumAsByte<EInputEvent> InputEvent, const struct FScriptDelegate& ActionKeyDelegate);
	void STATIC_ApplicationActivationStateChangedEvent(bool IsActive);
	void STATIC_AddTestScreenResolutions(int Width, int Height);
};


// Class TslGame.AimPunchDataAsset
// 0x00C8 (0x0100 - 0x0038)
class UAimPunchDataAsset : public UDataAsset
{
public:
	float                                              ArmorMinPitch;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ArmorMaxPitch;                                            // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ArmorMinYaw;                                              // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ArmorMaxYaw;                                              // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoArmorMinPitch;                                          // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoArmorMaxPitch;                                          // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoArmorMinYaw;                                            // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoArmorMaxYaw;                                            // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<EHitDirection, class UClass*>                 CameraShakesTPP;                                          // 0x0058(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<EHitDirection, class UClass*>                 CameraShakesFPP;                                          // 0x00A8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FPPScopingShakeModifier;                                  // 0x00F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HasArmorShakeModifier;                                    // 0x00FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AimPunchDataAsset"));

		return ptr;
	}

};


// Class TslGame.AirborneEjectionArea
// 0x0010 (0x03F8 - 0x03E8)
class AAirborneEjectionArea : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              Radius;                                                   // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AirborneEjectionArea"));

		return ptr;
	}

};


// Class TslGame.MutableCharacter
// 0x0060 (0x0890 - 0x0830)
class AMutableCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0830(0x0020) MISSED OFFSET
	EGender                                            Gender;                                                   // 0x0850(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0851(0x0007) MISSED OFFSET
	class UCustomizableObjectInstance*                 CustomizableObjectInstance;                               // 0x0858(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTslCustomizableSkeletalComponent*           CustomizableSkeletalComponent;                            // 0x0860(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FBinaryData                                 InstanceDescriptor;                                       // 0x0868(0x0010) (Net, Transient)
	bool                                               bIsAI;                                                    // 0x0878(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x0879(0x000B) MISSED OFFSET
	uint32_t                                           PlayerKey;                                                // 0x0884(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0888(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MutableCharacter"));

		return ptr;
	}


	void STATIC_UpdateAppearence();
	void STATIC_OnRep_PlayerKey();
	void STATIC_OnRep_InstanceDescriptor();
	EGender STATIC_GetGender();
};


// Class TslGame.ConnectionHandlerInterface
// 0x0000 (0x0030 - 0x0030)
class UConnectionHandlerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ConnectionHandlerInterface"));

		return ptr;
	}

};


// Class TslGame.VaultingData
// 0x0208 (0x0240 - 0x0038)
class UVaultingData : public UDataAsset
{
public:
	int                                                MoveIndex;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FVaultingTypeRequirements                   MoveRequirements;                                         // 0x0040(0x00D0) (Edit, DisableEditOnInstance)
	EVaultAnimType                                     VaultAnimType;                                            // 0x0110(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              LocationStartNormalScale;                                 // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocationStartZOffset;                                     // 0x0118(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocationEndNormalScale;                                   // 0x011C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocationEndZOffset;                                       // 0x0120(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsClimb;                                                 // 0x0124(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsSlide;                                                 // 0x0125(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	float                                              PreApexSpeedScale;                                        // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostApexSpeedScale;                                       // 0x012C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultInitialTimer;                                        // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ApexAdditiveStartTime;                                    // 0x013C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ApexAdditiveEndTime;                                      // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultEndToFallTimerCutoff;                                // 0x0144(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectionInterpSpeed;                                     // 0x0148(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StartCutoffByDistance_InMap;                              // 0x014C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StartCutoffByDistance_OutMap;                             // 0x0154(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StartCutoffBySpeed_InMap;                                 // 0x015C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StartCutoffBySpeed_OutMap;                                // 0x0164(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_InMap_PreApex;                            // 0x016C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_OutMap_PreApex;                           // 0x0174(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_InMap_PostApex;                           // 0x017C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PlayrateBySpeed_OutMap_PostApex;                          // 0x0184(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           AnimationSequence;                                        // 0x0190(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           AnimationSequence_FPP;                                    // 0x0198(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           AnimationSequence_Rifle;                                  // 0x01A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           AnimationSequence_Rifle_FPP;                              // 0x01A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimationCurve;                                           // 0x01B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   CharLocationInterpSpeedInMap;                             // 0x01B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   CharLocationInterpSpeedOutMap;                            // 0x01C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   TimerProgressionByDistanceInMap;                          // 0x01C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   TimerProgressionByDistanceOutMap;                         // 0x01D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              TimerProgressionVTimerMax;                                // 0x01D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultEndTimerNormal;                                      // 0x01DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultEndTimerFall;                                        // 0x01E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterPostVaultVelocityScalar;                         // 0x01E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CharacterPostVaultVelocityScalarVector;                   // 0x01E8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CharacterPostVaultVelocityScalarVector_ToFall;            // 0x01F4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanVaultWithWeapon;                                      // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsCancellable;                                           // 0x0201(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0202(0x0002) MISSED OFFSET
	float                                              MinCancelVTimer;                                          // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCancelVTimer;                                          // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TaskEndVTimer;                                            // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostVaultTimerProgressionScale;                           // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseStaticVTimerDampening;                                // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMappedVTimerDampening;                                // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0216(0x0002) MISSED OFFSET
	float                                              StaticDampeningScalar;                                    // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StaticDampeningVTimerMax;                                 // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MappedDampeningScalar;                                    // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MappedDampeningVTimerMax;                                 // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseCustomApexForTimer;                                   // 0x0228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	float                                              CustomApex;                                               // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DBNOExitApexTime;                                         // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AdditiveZOffsetStartVTime;                                // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbEndWithApexZEndVTime;                                // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LedgeGrabStartTraceDownDistance;                          // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VaultingData"));

		return ptr;
	}


	bool STATIC_IsRequirementPassed(bool bInIsClimb, bool bInIsVault, bool bInIsLedgeGrab, bool bInIsSlide, bool bInIsNarrow, float InCharSpeed, float InZSpeed, int FirstRow, float InRelativeZ, const struct FVaultingLedgeData& InLedgeData);
	class UAnimSequenceBase* STATIC_GetVaultAnimation(bool bHasRifle, bool bIsFPP);
	float STATIC_GetBlendSpeedByDistance(float InDistance);
	float STATIC_GetAnimationLength();
	class UCurveFloat* STATIC_GetAnimationCurve();
};


// Class TslGame.BattlepassObjectInterface
// 0x0000 (0x0030 - 0x0030)
class UBattlepassObjectInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BattlepassObjectInterface"));

		return ptr;
	}

};


// Class TslGame.TslBuff
// 0x0078 (0x0460 - 0x03E8)
class ATslBuff : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	struct FName                                       OverlapId;                                                // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EBuffOverlapSolveMethod                            OverlapSolveMethod;                                       // 0x03F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              BuffTickInterval;                                         // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BuffTickFirstDelay;                                       // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BuffDuration;                                             // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Infinite;                                                 // 0x0408(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	struct FName                                       AttachSocket;                                             // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AttachServerPaticleClass;                                 // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsDebuff;                                                 // 0x0420(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	struct FVector                                     BuffInstigatorLocation;                                   // 0x0424(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bApplyGroggyCharacter;                                    // 0x0430(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLogPlayerBuffed;                                         // 0x0431(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0432(0x0006) MISSED OFFSET
	class UBuffComponet*                               OwnerBuffComponent;                                       // 0x0438(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0440(0x0010) MISSED OFFSET
	class ATslServerParticle*                          AttachedServerPaticle;                                    // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0458(0x0004) MISSED OFFSET
	bool                                               bClientNotifyStartBuff;                                   // 0x045C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bClientNotifyStopBuff;                                    // 0x045D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x045E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBuff"));

		return ptr;
	}


	void STATIC_TickBuff();
	void STATIC_StopBuffBlueprint(bool bCanceled);
	void STATIC_StartBuffBlueprint();
	void STATIC_LeaveGameLogHeal(class ATslCharacter* InCharacter, float InHealAmount, bool bInstantHeal);
	class APawn* STATIC_GetOwnerPawn();
	class ATslCharacter* STATIC_GetOwnerCharacter();
	struct FAttackId STATIC_GetAttackId();
	bool STATIC_CanApplyBuff();
};


// Class TslGame.BuffComponet
// 0x0160 (0x0360 - 0x0200)
class UBuffComponet : public UActorComponent
{
public:
	TArray<class ATslBuff*>                            Buffs;                                                    // 0x0200(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslFBRBuff*>                         CoolTimeBuffs;                                            // 0x0210(0x0010) (ZeroConstructor, Transient)
	TArray<class UClass*>                              ReplicatedBuffClass;                                      // 0x0220(0x0010) (Net, ZeroConstructor, Transient)
	float                                              BuffPropertyList[0x9];                                    // 0x0230(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0254(0x0004) MISSED OFFSET
	struct FBuffCoolTimeInfo                           BuffCoolTimeInfo[0xA];                                    // 0x0258(0x0010) (Net, Transient)
	unsigned char                                      UnknownData01[0x68];                                      // 0x02F8(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BuffComponet"));

		return ptr;
	}


	void STATIC_UpdateCoolTime();
	void STATIC_Server_RequestSelfBuff(class UClass* BuffClass, class ATslReplicatedBuff* BuffInst, float Param);
	void STATIC_RemoveBuff(const struct FName& OverlapId);
	void STATIC_OnRep_ReplicatedBuffClass(TArray<class UClass*> InOldArray);
	class ATslBuff* STATIC_FindBuffWithOverlapId(const struct FName& BuffOverlapId);
	class ATslBuff* STATIC_AddBuff(class UClass* TslBuffClass, class APawn* InInstigator);
};


// Class TslGame.Team
// 0x00F8 (0x04E0 - 0x03E8)
class ATeam : public AActor
{
public:
	struct FVector_NetQuantize100                      PlayerLocation;                                           // 0x03E8(0x000C) (Net, Transient)
	struct FRotator                                    PlayerRotation;                                           // 0x03F4(0x000C) (Net, Transient, IsPlainOldData)
	struct FString                                     PlayerName;                                               // 0x0400(0x0010) (Net, ZeroConstructor, Transient)
	struct FString                                     ClanName;                                                 // 0x0410(0x0010) (Net, ZeroConstructor, Transient)
	uint16_t                                           Health;                                                   // 0x0420(0x0002) (Net, ZeroConstructor, Transient, IsPlainOldData)
	uint16_t                                           HealthMax;                                                // 0x0422(0x0002) (Net, ZeroConstructor, Transient, IsPlainOldData)
	uint16_t                                           GroggyHealth;                                             // 0x0424(0x0002) (Net, ZeroConstructor, Transient, IsPlainOldData)
	uint16_t                                           GroggyHealthMax;                                          // 0x0426(0x0002) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EMarkerType                                        MapMarkerType;                                            // 0x0428(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	struct FVector2D                                   MapMarkerPosition;                                        // 0x042C(0x0008) (Net, IsPlainOldData)
	struct FVector2D                                   PingPosition;                                             // 0x0434(0x0008) (Net, IsPlainOldData)
	unsigned char                                      bIsDying : 1;                                             // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bIsGroggying : 1;                                         // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bQuitter : 1;                                             // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bShowMapMarker : 1;                                       // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x043D(0x0003) MISSED OFFSET
	TArray<struct FVector2D>                           MapWayPointPosArr;                                        // 0x0440(0x0010) (Net, ZeroConstructor)
	bool                                               bShowMapWayPoint;                                         // 0x0450(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsInVehicle : 1;                                         // 0x0451(0x0001) (Net, Transient)
	unsigned char                                      bIsInAircraft : 1;                                        // 0x0451(0x0001) (Net, Transient)
	bool                                               bIsSkydiving;                                             // 0x0452(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsParachuting;                                           // 0x0453(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BoostGauge;                                               // 0x0454(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int8_t                                             TeamIdRep;                                                // 0x0458(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	int8_t                                             MemberIndex;                                              // 0x0459(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	int8_t                                             SquadIndex;                                               // 0x045A(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	int8_t                                             SquadMemberIndex;                                         // 0x045B(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPlatoonCommander;                                      // 0x045C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x045D(0x0003) MISSED OFFSET
	class ATslCharacter*                               TslCharacter;                                             // 0x0460(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0468(0x0018) MISSED OFFSET
	float                                              PiningTimeSeconds;                                        // 0x0480(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bZombie : 1;                                              // 0x0484(0x0001) (Net, Transient)
	unsigned char                                      bHadZombieVirus : 1;                                      // 0x0484(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0485(0x0003) MISSED OFFSET
	float                                              Signal;                                                   // 0x0488(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SignalMax;                                                // 0x048C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      GroggySignal;                                             // 0x0490(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      GroggySignalMax;                                          // 0x0491(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0492(0x0001) MISSED OFFSET
	unsigned char                                      SpawnKitIndex;                                            // 0x0493(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x0494(0x000C) MISSED OFFSET
	struct FString                                     UniqueId;                                                 // 0x04A0(0x0010) (Net, ZeroConstructor, Transient)
	class ATslPlayerState*                             AuthorizedPlayerState;                                    // 0x04B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPlayerState*                             CachedTslPlayerState;                                     // 0x04B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     MeToFollowName;                                           // 0x04C0(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FString>                             FollowToMeNames;                                          // 0x04D0(0x0010) (Net, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.Team"));

		return ptr;
	}


	void STATIC_SetWayPointBlocked(bool bBlocked);
	void STATIC_SetMeToFollowName(const struct FString& LeaderName);
	void STATIC_SetFollowMeNames(const struct FString& FollowerName);
	void STATIC_ServerSetWayPointPos_Team(const struct FVector2D& NewMapWayPointPosition);
	void STATIC_ServerSetShowWayPoint(bool bNewShow);
	void STATIC_ServerSetShowMapMarker(bool bNewShowMapMarker);
	void STATIC_ServerSetPingPosition(const struct FVector2D& NewPingPosition);
	void STATIC_ServerSetMapMarkerPosition(const struct FVector2D& NewMapMarkerPosition, EMarkerType NewMapMarkerType);
	void STATIC_RemoveMeToFollowName();
	void STATIC_RemoveFollowMeName(const struct FString& FollowerName, bool isAll);
	void STATIC_OnRep_SpawnKitIndex(unsigned char LastSpawnKitIndex);
	void STATIC_OnRep_MapMarkerType();
	void STATIC_OnRep_MapMarkerPosition();
	void STATIC_OnRep_Dying(bool bLastDying);
	void STATIC_OnRep_bShowMapMarker();
	bool STATIC_IsSkydiving();
	bool STATIC_IsShowMapWayPoint();
	bool STATIC_IsShowMapMarker();
	bool STATIC_IsQuitter();
	bool STATIC_IsParachuting();
	bool STATIC_IsGroggying();
	bool STATIC_IsFullFollower();
	bool STATIC_IsFollow();
	bool STATIC_IsDying();
	bool STATIC_IsBeFollowed();
	bool STATIC_HasItemRequest();
	bool STATIC_HasHealItemRequest();
	bool STATIC_HasAmmoItemRequest();
	int STATIC_GetWayPointsNum_Team();
	struct FVector2D STATIC_GetWayPointPos_Team(int WayPointIndex);
	bool STATIC_GetWayPointBlocked();
	class ATslCharacter* STATIC_GetTslCharacter();
	struct FLinearColor STATIC_GetTeamColor(int MemberNumber);
	int STATIC_GetSquadMemberIndex();
	int STATIC_GetSquadIndex();
	float STATIC_GetSignalMax();
	float STATIC_GetSignal();
	struct FString STATIC_GetPlayerUniqueId();
	struct FRotator STATIC_GetPlayerRotation();
	struct FString STATIC_GetPlayerName();
	struct FVector STATIC_GetPlayerLocation();
	float STATIC_GetPiningTimeSeconds();
	struct FVector2D STATIC_GetPingPosition();
	EOutGamePlatformProvider STATIC_GetOutGamePlatformProvider();
	int STATIC_GetMemberNumber();
	EMarkerType STATIC_GetMapMarkerType();
	struct FVector2D STATIC_GetMapMarkerPosition();
	bool STATIC_GetIsInVehicle();
	bool STATIC_GetIsInAircraft();
	float STATIC_GetHealthMax();
	float STATIC_GetHealth();
	float STATIC_GetGroggySignalMax();
	float STATIC_GetGroggySignal();
	float STATIC_GetGroggyHealthMax();
	float STATIC_GetGroggyHealth();
	struct FString STATIC_GetClanName();
	void STATIC_ClearWayPointPosArr_Team();
};


// Class TslGame.VaultingSettings
// 0x0020 (0x0058 - 0x0038)
class UVaultingSettings : public UDataAsset
{
public:
	TArray<class UVaultingData*>                       VaultingDataArray;                                        // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              GlobalVaultSpeedScale;                                    // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ClimbFinderMaxSteps_Vault;                                // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ClimbFinderMaxSteps_LedgeGrab;                            // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VaultingSettings"));

		return ptr;
	}

};


// Class TslGame.TslCharacterMovement
// 0x0AD0 (0x13F0 - 0x0920)
class UTslCharacterMovement : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0920(0x0008) MISSED OFFSET
	int                                                BroSimulateMovement;                                      // 0x0928(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x092C(0x0004) MISSED OFFSET
	struct FVector                                     NetComputedPosition;                                      // 0x0930(0x000C) (IsPlainOldData)
	struct FVector                                     NetMeshPositionInPhysicsScene;                            // 0x093C(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0948(0x0060) MISSED OFFSET
	float                                              MaxProneSpeed;                                            // 0x09A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProneAlignementThreshold;                                 // 0x09AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxGroggySpeed;                                           // 0x09B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpedHalfHeight;                                         // 0x09B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x09B8(0x0004) MISSED OFFSET
	float                                              JumpVelocityLossScale;                                    // 0x09BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ToFallVelocityDTScale;                                    // 0x09C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ToFallVelocityClamp;                                      // 0x09C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpeedToJumpModifier;                                      // 0x09C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinJumpZVelocity;                                         // 0x09CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxJumpZVelocity;                                         // 0x09D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LandingJumpDecreaseModifier;                              // 0x09D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoveryWalkSpeedRatePerSec;                              // 0x09D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinWalkSpeedModifier;                                     // 0x09DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WalkSpeedModifierUnit;                                    // 0x09E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinStandingJumpXYSpeed;                                   // 0x09E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpeedInWaterModifier;                                     // 0x09E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x09EC(0x0004) MISSED OFFSET
	class UVaultingSettings*                           VaultingSettings;                                         // 0x09F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HeightFor200;                                             // 0x09F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HeightFor160;                                             // 0x09FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HeightFor120;                                             // 0x0A00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HeightFor90;                                              // 0x0A04(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HeightFor60;                                              // 0x0A08(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SizeForNarrow;                                            // 0x0A0C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SizeForSlide;                                             // 0x0A10(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VelocityForMobile;                                        // 0x0A14(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GlobalVaultScale;                                         // 0x0A18(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultCancelDTScalar;                                      // 0x0A1C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   MaxVaultDistanceByVelocityInMap;                          // 0x0A20(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   MaxVaultDistanceByVelocityOutMap;                         // 0x0A28(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVaultingTask                               CurrentVaultingTask;                                      // 0x0A30(0x0048) (BlueprintVisible, BlueprintReadOnly)
	class UVaultingData*                               CurrentVaultingData;                                      // 0x0A78(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              V_Timer_CP;                                               // 0x0A80(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimMultiplierPreApex;                                    // 0x0A84(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimMultiplierPostApex;                                   // 0x0A88(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVaulting_CP;                                           // 0x0A8C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0A8D(0x0003) MISSED OFFSET
	struct FVector                                     CharacterRelLocation;                                     // 0x0A90(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     LastVaultLocation;                                        // 0x0A9C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     AveragedVelocity;                                         // 0x0AA8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              LastVaultTime;                                            // 0x0AB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultCancelAnimSpeed;                                     // 0x0AB8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWantsToCancelVault;                                      // 0x0ABC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0ABD(0x0003) MISSED OFFSET
	float                                              VaultingDistanceLimit;                                    // 0x0AC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   XYSpeedToForwardDirMapIn;                                 // 0x0AC4(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   XYSpeedToForwardDirMapOut;                                // 0x0ACC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ZSpeedToForwardDirMapIn;                                  // 0x0AD4(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ZSpeedToForwardDirMapOut;                                 // 0x0ADC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ForwardDirTraceSpeed;                                     // 0x0AE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x770];                                     // 0x0AE8(0x0770) MISSED OFFSET
	class ATslCharacter*                               TslCharacterOwner;                                        // 0x1258(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           TickCounterOnOptimizeAnim;                                // 0x1260(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           ForceUpdateRateOnOptimizeAnim;                            // 0x1264(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ReplicatedVelocity;                                       // 0x1268(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3C];                                      // 0x1274(0x003C) MISSED OFFSET
	float                                              MinDistanceToBreakGlass;                                  // 0x12B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxSweepTestDistanceToBreakGlass;                         // 0x12B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RiderSphereRadiusToBreakGlass;                            // 0x12B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastPelvisLocation;                                       // 0x12BC(0x000C) (Transient, IsPlainOldData)
	bool                                               bInitLastPelvisLocation;                                  // 0x12C8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2B];                                      // 0x12C9(0x002B) MISSED OFFSET
	float                                              MaxSwimAcceleration;                                      // 0x12F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxZSpeedOutOfWaterModifier;                              // 0x12F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    MaxSwimmingRotationRate;                                  // 0x12FC(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    SwimmingRotationAcceleration;                             // 0x1308(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              MaxZSpeedOutOfWaterModifierForStandingSwimming;           // 0x1314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaveRidingModifier;                                       // 0x1318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaveRidingSmoothingFactor;                                // 0x131C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaveRidingModifierUnderWater;                             // 0x1320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StayingUnderWaterDepthBand;                               // 0x1324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x1328(0x0004) MISSED OFFSET
	float                                              MaxUnderwaterSwimSpeed;                                   // 0x132C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxUnderwaterSwimAcceleration;                            // 0x1330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationUnderwaterSwimming;                    // 0x1334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    MaxUnderwaterSwimmingRotationRate;                        // 0x1338(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    UnderwaterSwimmingRotationAcceleration;                   // 0x1344(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              MinimumHighAltitude;                                      // 0x1350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x1354(0x0004) MISSED OFFSET
	float                                              MaxFallLateralSpeedAtHighAltitude;                        // 0x1358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TerminalVelocityAtHighAltitude;                           // 0x135C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecreaseTerminalVelocityAtHighAltitude;                   // 0x1360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFallAccelerationAtHighAltitude;                        // 0x1364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    FallRotationRateAtHighAltitude;                           // 0x1368(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControlAtHighAltitude;                                 // 0x1374(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControlBoostMultiplierAtHighAltitude;                  // 0x1378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControlBoostVelocityThresholdAtHighAltitude;           // 0x137C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FallingDamageType;                                        // 0x1380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 EjectDamageCurve;                                         // 0x1388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingDamageMinZCut;                                     // 0x1390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingDamageVDampingZ;                                   // 0x1394(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingDamageFactor;                                      // 0x1398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x18];                                      // 0x139C(0x0018) MISSED OFFSET
	bool                                               UseBlockedHitDamage;                                      // 0x13B4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData13[0x13];                                      // 0x13B5(0x0013) MISSED OFFSET
	TArray<struct FOverlappingObjectInfo>              OverlappingObjectInfoArray;                               // 0x13C8(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData14[0x18];                                      // 0x13D8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterMovement"));

		return ptr;
	}


	bool STATIC_TraceSphereForVaulting(const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<EDrawDebugTrace> DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_TraceLineForVaulting(const struct FVector& Start, const struct FVector& End, TEnumAsByte<EDrawDebugTrace> DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_TraceCapsuleForVaulting(const struct FVector& Start, const struct FVector& End, TEnumAsByte<EDrawDebugTrace> DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	void STATIC_StartVaultingTask(const struct FVaultingTask& InVaultTask);
	void STATIC_SetCustomMovementModeOverride(unsigned char InCustomMode);
	void STATIC_PredictCapsulePathForVaulting(const struct FVector& StartPos, const struct FVector& LaunchVelocity, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float CapsuleRadiusOverride, float CapsuleHalfHeightOverride, float SimFrequency, float MaxSimTime, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, struct FVector* OutImpactVelocity);
	void STATIC_LocalHandleVault_CP(const struct FVector& VaultStart, const struct FVector& VaultApex, const struct FVector& VaultApexAdditive, const struct FVector& VaultEnd, bool bIsClimb, EVaultAnimType VaultAnimType, bool bEndToFall, float Direction, float PlayerVelocity, float DistanceFromObject);
	bool STATIC_IsVaultResultSafe(const struct FVector& StartPos, const struct FVector& EndPos, EVaultAnimType VaultType, const struct FVector& ImpactPosition, const struct FName& ImpactObjectName, const struct FVector& InApex);
	bool STATIC_IsVaulting();
	void STATIC_HandleVaultPreEvaluation(bool bForceVelocity, const struct FVector& InForcedVelocity);
	struct FVaultingHandleResult STATIC_HandleVaulting(const struct FVaultingHandleInput& Input);
	float STATIC_GetVTimer();
	class UVaultingData* STATIC_GetVaultingDataFromAnim(EVaultAnimType InVaultType);
	float STATIC_GetMaxVaultDistanceBySpeed();
	float STATIC_GetGlobalVaultingSpeedMultiplier();
	EVaultAnimType STATIC_GetCurrentVaultType();
	EVaultAnimType STATIC_EvaluateVaultAnimType(int FirstRow, int ApexAdditiveStepCounter, float AverageCellCount, bool bForceVault, bool bForceClimb, const struct FVector& CharVelocity, const struct FVector& InImpactVelocity, bool bIsLedgeGrab, float RelativeZ, const struct FVaultingLedgeData& InLedgeData, class UVaultingData** OutVaultingData);
	bool STATIC_EndCurrentTaskToFall();
};


// Class TslGame.TslDamageType
// 0x00B0 (0x00F8 - 0x0048)
class UTslDamageType : public UDamageType
{
public:
	EDamageTypeCategory                                DamageTypeCategory;                                       // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UForceFeedbackEffect*                        HitForceFeedback;                                         // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        KilledForceFeedback;                                      // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bFallDamage : 1;                                          // 0x0060(0x0001) (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	TArray<struct FDamageRatioInfo>                    DamageRatioInfos;                                         // 0x0068(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDamageRatioInfo>                    DamageRatioInfos_Console;                                 // 0x0078(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<TEnumAsByte<EStanceMode>, float>              StanceDamageRatios;                                       // 0x0088(0x0050) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bReducedByArmorRadial;                                    // 0x00D8(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreCharacterImpulse;                                  // 0x00D9(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HitReaction;                                              // 0x00DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bUseDamageCameraShake;                                    // 0x00DB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	class UClass*                                      DamageCameraShake;                                        // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     OverrideDamageCauserName;                                 // 0x00E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDamageType"));

		return ptr;
	}

};


// Class TslGame.CastableInterface
// 0x0000 (0x0030 - 0x0030)
class UCastableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastableInterface"));

		return ptr;
	}

};


// Class TslGame.TslWheelSuspensionAudioData
// 0x0050 (0x0088 - 0x0038)
class UTslWheelSuspensionAudioData : public UDataAsset
{
public:
	TMap<ELandingSoundSwitchState, float>              LandingSoundSwitchesPerHorVelocity;                       // 0x0038(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheelSuspensionAudioData"));

		return ptr;
	}

};


// Class TslGame.TslStatics
// 0x0000 (0x0030 - 0x0030)
class UTslStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStatics"));

		return ptr;
	}

};


// Class TslGame.CastComponent
// 0x0070 (0x0270 - 0x0200)
class UCastComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	class UAkAudioEvent*                               CanceledCastItemSoundClearAK;                             // 0x0208(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptDelegate                             OnFinishCast;                                             // 0x0210(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnCancelCast;                                             // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptDelegate                             OnStartRecast;                                            // 0x0230(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0240(0x0010) MISSED OFFSET
	class ATslWheeledVehicle*                          WheeledVehicle;                                           // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0258(0x0010) MISSED OFFSET
	class UObject*                                     LastCastObject;                                           // 0x0268(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastComponent"));

		return ptr;
	}


	void STATIC_UpdateCastTimeOnClient(float NewCastTime);
	bool STATIC_StartCastOnClient(const TScriptInterface<class UCastableInterface>& CastableInterface);
	void STATIC_OnFinishCastClient();
	float STATIC_GetTotalCastTime();
	float STATIC_GetElapsedCastTime();
	ECastPriority STATIC_GetCastPriority();
	class UObject* STATIC_GetCastObject();
	struct FText STATIC_GetCastName();
	ECastLevel STATIC_GetCastLevel();
	ECastAnim STATIC_GetCastAnim();
	void STATIC_CancelCastOnServer(ECastCancelReason CancelReason, bool bSendRPC);
	void STATIC_CancelCastOnClient(ECastCancelReason CancelReason, bool bSendRPC, class UObject* CastingObject);
	void STATIC_CancelAkSoundOnClient(class ATslCharacter* Character);
};


// Class TslGame.TslUserWidget
// 0x00C0 (0x0310 - 0x0250)
class UTslUserWidget : public UUserWidget
{
public:
	class UInputComponent*                             InputComponentAxis;                                       // 0x0250(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0258(0x0018) MISSED OFFSET
	TArray<struct FTslActionInputCallbackConfig>       ActionInputCallbackConfigs;                               // 0x0270(0x0010) (Edit, ZeroConstructor)
	TArray<struct FTslAxisInputCallbackConfig>         AxisInputCallbackConfigs;                                 // 0x0280(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0290(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    WidgetDestroyEventDelegate;                               // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x60];                                      // 0x02B0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslUserWidget"));

		return ptr;
	}


	void STATIC_TslUserWidgetDestroyEvent__DelegateSignature();
	struct FEventReply STATIC_TransferUserFocusThroughReply(const struct FFocusEvent& AcceptedFocusEvent, class UWidget* FocusWidget, bool bInAllUsers, struct FEventReply* Reply);
	void STATIC_StopListeningForInputAxis(const struct FName& AxisName);
	void STATIC_StopListeningForAllInputAxises();
	void STATIC_SetupInputForBlueprint();
	bool STATIC_NavigateUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	void STATIC_ListenForInputAxis(const struct FName& AxisName, float Scale, bool bConsume, const struct FScriptDelegate& Callback);
	bool STATIC_IsSpectating();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsInLobby();
	class UTslGameUserSettings* STATIC_GetTslGameUserSettings();
	float STATIC_GetRawKeyValue(const struct FKey& InKey);
	class ATslPlayerState* STATIC_GetDemoPlayerState();
	class ATslCharacter* STATIC_GetCachedViewTargetTslCharacter();
	class ATslGameState* STATIC_GetCachedGameState();
	class ATslCharacter* STATIC_GetCachedCharacter();
	float STATIC_GetAxisMultiplier();
	bool STATIC_ContainUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	bool STATIC_ContainOwnerUserFocus();
	void STATIC_ClearUserFocus(class ULocalPlayer* Player);
};


// Class TslGame.UmgBaseWidget
// 0x00E0 (0x03F0 - 0x0310)
class UUmgBaseWidget : public UTslUserWidget
{
public:
	unsigned char                                      bUseEmergingAnimation : 1;                                // 0x0310(0x0001) (Edit)
	unsigned char                                      bUseVanishingAnimation : 1;                               // 0x0310(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  EmergingAnimationBinder;                                  // 0x0318(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Animation                  VanishingAnimationBinder;                                 // 0x0338(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0358(0x0018) MISSED OFFSET
	ESlateVisibility                                   PendingVisibility;                                        // 0x0370(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	float                                              VanishingStartTime;                                       // 0x0374(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0378(0x0004) MISSED OFFSET
	int                                                Phase;                                                    // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PhaseCount;                                               // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFakeCursor;                                           // 0x0384(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0385(0x0003) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                CursorCanvas_Binder;                                      // 0x0388(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CursorWidget_Binder;                                      // 0x03B0(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FTslActionInputCallbackConfig>       FakeCursorActionConfigs;                                  // 0x03D0(0x0010) (ZeroConstructor)
	TArray<struct FTslAxisInputCallbackConfig>         FakeCursorAxisConfigs;                                    // 0x03E0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.UmgBaseWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslGamepadDebugHud
// 0x0148 (0x0538 - 0x03F0)
class UTslGamepadDebugHud : public UUmgBaseWidget
{
public:
	TMap<struct FString, struct FGamepadInputDebugtData> StickValue_Binders;                                       // 0x03F0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FString, struct FUmgWidgetBinder_Image> StickImage_Binders;                                       // 0x0440(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_TextBlock>          CurrentActionKey_Binders;                                 // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_TextBlock>          CurrentActionKeyResponseType_Binders;                     // 0x04A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ActionKey_Binder;                                         // 0x04B0(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FGamepadInputQueueData>              InputKeyQueue;                                            // 0x04D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     InputKeyQueueDataName;                                    // 0x04E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ResponseKeyQueueDataName;                                 // 0x04F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FKey                                        PrevLastActionKey;                                        // 0x0500(0x0018)
	EGamepadPresets                                    PrevPresetType;                                           // 0x0518(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0519(0x0007) MISSED OFFSET
	TArray<struct FKey>                                AllActionMappingKeys;                                     // 0x0520(0x0010) (ZeroConstructor)
	int                                                InputKeyIdx;                                              // 0x0530(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0534(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadDebugHud"));

		return ptr;
	}

};


// Class TslGame.TslGamepadUmg
// 0x0098 (0x0488 - 0x03F0)
class UTslGamepadUmg : public UUmgBaseWidget
{
public:
	TMap<struct FString, struct FUmgWidgetBinder_Image> GamePadImage_Binders;                                     // 0x03F0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             GamePadSwitcher_Binder;                                   // 0x0440(0x0028) (Edit, DisableEditOnInstance)
	struct FVector2D                                   MoveLeftStickPos;                                         // 0x0468(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   MoveRightStickPos;                                        // 0x0470(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FString                                     PlatformName;                                             // 0x0478(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadUmg"));

		return ptr;
	}

};


// Class TslGame.ReticlePostprocessData
// 0x00A8 (0x00E0 - 0x0038)
class UReticlePostprocessData : public UDataAsset
{
public:
	struct FWeaponPPSettings                           WeaponGunPostprocessSettings;                             // 0x0038(0x00A8) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReticlePostprocessData"));

		return ptr;
	}


	struct FWeaponPPSettings STATIC_GetPostprocessData();
};


// Class TslGame.TslCharacter
// 0x19F0 (0x2280 - 0x0890)
class ATslCharacter : public AMutableCharacter
{
public:
	unsigned char                                      UnknownData00[0xA];                                       // 0x0890(0x000A) MISSED OFFSET
	unsigned char                                      SandboxMasterPowerFlag;                                   // 0x089A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      OldSandboxMasterPowerFlag;                                // 0x089B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x089C(0x0004) MISSED OFFSET
	TArray<struct FSandboxMasterPSC>                   SandboxMasterPSCArray;                                    // 0x08A0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x08B0(0x0008) MISSED OFFSET
	class UBuffComponet*                               BuffComponent;                                            // 0x08B8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      FootStepEffectClassInSnow;                                // 0x08C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FootStepEffectClassInSnowRock;                            // 0x08C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x08D0(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReloadPadInput;                                         // 0x08E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bBlockReloadPad;                                          // 0x08F0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bPeekLeftToggled;                                         // 0x08F1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bPeekRightToggled;                                        // 0x08F2(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xD];                                       // 0x08F3(0x000D) MISSED OFFSET
	float                                              BleedOutRateSec;                                          // 0x0900(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              BleedOutDamage;                                           // 0x0904(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerState>              CurrentAttackerPlayerState;                               // 0x0908(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerState>              LastAttackedPlayerState;                                  // 0x0910(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerController>         CachedSpectatorPlayerController;                          // 0x0918(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0920(0x0008) MISSED OFFSET
	class USpringArmComponent*                         FirstPersonSpringArm;                                     // 0x0928(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslCameraComponent*                         FirstPersonCamera;                                        // 0x0930(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USpringArmComponent*                         FirstPersonSpringArmInVehicle;                            // 0x0938(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslCameraComponent*                         FirstPersonCameraInVehicle;                               // 0x0940(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USpringArmComponent*                         ThirdPersonSpringArmInVehicle;                            // 0x0948(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslCameraComponent*                         ThirdPersonCameraInVehicle;                               // 0x0950(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslCharacterSpringArmComponent*             ThirdPersonSpringArm;                                     // 0x0958(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            ThirdPersonCamera;                                        // 0x0960(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USpringArmComponent*                         ScopingSpringArm;                                         // 0x0968(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslCameraComponent*                         ScopingCamera;                                            // 0x0970(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x44];                                      // 0x0978(0x0044) MISSED OFFSET
	float                                              HoldBreathStopInterpSpeed;                                // 0x09BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoldBreathSwayScalar;                                     // 0x09C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoldBreathSwayReturnMod;                                  // 0x09C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3C];                                      // 0x09C8(0x003C) MISSED OFFSET
	float                                              FOV_OnScopingEaseExp;                                     // 0x0A04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ReviveToZombieAttachedPoint;                              // 0x0A08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ReviveToZombieParticle;                                   // 0x0A10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0A18(0x0010) MISSED OFFSET
	bool                                               bZombieReviveBluezoneImmune;                              // 0x0A28(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bApplyZombieVirus;                                        // 0x0A29(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x6];                                       // 0x0A2A(0x0006) MISSED OFFSET
	struct FName                                       ZombieRespawnAttachedPoint;                               // 0x0A30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ZombieRespawnParticle;                                    // 0x0A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bShowZombieRespawnFx : 1;                                 // 0x0A40(0x0001) (Net, Transient)
	unsigned char                                      UnknownData10[0x8F];                                      // 0x0A41(0x008F) MISSED OFFSET
	struct FScriptMulticastDelegate                    NoBagSpaceDelgate;                                        // 0x0AD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bIsDying : 1;                                             // 0x0AE0(0x0001) (Transient)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0AE1(0x0007) MISSED OFFSET
	TMap<ESlotOffsetType, struct FItemOffsetData>      ItemOffsetConfig;                                         // 0x0AE8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTslItemOffsetDataAsset*                     WeaponItemOffsetConfig;                                   // 0x0B38(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0B40(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData13[0x8];                                       // 0x0B40(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.SavedCamera
	unsigned char                                      UnknownData14[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	EEquipableItemSoundType                            ShoesSoundType;                                           // 0x0B58(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x7];                                       // 0x0B59(0x0007) MISSED OFFSET
	TArray<struct FName>                               BoostItemIDs;                                             // 0x0B60(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0B70(0x0008) MISSED OFFSET
	struct FName                                       SpikeTrapID;                                              // 0x0B78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstAidID;                                               // 0x0B80(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x1C];                                      // 0x0B88(0x001C) MISSED OFFSET
	struct FVector                                     LandPredictedLocation_CP;                                 // 0x0BA4(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtremeFallMovementStopTime;                              // 0x0BB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0BB4(0x0004) MISSED OFFSET
	float                                              IndoorCheckSuccessRate;                                   // 0x0BB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Sprint_MinSpeed;                                          // 0x0BBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroggyEnabledAltitudeInCentiMeter;                        // 0x0BC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FootSoundObstructionCheckMaxDistance;                     // 0x0BC4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MolotovID;                                                // 0x0BC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AController*                                 LastPossessedController;                                  // 0x0BD0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0BD8(0x0008) MISSED OFFSET
	class UTslCharacterValidateLocationComponent*      ValidateLocationComponent;                                // 0x0BE0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       SwimPoint;                                                // 0x0BE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimableWaterDepth;                                       // 0x0BF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchWaterDepth;                                         // 0x0BF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProneWaterDepth;                                          // 0x0BF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterFloorDetectionLength;                                // 0x0BFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimMaxControllerPitch;                                   // 0x0C00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UnderwaterSwimGapFromSurface;                             // 0x0C04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimableCharacterLengthOnSurface;                         // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimableCharacterLengthOnSurfaceWhenSwimming;             // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SwimTrailEffectClass;                                     // 0x0C10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslParticle*                                SwimTrailEffect;                                          // 0x0C18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       ParticleSocket_SwimIdleRipple;                            // 0x0C20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SwimIdleRippleEffectClass;                                // 0x0C28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                maxNumSwimIdleRippleEffect;                               // 0x0C30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimIdleRippleOffsetFromSurface;                          // 0x0C34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x2C];                                      // 0x0C38(0x002C) MISSED OFFSET
	int                                                SpectatedCount;                                           // 0x0C64(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      CharacterState;                                           // 0x0C68(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0C69(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x0C6C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CameraFovRatioCurve;                                      // 0x0C70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UHackReporterComponent*                      HackReporterComponent;                                    // 0x0C78(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              HeavyFallVerticalVelocityThreshold;                       // 0x0C80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x4];                                       // 0x0C84(0x0004) MISSED OFFSET
	class UVaultingData*                               CurrentVaultData_CP;                                      // 0x0C88(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x8];                                       // 0x0C90(0x0008) MISSED OFFSET
	float                                              LeanOffset_Crouch;                                        // 0x0C98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0xC];                                       // 0x0C9C(0x000C) MISSED OFFSET
	class UAkAudioEvent*                               RemoteVolumeControlOn;                                    // 0x0CA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UAkAudioBank*>                        Banks;                                                    // 0x0CB0(0x0010) (ZeroConstructor, Transient)
	float                                              LeanOffset_Prone;                                         // 0x0CC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     Punch_InitialLocation;                                    // 0x0CC4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	class ATslParticle*                                FootStepEffect;                                           // 0x0CD0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0x8];                                       // 0x0CD8(0x0008) MISSED OFFSET
	float                                              BoostGauge;                                               // 0x0CE0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x4];                                       // 0x0CE4(0x0004) MISSED OFFSET
	class UClass*                                      LaunchDamageTypeClass;                                    // 0x0CE8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x8];                                       // 0x0CF0(0x0008) MISSED OFFSET
	float                                              GroggyHealthMax;                                          // 0x0CF8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bAcceptHitsWhileNotAlive;                                 // 0x0CFC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x0CFD(0x0003) MISSED OFFSET
	float                                              Punch_Damage;                                             // 0x0D00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData29[0x4];                                       // 0x0D04(0x0004) MISSED OFFSET
	struct FName                                       ParticleSocketFootRight;                                  // 0x0D08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInvertTargeting;                                         // 0x0D10(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData30[0x7];                                       // 0x0D11(0x0007) MISSED OFFSET
	struct FName                                       MedKitID;                                                 // 0x0D18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x8];                                       // 0x0D20(0x0008) MISSED OFFSET
	bool                                               bIsVaultingSystemEnabled;                                 // 0x0D28(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData32[0x27];                                      // 0x0D29(0x0027) MISSED OFFSET
	class UClass*                                      FootStepEffectClassInIce;                                 // 0x0D50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x0D58(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	ECastAnim                                          Remote_CastAnim;                                          // 0x0D60(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData33[0x3];                                       // 0x0D61(0x0003) MISSED OFFSET
	float                                              SimulatedHit_Initial;                                     // 0x0D64(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BleedOutDamageType;                                       // 0x0D68(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       AdrenalineID;                                             // 0x0D70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinimumParachuteAltitude;                                 // 0x0D78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData34[0x14];                                      // 0x0D7C(0x0014) MISSED OFFSET
	class UCurveFloat*                                 AngledCurve;                                              // 0x0D90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAimPunchDataAsset*                          AimPunchHit;                                              // 0x0D98(0x0008) (Edit, ZeroConstructor, NoClear, IsPlainOldData)
	class UAimPunchDataAsset*                          AimPunchExplosion;                                        // 0x0DA0(0x0008) (Edit, ZeroConstructor, NoClear, IsPlainOldData)
	float                                              CamShakeDamageThreshold;                                  // 0x0DA8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bProcessHitReaction;                                      // 0x0DAC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData35[0x3];                                       // 0x0DAD(0x0003) MISSED OFFSET
	float                                              HitReaction_Time;                                         // 0x0DB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHasVest;                                                 // 0x0DB4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x13];                                      // 0x0DB5(0x0013) MISSED OFFSET
	struct FVector                                     VaultLastLocation_CP;                                     // 0x0DC8(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	int                                                IndoorCheckSamplingQueueSize;                             // 0x0DD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData37[0xC];                                       // 0x0DD8(0x000C) MISSED OFFSET
	float                                              SimulatedHit_ImpulsePower;                                // 0x0DE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FootStepEffectClassInRock;                                // 0x0DE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	double                                             LastLaunchTime;                                           // 0x0DF0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData38[0x8];                                       // 0x0DF8(0x0008) MISSED OFFSET
	float                                              JumpDelay;                                                // 0x0E00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData39[0xC];                                       // 0x0E04(0x000C) MISSED OFFSET
	float                                              ElapsedCastingTimeForSpectator;                           // 0x0E10(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData40[0x4];                                       // 0x0E14(0x0004) MISSED OFFSET
	struct FText                                       CastingNameForSpectator;                                  // 0x0E18(0x0018) (Net)
	float                                              TotalCastingTimeForSpectator;                             // 0x0E30(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsColdWeather;                                           // 0x0E34(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData41[0x1B];                                      // 0x0E35(0x001B) MISSED OFFSET
	class UTslAdaptiveCrosshairWidget*                 AdaptiveCrosshairWidget;                                  // 0x0E50(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData42[0xC];                                       // 0x0E58(0x000C) MISSED OFFSET
	float                                              LastDistanceCache;                                        // 0x0E64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCrosshairObstructed;                                   // 0x0E68(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData43[0x7];                                       // 0x0E69(0x0007) MISSED OFFSET
	struct FStringClassReference                       AdaptiveCrosshairWidgetClass;                             // 0x0E70(0x0010) (Edit, BlueprintVisible)
	float                                              IndoorCheckDistance;                                      // 0x0E80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData44[0x4];                                       // 0x0E84(0x0004) MISSED OFFSET
	struct FString                                     CharacterName;                                            // 0x0E88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData45[0x4];                                       // 0x0E98(0x0004) MISSED OFFSET
	float                                              GroggyHealth;                                             // 0x0E9C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              PunchHeavy_Distance;                                      // 0x0EA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData46[0x4];                                       // 0x0EA4(0x0004) MISSED OFFSET
	struct FString                                     CharacterNetId;                                           // 0x0EA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ExtremeFallVerticalVelocityThreshold;                     // 0x0EB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bServerFinishedVault;                                     // 0x0EBC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData47[0x3];                                       // 0x0EBD(0x0003) MISSED OFFSET
	struct FName                                       StickyBombID;                                             // 0x0EC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       C4ID;                                                     // 0x0EC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      FootStepEffectClassInGrass;                               // 0x0ED0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecreaseBoostGaugeByTime;                                 // 0x0ED8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData48[0x8];                                       // 0x0EDC(0x0008) MISSED OFFSET
	float                                              VaultTimer_CP;                                            // 0x0EE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DropPackageType;                                          // 0x0EE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData49[0x8];                                       // 0x0EF0(0x0008) MISSED OFFSET
	class UClass*                                      GroggyDamageType;                                         // 0x0EF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData50[0x10];                                      // 0x0F00(0x0010) MISSED OFFSET
	float                                              CancelADSVerticalSpeedThreshold;                          // 0x0F10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData51[0x4];                                       // 0x0F14(0x0004) MISSED OFFSET
	struct FName                                       ParticleSocketFootLeft;                                   // 0x0F18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthMax;                                                // 0x0F20(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData52[0x4];                                       // 0x0F24(0x0004) MISSED OFFSET
	class UGamePadInputAixsComponent*                  GamePadInputAixsComponent;                                // 0x0F28(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	bool                                               bIsVaulting_CP;                                           // 0x0F30(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData53[0x7];                                       // 0x0F31(0x0007) MISSED OFFSET
	struct FTslKillCauserData                          GroggyCauserData;                                         // 0x0F38(0x0030)
	float                                              JumpLastTimer;                                            // 0x0F68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData54[0x1C];                                      // 0x0F6C(0x001C) MISSED OFFSET
	TArray<struct FBuffWithBoostGauge>                 BuffWithBoostGauge;                                       // 0x0F88(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData55[0x10];                                      // 0x0F98(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData56[0x8];                                       // 0x0F98(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.Team
	class AReplicatedCharacterData*                    ReplicatedCharacterData;                                  // 0x0FB0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	int                                                LastTeamNum;                                              // 0x0FB8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastSquadIndex;                                           // 0x0FBC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastSquadMemberIndex;                                     // 0x0FC0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SimulatedHit_Value;                                       // 0x0FC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData57[0x8];                                       // 0x0FC8(0x0008) MISSED OFFSET
	class UClass*                                      FootStepEffectClassInSand;                                // 0x0FD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IndoorCheckHalfConeAngle;                                 // 0x0FD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData58[0x4];                                       // 0x0FDC(0x0004) MISSED OFFSET
	float                                              Punch_Distance;                                           // 0x0FE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultProbeLoopTime;                                       // 0x0FE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData59[0xC];                                       // 0x0FE8(0x000C) MISSED OFFSET
	struct FVector                                     VaultEndVelocityVectorMutliplier;                         // 0x0FF4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FootStepEffectClassInWater;                               // 0x1000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsHoldingBreath;                                         // 0x1008(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData60[0x7];                                       // 0x1009(0x0007) MISSED OFFSET
	class UTslPawnInputBindingComponent*               TslPawnInputBindingComponent;                             // 0x1010(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData61[0x8];                                       // 0x1018(0x0008) MISSED OFFSET
	TArray<class UClass*>                              ComponentsToDestroyOnDedicatedServer;                     // 0x1020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SprintingFOV;                                             // 0x1030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData62[0x24];                                      // 0x1034(0x0024) MISSED OFFSET
	float                                              DecreaseGroggyHealthPerSecond;                            // 0x1058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanOffset_Stand;                                         // 0x105C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class ATslPlayerState>              LaunchInstigator;                                         // 0x1060(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslVaultingHelper*                          VaultingHelperRef;                                        // 0x1068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	struct FName                                       HeadAttachPoint;                                          // 0x1070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraHeadHideDistance;                                   // 0x1078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData63[0x24];                                      // 0x107C(0x0024) MISSED OFFSET
	struct FTakeHitInfo                                LastTakeHitInfo;                                          // 0x10A0(0x0058) (Net, Transient)
	unsigned char                                      UnknownData64[0x4];                                       // 0x10F8(0x0004) MISSED OFFSET
	float                                              TargetingSpeedModifier;                                   // 0x10FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTakeHitInfo                                LastDamageIndicatorInfo;                                  // 0x1100(0x0058) (Net, Transient)
	struct FScriptMulticastDelegate                    OnLastDamageIndicatorInfoChanged;                         // 0x1158(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData65[0x8];                                       // 0x1168(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnChangeTargetingType;                                    // 0x1170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              Stand_RunningSpeedModifier;                               // 0x1180(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Stand_SprintingSpeedModifier;                             // 0x1184(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Stand_SprintingBigGunModifier;                            // 0x1188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Stand_SprintingRifleModifier;                             // 0x118C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Stand_SprintingSmallGunMOdifier;                          // 0x1190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Crouch_RunningSpeedModifier;                              // 0x1194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Crouch_SprintingSpeedModifier;                            // 0x1198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Prone_RunningSpeedModifier;                               // 0x119C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Prone_SprintingSpeedModifier;                             // 0x11A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReviveCastingTime;                                        // 0x11A4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           BitContainerSkipOwnerValue;                               // 0x11A8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData66[0x24];                                      // 0x11AC(0x0024) MISSED OFFSET
	uint32_t                                           BitContainerNormalValue;                                  // 0x11D0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData67[0x28];                                      // 0x11D4(0x0028) MISSED OFFSET
	EZombieModePlayerState                             ZombieModePlayerState;                                    // 0x11FC(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData68[0x33];                                      // 0x11FD(0x0033) MISSED OFFSET
	bool                                               bUseRightShoulderAiming;                                  // 0x1230(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData69[0x3];                                       // 0x1231(0x0003) MISSED OFFSET
	struct FRotator                                    GunDirectionSway;                                         // 0x1234(0x000C) (Net, Transient, IsPlainOldData)
	struct FRotator                                    AimOffsets;                                               // 0x1240(0x000C) (Net, Transient, IsPlainOldData)
	struct FRotator                                    LastAimOffsets;                                           // 0x124C(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData70[0x18];                                      // 0x1258(0x0018) MISSED OFFSET
	float                                              AimoffsetsLastRepTime;                                    // 0x1270(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData71[0x38];                                      // 0x1274(0x0038) MISSED OFFSET
	struct FRotator                                    CurrentAutoRotator;                                       // 0x12AC(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoPitchValueMax;                                        // 0x12B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoPitchBlendSpeed;                                      // 0x12BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData72[0x8];                                       // 0x12C0(0x0008) MISSED OFFSET
	class UCurveFloat*                                 Curve_JumpCamera;                                         // 0x12C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                Curve_FPPCameraOffsetByFOV;                               // 0x12D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_StandWalk;                                          // 0x12D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_StandRun;                                           // 0x12E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_StandSprint;                                        // 0x12E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchWalk;                                         // 0x12F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchRun;                                          // 0x12F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchSprint;                                       // 0x1300(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneWalk;                                          // 0x1308(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneRun;                                           // 0x1310(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneSprint;                                        // 0x1318(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Swim;                                               // 0x1320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_UnderwaterSwim;                                     // 0x1328(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_StandScope;                                         // 0x1330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchScope;                                        // 0x1338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneScope;                                         // 0x1340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_StandAim;                                           // 0x1348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_CrouchAim;                                          // 0x1350(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_ProneAim;                                           // 0x1358(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_DBNO;                                               // 0x1360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_GroundAngle;                                        // 0x1368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                Curve_WeaponSway;                                         // 0x1370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                Curve_WeaponSway_HoldBreath;                              // 0x1378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_WeaponSwayFOVModifier;                              // 0x1380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerp;                                        // 0x1388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerpLocomotion;                              // 0x1390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData73[0x4];                                       // 0x1398(0x0004) MISSED OFFSET
	float                                              DirectionalSpeedModifier;                                 // 0x139C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PointDamageForceMultiplier;                               // 0x13A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointDamageForce_MapMin;                                  // 0x13A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointDamageForce_MapMax;                                  // 0x13A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RadialDamageForceMultiplier;                              // 0x13AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ERadialImpulseFalloff>                 RadialDamageFalloffType;                                  // 0x13B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData74[0x7];                                       // 0x13B1(0x0007) MISSED OFFSET
	struct FStringClassReference                       CharacterAnimBPClass;                                     // 0x13B8(0x0010) (Edit)
	class UAnimMontage*                                RollLeftAnim;                                             // 0x13C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                RollRightAnim;                                            // 0x13D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FCharacterAnim                              CharacterAnim;                                            // 0x13D8(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData75[0x8];                                       // 0x13E8(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.NetOwnerController
	float                                              LeanAlphaSpeed;                                           // 0x13F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnSpeedHip;                                             // 0x13F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnSpeedAimed;                                           // 0x13F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnSpeedOverLimit;                                       // 0x13FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTurnAngleHip;                                          // 0x1400(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTurnAngleAim;                                          // 0x1404(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnLinearEndThreshold;                                   // 0x1408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNonLinearTurn;                                           // 0x140C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData76[0x3];                                       // 0x140D(0x0003) MISSED OFFSET
	float                                              TurnNonLinearEndThreshold;                                // 0x1410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnNonLinearInterpSpeed;                                 // 0x1414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotion;                         // 0x1418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotionSprint;                   // 0x141C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotionProne;                    // 0x1420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedStationary;                         // 0x1424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData77[0x18];                                      // 0x1428(0x0018) MISSED OFFSET
	struct FName                                       FPPCameraBoneName;                                        // 0x1440(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TPPCameraBoneName;                                        // 0x1448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData78[0x10];                                      // 0x1450(0x0010) MISSED OFFSET
	float                                              AimStateDefaultTime;                                      // 0x1460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimStateReturnTime;                                       // 0x1464(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimStateDrawTime;                                         // 0x1468(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData79[0x8];                                       // 0x146C(0x0008) MISSED OFFSET
	bool                                               bFreeMode;                                                // 0x1474(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData80[0x3];                                       // 0x1475(0x0003) MISSED OFFSET
	float                                              CanGroggyDamageTime;                                      // 0x1478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData81[0x4];                                       // 0x147C(0x0004) MISSED OFFSET
	struct FText                                       GroggyStartText;                                          // 0x1480(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       GroggyCancelText;                                         // 0x1498(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       GroggyFinishText;                                         // 0x14B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FRotator                                    BlendTargetViewRotation;                                  // 0x14C8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              WeapInspectionFireDelay;                                  // 0x14D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   DesiredInput;                                             // 0x14D8(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UClass*                                      InvulnerablilityBuff;                                     // 0x14E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInvulnerablilityEffectVisible;                           // 0x14E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData82[0xF];                                       // 0x14E9(0x000F) MISSED OFFSET
	struct FBreathValue                                CharacterBreathValue;                                     // 0x14F8(0x0008) (Edit, Net, EditConst)
	struct FCharacterBreath                            CharacterBreath;                                          // 0x1500(0x00B8) (Edit, DisableEditOnInstance)
	struct FName                                       BreathPoint;                                              // 0x15B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      UnderwaterChokeEffectClass;                               // 0x15C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslParticle*                                UnderwaterChokeEffect;                                    // 0x15C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      BreathEffectMovingClass;                                  // 0x15D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BreathEffectStayingClass;                                 // 0x15D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedThreadholdForBreathingMoving;                        // 0x15E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceThreadholdForBreathingStaying;                    // 0x15E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceThreadholdForBreathingMoving;                     // 0x15E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData83[0x4];                                       // 0x15EC(0x0004) MISSED OFFSET
	class ATslParticle*                                BreathEffectMoving;                                       // 0x15F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                BreathEffectStaying;                                      // 0x15F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     VaultEndVelocity_CP;                                      // 0x1600(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData84[0x4];                                       // 0x160C(0x0004) MISSED OFFSET
	struct FName                                       PainKillerID;                                             // 0x1610(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeavyFallMovementStopTime;                                // 0x1618(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                IndoorCheckAccuracyMultiplier;                            // 0x161C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GroggyToDieAkEvent;                                       // 0x1620(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData85[0x8];                                       // 0x1628(0x0008) MISSED OFFSET
	class UWeaponProcessorComponent*                   WeaponProcessor;                                          // 0x1630(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              VaultingDirection_CP;                                     // 0x1638(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              SimlatedHit_PunchLightPower;                              // 0x163C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallHeight_CP;                                            // 0x1640(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData86[0x4];                                       // 0x1644(0x0004) MISSED OFFSET
	class UClass*                                      FootStepEffectClassInMud;                                 // 0x1648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroggyDamageWeight;                                       // 0x1650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData87[0x4];                                       // 0x1654(0x0004) MISSED OFFSET
	class UClass*                                      ParachuteType;                                            // 0x1658(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData88[0x4];                                       // 0x1660(0x0004) MISSED OFFSET
	float                                              SimulatedHit_RecoveryPerSecond;                           // 0x1664(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bParachuteLandingAssist;                                  // 0x1668(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData89[0xF];                                       // 0x1669(0x000F) MISSED OFFSET
	float                                              FootSoundObstructionCheckInterval;                        // 0x1678(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReleasingParachuteAltitude;                               // 0x167C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProneFallVerticalVelocityThreshold;                       // 0x1680(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData90[0xC];                                       // 0x1684(0x000C) MISSED OFFSET
	class UCastComponent*                              CastComponent;                                            // 0x1690(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<struct FName>                               HealItemIDs;                                              // 0x1698(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              ForceReleasingParachuteAltitude;                          // 0x16A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      CurrentWeaponZoomLevel;                                   // 0x16AC(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData91[0x3];                                       // 0x16AD(0x0003) MISSED OFFSET
	class UCharacterWeaponAnimInfoComponent*           WeaponAnimInfoComponent;                                  // 0x16B0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData92[0x8];                                       // 0x16B8(0x0008) MISSED OFFSET
	float                                              Punch_Radius;                                             // 0x16C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData93[0x4];                                       // 0x16C4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData94[0x8];                                       // 0x16C4(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.AuthorizedPlayerState
	unsigned char                                      UnknownData95[0x8];                                       // 0x16D0(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.CachedNonNullPlayerState
	struct FVector                                     JumpStartLocation_CP;                                     // 0x16D8(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData96[0x4];                                       // 0x16E4(0x0004) MISSED OFFSET
	struct FName                                       SmokeBombID;                                              // 0x16E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TMap<class UCameraComponent*, float>               SavedCameraFOV;                                           // 0x16F0(0x0050) (ZeroConstructor)
	class UClass*                                      UnarmedDamageType;                                        // 0x1740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PunchImpactEffect;                                        // 0x1748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Sprint_MaxSpeed;                                          // 0x1750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecreaseTimerSecond;                                      // 0x1754(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTslViewTargetTempComponent*                 ViewTargetTempComponent;                                  // 0x1758(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               HelmetDisappear;                                          // 0x1760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               HelmetHit;                                                // 0x1768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     CameraAboveWaterEventName;                                // 0x1770(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     CameraBelowWaterEventName;                                // 0x1780(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       GrenadeID;                                                // 0x1790(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinimumBreathToHold;                                      // 0x1798(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData97[0x14];                                      // 0x179C(0x0014) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterWeaponRecoil;                                  // 0x17B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UUpdateCameraComponent*                      UpdateCameraComponent;                                    // 0x17C0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UInteractorComponent*                        InteractorComponent;                                      // 0x17C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCharacterInteractionComponent*              InteractionComponent;                                     // 0x17D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData98[0x18];                                      // 0x17D8(0x0018) MISSED OFFSET
	class UVehicleRiderComponent*                      VehicleRiderComponent;                                    // 0x17F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Primary;                                     // 0x17F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Primary;                             // 0x1800(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Secondary;                                   // 0x1808(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Secondary;                           // 0x1810(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Sidearm;                                     // 0x1818(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Sidearm;                             // 0x1820(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Melee;                                       // 0x1828(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Melee;                               // 0x1830(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Thrown;                                      // 0x1838(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Thrown;                              // 0x1840(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            BulletEffect_Sphere;                                      // 0x1848(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             WeaponCollisionArrow;                                     // 0x1850(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UPhysicalAnimationComponent*                 PhysicalAnimation;                                        // 0x1858(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             AudioListener;                                            // 0x1860(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAppearanceCustomizationBuilder*             AppearanceCustomizationBuilder;                           // 0x1868(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData99[0xF0];                                      // 0x1870(0x00F0) MISSED OFFSET
	class USkeletalMeshComponent*                      ShadowMesh;                                               // 0x1960(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslEquippedWeaponsProxy*                    WeaponsShadows;                                           // 0x1968(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UCharacterWeaponAnimInfoComponent*           ShadowWeaponAnimInfoComponent;                            // 0x1970(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              TargetingFOV;                                             // 0x1978(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AimingDelay;                                              // 0x197C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData100[0x8];                                      // 0x1980(0x0008) MISSED OFFSET
	float                                              AttackStateOffDelayTime;                                  // 0x1988(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HitStateOffDelayTime;                                     // 0x198C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HitMePlayerStateOffDelayTime;                             // 0x1990(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData101[0x34];                                     // 0x1994(0x0034) MISSED OFFSET
	class UTslPlayerDamageConfig*                      DamageConfig;                                             // 0x19C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData102[0x4];                                      // 0x19D0(0x0004) MISSED OFFSET
	float                                              FallDamageFactor;                                         // 0x19D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              FallDamageVelocityMin;                                    // 0x19D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              CorpseLifeSpan;                                           // 0x19DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseRagdollPoseCaching;                                   // 0x19E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData103[0x7];                                      // 0x19E1(0x0007) MISSED OFFSET
	struct FName                                       RagdollPoseCacheName;                                     // 0x19E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PoseCachingCorpseLifespan;                                // 0x19F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollCacheDelayTime;                                    // 0x19F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData104[0x88];                                     // 0x19F8(0x0088) MISSED OFFSET
	class UMeshComponent*                              PreviousScopeMID;                                         // 0x1A80(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FWeaponPPSettings                           PreviousScopePP;                                          // 0x1A88(0x00A8)
	unsigned char                                      UnknownData105[0x50];                                     // 0x1B30(0x0050) MISSED OFFSET
	TEnumAsByte<EStanceMode>                           PreReplicatedStanceMode;                                  // 0x1B80(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData106[0x7];                                      // 0x1B81(0x0007) MISSED OFFSET
	TArray<struct FString>                             CurrentVisitingLocationNames;                             // 0x1B88(0x0010) (ZeroConstructor, Transient)
	bool                                               bEndVaultToFall_CP;                                       // 0x1B98(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData107[0x7];                                      // 0x1B99(0x0007) MISSED OFFSET
	struct FName                                       FlashBangID;                                              // 0x1BA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParachuteAttachPoint;                                     // 0x1BA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData108[0x10];                                     // 0x1BB0(0x0010) MISSED OFFSET
	bool                                               bWantsToVault;                                            // 0x1BC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData109[0x3];                                      // 0x1BC1(0x0003) MISSED OFFSET
	float                                              HealthByRevive;                                           // 0x1BC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTslGamepadDebugHud*                         GamepadDebugHud;                                          // 0x1BC8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              PunchHeavy_Damage;                                        // 0x1BD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PunchHeavy_Radius;                                        // 0x1BD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       LaunchCauser;                                             // 0x1BD8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData110[0x10];                                     // 0x1BE0(0x0010) MISSED OFFSET
	float                                              BuffFinalSpreadFactor;                                    // 0x1BF0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SimlatedHit_PunchHeavyPower;                              // 0x1BF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoostGaugeMax;                                            // 0x1BF8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData111[0x4];                                      // 0x1BFC(0x0004) MISSED OFFSET
	class UClass*                                      FootStepEffectClassInDirt;                                // 0x1C00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               RemoteVolumeControlOff;                                   // 0x1C08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData112[0x8];                                      // 0x1C10(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.RevivingCharacter
	struct FName                                       BandageID;                                                // 0x1C18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VaultEndVelocityVectorClamp;                              // 0x1C20(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData113[0x2C];                                     // 0x1C24(0x002C) MISSED OFFSET
	class UTslThrowableTrajectoryViewComponent*        ThrowableTrajectoryViewComponent;                         // 0x1C50(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              GamepadReloadHoldTime;                                    // 0x1C58(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData114[0x4];                                      // 0x1C5C(0x0004) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_GamepadReloadHold;                            // 0x1C60(0x0008)
	struct FAnimUpdateRateSettings                     AnimationUpdateRateSettings;                              // 0x1C68(0x0078) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              TO_CulledMovementTickrate;                                // 0x1CE0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TO_CulledActorTickInterval;                               // 0x1CE4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TO_MinimumDistance;                                       // 0x1CE8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRunTickOptimization;                                     // 0x1CEC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRunTickOptimization_Anim;                                // 0x1CED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRunTickOptimization_Movement;                            // 0x1CEE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData115[0x1];                                      // 0x1CEF(0x0001) MISSED OFFSET
	float                                              TO_RenderedTolerance;                                     // 0x1CF0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickOptimization_Move_Active;                            // 0x1CF4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bTickOptimization_Anim_Active;                            // 0x1CF5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bTickOptimization_Actor_Active;                           // 0x1CF6(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData116[0x11];                                     // 0x1CF7(0x0011) MISSED OFFSET
	float                                              GamepadUnarmHoldTime;                                     // 0x1D08(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData117[0x54];                                     // 0x1D0C(0x0054) MISSED OFFSET
	bool                                               bIsClimbing_CP;                                           // 0x1D60(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData118[0x7];                                      // 0x1D61(0x0007) MISSED OFFSET
	struct FName                                       EnergyDrinkID;                                            // 0x1D68(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               SoundClearAk;                                             // 0x1D70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData119[0x8];                                      // 0x1D78(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslCharacter.InventoryFacade
	class USkinHelperComponent*                        SkinHelper;                                               // 0x1D80(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslEmoteComponent*                          EmoteComponent;                                           // 0x1D88(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       EmoteSlots;                                               // 0x1D90(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FName>                               ServerEmoteNameList;                                      // 0x1D98(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData120[0x18];                                     // 0x1DA8(0x0018) MISSED OFFSET
	class UClass*                                      MyShake;                                                  // 0x1DC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bIsCameraUnderWater : 1;                                  // 0x1DC8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData121[0x7];                                      // 0x1DC9(0x0007) MISSED OFFSET
	class UGroggyDamageCalculator*                     GroggyDamageCalculator;                                   // 0x1DD0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ChchedBackpackItemID;                                     // 0x1DD8(0x0008) (ZeroConstructor, IsPlainOldData)
	EEquippedWeaponRTPC                                SavedArmedWeaponRTPCValue;                                // 0x1DE0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EEquippedWeaponRTPC                                SavedEquippedWeaponRTPCValue;                             // 0x1DE1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData122[0x6];                                      // 0x1DE2(0x0006) MISSED OFFSET
	TArray<int>                                        EquippedClothesArrayIndex;                                // 0x1DE8(0x0010) (ZeroConstructor, Transient)
	TArray<int>                                        EquippedBagArrayIndex;                                    // 0x1DF8(0x0010) (ZeroConstructor, Transient)
	float                                              LastWaterDepth;                                           // 0x1E08(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData123[0x4];                                      // 0x1E0C(0x0004) MISSED OFFSET
	class AActor*                                      RiverActor;                                               // 0x1E10(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPrimitiveComponent*                         RiverMeshComponent;                                       // 0x1E18(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               bGlassBottleRTPCWeapon;                                   // 0x1E20(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEquippedClothes;                                         // 0x1E21(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEquippedBag;                                             // 0x1E22(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bForceUpdateEquippedRTPCValue;                            // 0x1E23(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInRiver;                                               // 0x1E24(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bRevivedCasting;                                          // 0x1E25(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData124[0x2];                                      // 0x1E26(0x0002) MISSED OFFSET
	struct FStringClassReference                       SkydivingComponentClass;                                  // 0x1E28(0x0010) (Edit, DisableEditOnInstance)
	class UTslSkydiveComponent*                        SkydivingComponent;                                       // 0x1E38(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData125[0x20];                                     // 0x1E40(0x0020) MISSED OFFSET
	struct FCharacterStance                            CharacterStance;                                          // 0x1E60(0x0028) (Net)
	unsigned char                                      UnknownData126[0x278];                                    // 0x1E88(0x0278) MISSED OFFSET
	class UCraftComponent*                             CraftComponent;                                           // 0x2100(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData127[0x18];                                     // 0x2108(0x0018) MISSED OFFSET
	bool                                               bIsStartGround;                                           // 0x2120(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData128[0x3];                                      // 0x2121(0x0003) MISSED OFFSET
	float                                              Signal;                                                   // 0x2124(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              SignalMax;                                                // 0x2128(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              GroggySignal;                                             // 0x212C(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              GroggySignalMax;                                          // 0x2130(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              SignalDamage;                                             // 0x2134(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             VictimNetIds;                                             // 0x2138(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData129[0x10];                                     // 0x2148(0x0010) MISSED OFFSET
	class UCapsuleComponent*                           Hit_StandForAI;                                           // 0x2158(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           Hit_ProneForAI;                                           // 0x2160(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FBodyTypeDef                                ProneBodyDef;                                             // 0x2168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBodyTypeDef                                StandBodyDef;                                             // 0x2170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBodyTypeDef                                CrouchBodyDef;                                            // 0x2178(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData130[0x70];                                     // 0x2180(0x0070) MISSED OFFSET
	class UTslCharacterCheatSubObject*                 CharacterCheatSubObject;                                  // 0x21F0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseInvinciblePP;                                         // 0x21F8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData131[0x7];                                      // 0x21F9(0x0007) MISSED OFFSET
	class UTslTDMBoostGauge*                           TDMBoostGauge;                                            // 0x2200(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     MeToFollowName;                                           // 0x2208(0x0010) (Net, ZeroConstructor)
	TArray<struct FString>                             FollowToMeNames;                                          // 0x2218(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData132[0x58];                                     // 0x2228(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacter"));

		return ptr;
	}


	void STATIC_UpdateWeaponAttachPoint();
	void STATIC_UpdateVictimNetId(const struct FString& NewVictimNetId);
	void STATIC_UnBindCallbackToHUD(class ATslPlayerController* InController);
	void STATIC_TryUpdateWeaponCharm(int SlotIndex);
	void STATIC_TryClearWeaponSkin(int SlotIndex);
	void STATIC_TryClearEquipSkin(EEquipSlotID EquipSlotID);
	void STATIC_TryCancelThrow();
	void STATIC_TryApplyWeaponSkin(int SlotIndex);
	void STATIC_TryApplyEquipSkin(EEquipSlotID EquipSlotID);
	void STATIC_ToggleInvincibility();
	void STATIC_ToggleGamepadDebugHud();
	void STATIC_ToggleFreeMode();
	void STATIC_ToggleAnimDynamics();
	void STATIC_Timer_StartSkydivingTraining();
	void STATIC_TickWeaponInertia(float DeltaSeconds);
	bool STATIC_TickOptimization_ShouldRunMovementUpdate();
	bool STATIC_TickOptimization_ShouldRunAnimUpdate();
	bool STATIC_TickOptimization_IsOverMinimumDistance();
	void STATIC_TickOptimization_Eval();
	void STATIC_TickFallingTime(float DeltaSeconds);
	void STATIC_TickCameraWaterCheck();
	void STATIC_TestWeaponSkinApplyByItemReference(const struct FString& Reference);
	void STATIC_TestSkinLoad();
	void STATIC_TestSetupWeapon();
	void STATIC_TestServerSetupWeapon();
	void STATIC_TestServerInvulnerable();
	void STATIC_TestServerFreeMoveMode();
	void STATIC_TestInvulnerable();
	void STATIC_TestFreeMoveMode();
	void STATIC_TestClientAdjustFlySpeed(float MaxSpeed, float MaxAccel, float Deccel);
	void STATIC_Test_StatTrakKillCount(int KillCount);
	void STATIC_Test_SetupWeapon();
	void STATIC_Test_InspectObject();
	void STATIC_StopAllAnimMontages_Multicast();
	void STATIC_StopAllAnimMontages();
	void STATIC_STAT_TickEnd();
	void STATIC_STAT_TickBegin();
	void STATIC_StartSkydivingTraining(const struct FVector& TrainingLocation, const struct FRotator& StartRotator);
	void STATIC_Stance_ServerChangeStance(TEnumAsByte<EStanceMode> ToStance, uint32_t P, uint32_t A, uint32_t B, uint32_t C, uint64_t H);
	void STATIC_Stance_ClientInitByReconnection(TEnumAsByte<EStanceMode> InitStance);
	void STATIC_SpawnPunchImpact_Reliable(const struct FVector& InLocation, const struct FRotator& InRotation, class ACharacter* InCharacter);
	void STATIC_SpawnPunchImpact(const struct FVector& InLocation, const struct FRotator& InRotation);
	void STATIC_SpawnBulletPassByEffect(const struct FVector& Location, float BulletVelocity);
	void STATIC_SimulatePhysicalHitRecovery();
	void STATIC_SimulateHeadShot(const struct FTransform& SpawnTransform, const struct FTransform& ImpactTransform);
	void STATIC_ShowDynamicCrosshair(bool bShow);
	void STATIC_ShowCharacterInformation(bool bFullInfo, bool ShowMaterialInfo);
	void STATIC_SetWorldTransformIdentity();
	void STATIC_SetWeaponInertia(const struct FRotator& InInertia);
	void STATIC_SetupWeaponBlueprint();
	void STATIC_SetTPPSpringarmOffset(float VerticalOffset);
	void STATIC_SetTickOptimization_Movement(bool bActivate);
	void STATIC_SetTickOptimization_Anim(bool bActivate);
	void STATIC_SetTickOptimization_Actor(bool bActivate);
	void STATIC_SetSwayDebuffParameters(float SwaySpeed, float SwayVerticalMultiplier, float SwayHorizontalMultiplier);
	void STATIC_SetServerVaultFinished(bool InFinished);
	void STATIC_SetRegularCollision();
	void STATIC_SetParachuteLandingAssist(bool bAssistActive);
	void STATIC_SetMovementEnabled(bool IsEnabled);
	void STATIC_SetLaunchEvent(const struct FAttackId& AttackId, class ATslPlayerState* InPlayerState, class AActor* Causer, class UClass* DamageTypeClass);
	void STATIC_SetJumpStartLocationAndFallheight(const struct FVector& JumpStartLoc, float FallHeight);
	void STATIC_SetIsReviving_Multicast(bool InbIsReviving);
	void STATIC_SetIsOutsideBluezone(bool bOutsize);
	void STATIC_SetInsideVehicleCollision();
	void STATIC_SetHealth(float InHealth);
	void STATIC_SetDebugDBNO(int InDBNO);
	void STATIC_SetDebugCameraLock(bool InLock);
	void STATIC_SetCustomMovementOverride(unsigned char InCustomMovement);
	void STATIC_SetCustomDepth(bool bOn);
	void STATIC_SetCharacterVaultingData(float InVaultTimer, bool InIsVaulting, bool InIsClimbing, bool InEndVaultToFall, float InDirection);
	void STATIC_SetCanGroggyDamage(bool bInCanGroggyDamage);
	void STATIC_SetBulletSpawnOverride(bool InOverride);
	void STATIC_SetBuffFinalSpreadFactor(float FinalSpreadFactor);
	void STATIC_SetBoostGauge(float NewBoostGauge);
	void STATIC_SetAnimationAkSwitch(const struct FString& SwitchGroup, const struct FString& SwitchState);
	void STATIC_SetAnimationAkRTPC(const struct FString& RTPCName, float RTPCValue);
	void STATIC_SetAimStateActive(bool IsActive);
	void STATIC_SetADSSocketOffset(const struct FVector& NewOffset);
	void STATIC_SetActiveRagdoll(bool bIsActive);
	void STATIC_SetAchievementMetaData();
	void STATIC_ServerTestSkinLoad();
	void STATIC_ServerSetTargeting(ETargetingType NewTargetingType);
	void STATIC_ServerSetSprintingAuto(bool bNewSprintingAuto);
	void STATIC_ServerSetSprinting(bool bNewSprinting);
	void STATIC_ServerSetRunning(bool bNewRunning);
	void STATIC_ServerSetRolling(bool bNewRolling, bool bIsLeft);
	void STATIC_ServerSetHoldingBreath(bool bNewHoldingBreath);
	void STATIC_ServerSetHoldingAngled(bool bNewHoldingAngled);
	void STATIC_ServerSetGunDirectionSway(const struct FRotator& InGunDirectionSway);
	void STATIC_ServerSetCurrentWeaponZoomLevel(unsigned char ZoomLevel);
	void STATIC_ServerSetBleedOut(bool bBleedOut);
	void STATIC_ServerSetAimOffsets(const struct FRotator& NewAimOffsets);
	void STATIC_ServerOnUnswim();
	void STATIC_ServerOnSwim();
	void STATIC_ServerBroadCastScopingRemote(bool InbIsScoping);
	void STATIC_ServerBroadcastOutOfBreathEvent();
	void STATIC_ServerBroadcastNoBagSpaceEvent();
	void STATIC_ServerBroadCastAimingRemote(bool InbIsAming);
	void STATIC_ServerAnimCall_ItemThrow(const struct FName& ItemID);
	void STATIC_Server_UnarmedHitNotify(int checksum_CD, const struct FHitResult& Hit, TEnumAsByte<EPunchDamageType> PunchDamageType, uint32_t IntValue1, const struct FVector& Location, TArray<int> Values, const struct FVector& Location2, bool BoolValue);
	void STATIC_Server_SyncRotationStart(float InTarget);
	void STATIC_Server_StopWeaponInspection_CP();
	void STATIC_Server_StartWeaponInspection_CP();
	void STATIC_Server_SpawnSkydiveComponent();
	void STATIC_Server_SetWeaponObstruction(bool bNewObstruction);
	void STATIC_Server_SetVaultCancel(bool InCancel);
	void STATIC_Server_SetThrowMode(ECharThrowMode NewMode);
	void STATIC_Server_SetShieldEquipped(bool IsEquipped);
	void STATIC_Server_SetRightShoulderAiming(bool InbUseRightShoulderAiming);
	void STATIC_Server_SetPeekRight(bool bInIsPeekRight);
	void STATIC_Server_SetPeekLeft(bool bInIsPeekLeft);
	void STATIC_Server_SetParachuteLandingAssist(bool bAssistActive);
	void STATIC_Server_SetFiringMode(EFiringMode fMode, int tc, uint64_t tb, uint32_t ts, uint32_t hc);
	void STATIC_Server_SetDBNO(int InDBNO);
	void STATIC_Server_SetCustomMovementOverride(unsigned char InCustomMovement);
	void STATIC_Server_SetCastAnim(ECastAnim InCastAnim, bool bInstant);
	void STATIC_Server_SetCanGroggyDamage(bool bInCanGroggyDamage);
	void STATIC_Server_SetAimState(bool IsActive);
	void STATIC_Server_ReserveCraftingItem(const struct FName& ItemID);
	void STATIC_Server_PlayUnarmedAttack(int AnimationIndex);
	void STATIC_Server_HeavyFall();
	void STATIC_Server_HandleVault_CP(const struct FVaultingTask& InVaultTask, bool bIInIsClimb, const struct FVector& InJumpStartPos, const struct FVector& InImpactPos, const struct FName& InObjectName);
	void STATIC_Server_FlipVehicle(class ATslWheeledVehicle* InVehicle);
	void STATIC_Server_CastStartNotify(class UObject* CastObject, const struct FString& ItemName, uint32_t Chksum);
	void STATIC_Server_CastFinishNotify();
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message);
	void STATIC_RunVaultCheck_BP();
	void STATIC_ResetUnarmedAttack();
	void STATIC_ResetParachute();
	void STATIC_Rep_ZombieVirus();
	void STATIC_RemoveCrosshair();
	void STATIC_ReleaseFollow();
	void STATIC_ReleaseAllFollower();
	void STATIC_ReevaluaeTargetingState();
	void STATIC_RecoilTapTest(int Bullets, float TimeDelay);
	void STATIC_RecoilAutoTest(int Bullets);
	void STATIC_ProcessAdaptiveCrosshair();
	void STATIC_PrintHasSkinItem();
	void STATIC_PrepareParachute(class UClass* inParachuteType);
	void STATIC_PlayCameraAnim(class UCameraAnim* CameraAnim);
	bool STATIC_PickUpItem(class UItem* Item, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_OnWeaponInspectionPressed();
	bool STATIC_OnWeaponInspectionPad();
	void STATIC_OnWeaponChanged();
	void STATIC_OnWeapon_Slot(EAccessorySlot Slot);
	void STATIC_OnWeapon();
	bool STATIC_OnUnarmPadInput();
	void STATIC_OnUnarmPad();
	void STATIC_OnUnarm();
	bool STATIC_OnToggleThrowModePad();
	void STATIC_OnToggleThrowMode();
	bool STATIC_OnToggleSprintingAutoPad();
	bool STATIC_OnTogglePronePad();
	void STATIC_OnToggleProne();
	bool STATIC_OnToggleHoldBreathPad();
	bool STATIC_OnToggleFiringModePad();
	bool STATIC_OnToggleCrouchPad();
	void STATIC_OnToggleCrouch();
	bool STATIC_OnToggleAimTargetingTypePad();
	bool STATIC_OnThrowWeaponPad();
	void STATIC_OnTest_InspectObject();
	bool STATIC_OnSubWeaponPad();
	bool STATIC_OnStopTargetingPad();
	void STATIC_OnStopTargeting();
	bool STATIC_OnStopScopeAdjustmentModifierPad();
	bool STATIC_OnStopPeekRightPad();
	bool STATIC_OnStopPeekLeftPad();
	bool STATIC_OnStopJumpOrVaultPad();
	bool STATIC_OnStopHoldBreathPad();
	bool STATIC_OnStopFirePad();
	void STATIC_OnStopFire();
	bool STATIC_OnStopAimPad();
	bool STATIC_OnStopADSPad();
	bool STATIC_OnStartTargetingPad();
	bool STATIC_OnStartScopeAdjustmentModifierPad();
	bool STATIC_OnStartPeekRightPad();
	bool STATIC_OnStartPeekLeftPad();
	bool STATIC_OnStartJumpOrVaultPad();
	void STATIC_OnStartJumpOrVault();
	void STATIC_OnStartInteractBy(class ATslCharacter* OtherCharacter);
	bool STATIC_OnStartHoldBreathPad();
	bool STATIC_OnStartFirePad();
	void STATIC_OnStartFire();
	bool STATIC_OnStartCookingThrowablePad();
	bool STATIC_OnStartAimPad();
	bool STATIC_OnStartADSPad();
	bool STATIC_OnSprintPad();
	void STATIC_OnShowDynamicCrosshair(bool bShow);
	bool STATIC_OnResetZeroingPad();
	void STATIC_OnRep_ZombieModePlayerState();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_SkydiveComponent();
	void STATIC_OnRep_Signal(float LastSignal);
	void STATIC_OnRep_ShoesSoundType();
	void STATIC_OnRep_SandboxMasterPowerFlag();
	void STATIC_OnRep_ReviveCastingTime();
	void STATIC_OnRep_ParseEmoteSlotNames();
	void STATIC_OnRep_MaxHealth();
	void STATIC_OnRep_LastTakeHitInfo();
	void STATIC_OnRep_LastDamageIndicatorInfo();
	void STATIC_OnRep_IsWeaponObstructed();
	void STATIC_OnRep_IsThrowHigh();
	void STATIC_OnRep_IsThirdPerson();
	void STATIC_OnRep_IsScopingRemote();
	void STATIC_OnRep_IsReviving();
	void STATIC_OnRep_IsPeekRightRemote();
	void STATIC_OnRep_IsPeekRight();
	void STATIC_OnRep_IsPeekLeftRemote();
	void STATIC_OnRep_IsPeekLeft();
	void STATIC_OnRep_IsOutsideBluezone();
	void STATIC_OnRep_IsInVehicleRemote();
	void STATIC_OnRep_IsGroggying();
	void STATIC_OnRep_IsFirstPersonRemote();
	void STATIC_OnRep_IsCrouched();
	void STATIC_OnRep_IsCoatEquipped();
	void STATIC_OnRep_IsAimingRemote();
	void STATIC_OnRep_InventoryFacade();
	void STATIC_OnRep_IgnoreRotation();
	void STATIC_OnRep_Health(float LastHealth);
	void STATIC_OnRep_GroggySignal(float LastGroggySignal);
	void STATIC_OnRep_GroggyHealth(float LastGroggyHealth);
	void STATIC_OnRep_CurrentWeaponZoomLevel();
	void STATIC_OnRep_CurrentStance(const struct FCharacterStance& OldStanceStruct);
	void STATIC_OnRep_CharacterState();
	void STATIC_OnRep_CastAnim();
	void STATIC_OnRep_bUseInvinciblePP();
	void STATIC_OnRep_BreathValue(const struct FBreathValue& OldValue);
	void STATIC_OnRep_BoostGauge(float LastBoostGauge);
	void STATIC_OnRep_BitContainerSkipOwner(uint32_t OldValue);
	void STATIC_OnRep_BitContainerNormal(uint32_t OldValue);
	void STATIC_OnRep_Angled();
	void STATIC_OnRep_AimStateActive();
	void STATIC_OnRep_AimOffsets(const struct FRotator& PrevAimOffsets);
	bool STATIC_OnReloadPad();
	void STATIC_OnReloadInputPad(bool bPressed);
	bool STATIC_OnPeekRightPad();
	bool STATIC_OnPeekLeftPad();
	bool STATIC_OnNextMainWeaponPad();
	bool STATIC_OnMeleeWeaponOrUnarmPad();
	bool STATIC_OnMeleeOrSideWeaponPad();
	void STATIC_OnInteractBy(class ATslCharacter* OtherCharacter);
	bool STATIC_OnIncreaseZeroingPad();
	void STATIC_OnIncreaseMaxFlyAccerleration();
	void STATIC_OnHoldBreathReleased();
	void STATIC_OnHoldBreathPressed();
	void STATIC_OnHoldAngledReleased();
	void STATIC_OnHoldAngledPressed();
	bool STATIC_OnHoldAngledPad();
	void STATIC_OnHitReaction(float DamageTaken, class UTslDamageType* DamageType, EHitDirection InHitDirection);
	void STATIC_OnFinishInteractBy(class ATslCharacter* OtherCharacter);
	void STATIC_OnEquippedItemUpdated();
	bool STATIC_OnDecreaseZeroingPad();
	void STATIC_OnDecreaseMaxFlyAccerleration();
	void STATIC_OnChangeBreath(EBreathType BreathType, float Breath, float LastBreath, float BreathMax);
	void STATIC_OnCancelInteractBy(class ATslCharacter* OtherCharacter);
	void STATIC_OnBlockingWidgetOpened(class UWidget* Widget);
	bool STATIC_OnArmPadInput();
	void STATIC_NotHaveThrowItemNotifyMessage(const struct FText& ItemName);
	void STATIC_NotHaveHealItemNotifyMessage(const struct FText& ItemName);
	void STATIC_NotHaveBoostItemNotifyMessage();
	void STATIC_NetMulti_StopWeaponInspection_CP();
	void STATIC_NetMulti_StopVault(bool bIsForward);
	void STATIC_NetMulti_StartWeaponInspection_CP();
	void STATIC_NetMulti_HandleVault_CP(const struct FVaultingTask& InVaultTask);
	void STATIC_NativeOnWeaponChanged();
	void STATIC_MulticastAnimCall_ItemThrow(const struct FName& ItemID);
	void STATIC_MulticastAnimCall_Drop(const struct FName& DropAnimation);
	void STATIC_Multicast_SetInstantCastAnim(ECastAnim InCastAnim);
	void STATIC_Multicast_HeavyFall();
	void STATIC_Multi_SyncRotationStart(float InTarget);
	void STATIC_Multi_SyncRotationFinish();
	void STATIC_Multi_ForcedLocalWeaponDrop(class USkeletalMeshComponent* PawnMesh);
	void STATIC_LocalWeaponDrop(class USkeletalMeshComponent* PawnMesh);
	void STATIC_LocalMagazineDrop(class USkeletalMeshComponent* PawnMesh);
	void STATIC_LocalHandleVault_CP(const struct FVector& V_Start, const struct FVector& V_Apex, const struct FVector& V_ApexAdditive, const struct FVector& V_End, bool bIsClimb, EVaultAnimType InVaultType, bool bEndToFall, float Direction, float PlayerVelocity, float DistanceFromObject, const struct FVector& JumpStart, const struct FVector& ImpactPosition, const struct FName& ImpactObjectName);
	bool STATIC_IsZooming();
	bool STATIC_IsWeaponUsingHighMagnificationScope();
	bool STATIC_IsVehiclePassenger();
	bool STATIC_IsVehicleNearlyStopped();
	bool STATIC_IsVehicleDriver();
	bool STATIC_IsVehicleCameraInside();
	bool STATIC_IsVaultingEnabled();
	bool STATIC_IsVaultingDebugEnabled();
	bool STATIC_IsVaulting();
	bool STATIC_IsVaultCancelled();
	bool STATIC_IsUsingRightShoulderAiming();
	bool STATIC_IsUpperCollision();
	bool STATIC_IsUnderWater();
	bool STATIC_IsUnderRoof();
	bool STATIC_IsThrowableReadyState();
	bool STATIC_IsTeamMatch();
	bool STATIC_IsTargeting();
	bool STATIC_IsSwimming();
	bool STATIC_IsSprinting();
	bool STATIC_IsSpectatingCharacter();
	bool STATIC_IsSkydiving();
	bool STATIC_IsSitting();
	bool STATIC_IsScoping();
	bool STATIC_IsSandboxMaster();
	bool STATIC_IsRunning();
	bool STATIC_IsRolling();
	bool STATIC_IsReviving();
	bool STATIC_IsQuitter();
	bool STATIC_IsQuickThrowHigh();
	bool STATIC_IsProning();
	bool STATIC_IsPlayingPickUpAnimation();
	bool STATIC_IsPeekRight();
	bool STATIC_IsPeekLeft();
	bool STATIC_IsParachuting();
	bool STATIC_IsMoving();
	bool STATIC_IsMouseUse();
	bool STATIC_IsMeleeAttacking();
	bool STATIC_IsMagazineHandAttached(class USkeletalMeshComponent* PawnMesh);
	bool STATIC_IsMagazineGunAttached(class USkeletalMeshComponent* WeapMesh);
	bool STATIC_IsLookingThroughScope();
	bool STATIC_IsLocalOrSpectating();
	bool STATIC_IsInWaterVolume();
	bool STATIC_IsInVehicle();
	bool STATIC_IsInteracting();
	bool STATIC_IsInParachute();
	bool STATIC_IsIndoor();
	bool STATIC_IsInAircraft();
	bool STATIC_IsImmuneBlueZone();
	bool STATIC_IsHoldingBreath();
	bool STATIC_IsHoldingAngled();
	bool STATIC_IsHitted();
	bool STATIC_IsHipped();
	bool STATIC_IsGroggying();
	bool STATIC_IsFullFollower();
	bool STATIC_IsFreelooking();
	bool STATIC_IsForcingFall();
	bool STATIC_IsForceRotation();
	bool STATIC_IsForcedProneAfterFall();
	bool STATIC_IsFollowingCharacter();
	bool STATIC_IsFollowedByAllMember();
	bool STATIC_IsFollow();
	bool STATIC_IsFloating();
	bool STATIC_IsFirstPerson();
	bool STATIC_IsFiring();
	bool STATIC_IsFallingWithParachute();
	bool STATIC_IsFallingLong();
	bool STATIC_IsFallingFromHighAltitude();
	bool STATIC_IsFallingFor(float Seconds);
	bool STATIC_IsDying();
	bool STATIC_IsDebugCameraLocked();
	bool STATIC_IsCycleInProgress();
	bool STATIC_IsCycleAnimActive();
	bool STATIC_IsCrosshairHiddenByWeapon();
	bool STATIC_IsCheckLoaded();
	bool STATIC_IsCasting();
	void STATIC_IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackageItem);
	bool STATIC_IsCameraUnderwater();
	bool STATIC_IsBloodSpotInvisible();
	bool STATIC_IsBeFollowed();
	bool STATIC_IsAudioTestEnabled();
	bool STATIC_IsAttacked();
	bool STATIC_IsAnyoneToFollow();
	bool STATIC_IsAnimDynamicsEnabled();
	bool STATIC_IsAllEquipmentsMeshLoaded();
	bool STATIC_IsAlive();
	bool STATIC_IsActiveRagdoll();
	void STATIC_Invulnerable();
	void STATIC_InitilizeServerSkydiveComp();
	void STATIC_InitializeFreefall(const struct FVector& InVelocity);
	void STATIC_IncreaseMaxFly();
	void STATIC_HB_ZombieReviveBluezoneImmuneTime();
	void STATIC_HB_ZombieRevive();
	void STATIC_HB_AutoRecovery();
	void STATIC_HaveNotAnyHealItemNotifyMessage();
	bool STATIC_HasWeaponLeftHandIKSocket();
	bool STATIC_HasWeapon(class UClass* WeaponClass);
	bool STATIC_HasSkinForTag(const struct FName& Tag);
	bool STATIC_HasSameSkin(class USkinItem* TargetSkinItem);
	bool STATIC_HasAnimatableObject(ETargetAnimDynamicsType TargetAnimDynamicsType);
	void STATIC_HandleVaulting_BP(const struct FVector& ImpactLocation, const struct FVector& CapsulePredictedLocation, const struct FVector& Normal2D, const struct FVector& DirectionVecotor, bool bForceVault, float JumpDistance, bool bBlockVault, bool bBlockClimb);
	void STATIC_HandleVaultEnd_CP(const struct FVector& InVaultEndVelocity);
	void STATIC_HandleCapsuleCollision();
	void STATIC_GiveWeapon(class UClass* WeaponClass);
	void STATIC_GiveShieldToPlayer_BP();
	EZombieModePlayerState STATIC_GetZombieModePlayerState();
	float STATIC_GetZombieAttackSpeed();
	class ATslWeapon_Trajectory* STATIC_GetWeaponTrajectory();
	class ATslWeapon_Throwable* STATIC_GetWeaponThrowable();
	float STATIC_GetWeaponReloadPlayRate();
	class ATslWeapon_Gun_Projectile* STATIC_GetWeaponProjectile();
	class UWeaponProcessorComponent* STATIC_GetWeaponProcessor();
	bool STATIC_GetWeaponObstructionRemote();
	float STATIC_GetWeaponMovementModifierSprinting();
	float STATIC_GetWeaponMovementModifierScope();
	float STATIC_GetWeaponMovementModifierRunning();
	float STATIC_GetWeaponMovementModifierJumpVelocity();
	float STATIC_GetWeaponMovementModifierAim();
	class ATslWeapon_Melee* STATIC_GetWeaponMelee();
	struct FTransform STATIC_GetWeaponLeftHandIKTransform();
	struct FRotator STATIC_GetWeaponInertiaRecoil();
	struct FRotator STATIC_GetWeaponInertia();
	struct FTransform STATIC_GetWeaponHandIK_Right();
	struct FTransform STATIC_GetWeaponHandIK_Left();
	float STATIC_GetWeaponGunCollisionAlpha();
	class ATslWeapon_Gun* STATIC_GetWeaponGun();
	float STATIC_GetWeaponADSTimeModifier();
	class ATslWeapon* STATIC_GetWeapon();
	bool STATIC_GetWantsToJump();
	class UTslVehicleSeatComponent* STATIC_GetVehicleSeatComponent();
	class UVehicleSeatInteractionComponent* STATIC_GetVehicleSeat();
	class UVehicleRiderComponent* STATIC_GetVehicleRiderComponent();
	class APawn* STATIC_GetVehiclePawn();
	TScriptInterface<class UTslVehicleInterface> STATIC_GetVehicleInterface();
	float STATIC_GetVaultTimer();
	float STATIC_GetVaultingDirection();
	int STATIC_GetVaultingDebugType();
	class UVaultingData* STATIC_GetVaultingDataByEnum(EVaultAnimType InVaultType);
	class ATslWeapon* STATIC_GetUnarmedWeapon();
	class ATslPlayerState* STATIC_GetTslPlayerState();
	class ATslPlayerController* STATIC_GetTslPlayerController();
	class ATslHUD* STATIC_GetTslHUD();
	class UTslCharacterMovement* STATIC_GetTslCharacterMovement();
	float STATIC_GetTPPSpringarmOffset();
	class UCurveFloat* STATIC_GetTPPCameraCurve();
	class ATeam* STATIC_GetTeam();
	float STATIC_GetTargetingSpeedModifier();
	TEnumAsByte<EStanceMode> STATIC_GetStance();
	float STATIC_GetSprintingSpeedModifier_Stand();
	float STATIC_GetSprintingSpeedModifier_Prone();
	float STATIC_GetSprintingSpeedModifier_Crouch();
	float STATIC_GetSprintCurrentValue();
	float STATIC_GetSpeedModifierByWeaponClass();
	float STATIC_GetSpeedKmPerHour2D();
	int STATIC_GetSpectatedCount();
	struct FString STATIC_GetShortPlayerName();
	bool STATIC_GetServerVaultFinished();
	struct FName STATIC_GetScopingMagnifiedMouseSensitiveName();
	float STATIC_GetRunningSpeedModifier_Stand();
	float STATIC_GetRunningSpeedModifier_Prone();
	float STATIC_GetRunningSpeedModifier_Crouch();
	class AReplicatedCharacterData* STATIC_GetReplicatedCharacterData();
	struct FName STATIC_GetReactionBone(const struct FName& BoneName);
	struct FString STATIC_GetPlayerUnknownName();
	struct FString STATIC_GetPlayerName();
	bool STATIC_GetParachuteLandingAssist();
	class ATslWeapon* STATIC_GetOwnedWeapon();
	TScriptInterface<class UInteractionInterface> STATIC_GetObjectCanInteract();
	float STATIC_GetMaxSprintSpeed();
	float STATIC_GetMaxGroundSpeedOnSlope();
	struct FString STATIC_GetLocationString();
	float STATIC_GetLeanRightAlpha();
	float STATIC_GetLeanLeftAlpha();
	int STATIC_GetLastTeamNum();
	int STATIC_GetLastSquadMemberIndex();
	int STATIC_GetLastSquadIndex();
	class ATslPlayerState* STATIC_GetLastNonNullTslPlayerState();
	struct FRotator STATIC_GetLastMoveRotation();
	class AInventoryFacade* STATIC_GetInventoryFacade();
	struct FVector STATIC_GetInteractObjectLocation();
	struct FString STATIC_GetInteractionString();
	float STATIC_GetIndoorFactor();
	struct FName STATIC_GetHitBodyTypeByHitPos(const struct FVector& InHitPos);
	struct FRotator STATIC_GetFreelookSavedRotation();
	struct FRotator STATIC_GetFreelookDeltaRotation();
	class ATslCharacter* STATIC_GetFollowCharacter();
	class AEquipment* STATIC_GetEquipment();
	bool STATIC_GetDynamicCrosshairHidden();
	class UClass* STATIC_GetDropPackageType();
	struct FString STATIC_GetDirectionString();
	float STATIC_GetDirectionalSpeedModifier(TEnumAsByte<EMovementType> StanceType);
	struct FRotator STATIC_GetDesiredRotation();
	struct FVector2D STATIC_GetDesiredInput();
	class ATslWeapon* STATIC_GetCurrentWeapon();
	float STATIC_GetCurrentWaterSurfaceZ();
	float STATIC_GetCurrentWaterSurfaceBaseZ();
	float STATIC_GetCurrentWaterDepth();
	struct FRotator STATIC_GetCurrentSway();
	class UStaticMesh* STATIC_GetCurrentMagazineMesh(class USkeletalMeshComponent* WeapMesh);
	struct FTransform STATIC_GetCurrentMagazineLocation(class USkeletalMeshComponent* WeapMesh);
	float STATIC_GetCurrentHeightFromWaterFloor();
	bool STATIC_GetCtrlShortCutOnOff();
	TScriptInterface<class UInteractionInterface> STATIC_GetComponentCanInteract();
	class ATslPlayerState* STATIC_GetClientTslPlayerState();
	struct FString STATIC_GetCharacterUniqueId();
	struct FString STATIC_GetCharacterNetId();
	class UObject* STATIC_GetCastObject();
	float STATIC_GetCameraRotationOverride();
	bool STATIC_GetBulletSpawnOverride();
	class UBuffComponet* STATIC_GetBuffComponent();
	float STATIC_GetBreathRatio(EBreathType BreathType);
	float STATIC_GetBreathMax(EBreathType BreathType);
	float STATIC_GetBreath(EBreathType BreathType);
	float STATIC_GetAutoRecoveryValue();
	EAnimWeaponType STATIC_GetAnimWeaponType();
	EAnimStance STATIC_GetAnimStance();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters();
	float STATIC_GetAimStateTimer();
	float STATIC_GetAimStateAlpha();
	struct FRotator STATIC_GetAimOffsets();
	struct FVector STATIC_GetADSSocketOffset();
	struct FVector STATIC_GetActorLocationInServer();
	class AActor* STATIC_GetActorCanInteract();
	class ATslPlayerController* STATIC_GetActiveTslPlayerController();
	class ATslHUD* STATIC_GetActiveTslHud();
	class UCameraComponent* STATIC_GetActiveCamera();
	class UTslAccessoryComponent* STATIC_GetAccessorySlot(EAccessorySlot Slot);
	void STATIC_FreeMoveMode();
	void STATIC_ForceStanceChange(TEnumAsByte<EStanceMode> ToStance);
	void STATIC_FlipVehicle();
	void STATIC_FixupCamera();
	class ATslWeapon* STATIC_FindWeapon(class UClass* WeaponClass);
	class USkinItem* STATIC_FindSkinItem(const struct FName& TagName, bool bAutoAction);
	void STATIC_EnableWorldOriginShiftTick(float Distance);
	bool STATIC_EnableScopeOutsideBlur();
	void STATIC_EnableCollision();
	void STATIC_DoProcessLocalOnlyFunctions_BP();
	void STATIC_DisableCollision();
	void STATIC_DelayedFire();
	void STATIC_DecreaseMaxFly();
	void STATIC_DajMnieSzild();
	void STATIC_CreateSkydiveComponent();
	void STATIC_ClientSoundPlayMulticast(class UAkAudioEvent* SoundAk);
	void STATIC_ClientSoundPlay(class UAkAudioEvent* SoundAk);
	void STATIC_ClientSimulationArmorDestruction(EEquipSlotID SlotID, const struct FTransform& Impact, float Durability);
	void STATIC_ClientSetTargeting(ETargetingType NewTargetingType);
	void STATIC_ClientSendGroggyMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, float InDistanceFromKillerToVictim);
	void STATIC_ClientRevivedCastingWidgetShow(float CastingTime, bool bVisible);
	void STATIC_ClientProcessRevive(float RemainGroggyHealth);
	void STATIC_ClientPlayPickUpAnimation(const struct FVector_NetQuantize& InteractionObject, const struct FName& PickUpAnimName);
	void STATIC_ClientNotifyCrack(const struct FVector_NetQuantize& LocationRelative, float BulletVelocity);
	void STATIC_ClientMyCharacterPlayPickUpAnimation(const struct FVector_NetQuantize& InteractionObject, float Duration, const struct FName& PickUpAnimName);
	void STATIC_ClientForceInitStance(TEnumAsByte<EStanceMode> ToStance);
	void STATIC_ClientFlareGunSuccessedMessage();
	void STATIC_ClientDrawDamageInfo(float Damage, class UTslDamageType* DamageType);
	void STATIC_ClientChangeToGroggyStance(TEnumAsByte<EStanceMode> ToStance);
	void STATIC_ClientBroadcastOutOfBreathEvent();
	void STATIC_ClientBroadcastNoBagSpaceEvent();
	void STATIC_ClientAddVictimNetId(const struct FString& NewVictimNetId);
	void STATIC_Client_TimerCheckSkydivingTrainingStart();
	void STATIC_Client_StopVault(bool bIsForward);
	void STATIC_Client_ShowServerTransform(const struct FVector& InLocation, const struct FRotator& InRotation);
	void STATIC_Client_SetDefaultFiringMode();
	void STATIC_Client_PlayUnarmedAttack(int AnimationIndex);
	void STATIC_Client_DrawDebugDamage(float Damage, float ModifiedDamage, float ActualDamage, const struct FString& ExtraInfo);
	void STATIC_Client_CastFinishNotify();
	void STATIC_Client_CastCancelNotify();
	void STATIC_CheckScopePP();
	void STATIC_CheckOverlapWithRiver();
	void STATIC_CheckMuzzleCollision();
	void STATIC_CheckMuzzleBulletSpawn();
	void STATIC_CheckJumpAndVault(bool bForceVelocity, const struct FVector& InForcedVelocity);
	bool STATIC_CheckAutoRecovery();
	bool STATIC_CanSwim();
	void STATIC_CancelCastOnClient(ECastCancelReason CancelReason);
	struct FTransform STATIC_CalculateFreeFallSpeedAndRotationTF();
	void STATIC_CalculateFreeFallSpeedAndRotation(struct FVector* OutVelocity, struct FRotator* OutRotation);
	void STATIC_BindCallbackToHUD(class ATslPlayerController* InController);
	void STATIC_ApplyRagdollPhysicsForce();
	void STATIC_Anim_MagazineShow(bool bShow, class USkeletalMeshComponent* PawnMesh);
	void STATIC_Anim_MagazineHandAttach(bool bAttach, class USkeletalMeshComponent* PawnMesh);
	bool STATIC_Anim_IsMagazineVisible();
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
	void STATIC_AdminSetUpWeapon();
	void STATIC_AdminInvulnerable();
	void STATIC_AdminFreeMoveMode();
	void STATIC_AddBuffMoveSpeedFactor(float MoveSpeedFactor);
	void STATIC_AddBreath(EBreathType BreathType, float Value);
};


// Class TslGame.AkAudioDataAsset
// 0x0000 (0x0038 - 0x0038)
class UAkAudioDataAsset : public UDataAsset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AkAudioDataAsset"));

		return ptr;
	}

};


// Class TslGame.FootstepAkAudioDataAsset
// 0x0000 (0x0038 - 0x0038)
class UFootstepAkAudioDataAsset : public UAkAudioDataAsset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FootstepAkAudioDataAsset"));

		return ptr;
	}

};


// Class TslGame.AnimDB
// 0x0148 (0x0180 - 0x0038)
class UAnimDB : public UDataAsset
{
public:
	struct FAnimInfo                                   Stand_Info;                                               // 0x0038(0x0068) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FAnimInfo                                   Crouch_Info;                                              // 0x00A0(0x0068) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FAnimInfo                                   Prone_Info;                                               // 0x0108(0x0068) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendSpaceSpeed_Walk;                                     // 0x0170(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendSpaceSpeed_Run;                                      // 0x0174(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendSpaceSpeed_Sprint;                                   // 0x0178(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimDB"));

		return ptr;
	}


	class UBlendSpace* STATIC_GetBlendSpaceRelaxed(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP);
	class UBlendSpace* STATIC_GetBlendSpace(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP);
	float STATIC_GetAnimSpeed(TEnumAsByte<EAnimStanceType> AnimStance, float Direction, float InSpeed, float* PlayRate, float* SprintAlpha);
};


// Class TslGame.DieAnimDB
// 0x0030 (0x0068 - 0x0038)
class UDieAnimDB : public UDataAsset
{
public:
	class UAnimMontage*                                DefaultDieAnimMontage;                                    // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CorpseVisibleSpan;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ItemPakageSpawnDelay;                                     // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RootItemSpawnLocationOffset;                              // 0x0048(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    RootItemSpawnRotationOffset;                              // 0x0054(0x000C) (Edit, IsPlainOldData)
	bool                                               bHideCurrentWeapon;                                       // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableRagdoll;                                          // 0x0061(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0062(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DieAnimDB"));

		return ptr;
	}

};


// Class TslGame.AnimNotify_AkEvent
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_AkEvent : public UAnimNotify
{
public:
	class UAkAudioEvent*                               AkEvent;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAkAudioDataAsset*                           EventData;                                                // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFollowOwner;                                             // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              MaxPlayRange;                                             // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_AkEvent"));

		return ptr;
	}


	void STATIC_PlayPreviewEditor(class USkeletalMeshComponent* MeshComp);
};


// Class TslGame.AnimNotify_AkEvent_Advanced
// 0x0070 (0x00B0 - 0x0040)
class UAnimNotify_AkEvent_Advanced : public UAnimNotify
{
public:
	class UAkAudioEvent*                               AkAudioEvent;                                             // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFollow;                                                  // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CustomRelativeLocation;                                   // 0x0058(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               OnlyOwnerListen;                                          // 0x0064(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseMaxActivationDistance;                                // 0x0065(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0066(0x0002) MISSED OFFSET
	float                                              MaxActivationDistance;                                    // 0x0068(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseActivationDistanceByAttenuation;                      // 0x006C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	int                                                PlayingID;                                                // 0x0070(0x0004) (BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsSkip;                                                  // 0x0074(0x0001) (BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsePhysMatRaycast;                                       // 0x0075(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0076(0x0002) MISSED OFFSET
	struct FRaycastConfig                              RaycastConfig;                                            // 0x0078(0x0038) (Edit, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_AkEvent_Advanced"));

		return ptr;
	}

};


// Class TslGame.AnimNotify_CameraShake
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_CameraShake : public UAnimNotify
{
public:
	class UClass*                                      CameraShake;                                              // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               AffectedCameras;                                          // 0x0048(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_CameraShake"));

		return ptr;
	}

};


// Class TslGame.AnimNotify_CharacterAnimationNotify
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_CharacterAnimationNotify : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_CharacterAnimationNotify"));

		return ptr;
	}

};


// Class TslGame.AnimNotify_UnarmedAttack
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_UnarmedAttack : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_UnarmedAttack"));

		return ptr;
	}

};


// Class TslGame.AnimNotify_WeaponAnimationNotify
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_WeaponAnimationNotify : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_WeaponAnimationNotify"));

		return ptr;
	}

};


// Class TslGame.AnimNotify_WeaponThrowAway
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_WeaponThrowAway : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AnimNotify_WeaponThrowAway"));

		return ptr;
	}

};


// Class TslGame.AppearanceCustomizationBuilder
// 0x0000 (0x0030 - 0x0030)
class UAppearanceCustomizationBuilder : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AppearanceCustomizationBuilder"));

		return ptr;
	}

};


// Class TslGame.ZombieAppearanceCustomizationBuilder
// 0x0008 (0x0038 - 0x0030)
class UZombieAppearanceCustomizationBuilder : public UAppearanceCustomizationBuilder
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ZombieAppearanceCustomizationBuilder"));

		return ptr;
	}

};


// Class TslGame.AssistManager
// 0x0120 (0x0150 - 0x0030)
class UAssistManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0030(0x0070) MISSED OFFSET
	int                                                MinDamageToBeAssistant;                                   // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinHealthRecoveryForReset;                                // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UAssistNetDebugHelper*                       NetDebugHelper;                                           // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x00B0(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AssistManager"));

		return ptr;
	}

};


// Class TslGame.AssistNetDebugHelper
// 0x0050 (0x0080 - 0x0030)
class UAssistNetDebugHelper : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AssistNetDebugHelper"));

		return ptr;
	}

};


// Class TslGame.AsyncStaticMeshComponent
// 0x0090 (0x0BE0 - 0x0B50)
class UAsyncStaticMeshComponent : public UStaticMeshComponent
{
public:
	struct FScriptMulticastDelegate                    OnStaticMeshLoaded;                                       // 0x0B50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TAssetPtr<class UStaticMesh>                       StaticMeshAsset;                                          // 0x0B60(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B80(0x0008) MISSED OFFSET
	class UStaticMesh*                                 ErrorStaticMesh;                                          // 0x0B88(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ClientCollisionProfileNameOverride;                       // 0x0B90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UStaticMesh>                       PendingStaticMeshAsset;                                   // 0x0B98(0x0020) (Transient)
	TArray<struct FPendingCollisionResponse>           PendingCollisionResponse;                                 // 0x0BB8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0BC8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AsyncStaticMeshComponent"));

		return ptr;
	}


	void STATIC_SetStaticMeshAsset(TAssetPtr<class UStaticMesh> Asset);
	bool STATIC_IsSameMesh(TAssetPtr<class UStaticMesh> Asset);
	bool STATIC_IsLoading();
	bool STATIC_IsLoaded();
	TAssetPtr<class UStaticMesh> STATIC_GetStaticMeshAsset();
	void STATIC_ClearStaticMeshAsset();
};


// Class TslGame.SlotInterface
// 0x0000 (0x0030 - 0x0030)
class USlotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SlotInterface"));

		return ptr;
	}

};


// Class TslGame.SlotContainerInterface
// 0x0000 (0x0030 - 0x0030)
class USlotContainerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SlotContainerInterface"));

		return ptr;
	}

};


// Class TslGame.CastableItemImplement
// 0x0000 (0x0030 - 0x0030)
class UCastableItemImplement : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastableItemImplement"));

		return ptr;
	}

};


// Class TslGame.ThrowableItemDataAsset
// 0x0108 (0x0140 - 0x0038)
class UThrowableItemDataAsset : public UDataAsset
{
public:
	class UClass*                                      ProjectileClass;                                          // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMesh*                                 Mesh;                                                     // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPhysicalMaterial*                           PhysMatOverride;                                          // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshScale;                                                // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    MeshRotationOffset;                                       // 0x0054(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MeshRotationRate;                                         // 0x0060(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAutoCalculateRadius;                                     // 0x006C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              CollisionRadius;                                          // 0x0070(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Friction;                                                 // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Bounciness;                                               // 0x0078(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirDrag;                                                  // 0x007C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GravityScaleOverride;                                     // 0x0080(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpVectorRotationSpeed;                                    // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   SlidingFriction_Speed_In;                                 // 0x0088(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   SlidingFriction_Speed_Out;                                // 0x0090(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractionRadius;                                        // 0x0098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicalizedTimeAfterSimStop;                             // 0x009C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConstraintLimitReleaseThresholdVelocity;                  // 0x00A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReleasedConstraintLimitScale;                             // 0x00A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 PitchCurve;                                               // 0x00A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 SpeedCurve;                                               // 0x00B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 SpeedFalloffCurve;                                        // 0x00B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowSpeed;                                               // 0x00C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowSpeedProne;                                          // 0x00C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrajectoryPredictionTime;                                 // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PawnMotionContributionMultiplier;                         // 0x00CC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StickInAngleLimits;                                       // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 DamageCurve;                                              // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinImpactVelocityForEffects;                              // 0x00F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenImpactEffects;                                 // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitImpulseMultiplier;                                     // 0x00F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	TAssetPtr<class UClass>                            ImpactTemplatePtr;                                        // 0x0100(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UAkAudioEvent*                               ItemThrowSound;                                           // 0x0120(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ItemCatchSound;                                           // 0x0128(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ItemDropSound;                                            // 0x0130(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowInteraction;                                        // 0x0138(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDealDamage;                                              // 0x0139(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanStickIn;                                              // 0x013A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableSlidingFriction;                                   // 0x013B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThrowableItemDataAsset"));

		return ptr;
	}

};


// Class TslGame.Item
// 0x0310 (0x0340 - 0x0030)
class UItem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	unsigned char                                      bStackable : 1;                                           // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bUsable : 1;                                              // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bIsConsumable : 1;                                        // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bDisableSpawnInGame : 1;                                  // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                StackCount;                                               // 0x0044(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                DefaultStackCount;                                        // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FText                                       ItemName;                                                 // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       ItemCategory;                                             // 0x0068(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       ItemDetailedName;                                         // 0x0080(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       ItemDescription;                                          // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              ItemMaxInteractableDistance;                              // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StackCountMax;                                            // 0x00B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpacePerItem;                                             // 0x00B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TAssetPtr<class UStaticMesh>                       DroppedMesh;                                              // 0x00C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              DroppedMeshScale;                                         // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDropAsProjectile;                                        // 0x00E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	TAssetPtr<class UThrowableItemDataAsset>           ProjectileConfig;                                         // 0x00E8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UTexture>                          Icon;                                                     // 0x0108(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UTexture>                          ToolTipIcon;                                              // 0x0128(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              IconSizeRatio;                                            // 0x0148(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ToolTipIconSizeRatio;                                     // 0x014C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               DropSoundAk;                                              // 0x0150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       DropAnimation;                                            // 0x0158(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PickUpSoundAk;                                            // 0x0160(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       PickUpAnimationOverride;                                  // 0x0168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               InventoryPutSoundAk;                                      // 0x0170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SortPriority;                                             // 0x0178(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsLobbyItem;                                             // 0x017C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	int                                                LobbyItemID;                                              // 0x0180(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0184(0x0004) MISSED OFFSET
	struct FLobbyItemDesc                              LobbyItemDesc;                                            // 0x0188(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               bIsLobbyWeapon;                                           // 0x01E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x01E9(0x0003) MISSED OFFSET
	int                                                LobbyWeaponID;                                            // 0x01EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      LobbyWeaponInstance;                                      // 0x01F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsSpawnedBySandboxMaster;                                // 0x01F8(0x0001) (ZeroConstructor, IsPlainOldData)
	EItemCategory                                      Category;                                                 // 0x01F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x01FA(0x0006) MISSED OFFSET
	struct FName                                       SubCategory;                                              // 0x0200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsToy;                                                   // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0209(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStackCountUpdated;                                      // 0x0210(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnAsyncLoadIconFinished;                                  // 0x0220(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnAsyncLoadToolTipIconFinished;                           // 0x0230(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference)
	class UTslItemDestructionBehavior*                 DestructionBehavior;                                      // 0x0240(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bVested;                                                  // 0x0248(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDropVolatility;                                          // 0x0249(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanDropItem;                                             // 0x024A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x5];                                       // 0x024B(0x0005) MISSED OFFSET
	struct FString                                     Note;                                                     // 0x0250(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                AIFullValue;                                              // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ItemSubType;                                              // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0268(0x0008) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x0270(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0278(0x0008) MISSED OFFSET
	class UClass*                                      CastableImplementClass;                                   // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCastableItemImplement*                      CastableImplement;                                        // 0x0288(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TAssetPtr<class UAkAudioEvent>                     PickUpSoundPtr;                                           // 0x0290(0x0020)
	TAssetPtr<class UAkAudioEvent>                     DropSoundPtr;                                             // 0x02B0(0x0020)
	TAssetPtr<class UAkAudioEvent>                     InventoryPutSoundPtr;                                     // 0x02D0(0x0020)
	unsigned char                                      UnknownData13[0x50];                                      // 0x02F0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.Item"));

		return ptr;
	}


	bool STATIC_UseBy(class ATslCharacter* Character);
	bool STATIC_PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_OnRepStackCount(int OldStackCount);
	void STATIC_OnRepItemID();
	bool STATIC_IsWeapon();
	bool STATIC_IsToy();
	bool STATIC_IsToolTipIconAsyncLoading();
	bool STATIC_IsPackageItem();
	bool STATIC_IsIconAsyncLoading();
	bool STATIC_IsEquipable();
	bool STATIC_IsCastableItem();
	bool STATIC_IsAttachment();
	struct FName STATIC_GetItemID();
	class UTexture* STATIC_GetIconTexture();
};


// Class TslGame.SkinItem
// 0x0018 (0x0358 - 0x0340)
class USkinItem : public UItem
{
public:
	bool                                               bAutoAction;                                              // 0x0340(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0341(0x0007) MISSED OFFSET
	struct FSkinParam                                  SkinParam;                                                // 0x0348(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SkinItem"));

		return ptr;
	}


	bool STATIC_ApplySkin(const TScriptInterface<class USkinnableInterface>& SkinnableInterface, int SkinOwnerPlayerId);
};


// Class TslGame.SkinnableInterface
// 0x0000 (0x0030 - 0x0030)
class USkinnableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SkinnableInterface"));

		return ptr;
	}

};


// Class TslGame.MasterySkinnablePropStatic
// 0x0020 (0x0C00 - 0x0BE0)
class UMasterySkinnablePropStatic : public UAsyncStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0BE0(0x0008) MISSED OFFSET
	struct FName                                       SkinTag;                                                  // 0x0BE8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MeshName;                                                 // 0x0BF0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0BF8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MasterySkinnablePropStatic"));

		return ptr;
	}

};


// Class TslGame.TslLaserPointerAttachment
// 0x0070 (0x0C50 - 0x0BE0)
class UTslLaserPointerAttachment : public UAsyncStaticMeshComponent
{
public:
	class UParticleSystem*                             LaserBeamTemplate;                                        // 0x0BE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BeamAttachSocketName;                                     // 0x0BE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BeamMaxLength;                                            // 0x0BF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0BF4(0x0004) MISSED OFFSET
	class UCurveVector*                                BeamConfigCurve;                                          // 0x0BF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpotOuterConeAngle;                                       // 0x0C00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                SpotColor;                                                // 0x0C04(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              SpotAttenuationRadius;                                    // 0x0C14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAdjustableAimAngleDifference;                          // 0x0C18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0C1C(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    LaserBeamLight;                                           // 0x0C20(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         LaserSpotLight;                                           // 0x0C28(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ATslCharacter*                               Character;                                                // 0x0C30(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslWeapon_Gun*                              Gun;                                                      // 0x0C38(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0C40(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLaserPointerAttachment"));

		return ptr;
	}


	void STATIC_OnSpectatingChanged(bool bIsSpectating);
	void STATIC_ActivateLaser();
};


// Class TslGame.BattlepassExporter
// 0x0028 (0x0060 - 0x0038)
class UBattlepassExporter : public UDataAsset
{
public:
	struct FDirectoryPath                              CsvSaveDirectory;                                         // 0x0038(0x0010) (Edit)
	struct FString                                     CsvSaveFileName;                                          // 0x0048(0x0010) (Edit, ZeroConstructor)
	EForceRefreshDummy                                 ExportCsv;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BattlepassExporter"));

		return ptr;
	}

};


// Class TslGame.TslParticleInterface
// 0x0000 (0x0030 - 0x0030)
class UTslParticleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticleInterface"));

		return ptr;
	}

};


// Class TslGame.TslParticle
// 0x00B0 (0x0498 - 0x03E8)
class ATslParticle : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	bool                                               bAutoDestroyOnParticleFinish;                             // 0x03F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoPlaySound;                                           // 0x03F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03F2(0x0001) MISSED OFFSET
	bool                                               bWaitForAudioToFinish;                                    // 0x03F3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	TArray<struct FParticleParameter>                  DefaultParameters;                                        // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EAttachParent                                      AttachParentType;                                         // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	struct FName                                       AttachSocketName;                                         // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AttachLocationRule;                                       // 0x0418(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AttachRotationRule;                                       // 0x0419(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAttachmentRule                                    AttachScaleRule;                                          // 0x041A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bConvertForColorBlind;                                    // 0x041B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	TMap<struct FName, struct FVector>                 VectorParameters;                                         // 0x0420(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	EColorBlindType                                    TestColorBlindType;                                       // 0x0470(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	class UParticleSystemComponent*                    ParticleSystem;                                           // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AkSound;                                                  // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0488(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticle"));

		return ptr;
	}


	void STATIC_SetParticleParameter(const struct FName& Name, const struct FVector& Value, bool bEnableRTPC);
	void STATIC_OnParticleFinish(class UParticleSystemComponent* PSystem);
	void STATIC_OnParticleCollide(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName, class UPhysicalMaterial* PhysMat);
	void STATIC_OnParameterUpdated();
	void STATIC_GetWaterVolumeHeight(bool* OutbIsInWater, float* OutWaterHeight);
	TEnumAsByte<EPhysicalSurface> STATIC_GetPhysicalSurfaceFromRay(const struct FVector& StartActorOffset, const struct FVector& TraceRay);
	struct FVector STATIC_GetParticleVectorParamter(const struct FName& Name, const struct FVector& DefaultValue);
	float STATIC_GetParticleParamterByName(const struct FName& Name, float DefaultValue);
	float STATIC_GetParticleParamter(const struct FString& Name, float DefaultValue);
	float STATIC_GetEmitterGlobalSpawnRateScale();
	void STATIC_ForceSpawn(int emitterIndex, const struct FVector& InLocation);
	void STATIC_AttachToParent();
};


// Class TslGame.TslParticleEnvironment
// 0x0020 (0x04B8 - 0x0498)
class ATslParticleEnvironment : public ATslParticle
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0498(0x0010) MISSED OFFSET
	float                                              AutoParticleActivateDistance;                             // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoPlayDistance;                                         // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticleEnvironment"));

		return ptr;
	}

};


// Class TslGame.BlackZoneBeacon
// 0x0078 (0x0460 - 0x03E8)
class ABlackZoneBeacon : public AActor
{
public:
	struct FName                                       GroupName;                                                // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FDestructionParticle>                ParticleEffects;                                          // 0x03F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDestructionParticleEnvironment>     ParticleEnvironments;                                     // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              NearbyHitParticleDistance;                                // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamageRadius;                                             // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     VolumetricScale;                                          // 0x0418(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	TArray<class ATriggerBox*>                         KillBoxes;                                                // 0x0428(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	class USkeletalMesh*                               DestructionMesh;                                          // 0x0438(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             DestructionAnimation;                                     // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BuildingLocalOriginOffset;                                // 0x0448(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              DestroyAnimationDelayTime;                                // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BlackZoneBeacon"));

		return ptr;
	}

};


// Class TslGame.BlackZoneOrigin
// 0x0010 (0x03F8 - 0x03E8)
class ABlackZoneOrigin : public AActor
{
public:
	struct FName                                       GroupName;                                                // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlackZoneRadius;                                          // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ShowRadiusInEditor;                                       // 0x03F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BlackZoneOrigin"));

		return ptr;
	}

};


// Class TslGame.BluezoneComponent
// 0x0160 (0x0360 - 0x0200)
class UBluezoneComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x160];                                     // 0x0200(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.BluezoneEffectBase
// 0x0000 (0x03E8 - 0x03E8)
class ABluezoneEffectBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneEffectBase"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.BluezoneEffectPrefab
// 0x0028 (0x0410 - 0x03E8)
class ABluezoneEffectPrefab : public ABluezoneEffectBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET
	class USceneComponent*                             InnerCylinderComponent;                                   // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             OuterCylinderComponent;                                   // 0x0408(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneEffectPrefab"));

		return ptr;
	}


	void STATIC_CalculateBluezoneMeshLODs(TArray<class UStaticMeshComponent*> Meshes, const struct FName& SocketName, float LOD1Dist, float LOD2Dist);
};


// Class TslGame.BluezoneEffectController
// 0x0138 (0x0520 - 0x03E8)
class ABluezoneEffectController : public AActor
{
public:
	class ATslGameState*                               TslGameState;                                             // 0x03E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      DefaultBlueZoneEffectClass;                               // 0x03F0(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      DefaultInnerBlueZoneEffectClass;                          // 0x03F8(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TMap<EBlueZoneShape, class UClass*>                BluezoneEffectClasses;                                    // 0x0400(0x0050) (Edit, ZeroConstructor, Config)
	TMap<EBlueZoneShape, class UClass*>                InnerBluezoneEffectClasses;                               // 0x0450(0x0050) (Edit, ZeroConstructor, Config)
	TMap<EBlueZoneShape, class UClass*>                OuterBluezoneEffectClasses;                               // 0x04A0(0x0050) (Edit, ZeroConstructor, Config)
	class UClass*                                      SelectedBluezoneEffectBase;                               // 0x04F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      SelectedInnerBluezoneEffectBase;                          // 0x04F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      SelectedOuterBluezoneEffectBase;                          // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABluezoneEffectBase*                         BluezoneEffect;                                           // 0x0508(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABluezoneEffectBase*                         InnerBluezoneEffect;                                      // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ABluezoneEffectBase*                         OuterBluezoneEffect;                                      // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneEffectController"));

		return ptr;
	}

};


// Class TslGame.BluezoneSoundEffectComponent
// 0x0020 (0x0220 - 0x0200)
class UBluezoneSoundEffectComponent : public UActorComponent
{
public:
	class UAkComponent*                                AkComponent;                                              // 0x0200(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0208(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneSoundEffectComponent"));

		return ptr;
	}

};


// Class TslGame.BTDecorator_AttrObserver
// 0x0010 (0x0080 - 0x0070)
class UBTDecorator_AttrObserver : public UBTDecorator
{
public:
	TArray<struct FAIAttrObserver>                     AttrObserverList;                                         // 0x0070(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTDecorator_AttrObserver"));

		return ptr;
	}

};


// Class TslGame.BTDecorator_HasLoSTo
// 0x0028 (0x0098 - 0x0070)
class UBTDecorator_HasLoSTo : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      EnemyKey;                                                 // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTDecorator_HasLoSTo"));

		return ptr;
	}

};


// Class TslGame.BTDecorator_NewSatisfyAttkDist
// 0x0010 (0x0080 - 0x0070)
class UBTDecorator_NewSatisfyAttkDist : public UBTDecorator
{
public:
	float                                              DefaultAttackDist;                                        // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInversed;                                              // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	float                                              ExtraDistance;                                            // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTDecorator_NewSatisfyAttkDist"));

		return ptr;
	}

};


// Class TslGame.BTDecorator_Probability
// 0x0008 (0x0078 - 0x0070)
class UBTDecorator_Probability : public UBTDecorator
{
public:
	float                                              ExecuteProbability;                                       // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTDecorator_Probability"));

		return ptr;
	}

};


// Class TslGame.BTDecorator_SatisfyAttkDist
// 0x0008 (0x0078 - 0x0070)
class UBTDecorator_SatisfyAttkDist : public UBTDecorator
{
public:
	float                                              AttackDist;                                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInversed;                                              // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTDecorator_SatisfyAttkDist"));

		return ptr;
	}

};


// Class TslGame.BTService_AdvancedShooting
// 0x0040 (0x00B8 - 0x0078)
class UBTService_AdvancedShooting : public UBTService
{
public:
	EFiringMode                                        WeaponShotType;                                           // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              DeviationScale;                                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RandomShootFreqRange;                                     // 0x0080(0x0008) (Edit, IsPlainOldData)
	struct FBlackboardKeySelector                      ReloadBlackBoardKey;                                      // 0x0088(0x0028) (Edit)
	bool                                               bSetCanSeeTargetFlag;                                     // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              TurnAngle;                                                // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_AdvancedShooting"));

		return ptr;
	}

};


// Class TslGame.BTService_AvoidBluezone
// 0x0000 (0x00A0 - 0x00A0)
class UBTService_AvoidBluezone : public UBTService_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_AvoidBluezone"));

		return ptr;
	}

};


// Class TslGame.BTService_BluezoneDamage
// 0x0018 (0x0090 - 0x0078)
class UBTService_BluezoneDamage : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	class UClass*                                      BluezoneDamageType;                                       // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_BluezoneDamage"));

		return ptr;
	}

};


// Class TslGame.BTService_CheckWin_CPP
// 0x0018 (0x0090 - 0x0078)
class UBTService_CheckWin_CPP : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0078(0x0010) MISSED OFFSET
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_CheckWin_CPP"));

		return ptr;
	}

};


// Class TslGame.BTService_ChooseEnemy
// 0x00F0 (0x0168 - 0x0078)
class UBTService_ChooseEnemy : public UBTService
{
public:
	float                                              MaxRememberEnemyTimeInSeconds;                            // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxRememberLastAttackedMeTimeInSeconds;                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTraceLastAttackedMeDistance;                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeWhenCannotSeeTarget;                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeLockTarget;                                        // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SensedRadius;                                             // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponSensedRadius;                                  // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponNightSensedRadius;                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmergencyRadius;                                          // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FWeaponType2Range>                   WeaponType2Ranges;                                        // 0x00A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FWeaponTypeToRange>                  DefaultWeaponTypeToRanges;                                // 0x00B0(0x0010) (Edit, ZeroConstructor)
	TMap<EWeatherStatusType, struct FWeatherToRange>   WeatherToRange;                                           // 0x00C0(0x0050) (Edit, ZeroConstructor)
	TMap<EWeatherStatusType, EWeatherStatusType>       WeatherTypeToWeatherRange;                                // 0x0110(0x0050) (Edit, ZeroConstructor)
	float                                              PVESensedRadius;                                          // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_ChooseEnemy"));

		return ptr;
	}

};


// Class TslGame.BTService_Cruising
// 0x0000 (0x0078 - 0x0078)
class UBTService_Cruising : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_Cruising"));

		return ptr;
	}

};


// Class TslGame.BTService_DeliverControl
// 0x0010 (0x0088 - 0x0078)
class UBTService_DeliverControl : public UBTService
{
public:
	TArray<struct FDeliverControlRatingConfig>         RatingConfig;                                             // 0x0078(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_DeliverControl"));

		return ptr;
	}

};


// Class TslGame.BTService_DistantJudge
// 0x0040 (0x00B8 - 0x0078)
class UBTService_DistantJudge : public UBTService
{
public:
	struct FBlackboardKeySelector                      WatchTargetBlackBoardKey;                                 // 0x0078(0x0028) (Edit)
	TArray<struct FAIDistantJudgeNoftify>              DistantJudges;                                            // 0x00A0(0x0010) (Edit, ZeroConstructor)
	bool                                               ResetModifyBBData;                                        // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_DistantJudge"));

		return ptr;
	}

};


// Class TslGame.BTService_Focus
// 0x0008 (0x00B0 - 0x00A8)
class UBTService_Focus : public UBTService_DefaultFocus
{
public:
	EAINewFocusPriority                                AIFocusPriority;                                          // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ResetFocus;                                               // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_Focus"));

		return ptr;
	}

};


// Class TslGame.BTService_LookAround
// 0x0020 (0x0098 - 0x0078)
class UBTService_LookAround : public UBTService
{
public:
	struct FVector2D                                   RotationSpeed;                                            // 0x0078(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   RotationAngle;                                            // 0x0080(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   WaitTimeWhenStop;                                         // 0x0088(0x0008) (Edit, IsPlainOldData)
	float                                              AcceptToleranceInDegree;                                  // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_LookAround"));

		return ptr;
	}

};


// Class TslGame.BTService_SensedEnemy
// 0x0070 (0x00E8 - 0x0078)
class UBTService_SensedEnemy : public UBTService
{
public:
	float                                              IsNotSeeTargetTime;                                       // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SensedRadius;                                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponSensedRadius;                                  // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponNightSensedRadius;                             // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmergencyRadius;                                          // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TMap<int, float>                                   AISensedEnemyPoseRatio;                                   // 0x0090(0x0050) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTService_SensedEnemy"));

		return ptr;
	}

};


// Class TslGame.BTTask_BackToBeach
// 0x0008 (0x00C0 - 0x00B8)
class UBTTask_BackToBeach : public UBTTask_MoveTo
{
public:
	bool                                               ConsiderBreath;                                           // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	float                                              BreathPercent;                                            // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_BackToBeach"));

		return ptr;
	}

};


// Class TslGame.BTTask_BluezoneRelease
// 0x0068 (0x00E0 - 0x0078)
class UBTTask_BluezoneRelease : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0078(0x0038) MISSED OFFSET
	struct FBlackboardKeySelector                      ReleaseDuration;                                          // 0x00B0(0x0028) (Edit)
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_BluezoneRelease"));

		return ptr;
	}


	void STATIC_OnFinishExecuteWithSuccess();
};


// Class TslGame.BTTask_BluezoneWarning
// 0x00D0 (0x0148 - 0x0078)
class UBTTask_BluezoneWarning : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0078(0x0028) MISSED OFFSET
	struct FBlackboardKeySelector                      WarningPosition;                                          // 0x00A0(0x0028) (Edit)
	struct FBlackboardKeySelector                      WarningRadius;                                            // 0x00C8(0x0028) (Edit)
	struct FBlackboardKeySelector                      WarningDuration;                                          // 0x00F0(0x0028) (Edit)
	struct FBlackboardKeySelector                      ReleaseDuration;                                          // 0x0118(0x0028) (Edit)
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_BluezoneWarning"));

		return ptr;
	}


	void STATIC_OnFinishExecuteWithSuccess();
};


// Class TslGame.BTTask_CheckFinish
// 0x0008 (0x0080 - 0x0078)
class UBTTask_CheckFinish : public UBTTaskNode
{
public:
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_CheckFinish"));

		return ptr;
	}

};


// Class TslGame.BTTask_ChooseAvailableWeaponSlot
// 0x0000 (0x00A0 - 0x00A0)
class UBTTask_ChooseAvailableWeaponSlot : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_ChooseAvailableWeaponSlot"));

		return ptr;
	}

};


// Class TslGame.BTTask_DealNextBuildingPathNode
// 0x0010 (0x00B0 - 0x00A0)
class UBTTask_DealNextBuildingPathNode : public UBTTask_BlackboardBase
{
public:
	float                                              findSpotXYOffset;                                         // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              findSpotZOffset;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceNextBuilding;                                       // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_DealNextBuildingPathNode"));

		return ptr;
	}

};


// Class TslGame.BTTask_FindNearestTombBoxTask
// 0x0010 (0x00B0 - 0x00A0)
class UBTTask_FindNearestTombBoxTask : public UBTTask_BlackboardBase
{
public:
	float                                              PlayerBackpackSearchRadius;                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirDropSearchRadius;                                      // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirDropBoxRadius;                                         // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPainFindInBlueCircle;                                  // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_FindNearestTombBoxTask"));

		return ptr;
	}

};


// Class TslGame.BTTask_FindPointNearEnemy
// 0x0000 (0x00A0 - 0x00A0)
class UBTTask_FindPointNearEnemy : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_FindPointNearEnemy"));

		return ptr;
	}

};


// Class TslGame.BTTask_FinishMatch
// 0x0008 (0x0080 - 0x0078)
class UBTTask_FinishMatch : public UBTTaskNode
{
public:
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_FinishMatch"));

		return ptr;
	}

};


// Class TslGame.BTTask_Floating
// 0x0000 (0x0080 - 0x0080)
class UBTTask_Floating : public UBTTask_Wait
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_Floating"));

		return ptr;
	}

};


// Class TslGame.BTTask_MagicMove
// 0x0018 (0x00D0 - 0x00B8)
class UBTTask_MagicMove : public UBTTask_MoveTo
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GenerateNavRadius;                                        // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeLimit;                                                // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ForceSuccess;                                             // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               MoveWithOutPathFinding;                                   // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               GotoExceptionWhenFailed;                                  // 0x00CA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00CB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_MagicMove"));

		return ptr;
	}

};


// Class TslGame.BTTask_MoveToOcclusion
// 0x0040 (0x0110 - 0x00D0)
class UBTTask_MoveToOcclusion : public UBTTask_MagicMove
{
public:
	float                                              SearchRadius;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UseLastPointRadius;                                       // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearDistanceValue;                                        // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PointInNearDistanceValue;                                 // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bChoosePointByEnemy;                                      // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceStand;                                              // 0x00E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00E2(0x0002) MISSED OFFSET
	float                                              CirclePainThreshold;                                      // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      EnemyBlackboardKey;                                       // 0x00E8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_MoveToOcclusion"));

		return ptr;
	}

};


// Class TslGame.BTTask_MoveToSafeArea
// 0x0008 (0x00D8 - 0x00D0)
class UBTTask_MoveToSafeArea : public UBTTask_MagicMove
{
public:
	float                                              RadiusScale;                                              // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_MoveToSafeArea"));

		return ptr;
	}

};


// Class TslGame.BTTask_TryFightback
// 0x0018 (0x00E8 - 0x00D0)
class UBTTask_TryFightback : public UBTTask_MagicMove
{
public:
	float                                              MaxTraceRadius;                                           // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTraceTime;                                             // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckTargetVisableTimeIntervel;                           // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCheckHasWeapon;                                        // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	float                                              MinEnemyInSightTime;                                      // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_TryFightback"));

		return ptr;
	}

};


// Class TslGame.BTTask_ModifyBlackboardData
// 0x0018 (0x00B8 - 0x00A0)
class UBTTask_ModifyBlackboardData : public UBTTask_BlackboardBase
{
public:
	EModifyBlackboardDataValueType                     ValueType;                                                // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FString                                     SetValue;                                                 // 0x00A8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_ModifyBlackboardData"));

		return ptr;
	}

};


// Class TslGame.BTTask_NextBluezoneInBlackBoard
// 0x0018 (0x0090 - 0x0078)
class UBTTask_NextBluezoneInBlackBoard : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0078(0x0010) MISSED OFFSET
	class ABattleRoyaleModeController*                 ModeController;                                           // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_NextBluezoneInBlackBoard"));

		return ptr;
	}


	void STATIC_OnFinishExecuteWithFail();
};


// Class TslGame.BTTask_PickUpItemAtTombBox
// 0x0008 (0x0080 - 0x0078)
class UBTTask_PickUpItemAtTombBox : public UBTTaskNode
{
public:
	float                                              DeltaTime;                                                // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxPickCount;                                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_PickUpItemAtTombBox"));

		return ptr;
	}

};


// Class TslGame.BTTask_RedZone_CheckFinish
// 0x0008 (0x0080 - 0x0078)
class UBTTask_RedZone_CheckFinish : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_RedZone_CheckFinish"));

		return ptr;
	}

};


// Class TslGame.BTTask_RedZone_Explode
// 0x0028 (0x00A0 - 0x0078)
class UBTTask_RedZone_Explode : public UBTTaskNode
{
public:
	class UBehaviorTreeComponent*                      ExecutorComponent;                                        // 0x0078(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ARedZoneController*                          ExecutorController;                                       // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0088(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_RedZone_Explode"));

		return ptr;
	}


	void STATIC_Callback_Prepare();
	void STATIC_Callback_Finish();
	void STATIC_Callback_End();
	void STATIC_Callback_Begin();
};


// Class TslGame.BTTask_RedZone_Finish
// 0x0000 (0x0078 - 0x0078)
class UBTTask_RedZone_Finish : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_RedZone_Finish"));

		return ptr;
	}

};


// Class TslGame.BTTask_RedZone_SetNextRedZone
// 0x0008 (0x0080 - 0x0078)
class UBTTask_RedZone_SetNextRedZone : public UBTTaskNode
{
public:
	class UBehaviorTreeComponent*                      BehaviorTree;                                             // 0x0078(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_RedZone_SetNextRedZone"));

		return ptr;
	}


	void STATIC_Callback_Fail();
};


// Class TslGame.BTTask_RedZone_UpdateStartDelay
// 0x0008 (0x0080 - 0x0078)
class UBTTask_RedZone_UpdateStartDelay : public UBTTaskNode
{
public:
	class UBehaviorTreeComponent*                      BehaviorTree;                                             // 0x0078(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_RedZone_UpdateStartDelay"));

		return ptr;
	}


	void STATIC_Callback_Fail();
};


// Class TslGame.BTTask_SetBlackboardProperty
// 0x0040 (0x00B8 - 0x0078)
class UBTTask_SetBlackboardProperty : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      BlackboardKey;                                            // 0x0078(0x0028) (Edit)
	int                                                IntValue;                                                 // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FloatValue;                                               // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FString                                     StringValue;                                              // 0x00A8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_SetBlackboardProperty"));

		return ptr;
	}

};


// Class TslGame.BTTask_StrategyMove
// 0x0048 (0x00E8 - 0x00A0)
class UBTTask_StrategyMove : public UBTTask_BlackboardBase
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EAIMoveType                                        MovePathType;                                             // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A2(0x0002) MISSED OFFSET
	int                                                SampleNumber;                                             // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ControllPoint1;                                           // 0x00A8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   ControllPoint2;                                           // 0x00B0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   DirectionAngleRange;                                      // 0x00B8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   MoveTargetDistRange;                                      // 0x00C0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   ExecutionDuration;                                        // 0x00C8(0x0008) (Edit, IsPlainOldData)
	float                                              RePlanTime;                                               // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AlwaysSuccess;                                            // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopOnOverlap;                                            // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UsePathfinding;                                           // 0x00DD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPartialPath;                                         // 0x00DE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ProjectDestinationToNavigation;                           // 0x00DF(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExceptionRandomRadius;                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanMoveWhenNoTarget;                                     // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckWallPass;                                           // 0x00E5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DebugDrawPath;                                            // 0x00E6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x00E7(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_StrategyMove"));

		return ptr;
	}

};


// Class TslGame.BTTask_SwitchWeapon
// 0x0000 (0x00A0 - 0x00A0)
class UBTTask_SwitchWeapon : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_SwitchWeapon"));

		return ptr;
	}

};


// Class TslGame.BTTask_TeleportToSpecLoc
// 0x0020 (0x00C0 - 0x00A0)
class UBTTask_TeleportToSpecLoc : public UBTTask_BlackboardBase
{
public:
	float                                              RangeMin;                                                 // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RangeMax;                                                 // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyTeleportToLand;                                       // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	float                                              OriginCheckSquare;                                        // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DestCheckSquare;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceHeight;                                              // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceSuccess;                                            // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_TeleportToSpecLoc"));

		return ptr;
	}

};


// Class TslGame.BTTask_WaitBlackboardTimeWithBreak
// 0x0028 (0x00D0 - 0x00A8)
class UBTTask_WaitBlackboardTimeWithBreak : public UBTTask_WaitBlackboardTime
{
public:
	struct FBlackboardKeySelector                      BlackboardBreakKey;                                       // 0x00A8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_WaitBlackboardTimeWithBreak"));

		return ptr;
	}

};


// Class TslGame.BTTask_WayPointListMove
// 0x0010 (0x00B0 - 0x00A0)
class UBTTask_WayPointListMove : public UBTTask_BlackboardBase
{
public:
	bool                                               bAllowPartialPath;                                        // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              AcceptableRadius;                                         // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowStrafe;                                             // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bReachTestIncludesAgentRadius;                            // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bReachTestIncludesGoalRadius;                             // 0x00AA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bProjectGoalLocation;                                     // 0x00AB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUsePathfinding;                                          // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTask_WayPointListMove"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_CheckOcclusionSafe
// 0x0008 (0x00A8 - 0x00A0)
class UBTTaskNode_CheckOcclusionSafe : public UBTTask_BlackboardBase
{
public:
	float                                              CheckRadius;                                              // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_CheckOcclusionSafe"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_ClearFocus
// 0x0008 (0x0080 - 0x0078)
class UBTTaskNode_ClearFocus : public UBTTaskNode
{
public:
	EAINewFocusPriority                                ClearedFocus;                                             // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_ClearFocus"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_EmptyShot
// 0x0008 (0x0080 - 0x0078)
class UBTTaskNode_EmptyShot : public UBTTaskNode
{
public:
	float                                              FireTime;                                                 // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_EmptyShot"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_EquipOrUnWeapon
// 0x0008 (0x0080 - 0x0078)
class UBTTaskNode_EquipOrUnWeapon : public UBTTaskNode
{
public:
	bool                                               Equip;                                                    // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               FailedWhenEquipSuccess;                                   // 0x0079(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x007A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_EquipOrUnWeapon"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_FindBuilding
// 0x0028 (0x00C8 - 0x00A0)
class UBTTaskNode_FindBuilding : public UBTTask_BlackboardBase
{
public:
	TArray<struct FFindBuildingRatingConfig>           RatingConfig;                                             // 0x00A0(0x0010) (Edit, ZeroConstructor)
	bool                                               OnlySafeBuildings;                                        // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              MaxMoveSpeed;                                             // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              findSpotXYOffset;                                         // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              findSpotZOffset;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GoBackThreshold;                                          // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_FindBuilding"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_FindItemSpot
// 0x0000 (0x00A0 - 0x00A0)
class UBTTaskNode_FindItemSpot : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_FindItemSpot"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_FindPosByTarget
// 0x0010 (0x00B0 - 0x00A0)
class UBTTaskNode_FindPosByTarget : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bClamp;                                                   // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	float                                              SearchMinRadius;                                          // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNav;                                                  // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_FindPosByTarget"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_ForceSuccess
// 0x0008 (0x0080 - 0x0078)
class UBTTaskNode_ForceSuccess : public UBTTaskNode
{
public:
	bool                                               IsForceSuccess;                                           // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_ForceSuccess"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_HumanAction
// 0x0008 (0x0080 - 0x0078)
class UBTTaskNode_HumanAction : public UBTTaskNode
{
public:
	EAIPoseState                                       SetAction;                                                // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_HumanAction"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_MeleeAttack
// 0x0000 (0x0078 - 0x0078)
class UBTTaskNode_MeleeAttack : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_MeleeAttack"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_ParachuteJump
// 0x0038 (0x00B0 - 0x0078)
class UBTTaskNode_ParachuteJump : public UBTTaskNode
{
public:
	float                                              RandomStartJumpTime;                                      // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomEndJumpTime;                                        // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpRadius;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpHeight;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAccelerateStart;                                    // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAccelerateEnd;                                      // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OpenParachuteHeight;                                      // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckOpenParachuteFreq;                                   // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CloseParachuteHeight;                                     // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckCloseParachuteFreq;                                  // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FindLandingPosDistanceStart;                              // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FindLandingPosDistanceEnd;                                // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LerpDistnace;                                             // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LerpAngle;                                                // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_ParachuteJump"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_PickItemsAtSpot
// 0x0008 (0x0080 - 0x0078)
class UBTTaskNode_PickItemsAtSpot : public UBTTaskNode
{
public:
	float                                              DeltaTime;                                                // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxPickCount;                                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_PickItemsAtSpot"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_RefreshWeaponBBD
// 0x0000 (0x0078 - 0x0078)
class UBTTaskNode_RefreshWeaponBBD : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_RefreshWeaponBBD"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_StopShooting
// 0x0000 (0x0078 - 0x0078)
class UBTTaskNode_StopShooting : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_StopShooting"));

		return ptr;
	}

};


// Class TslGame.BTTaskNode_TakeMedicine
// 0x0018 (0x0090 - 0x0078)
class UBTTaskNode_TakeMedicine : public UBTTaskNode
{
public:
	ECastableItemType                                  CastableItemType;                                         // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0079(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BTTaskNode_TakeMedicine"));

		return ptr;
	}

};


// Class TslGame.BuildingDestAnim
// 0x0020 (0x0490 - 0x0470)
class ABuildingDestAnim : public ASkeletalMeshActor
{
public:
	class USkeletalMeshComponent*                      BuildingMesh;                                             // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMesh*                               DestructionMesh;                                          // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             DestructionAnimation;                                     // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SelfDeleteDelayTime;                                      // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x048C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BuildingDestAnim"));

		return ptr;
	}


	void STATIC_SetUp(class USkeletalMesh* SkeletalMeshAsset, class UAnimationAsset* destructionAnim, float selfDeleteDelay);
	void STATIC_PlayDestructionAnim();
	void STATIC_DeleteSelf();
};


// Class TslGame.BZExplosionEffect
// 0x0000 (0x03E8 - 0x03E8)
class ABZExplosionEffect : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BZExplosionEffect"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.BZMissile
// 0x0070 (0x0458 - 0x03E8)
class ABZMissile : public AActor
{
public:
	class UStaticMeshComponent*                        MissileMeshComponent;                                     // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             TrailParticlesAnchor;                                     // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslProjectileMovementComponent*             ProjectileMovementComponent;                              // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector                                     Destination;                                              // 0x0400(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              TimeUntilHit;                                             // 0x040C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               IncomingSound;                                            // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             TrailParticlesClass;                                      // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystemComponent*                    SpawnedTrailParticles;                                    // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       TrailSmokeEmitterName;                                    // 0x0428(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TrailSpawnRateEmitterName;                                // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnTrailEmitterDelay;                                   // 0x0438(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DestroyMissileDelay;                                      // 0x043C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0440(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BZMissile"));

		return ptr;
	}


	void STATIC_SpawnTrailEmitter();
	void STATIC_DestroyMissile();
};


// Class TslGame.BZPredatorDrone
// 0x0018 (0x0400 - 0x03E8)
class ABZPredatorDrone : public AActor
{
public:
	struct FVector                                     BlackZoneOrigin;                                          // 0x03E8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	float                                              BlackZoneRadius;                                          // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              BombingDuration;                                          // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BZPredatorDrone"));

		return ptr;
	}


	void STATIC_AssignBlackZoneCircle(const struct FVector& CircleOrigin, float CircleRadius, float Duration);
};


// Class TslGame.CameraSettings
// 0x0070 (0x00A0 - 0x0030)
class UCameraSettings : public UObject
{
public:
	float                                              CameraPitchMinStand;                                      // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraPitchMaxStand;                                      // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraYawMinStand;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraYawMaxStand;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraPitchMinProne;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraPitchMaxProne;                                      // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraYawMinProne;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraYawMaxProne;                                        // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              FPSShowOnHighScopingFOV;                                  // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TPSShowOnHighScopingFOV;                                  // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraPitchMinInVehicle;                                  // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraPitchMaxInVehicle;                                  // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraYawMinInVehicle;                                    // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraYawMaxInVehicle;                                    // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FName                                       HeadBoneName;                                             // 0x0068(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FString>                             HideMaterialsWhenCameraIsInHead;                          // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             HideMaterialsOnScopeMode;                                 // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             HideMaterialsOnHighScopeMode;                             // 0x0090(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CameraSettings"));

		return ptr;
	}

};


// Class TslGame.CastableItemImplement_Boost
// 0x0008 (0x0038 - 0x0030)
class UCastableItemImplement_Boost : public UCastableItemImplement
{
public:
	float                                              BoostGaugeAmount;                                         // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastableItemImplement_Boost"));

		return ptr;
	}

};


// Class TslGame.CastableItemImplement_BoostAdrenaline
// 0x0000 (0x0030 - 0x0030)
class UCastableItemImplement_BoostAdrenaline : public UCastableItemImplement
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastableItemImplement_BoostAdrenaline"));

		return ptr;
	}

};


// Class TslGame.CastableItemImplement_JerryCan
// 0x0048 (0x0078 - 0x0030)
class UCastableItemImplement_JerryCan : public UCastableItemImplement
{
public:
	struct FCastConfig                                 CastConfig;                                               // 0x0030(0x0040) (Edit, DisableEditOnInstance)
	ECastableItemType                                  CastableItemType;                                         // 0x0070(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastableItemImplement_JerryCan"));

		return ptr;
	}

};


// Class TslGame.CoherentCommonBinder
// 0x00C0 (0x00F0 - 0x0030)
class UCoherentCommonBinder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0030(0x0058) MISSED OFFSET
	struct FString                                     DefaultLobbyUrl;                                          // 0x0088(0x0010) (ZeroConstructor, Config)
	struct FString                                     DevelopmentLobbyUrl;                                      // 0x0098(0x0010) (ZeroConstructor, Config)
	struct FString                                     CertificationLobbyUrl;                                    // 0x00A8(0x0010) (ZeroConstructor, Config)
	struct FString                                     LiveLobbyUrl;                                             // 0x00B8(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x28];                                      // 0x00C8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CoherentCommonBinder"));

		return ptr;
	}


	void STATIC_UnBindUI(bool bByDestroy);
	void STATIC_Test();
	void STATIC_OnWebPageOnPlatformFailed();
	void STATIC_BindUI();
	void STATIC_BindDelegate();
};


// Class TslGame.CoherentWidgetBinder
// 0x0010 (0x0100 - 0x00F0)
class UCoherentWidgetBinder : public UCoherentCommonBinder
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CoherentWidgetBinder"));

		return ptr;
	}


	void STATIC_UnBindUI(bool bByDestroy);
	void STATIC_Test();
	void STATIC_OnWebPageOnPlatformFailed();
	void STATIC_BindUI();
	void STATIC_BindDelegate();
};


// Class TslGame.LobbyCoherentWidgetBinder
// 0x0000 (0x0100 - 0x0100)
class ULobbyCoherentWidgetBinder : public UCoherentWidgetBinder
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyCoherentWidgetBinder"));

		return ptr;
	}


	void STATIC_UnBindUI(bool bByDestroy);
	void STATIC_Test();
	void STATIC_OnWebPageOnPlatformFailed();
	void STATIC_BindUI();
	void STATIC_BindDelegate();
};


// Class TslGame.ConditionalBuff
// 0x0000 (0x0030 - 0x0030)
class UConditionalBuff : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ConditionalBuff"));

		return ptr;
	}

};


// Class TslGame.SameTeamConditionalBuff
// 0x0010 (0x0040 - 0x0030)
class USameTeamConditionalBuff : public UConditionalBuff
{
public:
	class UClass*                                      MyTeamBuff;                                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      OtherTeamBuff;                                            // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SameTeamConditionalBuff"));

		return ptr;
	}

};


// Class TslGame.ConsoleCommandExecutor
// 0x0020 (0x0408 - 0x03E8)
class AConsoleCommandExecutor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ConsoleCommandExecutor"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.ItemPreloadable
// 0x0000 (0x0030 - 0x0030)
class UItemPreloadable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemPreloadable"));

		return ptr;
	}

};


// Class TslGame.CraftRuleComponent
// 0x0030 (0x0230 - 0x0200)
class UCraftRuleComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0200(0x0018) MISSED OFFSET
	class UDataTable*                                  CraftItemDataTable;                                       // 0x0218(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0220(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftRuleComponent"));

		return ptr;
	}


	void STATIC_OnRep_CraftItemDataTable();
};


// Class TslGame.CraftComponent
// 0x0140 (0x0340 - 0x0200)
class UCraftComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0200(0x0058) MISSED OFFSET
	class ATslGameState*                               CachedTslGameState;                                       // 0x0258(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       ReservedCraftItemID;                                      // 0x0260(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0268(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x0268(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.CraftComponent.CachedMaterials
	unsigned char                                      UnknownData03[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET
	struct FCastConfig                                 CastConfig;                                               // 0x02C8(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x38];                                      // 0x0308(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftComponent"));

		return ptr;
	}


	void STATIC_OnUpdateInventoryItem(const struct FName& InItemID, int InStackCount);
	void STATIC_OnItemStackCountChanged();
	void STATIC_OnInventoryUpdated();
	void STATIC_OnFinishCraftItemAtServer(class UObject* CastObject);
	void STATIC_OnFinishCraftItemAtClient(class UObject* CastObject);
	void STATIC_OnCraftAllowFilterUpdated();
	void STATIC_OnCancelCraftItemAtServer(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnCancelCraftItemAtClient(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_Init();
};


// Class TslGame.CrowdAgentQueryInterface
// 0x0000 (0x0030 - 0x0030)
class UCrowdAgentQueryInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CrowdAgentQueryInterface"));

		return ptr;
	}

};


// Class TslGame.ModeController
// 0x0000 (0x0500 - 0x0500)
class AModeController : public AAIController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ModeController"));

		return ptr;
	}


	bool STATIC_UseBlackboard(class UBlackboardData* BlackboardAsset, class UBlackboardComponent** BlackboardComponent);
	void STATIC_UnclaimTaskResource(class UClass* ResourceClass);
	void STATIC_SetMoveBlockDetection(bool bEnable);
	bool STATIC_RunBehaviorTree(class UBehaviorTree* BTAsset);
	void STATIC_OnUsingBlackBoard(class UBlackboardComponent* BlackboardComp, class UBlackboardData* BlackboardAsset);
	void STATIC_OnUnpossess(class APawn* UnpossessedPawn);
	void STATIC_OnPossess(class APawn* PossessedPawn);
	void STATIC_OnGameplayTaskResourcesClaimed(const struct FGameplayResourceSet& NewlyClaimed, const struct FGameplayResourceSet& FreshlyReleased);
	TEnumAsByte<EPathFollowingRequestResult> STATIC_MoveToLocation(const struct FVector& Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class UClass* FilterClass, bool bAllowPartialPath);
	TEnumAsByte<EPathFollowingRequestResult> STATIC_MoveToActor(class AActor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class UClass* FilterClass, bool bAllowPartialPath);
	void STATIC_K2_SetFocus(class AActor* NewFocus);
	void STATIC_K2_SetFocalPoint(const struct FVector& FP);
	void STATIC_K2_ClearFocus();
	bool STATIC_HasPartialPath();
	class UPathFollowingComponent* STATIC_GetPathFollowingComponent();
	TEnumAsByte<EPathFollowingStatus> STATIC_GetMoveStatus();
	struct FVector STATIC_GetImmediateMoveDestination();
	class AActor* STATIC_GetFocusActor();
	struct FVector STATIC_GetFocalPointOnActor(class AActor* Actor);
	struct FVector STATIC_GetFocalPoint();
	class UAIPerceptionComponent* STATIC_GetAIPerceptionComponent();
	void STATIC_ClaimTaskResource(class UClass* ResourceClass);
};


// Class TslGame.CarePackageController
// 0x01B0 (0x06B0 - 0x0500)
class ACarePackageController : public AModeController
{
public:
	class UClass*                                      AircraftCarePackageClass;                                 // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringClassReference                       AircraftCarePackageClassString;                           // 0x0508(0x0010) (Edit, DisableEditOnInstance)
	struct FVector2D                                   StartDelay;                                               // 0x0518(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   SpawnInterval;                                            // 0x0520(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              FlyingHeight;                                             // 0x0528(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CarePackageLifeTime;                                      // 0x052C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WhiteZoneSpawnInnerRate;                                  // 0x0530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DropAreaRate;                                             // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxCheckDropLocation;                                     // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OverrideFromModePreset;                                   // 0x053C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x053D(0x000B) MISSED OFFSET
	class UClass*                                      AircraftFlareGunCarePackageClass;                         // 0x0548(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringClassReference                       AircraftFlareGunCarePackageClassString;                   // 0x0550(0x0010) (Edit, DisableEditOnInstance)
	class UClass*                                      AircraftFlareGunVehicleClass;                             // 0x0560(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringClassReference                       AircraftFlareGunVehicleClassString;                       // 0x0568(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<EFlareDeploymentType, class UClass*>          FlareDeploymentTypeMap;                                   // 0x0578(0x0050) (ZeroConstructor, Transient)
	TMap<EFlareDeploymentType, TAssetPtr<class UClass>> FlareDeploymentStringTypeMap;                             // 0x05C8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              SpawnAreaRadius;                                          // 0x0618(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x061C(0x0004) MISSED OFFSET
	TMap<EFlareDeploymentType, struct FVector2D>       SpawnDelayMap;                                            // 0x0620(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FlyHeight_Flare;                                          // 0x0670(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxConcurrentFlareAirplanes;                              // 0x0674(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinWhitezoneDiameter;                                     // 0x0678(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x067C(0x0004) MISSED OFFSET
	TArray<class ATslPassCarePackageArea*>             PassCarePackageAreas;                                     // 0x0680(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslPassCarePackageAreaRectangle*>    PassCarePackageAreasRectangle;                            // 0x0690(0x0010) (ZeroConstructor, Transient)
	int                                                CarePackagesSpawned;                                      // 0x06A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x06A4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CarePackageController"));

		return ptr;
	}


	struct FVector STATIC_SpawnAircraftCarePackageCustom(const struct FVector& DropLocation, EFlareDeploymentType InDeployType, int InPackageID, int InNumberOfTeamPlayers);
	struct FVector STATIC_SpawnAircraftCarePackage(bool CopyIntersectionInfo);
	bool STATIC_SetNextCarePackageInBlackboard();
	void STATIC_InitCarePackageSetting();
	float STATIC_GetStartDelay();
	float STATIC_GetSpawnInterval();
	float STATIC_GetSpawnDelayFromMap(EFlareDeploymentType InDeployType);
	float STATIC_GetSpawnAreaRadius();
};


// Class TslGame.CustomCarepackageRulesComponent
// 0x00A0 (0x02A0 - 0x0200)
class UCustomCarepackageRulesComponent : public UActorComponent
{
public:
	TArray<struct FCustomCarepackageCircleData>        CustomCarepackageCircleArray;                             // 0x0200(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              SecondsToKeepPackageInfoAfterLanding;                     // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Deploy_InWhiteCarepackagesLeft;                           // 0x0214(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                Deploy_OutsideCarepackagesLeft;                           // 0x0218(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	TArray<struct FCustomCarepackageComing>            CarePackagesComing;                                       // 0x0220(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0230(0x0060) MISSED OFFSET
	class ABattleRoyaleModeController*                 BRController;                                             // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslGameMode*                                TslGameMode;                                              // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CustomCarepackageRulesComponent"));

		return ptr;
	}


	void STATIC_OnCarepackageDeployed(EFlareDeploymentType FlareDeploymentType);
	EFlareDeploymentType STATIC_GetFlareDeploymentType(const struct FVector& ActorSize2D);
	int STATIC_GetCarepackagesLeft(EFlareDeploymentType FlareDeploymentType);
	bool STATIC_CanFireFlaregun();
	void STATIC_AddZoneCarepackages(int PhaseIndex, bool bIsRelease);
};


// Class TslGame.DeployedItem
// 0x0028 (0x0410 - 0x03E8)
class ADeployedItem : public AActor
{
public:
	struct FName                                       ItemID;                                                   // 0x03E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                StackCount;                                               // 0x03F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class USceneComponent*                             SceneComponent;                                           // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ADroppedItem*                                DroppedItem;                                              // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTimerHandle                                TimerHandle_SpawnItem;                                    // 0x0408(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DeployedItem"));

		return ptr;
	}

};


// Class TslGame.TslAutoRespawnedItem
// 0x0010 (0x0420 - 0x0410)
class ATslAutoRespawnedItem : public ADeployedItem
{
public:
	float                                              ItemCheckInterval;                                        // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WaitingTimeForRespawn;                                    // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                TimerHandle_Respawn;                                      // 0x0418(0x0008)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAutoRespawnedItem"));

		return ptr;
	}

};


// Class TslGame.SubActor
// 0x0008 (0x03F0 - 0x03E8)
class ASubActor : public AActor
{
public:
	class ATslCharacter*                               NetOwnerCharacter;                                        // 0x03E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SubActor"));

		return ptr;
	}

};


// Class TslGame.ItemSlotContainer
// 0x0030 (0x0420 - 0x03F0)
class AItemSlotContainer : public ASubActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FScriptDelegate                             OnCreateAndShowContextMenuWidget;                         // 0x03F8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             OnDestroyContextMenuWidget;                               // 0x0408(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemSlotContainer"));

		return ptr;
	}

};


// Class TslGame.ItemExplorerInterface
// 0x0000 (0x0030 - 0x0030)
class UItemExplorerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemExplorerInterface"));

		return ptr;
	}

};


// Class TslGame.ItemExplorer
// 0x0030 (0x0450 - 0x0420)
class AItemExplorer : public AItemSlotContainer
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	struct FScriptDelegate                             OnUpdateItemList;                                         // 0x0428(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             OnClearItemList;                                          // 0x0438(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemExplorer"));

		return ptr;
	}

};


// Class TslGame.ExplorableItemInterface
// 0x0000 (0x0030 - 0x0030)
class UExplorableItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ExplorableItemInterface"));

		return ptr;
	}

};


// Class TslGame.ItemPackage
// 0x0148 (0x0598 - 0x0450)
class AItemPackage : public AItemExplorer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0450(0x0010) MISSED OFFSET
	struct FText                                       PackageName;                                              // 0x0460(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       PackageCategory;                                          // 0x0478(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       PackageDetailedName;                                      // 0x0490(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       PackageDescription;                                       // 0x04A8(0x0018) (Edit, DisableEditOnInstance)
	class UTexture*                                    PackageIcon;                                              // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PackageIconSizeRatio;                                     // 0x04C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET
	class UTexture*                                    PackageToolTipIcon;                                       // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PackageToolTipIconSizeRatio;                              // 0x04D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	TAssetPtr<class UStaticMesh>                       PackageMesh;                                              // 0x04E0(0x0020) (Edit, DisableEditOnInstance)
	class UBoxComponent*                               BoxComponent;                                             // 0x0500(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UOnceInteractionComponent*                   InteractionComponent;                                     // 0x0508(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               DestroyByEmptyItem;                                       // 0x0510(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0511(0x0007) MISSED OFFSET
	class UAsyncStaticMeshComponent*                   DropStaticMesh;                                           // 0x0518(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UItem*>                               Items;                                                    // 0x0520(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, EditConst)
	struct FString                                     CreatorAccountId;                                         // 0x0530(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	struct FString                                     CreatorName;                                              // 0x0540(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	struct FString                                     CreatorClan;                                              // 0x0550(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	EOutGamePlatformProvider                           CreatorPlatform;                                          // 0x0560(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0561(0x0003) MISSED OFFSET
	int                                                CreatorTeamId;                                            // 0x0564(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SortPriority;                                             // 0x0568(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EItemPackageType                                   PackageType;                                              // 0x056C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0xB];                                       // 0x056D(0x000B) MISSED OFFSET
	class UClass*                                      EffectClass;                                              // 0x0578(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class ATslParticle*                                ParticleEffect;                                           // 0x0580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     SpawnBoxExtent;                                           // 0x0588(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0594(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemPackage"));

		return ptr;
	}


	void STATIC_OnRep_EffectClass();
	void STATIC_OnDestroy(class AActor* Actor);
	void STATIC_Items_RepNotify();
	bool STATIC_IsOpenedBy(class ATslCharacter* Character);
	void STATIC_ClientOnInteractBy(class ATslCharacter* OtherCharacter);
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.DeployedItemPackage
// 0x0018 (0x0400 - 0x03E8)
class ADeployedItemPackage : public AActor
{
public:
	class UClass*                                      ItemPackageType;                                          // 0x03E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FPackagedItemInfo>                   ItemInfos;                                                // 0x03F0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DeployedItemPackage"));

		return ptr;
	}

};


// Class TslGame.DeployedVehicle
// 0x0028 (0x0410 - 0x03E8)
class ADeployedVehicle : public AActor
{
public:
	class UClass*                                      VehicleType;                                              // 0x03E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSnapToFloor;                                             // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              SpawnZOffsetFromFloor;                                    // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDesignateFuelPercent;                                    // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F9(0x0003) MISSED OFFSET
	float                                              DesignatedVehicleFuelPercent;                             // 0x03FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomMinFuelPercent;                                     // 0x0400(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomMaxFuelPercent;                                     // 0x0404(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DeployedVehicle"));

		return ptr;
	}

};


// Class TslGame.DestructibleBuilding
// 0x0000 (0x03E8 - 0x03E8)
class ADestructibleBuilding : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleBuilding"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslStaticContainer
// 0x0000 (0x03E8 - 0x03E8)
class ATslStaticContainer : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStaticContainer"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslDestructibleContainer
// 0x0008 (0x03F0 - 0x03E8)
class ATslDestructibleContainer : public AActor
{
public:
	unsigned char                                      bFlag : 1;                                                // 0x03E8(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructibleContainer"));

		return ptr;
	}


	void STATIC_OnRep_Flag();
};


// Class TslGame.InteractionInterface
// 0x0000 (0x0030 - 0x0030)
class UInteractionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InteractionInterface"));

		return ptr;
	}

};


// Class TslGame.InteractionComponent
// 0x01D0 (0x03D0 - 0x0200)
class UInteractionComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0200(0x0030) MISSED OFFSET
	float                                              MaxInteractableDistance;                                  // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0234(0x0004) MISSED OFFSET
	struct FText                                       InteractionVerb;                                          // 0x0238(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       InteractiveObjectName;                                    // 0x0250(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCastConfig                                 CastConfig;                                               // 0x0268(0x0040) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bUseTraceCheck;                                           // 0x02A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTraceComplexForInteraction;                              // 0x02A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x02AA(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInteractBy;                                             // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClientOnInteractBy;                                       // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0xF8];                                      // 0x02D0(0x00F8) MISSED OFFSET
	class ATslCharacter*                               CurrentlyInteractingActor;                                // 0x03C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InteractionComponent"));

		return ptr;
	}


	struct FText STATIC_GetInteractiveObjectName();
	struct FText STATIC_GetInteractionVerb();
	bool STATIC_AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.SceneInteractionComponent
// 0x0160 (0x0610 - 0x04B0)
class USceneInteractionComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x04B0(0x0030) MISSED OFFSET
	float                                              MaxInteractableDistance;                                  // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	struct FText                                       InteractionVerb;                                          // 0x04E8(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       InteractiveObjectName;                                    // 0x0500(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bUseTraceCheck;                                           // 0x0518(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTraceComplexForInteraction;                              // 0x0519(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x051A(0x0006) MISSED OFFSET
	struct FCastConfig                                 CastConfig;                                               // 0x0520(0x0040) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0560(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInteractBy;                                             // 0x0568(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClientOnInteractBy;                                       // 0x0578(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x88];                                      // 0x0588(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SceneInteractionComponent"));

		return ptr;
	}


	struct FText STATIC_GetInteractiveObjectName();
	struct FText STATIC_GetInteractionVerb();
	bool STATIC_AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.TslReplayMapDataInterface
// 0x0000 (0x0030 - 0x0030)
class UTslReplayMapDataInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReplayMapDataInterface"));

		return ptr;
	}

};


// Class TslGame.DoorInteractionComponent
// 0x0200 (0x0810 - 0x0610)
class UDoorInteractionComponent : public USceneInteractionComponent
{
public:
	EDoorState                                         DoorState;                                                // 0x0610(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bReverseRotation : 1;                                     // 0x0611(0x0001) (Net)
	unsigned char                                      bIgnoreParentValidityCheck : 1;                           // 0x0611(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0612(0x0002) MISSED OFFSET
	struct FVector                                     SoundOffset;                                              // 0x0614(0x000C) (IsPlainOldData)
	class UDoorDataAsset*                              DoorDataAsset;                                            // 0x0620(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C8];                                     // 0x0628(0x01C8) MISSED OFFSET
	class UAkComponent*                                AkAudioComponent;                                         // 0x07F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x07F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DoorInteractionComponent"));

		return ptr;
	}


	void STATIC_OnRep_DoorState(EDoorState PrevDoorState);
	void STATIC_HB_DelayRegisterForAI();
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.DestructibleBuildingContainer
// 0x01C0 (0x05A8 - 0x03E8)
class ADestructibleBuildingContainer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET
	class ATslStaticContainer*                         InstanceActorContainer;                                   // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TMap<struct FGuid, class ATslStaticContainer*>     HLODActorContainers;                                      // 0x0408(0x0050) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TMap<struct FGuid, class ATslStaticContainer*>     DestroyedHLODActorContainers;                             // 0x0458(0x0050) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<class ATslDestructibleContainer*>           DestructibleContainers;                                   // 0x04A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<class ATslDestructibleContainer*>           DoorContainers;                                           // 0x04B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TMap<struct FGuid, struct FDestructibleBuildingData> Buildings;                                                // 0x04C8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TMap<struct FGuid, struct FDestructibleBuildingData> DestroyedBuildings;                                       // 0x0518(0x0050) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FGuid>                               DestroyedBuildingCache;                                   // 0x0568(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FDestructibleBlackZoneOrigin>        BlackZoneOrigins;                                         // 0x0578(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FDestructibleBlackZoneBeacon>        BlackZoneBeacons;                                         // 0x0588(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FDestructibleBlackZoneKillBox>       BlackZoneKillBoxes;                                       // 0x0598(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleBuildingContainer"));

		return ptr;
	}

};


// Class TslGame.DestructibleBuildingVolume
// 0x0010 (0x03F8 - 0x03E8)
class ADestructibleBuildingVolume : public AActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               destructionVolume;                                        // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleBuildingVolume"));

		return ptr;
	}

};


// Class TslGame.TslImpactEffect
// 0x09E8 (0x0DD0 - 0x03E8)
class ATslImpactEffect : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class UParticleSystem*                             DefaultFX;                                                // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ConcreteFX;                                               // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             RockFX;                                                   // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             DirtFX;                                                   // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             WaterFX;                                                  // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             MetalFX;                                                  // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             WoodFX;                                                   // 0x0420(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             GlassFX;                                                  // 0x0428(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             GrassFX;                                                  // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SandFX;                                                   // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             FleshFX;                                                  // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             MudFX;                                                    // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             CropsFX;                                                  // 0x0450(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             CactusFX;                                                 // 0x0458(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PaperFX;                                                  // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             RubberFX;                                                 // 0x0468(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             FabricFX;                                                 // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SnowFX;                                                   // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SnowRockFX;                                               // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             IceFX;                                                    // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               AkSound;                                                  // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               AkSound_Ricochet;                                         // 0x0498(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bConvertForColorBlind;                                    // 0x04A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	TMap<struct FName, struct FVector>                 VectorParameters;                                         // 0x04A8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FDecalEffectDataSet                         DecalEffectDataSet;                                       // 0x04F8(0x0788) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHitResult                                  SurfaceHit;                                               // 0x0C80(0x0088) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bCalculateRicochet;                                       // 0x0D08(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0D09(0x0007) MISSED OFFSET
	struct FName                                       RicochetReflectParamName;                                 // 0x0D10(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RicochetChanceParamName;                                  // 0x0D18(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FImpactRicochetSettings                     DefaultRicochetSettings;                                  // 0x0D20(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<TEnumAsByte<EPhysicalSurface>, struct FImpactRicochetSettings> RicochetEffectMap;                                        // 0x0D38(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0D88(0x0030) MISSED OFFSET
	bool                                               bAlwaysAttachToSurface;                                   // 0x0DB8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0DB9(0x000F) MISSED OFFSET
	class UAkComponent*                                AKCom;                                                    // 0x0DC8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslImpactEffect"));

		return ptr;
	}


	struct FDecalEffectDataSet STATIC_GetAdjustedDecalEffectDataSet_BP();
	void STATIC_AdjustDecalEffectDataSet_BP();
};


// Class TslGame.TslExplosionEffect
// 0x0850 (0x0C38 - 0x03E8)
class ATslExplosionEffect : public AActor
{
public:
	class UParticleSystem*                             ExplosionFX;                                              // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleComp;                                             // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        ExplosionLight;                                           // 0x03F8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              ExplosionLightFadeOut;                                    // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               ExplosionSound;                                           // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalEffectDataSet                         DecalEffectDataSet;                                       // 0x0410(0x0788) (Edit, DisableEditOnInstance)
	float                                              DecalSpawnDelayTime;                                      // 0x0B98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0B9C(0x0004) MISSED OFFSET
	struct FHitResult                                  SurfaceHit;                                               // 0x0BA0(0x0088) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0C28(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslExplosionEffect"));

		return ptr;
	}


	void STATIC_OnParticleCollide(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName);
};


// Class TslGame.DestructibleSurfaceMask
// 0x0020 (0x0050 - 0x0030)
class UDestructibleSurfaceMask : public UObject
{
public:
	TArray<unsigned char>                              AnchorMask;                                               // 0x0030(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<unsigned char>                              RegionMask;                                               // 0x0040(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleSurfaceMask"));

		return ptr;
	}

};


// Class TslGame.DestructiblePrePenDamageMask
// 0x0020 (0x0050 - 0x0030)
class UDestructiblePrePenDamageMask : public UObject
{
public:
	TArray<unsigned char>                              FrontMask;                                                // 0x0030(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<unsigned char>                              BackMask;                                                 // 0x0040(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructiblePrePenDamageMask"));

		return ptr;
	}

};


// Class TslGame.DestructiblePropComponent
// 0x0060 (0x0BB0 - 0x0B50)
class UDestructiblePropComponent : public UStaticMeshComponent
{
public:
	class UStaticMesh*                                 DestroyedMesh;                                            // 0x0B50(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UParticleSystem*                             DestructionParticles;                                     // 0x0B58(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  ParticleSystemOffset;                                     // 0x0B60(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	int                                                HitsToDestroy;                                            // 0x0B90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreExplosiveRaycast;                                   // 0x0B94(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMaterialSwap;                                            // 0x0B95(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0B96(0x0002) MISSED OFFSET
	class UMaterialInterface*                          DestroyedMaterial;                                        // 0x0B98(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0BA0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructiblePropComponent"));

		return ptr;
	}


	void STATIC_TakeDamage(bool explosiveDamage);
	void STATIC_SwapMaterial();
};


// Class TslGame.DestructibleProp
// 0x0010 (0x03F8 - 0x03E8)
class ADestructibleProp : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class UClass*                                      DestructiblePropComponent;                                // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleProp"));

		return ptr;
	}


	void STATIC_RefreshDestructibleProp();
};


// Class TslGame.DestructibleSurfaceInterface
// 0x0000 (0x0030 - 0x0030)
class UDestructibleSurfaceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleSurfaceInterface"));

		return ptr;
	}

};


// Class TslGame.TslGlassWindowComponent
// 0x0050 (0x0BA0 - 0x0B50)
class UTslGlassWindowComponent : public UStaticMeshComponent
{
public:
	class UDestructibleMesh*                           DestructibleMesh;                                         // 0x0B50(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestroyDelayAfterDestructed;                              // 0x0B58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B5C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               DestructSound;                                            // 0x0B60(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructSoundOcclusionRefreshInterval;                    // 0x0B68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0B6C(0x0004) MISSED OFFSET
	class UDestructibleComponent*                      DestructibleComponent;                                    // 0x0B70(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bReplicatedOnClient : 1;                                  // 0x0B78(0x0001) (Net)
	unsigned char                                      bDestroyed : 1;                                           // 0x0B78(0x0001) (Net)
	unsigned char                                      UnknownData02[0x27];                                      // 0x0B79(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGlassWindowComponent"));

		return ptr;
	}


	void STATIC_OnRep_ReplicatedOnClient(bool bLastReplicatedOnClient);
	void STATIC_OnRep_Destroyed(bool bLastDestroyed);
	void STATIC_ClientNotifyHit(bool bBlockingHit, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& ImpactNormal);
};


// Class TslGame.TslDestructibleSurfaceComponent
// 0x01A0 (0x0CF0 - 0x0B50)
class UTslDestructibleSurfaceComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	struct FDestructibleSurfaceTemplate                DestructibleSurfaceTemplate;                              // 0x0B58(0x0110) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0C68(0x0010) MISSED OFFSET
	TWeakObjectPtr<class UTexture2D>                   WeakDynamicTextureFront;                                  // 0x0C78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0C80(0x0008) MISSED OFFSET
	TWeakObjectPtr<class UTexture2D>                   WeakDynamicTextureBack;                                   // 0x0C88(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x60];                                      // 0x0C90(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructibleSurfaceComponent"));

		return ptr;
	}

};


// Class TslGame.TslReactionDoorData
// 0x0040 (0x0078 - 0x0038)
class UTslReactionDoorData : public UDataAsset
{
public:
	float                                              PointDamageImpulse;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PointDamageRadius;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BreakingRadius;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BreakingImpulse;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BreakingMinDamage;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DamageAccumulateTimeout;                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZombieDamageAccumulateTimeout;                            // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FName                                       TopImpactSoketName;                                       // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       CenterImpactSoketName;                                    // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       BottomImpactSoketName;                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               DestructibleSoundAk;                                      // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReactionDoorData"));

		return ptr;
	}

};


// Class TslGame.DoorDataAsset
// 0x0038 (0x0070 - 0x0038)
class UDoorDataAsset : public UDataAsset
{
public:
	float                                              OpenAngle;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 OpenCurve;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OpenCurveDuration;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CloseCurve;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CloseCurveDuration;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               OpenSound;                                                // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               CloseSound;                                               // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DoorDataAsset"));

		return ptr;
	}

};


// Class TslGame.DoorFrameComponent
// 0x0070 (0x0BC0 - 0x0B50)
class UDoorFrameComponent : public UStaticMeshComponent
{
public:
	struct FTransform                                  DoorTransform;                                            // 0x0B50(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     SoundOffsetFromDoor;                                      // 0x0B80(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B8C(0x0004) MISSED OFFSET
	class UStaticMesh*                                 DoorStaticMesh;                                           // 0x0B90(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           DoorDestructibleMesh;                                     // 0x0B98(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UDoorDataAsset*                              DoorDataAsset;                                            // 0x0BA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTslReactionDoorData*                        ReactionDoorData;                                         // 0x0BA8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableSubComponents;                                    // 0x0BB0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0BB1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DoorFrameComponent"));

		return ptr;
	}


	class UStaticMesh* STATIC_GetDoorStaticMesh();
	void STATIC_DisableSubComponents(bool bDisable);
};


// Class TslGame.DestructibleSwitcher
// 0x0010 (0x03F8 - 0x03E8)
class ADestructibleSwitcher : public AActor
{
public:
	class UClass*                                      DestructibleComponent;                                    // 0x03E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleSwitcher"));

		return ptr;
	}


	void STATIC_Refresh(class AActor* OwningActor);
};


// Class TslGame.DestructibleVolumeComponent
// 0x0000 (0x09F0 - 0x09F0)
class UDestructibleVolumeComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleVolumeComponent"));

		return ptr;
	}


	void STATIC_SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector STATIC_GetUnscaledBoxExtent();
	struct FVector STATIC_GetScaledBoxExtent();
};


// Class TslGame.RichPresenceManager
// 0x0100 (0x0130 - 0x0030)
class URichPresenceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC8];                                      // 0x0030(0x00C8) MISSED OFFSET
	class UTslGameInstance*                            TslGameInstance;                                          // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class APlayerController*                           PlayerController;                                         // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslGameState*                               TslGameState;                                             // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslPlayerState*                             TslPlayerState;                                           // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  HideListDataTable;                                        // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0120(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RichPresenceManager"));

		return ptr;
	}

};


// Class TslGame.RichPresenceObserverInterface
// 0x0000 (0x0030 - 0x0030)
class URichPresenceObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RichPresenceObserverInterface"));

		return ptr;
	}

};


// Class TslGame.DiscordRichPresenceObserver
// 0x0140 (0x0170 - 0x0030)
class UDiscordRichPresenceObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x140];                                     // 0x0030(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DiscordRichPresenceObserver"));

		return ptr;
	}

};


// Class TslGame.DoorSwitcher
// 0x0010 (0x03F8 - 0x03E8)
class ADoorSwitcher : public AActor
{
public:
	class UClass*                                      Door;                                                     // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DoorSwitcher"));

		return ptr;
	}


	void STATIC_SetupRootComponent();
	void STATIC_RefreshDoor();
	void STATIC_DeleteAllComponents();
	void STATIC_AddDoorFrameComponent();
};


// Class TslGame.MasteryItemInterface
// 0x0000 (0x0030 - 0x0030)
class UMasteryItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MasteryItemInterface"));

		return ptr;
	}

};


// Class TslGame.DroppedItem
// 0x0088 (0x0470 - 0x03E8)
class ADroppedItem : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E8(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.DroppedItem.Item
	class UAsyncStaticMeshComponent*                   MeshComp;                                                 // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UDroppedItemActorComponent*                  InteractionComp;                                          // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x0410(0x0020) (Net, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0430(0x0010) MISSED OFFSET
	struct FTimerHandle                                ExplosionDelayHandle;                                     // 0x0440(0x0008) (Transient)
	float                                              Health;                                                   // 0x0448(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExploded;                                                // 0x044C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xB];                                       // 0x044D(0x000B) MISSED OFFSET
	struct FReplicatedMasteryItem                      ReplicatedMasteryItem;                                    // 0x0458(0x0004)
	unsigned char                                      UnknownData04[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	class UMeshComponent*                              WeaponMasteryMesh;                                        // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               StaticWeaponMasteryItem;                                  // 0x0468(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0469(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedItem"));

		return ptr;
	}


	void STATIC_OnStaticMeshLoaded();
	void STATIC_OnRep_ReplicatedSkinParam();
	void STATIC_Multi_Explode();
	void STATIC_Item_RepNotify();
};


// Class TslGame.FakeProjectileInterface
// 0x0000 (0x0030 - 0x0030)
class UFakeProjectileInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FakeProjectileInterface"));

		return ptr;
	}

};


// Class TslGame.TslProjectileMovementComponent
// 0x0370 (0x0680 - 0x0310)
class UTslProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	float                                              SimulationTimeStep;                                       // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   SlidingFriction_Speed_In;                                 // 0x0314(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   SlidingFriction_Speed_Out;                                // 0x031C(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0324(0x0004) MISSED OFFSET
	class UCurveFloat*                                 MaxSpeedByTime;                                           // 0x0328(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinHomingDistance;                                        // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UnderwaterDrag;                                           // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UnderwaterBouyancy;                                       // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DragForce;                                                // 0x033C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSlidingFriction : 1;                                  // 0x0340(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAffectedUnderwater : 1;                                  // 0x0340(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7F];                                      // 0x0341(0x007F) MISSED OFFSET
	struct FProjMovementInitialState                   InitialState;                                             // 0x03C0(0x0018) (Net, Transient)
	struct FTslRepProjMovement                         MovementStep;                                             // 0x03D8(0x001C) (Net, Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class UPrimitiveComponent*                         UpdatedComponentCollisionProxy;                           // 0x03F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x280];                                     // 0x0400(0x0280) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectileMovementComponent"));

		return ptr;
	}


	void STATIC_ResetInterpolation();
	void STATIC_OnRep_Movement();
	void STATIC_OnRep_InitialState();
	void STATIC_Multi_StopSimulation(const struct FHitResult& Impact, uint16_t SimStep);
	void STATIC_Multi_MarkImportantUpdate(uint16_t SimStep);
	int STATIC_AdvanceSimulation(float DeltaTime);
};


// Class TslGame.TslThrowableItemProjectile
// 0x0138 (0x05A8 - 0x0470)
class ATslThrowableItemProjectile : public ADroppedItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0470(0x0008) MISSED OFFSET
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x0478(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x0480(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            InterpolationTargetComp;                                  // 0x0488(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslProjectileMovementComponent*             MovementComp;                                             // 0x0490(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	TArray<TEnumAsByte<ECollisionChannel>>             DisableCollisionAfterFirstImpact;                         // 0x0498(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UAkComponent*                                AkComp;                                                   // 0x04A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               InteractionBoxComp;                                       // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FThrowableItemProjectileSpawnParams         SpawnParams;                                              // 0x04B8(0x0038) (Net)
	int                                                FakeProjectileIndex;                                      // 0x04F0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET
	class UFakeProjectileComponent*                    FakeProjectileComponent;                                  // 0x04F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslThrowableItemProjectile*                 FakeProjectile;                                           // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      ImpactTemplate;                                           // 0x0508(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x98];                                      // 0x0510(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslThrowableItemProjectile"));

		return ptr;
	}


	void STATIC_OnSimulationStop(const struct FHitResult& ImpactResult);
	void STATIC_OnRep_SpawnParams();
	void STATIC_OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
};


// Class TslGame.TslItemRequestProjectile
// 0x0028 (0x05D0 - 0x05A8)
class ATslItemRequestProjectile : public ATslThrowableItemProjectile
{
public:
	bool                                               bFollowTarget;                                            // 0x05A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05A9(0x0003) MISSED OFFSET
	float                                              PickUpDistance;                                           // 0x05AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CatchAnticipationTime;                                    // 0x05B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PickUpAnimDistance;                                       // 0x05B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class ATslCharacter*                               Target;                                                   // 0x05B8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x05C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemRequestProjectile"));

		return ptr;
	}


	void STATIC_OnRep_Target();
};


// Class TslGame.TslProjectile_JerryCan
// 0x0018 (0x05C0 - 0x05A8)
class ATslProjectile_JerryCan : public ATslThrowableItemProjectile
{
public:
	class UClass*                                      PuddleContainerTemplate;                                  // 0x05A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DefaultLifespan;                                          // 0x05B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinLifespanAfterDamage;                                   // 0x05B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class ATslFuelPuddleContainer*                     PuddleContainer;                                          // 0x05B8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectile_JerryCan"));

		return ptr;
	}

};


// Class TslGame.TslDamageCauserInterface
// 0x0000 (0x0030 - 0x0030)
class UTslDamageCauserInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDamageCauserInterface"));

		return ptr;
	}

};


// Class TslGame.TslProjectile_MeleeWeapon
// 0x0148 (0x06F0 - 0x05A8)
class ATslProjectile_MeleeWeapon : public ATslThrowableItemProjectile
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET
	class UClass*                                      WeaponClass;                                              // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerCollisionRadius;                                    // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05BC(0x0004) MISSED OFFSET
	class UTexture*                                    DamageCauserIcon;                                         // 0x05C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageIconRatio;                                          // 0x05C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x05CC(0x0004) MISSED OFFSET
	class USphereComponent*                            PlayerCollisionSphere;                                    // 0x05D0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET
	class ATslCharacter*                               HitVictim;                                                // 0x05E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int16_t                                            StepsToSpeedUp;                                           // 0x05E8(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x106];                                     // 0x05EA(0x0106) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectile_MeleeWeapon"));

		return ptr;
	}


	void STATIC_Server_NotifyVehicleHit(const struct FHitResult& HitResult, int SimStep);
	void STATIC_Server_NotifyHit(const struct FHitResult& HitResult, int SimStep, const struct FVector& NewVelocity, float ImpactSpeed);
	void STATIC_OnServerCorrection(const struct FTslRepProjMovement& MovementStep);
	void STATIC_OnBouncePredicted(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void STATIC_Multi_CharacterHit(const struct FHitResult& Impact, const struct FVector& ImpactVelocity, bool bSpawnEffect);
};


// Class TslGame.DroppedItemGridManager
// 0x00B0 (0x0498 - 0x03E8)
class ADroppedItemGridManager : public AInfo
{
public:
	float                                              MaxGridSize;                                              // 0x03E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxGridLayerNum;                                          // 0x03EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxItemNumPerGroup;                                       // 0x03F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA4];                                      // 0x03F4(0x00A4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedItemGridManager"));

		return ptr;
	}

};


// Class TslGame.DroppedItemGroup
// 0x0010 (0x03F8 - 0x03E8)
class ADroppedItemGroup : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	float                                              RandomSpawnRadius;                                        // 0x03F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxRandomSpawnCount;                                      // 0x03F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedItemGroup"));

		return ptr;
	}


	void STATIC_OnItemEndPlay();
	void STATIC_OnItemBeginPlay();
	bool STATIC_AddItem(class UItem* NewItem, const struct FVector& NewWorldLocation, bool bCheckComplexCollision);
};


// Class TslGame.DroppedItemInterface
// 0x0000 (0x0030 - 0x0030)
class UDroppedItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedItemInterface"));

		return ptr;
	}

};


// Class TslGame.GeneralItemSpawner
// 0x0000 (0x0030 - 0x0030)
class UGeneralItemSpawner : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GeneralItemSpawner"));

		return ptr;
	}

};


// Class TslGame.DroppedPackageSpawnProcessor
// 0x0128 (0x0158 - 0x0030)
class UDroppedPackageSpawnProcessor : public UObject
{
public:
	float                                              TotalSpawnFromActorRate;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TotalSpawnFromComponentRate;                              // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FGeneralItemSpawnProb>               SpawnProbArray;                                           // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringAssetReference                       RawItemSpawnDataTableString;                              // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringAssetReference                       RawItemSpawnTogetherDataTableString;                      // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FStringClassReference                       ItemClass;                                                // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FItemTableSpawner                           TableSpawner;                                             // 0x0088(0x00B8)
	TArray<class UDroppedPackageSpotComponent*>        Spots;                                                    // 0x0140(0x0010) (ExportObject, ZeroConstructor, Transient)
	bool                                               bInitialized;                                             // 0x0150(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedPackageSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.DroppedPackageSpot
// 0x0008 (0x03F0 - 0x03E8)
class ADroppedPackageSpot : public AActor
{
public:
	class UDroppedPackageSpotComponent*                SpotComponent;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedPackageSpot"));

		return ptr;
	}

};


// Class TslGame.DroppedPackageSpotComponent
// 0x0000 (0x04B0 - 0x04B0)
class UDroppedPackageSpotComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedPackageSpotComponent"));

		return ptr;
	}


	void STATIC_ToggleVisibility(bool bPropagateToChildren);
	bool STATIC_SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void STATIC_SetWorldScale3D(const struct FVector& NewScale);
	void STATIC_SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void STATIC_SetRelativeScale3D(const struct FVector& NewScale3D);
	void STATIC_SetIsAttachmentReplicated(bool ShouldReplicate);
	void STATIC_SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void STATIC_SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void STATIC_SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void STATIC_ResetRelativeTransform();
	void STATIC_OnRep_Visibility(bool OldValue);
	void STATIC_OnRep_Transform();
	void STATIC_OnRep_AttachSocketName();
	void STATIC_OnRep_AttachParent();
	void STATIC_OnRep_AttachChildren();
	void STATIC_K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform STATIC_K2_GetComponentToWorld();
	struct FVector STATIC_K2_GetComponentScale();
	struct FRotator STATIC_K2_GetComponentRotation();
	struct FVector STATIC_K2_GetComponentLocation();
	void STATIC_K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify);
	bool STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool STATIC_K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsVisible();
	bool STATIC_IsSimulatingPhysics(const struct FName& BoneName);
	bool STATIC_IsAnySimulatingPhysics();
	struct FVector STATIC_GetUpVector();
	struct FTransform STATIC_GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator STATIC_GetSocketRotation(const struct FName& InSocketName);
	struct FQuat STATIC_GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector STATIC_GetSocketLocation(const struct FName& InSocketName);
	struct FVector STATIC_GetRightVector();
	struct FTransform STATIC_GetRelativeTransform();
	class APhysicsVolume* STATIC_GetPhysicsVolume();
	void STATIC_GetParentComponents(TArray<class USceneComponent*>* Parents);
	int STATIC_GetNumChildrenComponents();
	struct FVector STATIC_GetForwardVector();
	struct FVector STATIC_GetComponentVelocity();
	void STATIC_GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* STATIC_GetChildComponent(int ChildIndex);
	struct FName STATIC_GetAttachSocketName();
	class USceneComponent* STATIC_GetAttachParent();
	TArray<struct FName> STATIC_GetAllSocketNames();
	bool STATIC_DoesSocketExist(const struct FName& InSocketName);
	void STATIC_DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class TslGame.DynamicWeatherController
// 0x0078 (0x0460 - 0x03E8)
class ADynamicWeatherController : public AActor
{
public:
	TArray<struct FTslWeatherVolume>                   RegionalWeatherVolumes;                                   // 0x03E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	class ATslParticle*                                WeatherParticle;                                          // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class AExponentialHeightFog*                       HeightFog;                                                // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0408(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DynamicWeatherController"));

		return ptr;
	}

};


// Class TslGame.DynamicWeatherInterface
// 0x0000 (0x0030 - 0x0030)
class UDynamicWeatherInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DynamicWeatherInterface"));

		return ptr;
	}

};


// Class TslGame.EventItemSpawnProcessor
// 0x0050 (0x0080 - 0x0030)
class UEventItemSpawnProcessor : public UObject
{
public:
	TArray<struct FEventItemSpawnData>                 SpawnData;                                                // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FStringAssetReference                       RawEventItemPackageSpawnTableDataString;                  // 0x0040(0x0010) (Edit)
	class UDataTable*                                  RawEventItemPackageSpawnDataTable;                        // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInitialized;                                             // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x27];                                      // 0x0059(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.EventItemSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.ExportableDataAsset
// 0x0020 (0x0058 - 0x0038)
class UExportableDataAsset : public UDataAsset
{
public:
	struct FDirectoryPath                              JsonSaveDirectory;                                        // 0x0038(0x0010) (Edit)
	struct FString                                     JsonSaveFileName;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ExportableDataAsset"));

		return ptr;
	}

};


// Class TslGame.LobbyCustomizableData
// 0x0020 (0x0078 - 0x0058)
class ULobbyCustomizableData : public UExportableDataAsset
{
public:
	TArray<struct FLobbyFaceElement>                   Faces;                                                    // 0x0058(0x0010) (Edit, ZeroConstructor)
	TArray<struct FLobbyHairElement>                   Hairs;                                                    // 0x0068(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyCustomizableData"));

		return ptr;
	}

};


// Class TslGame.LobbyItemExporter
// 0x0010 (0x0068 - 0x0058)
class ULobbyItemExporter : public UExportableDataAsset
{
public:
	struct FString                                     LocJsonSaveFileName;                                      // 0x0058(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyItemExporter"));

		return ptr;
	}

};


// Class TslGame.LobbyWeaponExporter
// 0x0000 (0x0058 - 0x0058)
class ULobbyWeaponExporter : public UExportableDataAsset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyWeaponExporter"));

		return ptr;
	}

};


// Class TslGame.FakeProjectileComponent
// 0x0070 (0x0270 - 0x0200)
class UFakeProjectileComponent : public UActorComponent
{
public:
	bool                                               bStopSimulationOnImpact;                                  // 0x0200(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0201(0x0007) MISSED OFFSET
	class AActor*                                      FakeProjectile;                                           // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      MasterProjectile;                                         // 0x0210(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UProjectileMovementComponent*                FakeMovementComp;                                         // 0x0218(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UProjectileMovementComponent*                MasterMovementComp;                                       // 0x0220(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0228(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FakeProjectileComponent"));

		return ptr;
	}


	void STATIC_OnProjectileStopSim(const struct FHitResult& ImpactResult);
	void STATIC_OnImpact(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
};


// Class TslGame.FlashBangCaptureActor
// 0x0038 (0x0420 - 0x03E8)
class AFlashBangCaptureActor : public AActor
{
public:
	class USceneComponent*                             SceneRootComponent;                                       // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USceneCaptureComponent2D*                    SceneCapture;                                             // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class APawn*                                       PlayerPawnReference;                                      // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	class UTextureRenderTarget2D*                      CaptureTexture;                                           // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	int                                                TextureDownsampleMultiplier;                              // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x040C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FlashBangCaptureActor"));

		return ptr;
	}


	void STATIC_CaptureScreen();
	void STATIC_CaptureINIT(bool bDoDelay, float CaptureDelay, class APawn* PlayerRef, class UTextureRenderTarget2D* RenderTexture, const struct FPostProcessSettings& PP_Settings, bool bHidePawn);
};


// Class TslGame.TslPostProcessEffect
// 0x0088 (0x0470 - 0x03E8)
class ATslPostProcessEffect : public AActor
{
public:
	unsigned char                                      UseOnCamera : 1;                                          // 0x03E8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET
	struct FName                                       TargetPostProcessVolumeName;                              // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FPostProcessMaterial>                PostProcessMaterials;                                     // 0x03F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FPostProcessEffectParameter>         DefaultPostProcessEffectParameter;                        // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FPostProcessEffectDynamicMaterialState> PostProcessEffectDynamicMaterialStates;                   // 0x0418(0x0010) (ZeroConstructor, Transient)
	TArray<float>                                      PostProcessEffectDynamicMaterialOriginalBlendWeight;      // 0x0428(0x0010) (ZeroConstructor, Transient)
	TArray<class APostProcessVolume*>                  PostProcessVolumeList;                                    // 0x0438(0x0010) (ZeroConstructor, Transient)
	TArray<struct FPostProcessEffectParameter>         CurrentParameters;                                        // 0x0448(0x0010) (ZeroConstructor, Transient)
	int                                                UsingMeshCount;                                           // 0x0458(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsEnabled;                                               // 0x045C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x045D(0x000B) MISSED OFFSET
	class ATslPlayerCameraManager*                     TslCameraMgr;                                             // 0x0468(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPostProcessEffect"));

		return ptr;
	}


	bool STATIC_SetMaterialVectorParameter(int Idx, const struct FName& ParameterName, const struct FLinearColor& Value);
	bool STATIC_SetMaterialParameter(int Idx, const struct FName& ParameterName, float Value);
	bool STATIC_SetMaterialBlendWeight(int Idx, float Value);
	bool STATIC_SetEffectParameter(const struct FString& ParameterName, float Value);
	bool STATIC_SetDepthOfFieldFarBlurSize(float NewBlurSize);
	void STATIC_OnSetEffectParameter(const struct FString& ParameterName, float Value);
	float STATIC_GetEffectParameter(const struct FString& ParameterName, float DefaultValue);
	float STATIC_GetDepthOfFieldFarBlurSize();
};


// Class TslGame.FlashbangComponent
// 0x0080 (0x0280 - 0x0200)
class UFlashbangComponent : public UActorComponent
{
public:
	struct FExplosionTracer                            Tracer;                                                   // 0x0200(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<TEnumAsByte<EObjectTypeQuery>>              SphereQueryObjects;                                       // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<TEnumAsByte<ECollisionChannel>>             BlockQueryObjects;                                        // 0x0250(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       CharacterTraceSocket;                                     // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlashMaxAngle;                                            // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxApplyAngle;                                            // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DebuffClass;                                              // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0278(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FlashbangComponent"));

		return ptr;
	}


	void STATIC_InitializeCheck();
};


// Class TslGame.TslFBRFlashbangComponent_Paladin
// 0x0010 (0x0290 - 0x0280)
class UTslFBRFlashbangComponent_Paladin : public UFlashbangComponent
{
public:
	float                                              DebuffDuration;                                           // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0284(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRFlashbangComponent_Paladin"));

		return ptr;
	}


	void STATIC_InitializeCheck();
};


// Class TslGame.FlashbangDebuffCurve
// 0x0018 (0x0050 - 0x0038)
class UFlashbangDebuffCurve : public UCurveBase
{
public:
	class UEnum*                                       Enum;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FRichCurve>                          FloatCurves;                                              // 0x0040(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FlashbangDebuffCurve"));

		return ptr;
	}

};


// Class TslGame.FloatingVehicleAnimInstance
// 0x0050 (0x03F0 - 0x03A0)
class UFloatingVehicleAnimInstance : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A0(0x0010) MISSED OFFSET
	float                                              MapRangeClampedOutRangeA;                                 // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MapRangeClampedOutRangeB;                                 // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MultiplySteeringWheelRotYaw;                              // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    SteeringWheelRotMultiplier;                               // 0x03BC(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    RudderRot;                                                // 0x03C8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SteeringWheelRot;                                         // 0x03D4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    PropellerRot;                                             // 0x03E0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FloatingVehicleAnimInstance"));

		return ptr;
	}

};


// Class TslGame.FootprintController
// 0x0068 (0x0450 - 0x03E8)
class AFootprintController : public AActor
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                UpdateRateThresholdToUseAnimNotify;                       // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class UMaterialInterface*                          ManualDecalMaterial;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UPhysicalMaterial*>                   MaterialsToApply;                                         // 0x0400(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0410(0x0003) MISSED OFFSET
	bool                                               bUsePool;                                                 // 0x0413(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DecalLifeSpan;                                            // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   DecalSize;                                                // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ProjectionSweep;                                          // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                RenderPriority;                                           // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AInstancedDeferredDecalActor*                DecalActor;                                               // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class AInstancedDeferredDecalActor*                ManualDecalActor;                                         // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                NumErrorCreatingDecalActor;                               // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                NumErrorCreatingManualDecalActor;                         // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bLimitNumberOnSpot;                                       // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              LimitRadius;                                              // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LimitNum;                                                 // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x044C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FootprintController"));

		return ptr;
	}

};


// Class TslGame.FpsCountStatistics
// 0x0020 (0x0050 - 0x0030)
class UFpsCountStatistics : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FpsCountStatistics"));

		return ptr;
	}

};


// Class TslGame.FreefallAnimData
// 0x0048 (0x0080 - 0x0038)
class UFreefallAnimData : public UDataAsset
{
public:
	float                                              VerticalStabilizationIn;                                  // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VerticalStabilizationOut;                                 // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalStabilizationIn;                                // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalStabilizationOut;                               // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    LegsFreeMoveLimit;                                        // 0x0048(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    BodyFreeMoveLimit;                                        // 0x0054(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              StrafingYawLimit;                                         // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StrafingRollLimit;                                        // 0x0064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StrafingIn;                                               // 0x0068(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StrafingOut;                                              // 0x006C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PitchInterpolationSpeedDown;                              // 0x0070(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PitchInterpolationSpeedUp;                                // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdlePitchMax;                                             // 0x0078(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              YawInterpolationSpeed;                                    // 0x007C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FreefallAnimData"));

		return ptr;
	}

};


// Class TslGame.GameEventFluentdAdapter
// 0x0030 (0x0060 - 0x0030)
class UGameEventFluentdAdapter : public UObject
{
public:
	int                                                Port;                                                     // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	struct FString                                     Host;                                                     // 0x0038(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GameEventFluentdAdapter"));

		return ptr;
	}

};


// Class TslGame.TslTracerManager
// 0x0140 (0x0528 - 0x03E8)
class ATslTracerManager : public AActor
{
public:
	class UArrowComponent*                             ArrowComponent;                                           // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	TArray<class UParticleSystemComponent*>            ProjectileInstances;                                      // 0x0400(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0410(0x0010) MISSED OFFSET
	float                                              SimulationSubstepTime;                                    // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AmmoTimeout;                                              // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UParticleSystem*>                     TracerParticleArray;                                      // 0x0428(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystem*                             ShotGunParticleTemplate;                                  // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UParticleSystem*>                     ProjectileParticleArray;                                  // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystem*>                     MeleeParticleArray;                                       // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     ProjectileParticleColorRGB;                               // 0x0460(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x046C(0x0004) MISSED OFFSET
	TMap<EProjectileParticleClass, struct FVector>     ProjectileClassColorMap;                                  // 0x0470(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ColorParameterName;                                       // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMesh*                                 DefaultTracerMesh;                                        // 0x04C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          DefaultTracerMeshMaterial;                                // 0x04D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     DefaultTracerMeshScale;                                   // 0x04D8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	ETracerDisplayMode                                 DefaultBulletDisplayMode;                                 // 0x04E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04E5(0x0003) MISSED OFFSET
	int                                                DefaultBulletDisplayType;                                 // 0x04E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ETracerDisplayMode                                 DefaultProjectileDisplayMode;                             // 0x04EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04ED(0x0003) MISSED OFFSET
	int                                                DefaultProjectileDisplayType;                             // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentModeTypeIndex;                                     // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FTracerModeType>                     ModeTypeArray;                                            // 0x04F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              Color1Multiplier;                                         // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Color2Multiplier;                                         // 0x050C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TeamColor1ParameterName;                                  // 0x0510(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TeamColor2ParameterName;                                  // 0x0518(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GrenadeColorScalar;                                       // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0524(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTracerManager"));

		return ptr;
	}


	void STATIC_Multi_AddInstance(const struct FTracerSimulationServerData& InTracerData);
};


// Class TslGame.LoadingScreenDataTable
// 0x0000 (0x0088 - 0x0088)
class ULoadingScreenDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LoadingScreenDataTable"));

		return ptr;
	}

};


// Class TslGame.TslLoadingScreen
// 0x0120 (0x0510 - 0x03F0)
class UTslLoadingScreen : public UUmgBaseWidget
{
public:
	class UDataTable*                                  LoadingScreenDataTable_KeyGuide;                          // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  LoadingScreenDataTable;                                   // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<ELoadingScreenType, TAssetPtr<class UTexture2D>> DefaultBackgroundsByType;                                 // 0x0400(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      DefaultTipWidget;                                         // 0x0450(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<EUserRank, float>                             KeyGuideRatioMap;                                         // 0x0458(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FLoadingScreenTypePercentConfig             KeyGuideTypePercentConfig;                                // 0x04A8(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FElementaryRankGuidePercentConfig           ElementaryRankGuidePercentConfigForTextTip;               // 0x04E8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UBorder*                                     MainBorder;                                               // 0x0500(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0508(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLoadingScreen"));

		return ptr;
	}

};


// Class TslGame.HackReporterComponent
// 0x0290 (0x0490 - 0x0200)
class UHackReporterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x290];                                     // 0x0200(0x0290) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.HackReporterComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.TslSettings
// 0x0D68 (0x0D98 - 0x0030)
class UTslSettings : public UObject
{
public:
	int                                                ObserverNetSpeed;                                         // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               SupportedClientReplay;                                    // 0x0034(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               SupportedKillcam;                                         // 0x0035(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStartServerRecording;                                    // 0x0036(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	int                                                MK3DReplayVerNumForClient;                                // 0x0038(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ReportAvailableRecordDaysAgo;                             // 0x003C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxReplaysForNullStreamer;                                // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Item;                                         // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_NpcCharacter;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Freefall;                                     // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Door;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Window;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_CanBeDamagedItemGroup;                        // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistanceMinModifier;                                   // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Character;                                   // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_NpcCharacter;                                // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_WheeledVehicle;                              // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_FloatingVehicle;                             // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Parachute;                                   // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Aircraft;                                    // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_CarePackage;                                 // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_CanBeDamagedItemGroup;                       // 0x007C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Train;                                       // 0x0080(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TMap<unsigned char, float>                         CustomNetUpdateRateMap;                                   // 0x0088(0x0050) (Edit, ZeroConstructor, Config)
	float                                              DemoMaxRecordHz_Character;                                // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DemoMaxRecordHz_NpcCharacter;                             // 0x00DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DemoMaxRecordHz_WheeledVehicle;                           // 0x00E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DemoMaxRecordHz_FloatingVehicle;                          // 0x00E4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RepVehicle_SpawnDistance;                                 // 0x00E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepVehicle_UnspawnDistance;                               // 0x00EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FRigidBodyErrorCorrection                   RepVehicle_PhysicErrorCorrection;                         // 0x00F0(0x001C) (Edit, Config)
	float                                              CharacterCorrection_MaxSpeed;                             // 0x010C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterCorrection_MaxSpeedPositionError;                // 0x0110(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterCorrection_ZeroSpeedPositionError;               // 0x0114(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bBattlEyeEnabled;                                         // 0x0118(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bBattlEyeEnabledInPIE;                                    // 0x0119(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x011A(0x0002) MISSED OFFSET
	float                                              BattlEyeReliablePacketIntervalOnClient;                   // 0x011C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BattlEyeReliablePacketIntervalOnServer;                   // 0x0120(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTPEnabled;                                               // 0x0124(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTPEnabledInPIE;                                          // 0x0125(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTPLaFPSUpdateStatus;                                     // 0x0126(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0127(0x0001) MISSED OFFSET
	float                                              TPLaFPSUpdateStatusPeriodInMs;                            // 0x0128(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bChineseLicensing;                                        // 0x012C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseGappLobby;                                            // 0x012D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x012E(0x0002) MISSED OFFSET
	struct FString                                     GappLobbyUrl;                                             // 0x0130(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bKoreanRating;                                            // 0x0140(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bKakao;                                                   // 0x0141(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bKakaoTest;                                               // 0x0142(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsXenuineRunning;                                        // 0x0143(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GameStateLogInterval;                                     // 0x0144(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerStatLogInterval;                                    // 0x0148(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterPositionLogInterval;                             // 0x014C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DestructibleComponentMaxDrawDistance;                     // 0x0150(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	class UClass*                                      CharacterClassToPlay;                                     // 0x0158(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FBoneBinding>                        BoneMapping;                                              // 0x0160(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FStringAssetReference>               TestVehicleClasses;                                       // 0x0170(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FStringAssetReference>               TestFloatingVehicleClasses;                               // 0x0180(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FChineseLicensingDefaultCustomizeData> ChineseLicensingDefaultCustomizeData;                     // 0x0190(0x0010) (Edit, ZeroConstructor, Config)
	float                                              StoppedWheeledVehicleSpeedThreshold;                      // 0x01A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              StoppedFloatingVehicleSpeedThreshold;                     // 0x01A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LastDriverDuration;                                       // 0x01A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TMap<ESkinCategory, struct FStringAssetReference>  SkinDataTableSet;                                         // 0x01B0(0x0050) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       RestrictedSkinDataTable_Console;                          // 0x0200(0x0010) (Edit, Config)
	class UDataTable*                                  LoadedRestrictedSkinDB;                                   // 0x0210(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<ESkinCategory, class UDataTable*>             LoadedSkinDB;                                             // 0x0218(0x0050) (ZeroConstructor, Transient)
	TArray<struct FString>                             TestSkinClasses;                                          // 0x0268(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             TestVehicleSkinClasses;                                   // 0x0278(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bSupportedSkin;                                           // 0x0288(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0289(0x0007) MISSED OFFSET
	TMap<EMasteryItemType, struct FStringAssetReference> MasteryDataTableSet;                                      // 0x0290(0x0050) (Edit, ZeroConstructor, Config)
	float                                              InteractableDistanceToleranceOnDedicatedServer;           // 0x02E0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InteractableDistance_ItemDefault;                         // 0x02E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InteractableDistance_ItemProjectileDefault;               // 0x02E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InteractableSpeed_ItemDefault;                            // 0x02EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FInteractionCollisionData                   InteractionCollisionForFPS;                               // 0x02F0(0x0014) (Edit, Config)
	struct FInteractionCollisionData                   InteractionCollisionForTPS;                               // 0x0304(0x0014) (Edit, Config)
	class UClass*                                      TracerManagerClass;                                       // 0x0318(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeBetweenTracers;                                       // 0x0320(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableInitialItemDonator;                                // 0x0324(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0325(0x0003) MISSED OFFSET
	float                                              InventoryMaxSpaceDefault;                                 // 0x0328(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               OpenWaypoint;                                             // 0x032C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x032D(0x0003) MISSED OFFSET
	float                                              MaxDrawDistance_Item;                                     // 0x0330(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxDrawDistance_CanBeDamagedItem;                         // 0x0334(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	class UTexture*                                    ErrorIconTexture;                                         // 0x0338(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture*                                    LoadingIconTexture;                                       // 0x0340(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             AssetsForPackageIntegrity;                                // 0x0348(0x0010) (ZeroConstructor)
	float                                              UICrosshairDistance;                                      // 0x0358(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              UICrosshairInterpSpeed;                                   // 0x035C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              UICrosshairDisableDistance;                               // 0x0360(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BallisticDragScale;                                       // 0x0364(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BallisticDropScale;                                       // 0x0368(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BallisticMOAScale;                                        // 0x036C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RecoilControlScaleTotal;                                  // 0x0370(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RecoilControlScaleX;                                      // 0x0374(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RecoilControlScaleY;                                      // 0x0378(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ConsoleRecoilAlpha;                                       // 0x037C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RecoilAnimScale;                                          // 0x0380(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ForceTickPoseDistance_Weapon;                             // 0x0384(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GameTimeMultiplier;                                       // 0x0388(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               AimOffsetRayCast;                                         // 0x038C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x038D(0x0003) MISSED OFFSET
	float                                              MeleeWeaponPitchMin;                                      // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeWeaponPitchMax;                                      // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               EnableThrowLagCompensation;                               // 0x0398(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               FullRecoilRecovery;                                       // 0x0399(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x039A(0x0002) MISSED OFFSET
	struct FLevelLoadingBoostParameters                LevelLoadingBoostParameters;                              // 0x039C(0x0010) (Edit, Config)
	unsigned char                                      UnknownData12[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	TArray<struct FString>                             ErangelIgnoreWeatherIds;                                  // 0x03B0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             LevelNamesUsingSeperateGamma;                             // 0x03C0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FNearClippingValue>                  NearClippingValues;                                       // 0x03D0(0x0010) (ZeroConstructor, Config)
	TArray<struct FTslGame_FCustomizableCategoryData>  CustomizableCategoryData;                                 // 0x03E0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableActionName>             CustomizableActionNames;                                  // 0x03F0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslGame_FCustomizableAxisName>      CustomizableAxisNames;                                    // 0x0400(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableMouseSensitiveName>     CustomizableMouseSensitiveNames;                          // 0x0410(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FNamedFovRecord>                     NamedFovList;                                             // 0x0420(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableGamePadSensitiveName>   CustomizableGamePadSensitiveNames;                        // 0x0430(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSurportQualityLevel>                SupportedQualityLevels;                                   // 0x0440(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FScreenResolution>                   SupportedScreenResolutions;                               // 0x0450(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       MouseSensitivityCurve;                                    // 0x0460(0x0010) (Edit, Config)
	struct FStringAssetReference                       GammaCurve;                                               // 0x0470(0x0010) (Edit, Config)
	struct FStringAssetReference                       VibrationCurve;                                           // 0x0480(0x0010) (Edit, Config)
	struct FStringAssetReference                       DBNOEffectFadeOutCurve;                                   // 0x0490(0x0010) (Edit, Config)
	struct FStringAssetReference                       ReviveEffectCurve;                                        // 0x04A0(0x0010) (Edit, Config)
	struct FStringAssetReference                       PoisonGasWarningZoneAnimationCurve;                       // 0x04B0(0x0010) (Edit, Config)
	struct FStringAssetReference                       SpectateTargetViewRotationLerpSpeedCurve;                 // 0x04C0(0x0010) (Edit, Config)
	struct FStringAssetReference                       BluezoneInSoundAk;                                        // 0x04D0(0x0010) (Edit, Config)
	struct FStringAssetReference                       BluezoneOutSoundAk;                                       // 0x04E0(0x0010) (Edit, Config)
	struct FStringAssetReference                       BluezoneBuzzingSoundStartAk;                              // 0x04F0(0x0010) (Edit, Config)
	struct FStringAssetReference                       BluezoneBuzzingSoundStopAk;                               // 0x0500(0x0010) (Edit, Config)
	float                                              BluezoneBuzzingSoundDistance;                             // 0x0510(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	struct FStringAssetReference                       SharedVFXMatParamCollection;                              // 0x0518(0x0010) (Edit, Config)
	struct FAimAcceleration                            GamePadAimAcceleration;                                   // 0x0528(0x0008) (Edit, Config, IsPlainOldData)
	TArray<struct FColorBlindType>                     ColorBlindTypes;                                          // 0x0530(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPresetColor>                        CrosshairColors;                                          // 0x0540(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FReticleColors>                      ReticleColors;                                            // 0x0550(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FKeyInputModeName>                   KeyInputModeNames;                                        // 0x0560(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FUiType>                             MiniMapTypeList;                                          // 0x0570(0x0010) (Edit, ZeroConstructor, Config)
	float                                              MinimumScreenResolutionRatio;                             // 0x0580(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FScreenResolution                           MinimumScreenResolution;                                  // 0x0584(0x0008) (Edit, Config)
	unsigned char                                      UnknownData14[0x4];                                       // 0x058C(0x0004) MISSED OFFSET
	TArray<struct FTeamColorAndIcon>                   OverrideMarkerColorAndIcons;                              // 0x0590(0x0010) (Edit, ZeroConstructor, Config)
	struct FTeamColorAndIcon                           OverrideDefaultTeamMarkerColorAndIcons;                   // 0x05A0(0x0040) (Edit, Config)
	struct FTeamColorAndIcon                           OverrideZombieMarkerColorAndIcons;                        // 0x05E0(0x0040) (Edit, Config)
	struct FTeamColorAndIcon                           OverrideHumanMarkerColorAndIcons;                         // 0x0620(0x0040) (Edit, Config)
	struct FPlatoonCommanderColorAndIcon               OverrideMyPlatoonMarkerColorAndIcon;                      // 0x0660(0x0050) (Edit, Config)
	struct FPlatoonCommanderColorAndIcon               OverrideOtherPlatoonMarkerColorAndIcon;                   // 0x06B0(0x0050) (Edit, Config)
	float                                              PunchClientHitLeeway_Attacker;                            // 0x0700(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PunchClientHitLeeway_Victim;                              // 0x0704(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PunchClientHitLeeway_VictimInPlace;                       // 0x0708(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeClientHitLeeway_Attacker;                            // 0x070C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeClientHitLeeway_AttackerInPlace;                     // 0x0710(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeClientHitLeeway_Victim;                              // 0x0714(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeClientHitLeeway_VictimInPlace;                       // 0x0718(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeThrowClientHitLeeway_Victim;                         // 0x071C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeThrowClientHitLeeway_VictimInPlace;                  // 0x0720(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeThrowProjectileLeewayMultiplier;                     // 0x0724(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeThrowProjectileLeewayMultiplier_Log;                 // 0x0728(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideHitLeeway;                                      // 0x072C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideHitLeewayZ;                                     // 0x0730(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideHitLeewayInPlace;                               // 0x0734(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LogClientSideHitLeeway;                                   // 0x0738(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LogClientSideHitLeewayZ;                                  // 0x073C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideOriginDistanceLeeway;                           // 0x0740(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideOriginDistanceLeewayInPlace;                    // 0x0744(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TravelDistanceLeeway;                                     // 0x0748(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AllowedHitLag;                                            // 0x074C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LogMinHitLag;                                             // 0x0750(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              HackDetectionSpeed;                                       // 0x0754(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              HackDetectionSpeed_Crouch;                                // 0x0758(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              HackDetectionSpeed_Prone;                                 // 0x075C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InvalidRevivingMaxTime;                                   // 0x0760(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0764(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<ECheatType>, unsigned char>       CheatLogMaxCounts;                                        // 0x0768(0x0050) (Edit, ZeroConstructor, Config)
	float                                              ClientVehicleMoveIgnoreTime;                              // 0x07B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_TC_MaxKmPerHour;                                   // 0x07BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DistCheck_MinVehicleDistError;                            // 0x07C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DistCheck_VehicleSpeedWeight;                             // 0x07C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DistCheck_MinShooterDistError;                            // 0x07C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DistCheck_ShooterSpeedWeight;                             // 0x07CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_PL_Pitch;                                          // 0x07D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_PL_Duration;                                       // 0x07D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_PL_Distance;                                       // 0x07D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_PL_SweepFrequency;                                 // 0x07DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxIgnoreBulletSpeed;                                     // 0x07E0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxIgnoreVelocityHitDiatnce;                              // 0x07E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_HL_CellUnit;                                       // 0x07E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_HL_CellCheckTime;                                  // 0x07EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VHC_MG_HL_CellCheckHeight;                                // 0x07F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData16[0x14];                                      // 0x07F4(0x0014) MISSED OFFSET
	TArray<struct FOverrideScalability>                OverrideScalabilities;                                    // 0x0808(0x0010) (Edit, ZeroConstructor, Config)
	float                                              FakeDoorBlockMaxY;                                        // 0x0818(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x081C(0x0004) MISSED OFFSET
	TArray<struct FReportCauseData>                    ReportCauses;                                             // 0x0820(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSubjectToReport>                    SubjectToReport;                                          // 0x0830(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FReportDetailCauseTypeDescription>   ReportDetailCauseTypeDescriptions;                        // 0x0840(0x0010) (Edit, ZeroConstructor, Config)
	float                                              FreelookRecoveryInterpSpeed;                              // 0x0850(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0854(0x0004) MISSED OFFSET
	TMap<struct FName, float>                          GamepadSensitiveMultiplier;                               // 0x0858(0x0050) (Edit, ZeroConstructor, Config)
	float                                              GamePadInnerDeadZone;                                     // 0x08A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GamePadOutDeadZoneAcceleration;                           // 0x08AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GamePadOutMaxAxisValue;                                   // 0x08B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GamePadAccelerationStandardFps;                           // 0x08B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FTslGamepadKeyPreset>                GamepadKeyPresets;                                        // 0x08B8(0x0010) (Edit, ZeroConstructor, Config)
	TMap<EGamepadPresets, struct FTslGamepadKeyPreset> GamepadKeyPresetMaps;                                     // 0x08C8(0x0050) (ZeroConstructor)
	TArray<struct FTslGamepadActionKeyData>            GamePadPresetA_ActionKeys;                                // 0x0918(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslGamepadAxisKeyData>              GamePadPresetA_AxisKeys;                                  // 0x0928(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslGamepadActionKeyData>            GamePadPresetB_ActionKeys;                                // 0x0938(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslGamepadAxisKeyData>              GamePadPresetB_AxisKeys;                                  // 0x0948(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslGamepadActionKeyData>            GamePadPresetC_ActionKeys;                                // 0x0958(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslGamepadAxisKeyData>              GamePadPresetC_AxisKeys;                                  // 0x0968(0x0010) (Edit, ZeroConstructor, Config)
	float                                              AimAssistDecisionRadius;                                  // 0x0978(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bApplyInputValue;                                         // 0x097C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIgnorePadSensitive;                                      // 0x097D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData19[0x2];                                       // 0x097E(0x0002) MISSED OFFSET
	float                                              InsensitiveZone;                                          // 0x0980(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x0984(0x0004) MISSED OFFSET
	TArray<struct FAimAssistData>                      AimCameraAssists;                                         // 0x0988(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      ADSCameraAssists;                                         // 0x0998(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope2XCameraAssists;                                     // 0x09A8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope4XCameraAssists;                                     // 0x09B8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope8XCameraAssists;                                     // 0x09C8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope15XCameraAssists;                                    // 0x09D8(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       SoundPauseAllAk;                                          // 0x09E8(0x0010) (Edit, Config)
	struct FStringAssetReference                       SoundResumeAllAk;                                         // 0x09F8(0x0010) (Edit, Config)
	struct FStringAssetReference                       DuckingActiveAK;                                          // 0x0A08(0x0010) (Edit, Config)
	struct FStringAssetReference                       DuckingDeactiveAK;                                        // 0x0A18(0x0010) (Edit, Config)
	struct FStringAssetReference                       VolumeAdjustmentGuideStartAK;                             // 0x0A28(0x0010) (Edit, Config)
	struct FStringAssetReference                       VolumeAdjustmentGuideStopAK;                              // 0x0A38(0x0010) (Edit, Config)
	TArray<struct FSavedObPosMapConfig>                SavedObPosMapConfigs;                                     // 0x0A48(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               UseFollowParachute;                                       // 0x0A58(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0A59(0x0003) MISSED OFFSET
	float                                              HoldReleaseSecond;                                        // 0x0A5C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsESportsServer;                                         // 0x0A60(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData22[0xB];                                       // 0x0A61(0x000B) MISSED OFFSET
	float                                              RepDistance_Character;                                    // 0x0A6C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Character_Console;                            // 0x0A70(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Weapon;                                       // 0x0A74(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Weapon_Console;                               // 0x0A78(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Vehicle;                                      // 0x0A7C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Vehicle_Console;                              // 0x0A80(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Parachute;                                    // 0x0A84(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Parachute_Console;                            // 0x0A88(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Train;                                        // 0x0A8C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Train_Console;                                // 0x0A90(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVoiceChatEnabled;                                        // 0x0A94(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0A95(0x0003) MISSED OFFSET
	struct FStringAssetReference                       DialogUMGWidgetClassStringAssetReference;                 // 0x0A98(0x0010) (Edit, Config)
	struct FStringAssetReference                       LoadingScreenUMGWidgetClassStringAssetReference;          // 0x0AA8(0x0010) (Edit, Config)
	struct FStringAssetReference                       GamepadDebugHudStringAsssetReference;                     // 0x0AB8(0x0010) (Edit, Config)
	unsigned char                                      UnknownData24[0x50];                                      // 0x0AC8(0x0050) MISSED OFFSET
	class UCurveFloat*                                 LoadedMouseSensitivityCurve;                              // 0x0B18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedGammaCurve;                                         // 0x0B20(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedVibrationCurve;                                     // 0x0B28(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedDBNOEffectFadeOutCurve;                             // 0x0B30(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedReviveEffectCurve;                                  // 0x0B38(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedPoisonGasWarningZoneAnimationCurve;                 // 0x0B40(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedSpectateTargetViewRotationLerpSpeedCurve;           // 0x0B48(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedBluezoneInSoundAk;                                  // 0x0B50(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedBluezoneOutSoundAk;                                 // 0x0B58(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedBluezoneBuzzingSoundStartAk;                        // 0x0B60(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedBluezoneBuzzingSoundStopAk;                         // 0x0B68(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTextureRenderTarget2D*                      CharacterStudioRenderTarget;                              // 0x0B70(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  LoadedWeaponSkinDB;                                       // 0x0B78(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  LoadedParachuteSkinDB;                                    // 0x0B80(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedSoundPauseAllAk;                                    // 0x0B88(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedSoundResumeAllAk;                                   // 0x0B90(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedDuckingActiveAK;                                    // 0x0B98(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedDuckingDeactiveAK;                                  // 0x0BA0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedVolumeAdjustmentGuideStartAK;                       // 0x0BA8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               LoadedVolumeAdjustmentGuideStopAK;                        // 0x0BB0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialParameterCollection*                LoadedSharedVFXMatParamCollection;                        // 0x0BB8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<EMasteryItemType, class UDataTable*>          LoadedMasteryDB;                                          // 0x0BC0(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData25[0x50];                                      // 0x0C10(0x0050) MISSED OFFSET
	TArray<struct FAnimatableCustomizableObjectData>   AnimatableCustomizableDatas;                              // 0x0C60(0x0010) (Edit, ZeroConstructor, Config)
	TMap<struct FName, float>                          NotifyDistanceLimitMap;                                   // 0x0C70(0x0050) (Edit, ZeroConstructor)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Graphic;                                // 0x0CC0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Sound;                                  // 0x0CD0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Control;                                // 0x0CE0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Gameplay;                               // 0x0CF0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FGamepadReportStepperDesc>           GamepadReportList_Main;                                   // 0x0D00(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bTestShowAllOption;                                       // 0x0D10(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x7];                                       // 0x0D11(0x0007) MISSED OFFSET
	TArray<struct FName>                               TslFontStyles;                                            // 0x0D18(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FLinearColor>                        TeamColors;                                               // 0x0D28(0x0010) (Edit, ZeroConstructor, Config)
	struct FLinearColor                                SoloColor;                                                // 0x0D38(0x0010) (Edit, Config, IsPlainOldData)
	TArray<struct FTeamColorAndName>                   TwoTeamGameTeamColors;                                    // 0x0D48(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTslKeyIconData>                     KeyIconDataArray;                                         // 0x0D58(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FTextureAndRatio>                    ModifierKeyIconDataArray;                                 // 0x0D68(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       OverrideDieAnimDB;                                        // 0x0D78(0x0010) (Edit, Config)
	EPreviewPlatformIconType                           PreviewPlatformIconType;                                  // 0x0D88(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0xF];                                       // 0x0D89(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSettings"));

		return ptr;
	}


	void STATIC_SetCharacterStudioRenderTarget(class UTextureRenderTarget2D* rt);
	bool STATIC_IsXenuineRunning();
	bool STATIC_IsVoiceChatEnabled();
	bool STATIC_IsUsingGappLobby();
	bool STATIC_IsForKoreanRating();
	bool STATIC_IsForKakaoTest();
	bool STATIC_IsForKakao();
	bool STATIC_IsForChineseLicensing();
	bool STATIC_IsESportsServer();
	bool STATIC_IsEACRunning();
	bool STATIC_IsBERunning();
	class UTslSettings* STATIC_GetTslSettings();
	float STATIC_GetRepDistanceModifier();
	float STATIC_GetNotifyMaxDistanceByName(const struct FName& InName);
	struct FString STATIC_GetGappLobbyUrl();
	class UTextureRenderTarget2D* STATIC_GetCharacterStudioRenderTarget();
};


// Class TslGame.VivoxResponse
// 0x0070 (0x00A0 - 0x0030)
class UVivoxResponse : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0030(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VivoxResponse"));

		return ptr;
	}

};


// Class TslGame.SignInResponse
// 0x0030 (0x00D0 - 0x00A0)
class USignInResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00A0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SignInResponse"));

		return ptr;
	}

};


// Class TslGame.ChannelResponse
// 0x0050 (0x00F0 - 0x00A0)
class UChannelResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ChannelResponse"));

		return ptr;
	}

};


// Class TslGame.KeyRevokeResponse
// 0x0020 (0x00C0 - 0x00A0)
class UKeyRevokeResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.KeyRevokeResponse"));

		return ptr;
	}

};


// Class TslGame.KeyAddResponse
// 0x0030 (0x00D0 - 0x00A0)
class UKeyAddResponse : public UVivoxResponse
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00A0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.KeyAddResponse"));

		return ptr;
	}

};


// Class TslGame.VoiceBaseComponent
// 0x0290 (0x0490 - 0x0200)
class UVoiceBaseComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0200(0x00D8) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParticipantMuteChanged;                                 // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticipantRestrictionChanged;                          // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVoiceChatUpdated;                                       // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMicVuMeterUpdated;                                      // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOperatingSystemChosenAudioInputDeviceChanged;           // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	struct FVoiceConnectionInfo                        ConnectionInfo;                                           // 0x0330(0x0068) (Net)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	struct FString                                     TeamChannelUrl;                                           // 0x03A0(0x0010) (Net, ZeroConstructor)
	struct FString                                     GlobalChannelUrl;                                         // 0x03B0(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x03C0(0x001C) MISSED OFFSET
	float                                              ResetFailureDelaySeconds;                                 // 0x03DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x03E0(0x0018) MISSED OFFSET
	float                                              UpdatePositionIntervalSeconds;                            // 0x03F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x03FC(0x000C) MISSED OFFSET
	float                                              UserInputVolumeModifier;                                  // 0x0408(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              UserOutputVolumeModifier;                                 // 0x040C(0x0004) (ZeroConstructor, IsPlainOldData)
	TMap<struct FString, float>                        TeamMemberVolumeModifierMap;                              // 0x0410(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x30];                                      // 0x0460(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VoiceBaseComponent"));

		return ptr;
	}


	void STATIC_UpdatePosition();
	void STATIC_StopAudioInputCapture();
	void STATIC_StartAudioInputCapture(bool bLoopback);
	void STATIC_SetVoiceChannelType(EVoiceChannelType ChannelType);
	void STATIC_SetParticipantVolume(const struct FString& TargetUniqueId, int Volume);
	bool STATIC_SetParticipantMute(const struct FString& TargetUniqueId, bool bIsMuted);
	void STATIC_SetLocalVoiceOutputVolume(int UserSettingVolume);
	void STATIC_SetLocalVoiceOutputMuted(bool bIsMuted);
	void STATIC_SetLocalVoiceInputVolume(int UserSettingVolume);
	void STATIC_SetLocalVoiceInputMuted(bool bIsMuted);
	void STATIC_ServerLogin();
	void STATIC_ServerJoinTeamChannel();
	void STATIC_ServerJoinGlobalChannel();
	void STATIC_ResetTeamChannelJoinState();
	void STATIC_ResetLoginState();
	void STATIC_ResetGlobalChannelJoinState();
	void STATIC_ResetConnectionState();
	void STATIC_RefreshDevices();
	bool STATIC_IsParticipantMuted(const struct FString& TargetUniqueId);
	bool STATIC_IsCapturingAudioInput();
	EVoiceChannelType STATIC_GetVoiceChannelType();
	int STATIC_GetParticipantVolume(const struct FString& TargetUniqueId);
	float STATIC_GetLocalVoiceOutputVolume();
	bool STATIC_GetLocalVoiceOutputMuted();
	float STATIC_GetLocalVoiceInputVolume();
	bool STATIC_GetLocalVoiceInputMuted();
	void STATIC_ClientLogin(const struct FString& AccessToken);
	void STATIC_ClientLeaveTeamChannel();
	void STATIC_ClientLeaveGlobalChannel();
	void STATIC_ClientJoinTeamChannel(const struct FString& AccessToken);
	void STATIC_ClientJoinGlobalChannel(const struct FString& AccessToken);
	float STATIC_CalculateOutputVolumeFromModifiers();
	float STATIC_CalculateInputVolumeFromModifiers();
};


// Class TslGame.ReticleSettings
// 0x0030 (0x0068 - 0x0038)
class UReticleSettings : public UDataAsset
{
public:
	float                                              ReticleAngularSize;                                       // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ReticleCenter;                                            // 0x003C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	class UTexture2D*                                  ReticleTexture;                                           // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseReticleTextureOverride;                               // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	TArray<struct FReticleTextureData>                 ReticleTextureDataArray;                                  // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReticleSettings"));

		return ptr;
	}

};


// Class TslGame.AttachableItem
// 0x0348 (0x0688 - 0x0340)
class UAttachableItem : public UItem
{
public:
	struct FWeaponAttachmentData                       AttachmentData;                                           // 0x0340(0x0278) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UStaticMesh>                       AttachmentMeshAsset;                                      // 0x05B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FName                                       AttachmentMeshName;                                       // 0x05D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FWeaponAttachmentWeaponTagData>      AttachmentWeaponTagData;                                  // 0x05E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x05F0(0x0050) MISSED OFFSET
	class UClass*                                      AttachmentTemplate;                                       // 0x0640(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EquipOnPickUp;                                            // 0x0648(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0649(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               AttachedSoundAk;                                          // 0x0650(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UAkAudioEvent>                     AttachSoundPtr;                                           // 0x0658(0x0020)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0678(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AttachableItem"));

		return ptr;
	}


	EWeaponAttachmentSlotID STATIC_GetAttachmentSlotID(const struct FName& WeaponTag);
	struct FWeaponAttachmentData STATIC_GetAttachmentData(const struct FName& WeaponTag);
};


// Class TslGame.TslGameUserSettings
// 0x0710 (0x0820 - 0x0110)
class UTslGameUserSettings : public UGameUserSettings
{
public:
	float                                              ScreenScale;                                              // 0x0110(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	EFrameRateLimitType                                LobbyFrameRateLimitType;                                  // 0x0114(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFrameRateLimitType                                InGameFrameRateLimitType;                                 // 0x0115(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0116(0x0002) MISSED OFFSET
	float                                              InGameCustomFrameRateLimit;                               // 0x0118(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseInGameSmoothedFrameRate;                              // 0x011C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsLanMatch;                                              // 0x011D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsMasterSoundMute;                                       // 0x011E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x011F(0x0001) MISSED OFFSET
	float                                              MasterSoundVolume;                                        // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEffectSoundMute;                                       // 0x0124(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	float                                              EffectSoundVolume;                                        // 0x0128(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsUISoundMute;                                           // 0x012C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	float                                              UISoundVolume;                                            // 0x0130(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              BGMSoundVolume;                                           // 0x0134(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsVoiceInputMute;                                        // 0x0138(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsVoiceOutputMute;                                       // 0x0139(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x013A(0x0002) MISSED OFFSET
	int                                                VoiceInputVolume;                                         // 0x013C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                VoiceOutputVolume;                                        // 0x0140(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUsePushToTalk;                                           // 0x0144(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseGlobalVoice;                                          // 0x0145(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseTeamVoice;                                            // 0x0146(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSavedGraphicOption;                                      // 0x0147(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNvidiaDLSS;                                              // 0x0148(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bMotionBlur;                                              // 0x0149(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSharpen;                                                 // 0x014A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x5];                                       // 0x014B(0x0005) MISSED OFFSET
	struct FString                                     CultureName;                                              // 0x0150(0x0010) (ZeroConstructor, Config)
	struct FString                                     LastCultureName;                                          // 0x0160(0x0010) (ZeroConstructor, Config)
	int                                                SelectMiniMapIndex;                                       // 0x0170(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	ETppAimCameraPosition                              TppAimCamPosRecoveryType;                                 // 0x0174(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoReloadOnOutOfAmmoFire;                               // 0x0175(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFiringMode                                        HGsFiringMode;                                            // 0x0176(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFiringMode                                        SMGsFiringMode;                                           // 0x0177(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFiringMode                                        ARsFiringMode;                                            // 0x0178(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFiringMode                                        DMRsFiringMode;                                           // 0x0179(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFiringMode                                        SecondarySMGsFiringMode;                                  // 0x017A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EFiringMode                                        SecondaryARsFiringMode;                                   // 0x017B(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               IsClanNameDisplay;                                        // 0x017C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	struct FString                                     CrosshairColorString;                                     // 0x0180(0x0010) (ZeroConstructor, Config)
	struct FColor                                      CustomReticleColor;                                       // 0x0190(0x0004) (Config, IsPlainOldData)
	EMinimapColorType                                  MinimapColorType;                                         // 0x0194(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0195(0x0003) MISSED OFFSET
	TArray<struct FName>                               GearProfile1;                                             // 0x0198(0x0010) (ZeroConstructor, Config)
	TArray<struct FName>                               GearProfile2;                                             // 0x01A8(0x0010) (ZeroConstructor, Config)
	TMap<struct FName, int>                            DefaultReticleMap;                                        // 0x01B8(0x0050) (ZeroConstructor, Config)
	TMap<struct FName, float>                          DefaultReticleBrightnessMap;                              // 0x0208(0x0050) (ZeroConstructor, Config)
	EUiShowType                                        FppWeaponIconShowType;                                    // 0x0258(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EUiShowType                                        TpsWeaponIconShowType;                                    // 0x0259(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EUiShowType                                        FppEquipableItemIconShowType;                             // 0x025A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseCharacterCapture;                                     // 0x025B(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WorldMapZoomSpeedLevel;                                   // 0x025C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableMinimapViewScale;                                  // 0x0260(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowNetworkInfo;                                         // 0x0261(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bHideNicknameOnKillfeed;                                  // 0x0262(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bHideWeaponMasteryOnKillfeed;                             // 0x0263(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowCompassShade;                                        // 0x0264(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowTracerDisplay;                                       // 0x0265(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseTracerTeamColor;                                      // 0x0266(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x0267(0x0001) MISSED OFFSET
	int                                                KillMessageListSizeLimit;                                 // 0x0268(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowKeyHintWidget;                                       // 0x026C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseInteracionXRay;                                       // 0x026D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseNewDropItemEffects;                                   // 0x026E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bHasKeySettingsChanged;                                   // 0x026F(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeCrouch;                                          // 0x0270(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeProne;                                           // 0x0271(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeWalk;                                            // 0x0272(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     bToggleSprint;                                            // 0x0273(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeHoldRotation;                                    // 0x0274(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeHoldBreath;                                      // 0x0275(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeHoldAngled;                                      // 0x0276(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModePeek;                                            // 0x0277(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeMap;                                             // 0x0278(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeADS;                                             // 0x0279(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeAim;                                             // 0x027A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEditorApplyOverrideScalability;                          // 0x027B(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseFreeLookInterp;                                       // 0x027C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseClientReplay;                                         // 0x027D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseKillCam;                                              // 0x027E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseReplayKeyGuide;                                       // 0x027F(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bPreloadingMap;                                           // 0x0280(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0281(0x0007) MISSED OFFSET
	TArray<struct FString>                             ErangelPreloadingMaps;                                    // 0x0288(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             MiramarPreloadingMaps;                                    // 0x0298(0x0010) (ZeroConstructor, Config)
	struct FFloatCurve                                 ObserverLagCompensationAdjustmentCurve1;                  // 0x02A8(0x0090) (Config)
	struct FFloatCurve                                 ReplayLagCompensationAdjustmentCurve;                     // 0x0338(0x0090) (Config)
	struct FScriptMulticastDelegate                    OnGameUserSettingApplied;                                 // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTslPersistantData                          TslPersistantData;                                        // 0x03D8(0x01A0) (Config)
	struct FCustomInputSettings                        CustomInputSettins;                                       // 0x0578(0x00D8) (Config)
	bool                                               bIsBGMSoundMute;                                          // 0x0650(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEnabledHrtfRemoteWeaponSound;                          // 0x0651(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x0652(0x0002) MISSED OFFSET
	float                                              FpsCameraFov;                                             // 0x0654(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              Gamma;                                                    // 0x0658(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x065C(0x0004) MISSED OFFSET
	TMap<struct FString, float>                        GammasForMap;                                             // 0x0660(0x0050) (ZeroConstructor, Config)
	int                                                ColorBlindType;                                           // 0x06B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	struct FColor                                      CustomCrosshairColor;                                     // 0x06B4(0x0004) (Config, IsPlainOldData)
	bool                                               bUseForceFeedback;                                        // 0x06B8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x06B9(0x0003) MISSED OFFSET
	float                                              ForceFeedbackMultiplier;                                  // 0x06BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIconKillfeedEnabled;                                     // 0x06C0(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EGamepadPresets                                    GamepadPresetType;                                        // 0x06C1(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseKeyHint;                                              // 0x06C2(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableUniversalGamma;                                    // 0x06C3(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoEquipAttachmentByInteraction;                        // 0x06C4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoEquipAttachmentFromInventory;                        // 0x06C5(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoEquipAttachmentByDrag;                               // 0x06C6(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoReplaceAttachment;                                   // 0x06C7(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FOutgameUserData>                    OutgameUserDatas;                                         // 0x06C8(0x0010) (ZeroConstructor, Config)
	struct FTslOutGameCloudOptionData                  OutGameCloudOptionData;                                   // 0x06D8(0x0148) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameUserSettings"));

		return ptr;
	}


	ERadioMessagePresets STATIC_GetRadioMessagePreset();
};


// Class TslGame.TslGameOption
// 0x0000 (0x0030 - 0x0030)
class UTslGameOption : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOption"));

		return ptr;
	}

};


// Class TslGame.TslGameInstance
// 0x1550 (0x1710 - 0x01C0)
class UTslGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x01C0(0x0038) MISSED OFFSET
	TArray<struct FString>                             PersistentUClassPaths;                                    // 0x01F8(0x0010) (ZeroConstructor, Transient, Config)
	TArray<class UClass*>                              PersistentUClasses;                                       // 0x0208(0x0010) (ZeroConstructor, Transient)
	struct FString                                     WelcomeScreenMap;                                         // 0x0218(0x0010) (ZeroConstructor, Config)
	bool                                               bUseLobbyWidget;                                          // 0x0228(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	int                                                LobbyWidgetZOrder;                                        // 0x022C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class ULobbyLink*                                  LobbyLink;                                                // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UVoiceManager*                               VoiceManager;                                             // 0x0238(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UReporterManager*                            ReporterManager;                                          // 0x0240(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             BlockedUserAccountIds;                                    // 0x0248(0x0010) (ZeroConstructor, Transient)
	struct FTslStartParameter                          StartParamter;                                            // 0x0258(0x0098)
	unsigned char                                      UnknownData02[0x270];                                     // 0x02F0(0x0270) MISSED OFFSET
	struct FStringAssetReference                       LobbyWidgetClassName;                                     // 0x0560(0x0010)
	unsigned char                                      UnknownData03[0x198];                                     // 0x0570(0x0198) MISSED OFFSET
	class ULobbyWidget*                                LobbyWidget;                                              // 0x0708(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC0];                                      // 0x0710(0x00C0) MISSED OFFSET
	TArray<struct FReplayKillEventItem>                ReplayKillEventItems;                                     // 0x07D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayKillEventsDone;                          // 0x07E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0xA0];                                      // 0x07F0(0x00A0) MISSED OFFSET
	TArray<struct FReplayGroggyEventItem>              ReplayGroggyEventItems;                                   // 0x0890(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayGroggyEventsDone;                        // 0x08A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0xA0];                                      // 0x08B0(0x00A0) MISSED OFFSET
	TArray<struct FReplayEtceteraEventItem>            ReplayEtceteraEventItems;                                 // 0x0950(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayEtceteraEventsDone;                      // 0x0960(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x50];                                      // 0x0970(0x0050) MISSED OFFSET
	TArray<struct FTslReplayOvercast>                  TslReplayOvercastArr;                                     // 0x09C0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayOvercastEventsDone;                      // 0x09D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0xC0];                                      // 0x09E0(0x00C0) MISSED OFFSET
	TArray<struct FTslReplayCustomFog>                 TslReplayCustomFogArr;                                    // 0x0AA0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayCustomFogEventsDone;                     // 0x0AB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x50];                                      // 0x0AC0(0x0050) MISSED OFFSET
	TArray<struct FReplayCameraEventItem>              ReplayCameraEventItems;                                   // 0x0B10(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FReplayCameraEventItem>              CurDataSetReplayCameraEventItems;                         // 0x0B20(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayCameraEventsDone;                        // 0x0B30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0xA0];                                      // 0x0B40(0x00A0) MISSED OFFSET
	TArray<struct FReplayRecordTargetEventItem>        ReplayRecordTargetEventItems;                             // 0x0BE0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnumerateReplayRecordTargetEventsDone;                  // 0x0BF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsLoadRecordTargetEvent;                                  // 0x0C00(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnablePlayHighlight;                                     // 0x0C01(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bChangeableHighlightBeginEndTime;                         // 0x0C02(0x0001) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableHighlightExport;                                   // 0x0C03(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableHighlightShortcut;                                 // 0x0C04(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bHighlightPlaying;                                        // 0x0C05(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHighlightFadeOut;                                        // 0x0C06(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShowHighlightKeyGuide;                                   // 0x0C07(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowHighlightTopWidget;                                  // 0x0C08(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSmoothNextEvent;                                         // 0x0C09(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowLastSurvivorMatchResult;                             // 0x0C0A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRenderingForHighlightExport;                             // 0x0C0B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHighlightOnlyView;                                       // 0x0C0C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOneViewResult;                                           // 0x0C0D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHighlightFirstEvent;                                     // 0x0C0E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x0C0F(0x0001) MISSED OFFSET
	struct FString                                     HighlightTargetName;                                      // 0x0C10(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                HighlightEventTotalCount;                                 // 0x0C20(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HighlightEventCurrentNum;                                 // 0x0C24(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HighlightEventTimeBefore;                                 // 0x0C28(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                HighlightEventTimeAfter;                                  // 0x0C2C(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeBackBeforeHighlight;                                  // 0x0C30(0x0004) (BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0C34(0x0004) MISSED OFFSET
	struct FString                                     TimeBackTargetName;                                       // 0x0C38(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FTslKillcamMetadata                         HighlightMetadata;                                        // 0x0C48(0x00B8)
	int                                                HighlightIndex;                                           // 0x0D00(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentEventIndexTimeInfo;                                // 0x0D04(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsHighlightIndexPlayable;                                 // 0x0D08(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsPlaybackHighlightMode;                                  // 0x0D09(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsActivateHighlight;                                      // 0x0D0A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x5];                                       // 0x0D0B(0x0005) MISSED OFFSET
	struct FString                                     HighlightLocalPlayerName;                                 // 0x0D10(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     HighlightLocalPlayerNetId;                                // 0x0D20(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     HighlightPlayerName;                                      // 0x0D30(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     HighlightPlayerNetId;                                     // 0x0D40(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              PercentageToValue;                                        // 0x0D50(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x0D54(0x0004) MISSED OFFSET
	TArray<struct FReplayKillEventItem>                ReplayHighlightEventItems;                                // 0x0D58(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData15[0x10];                                      // 0x0D68(0x0010) MISSED OFFSET
	TArray<struct FReplayItem>                         ReplayItemList;                                           // 0x0D78(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData16[0x38];                                      // 0x0D88(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGetReplayListDone;                                      // 0x0DC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGotoTimelineDone;                                       // 0x0DD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRecordStarted;                                          // 0x0DE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReplayProblem;                                          // 0x0DF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownloadZippedReplayProgressDelegate;                   // 0x0E00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownloadZippedReplayCompleteDelegate;                   // 0x0E10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData17[0xC0];                                      // 0x0E20(0x00C0) MISSED OFFSET
	int                                                MaxReplaysForNullStreamer;                                // 0x0EE0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumReplaysForNullStreamer;                                // 0x0EE4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumReplaysToKeepForNullStreamer;                          // 0x0EE8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0EEC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKeepAndDeleteOldestReplaysDoneDelegate;                 // 0x0EF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x10];                                      // 0x0F00(0x0010) MISSED OFFSET
	class UGameEventObserver*                          GameEventObserver;                                        // 0x0F10(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UGameEventFluentdAdapter*                    GameEventFluentdAdapter;                                  // 0x0F18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x28];                                      // 0x0F20(0x0028) MISSED OFFSET
	struct FString                                     SelectedWeatherLevel;                                     // 0x0F48(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData21[0x90];                                      // 0x0F58(0x0090) MISSED OFFSET
	struct FTslReplaySummary                           ReplaySummaryForPlayback;                                 // 0x0FE8(0x0090) (BlueprintVisible, BlueprintReadOnly)
	struct FScriptMulticastDelegate                    OnGetReplaySummaryDone;                                   // 0x1078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsStartedFromReplayListMap;                              // 0x1088(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x7];                                       // 0x1089(0x0007) MISSED OFFSET
	class ATslPlayerState*                             CachedDemoPlayerState;                                    // 0x1090(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData23[0xA8];                                      // 0x1098(0x00A8) MISSED OFFSET
	EReadyToPlayState                                  EReadyToPlayState;                                        // 0x1140(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData24[0xF7];                                      // 0x1141(0x00F7) MISSED OFFSET
	class UHighlightSession*                           HighlightSession;                                         // 0x1238(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0xE8];                                      // 0x1240(0x00E8) MISSED OFFSET
	class UKakaoSessionClientChecker*                  KakaoSessionClientProcessChecker;                         // 0x1328(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UFpsCountStatistics*                         FpsCountStatstics;                                        // 0x1330(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData26[0x28];                                      // 0x1338(0x0028) MISSED OFFSET
	TMap<int, struct FTeamInfo>                        TeamInfoMap;                                              // 0x1360(0x0050) (ZeroConstructor, Transient)
	TMap<struct FString, struct FPlayerStatInfo>       PlayerStatInfoMap;                                        // 0x13B0(0x0050) (ZeroConstructor, Transient)
	TArray<struct FPointInfo>                          PointInfos;                                               // 0x1400(0x0010) (ZeroConstructor, Transient)
	int                                                KillPoint;                                                // 0x1410(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0x55];                                      // 0x1414(0x0055) MISSED OFFSET
	bool                                               bLoadedPersonalGameUserSettings;                          // 0x1469(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData28[0x1E];                                      // 0x146A(0x001E) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSetOvercastWeights;                                     // 0x1488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetOvercastDurations;                                   // 0x1498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FString>                             PathWhitelistKeywords;                                    // 0x14A8(0x0010) (ZeroConstructor, Config)
	float                                              MinValFov;                                                // 0x14B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValFov;                                                // 0x14BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofFocalRegion;                                     // 0x14C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofFocalRegion;                                     // 0x14C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofFocalDistance;                                   // 0x14C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofFocalDistance;                                   // 0x14CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValBloomIntensity;                                     // 0x14D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValBloomIntensity;                                     // 0x14D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValVignetteIntensity;                                  // 0x14D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValVignetteIntensity;                                  // 0x14DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValAngle;                                          // 0x14E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValAngle;                                              // 0x14E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValAngle;                                              // 0x14E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValColorGradingLUTIntensity;                           // 0x14EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValColorGradingLUTIntensity;                           // 0x14F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValDofNearTransitionRegion;                        // 0x14F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofNearTransitionRegion;                            // 0x14F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofNearTransitionRegion;                            // 0x14FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValDofFarTransitionRegion;                         // 0x1500(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofFarTransitionRegion;                             // 0x1504(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofFarTransitionRegion;                             // 0x1508(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValDofBokehScale;                                  // 0x150C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofBokehScale;                                      // 0x1510(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofBokehScale;                                      // 0x1514(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValDofBokehMaxSize;                                // 0x1518(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofBokehMaxSize;                                    // 0x151C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofBokehMaxSize;                                    // 0x1520(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValDofGaussianNearBlurSize;                        // 0x1524(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofGaussianNearBlurSize;                            // 0x1528(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofGaussianNearBlurSize;                            // 0x152C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValDofGaussianFarBlurSize;                         // 0x1530(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinValDofGaussianFarBlurSize;                             // 0x1534(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValDofGaussianFarBlurSize;                             // 0x1538(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0xC];                                       // 0x153C(0x000C) MISSED OFFSET
	TArray<struct FTslMissionInLobby>                  MissionProgressData;                                      // 0x1548(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData30[0x8];                                       // 0x1558(0x0008) MISSED OFFSET
	class URichPresenceManager*                        RichPresenceManager;                                      // 0x1560(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<TScriptInterface<class URichPresenceObserverInterface>> RichPresence;                                             // 0x1568(0x0010) (ZeroConstructor, Transient)
	class UPacketWatcher*                              PacketWatcher;                                            // 0x1578(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     SelectedModeNameInLobby;                                  // 0x1580(0x0010) (ZeroConstructor, Transient)
	class ALevelAttribute*                             LevelAttributeForReplaying;                               // 0x1590(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     LogServerUrl;                                             // 0x1598(0x0010) (ZeroConstructor, Config)
	float                                              LoggingProbability;                                       // 0x15A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIgnoreSuccessLog;                                        // 0x15AC(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData31[0x3];                                       // 0x15AD(0x0003) MISSED OFFSET
	int                                                LogCooltimeForSameFunction;                               // 0x15B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData32[0x4];                                       // 0x15B4(0x0004) MISSED OFFSET
	TArray<struct FQualityLevelInfo>                   CacheQualityLevelInfo;                                    // 0x15B8(0x0010) (ZeroConstructor, Transient)
	struct FTslWeatherLevelVolumetricFogSetting        VFSetting;                                                // 0x15C8(0x0010) (Transient)
	unsigned char                                      UnknownData33[0x8];                                       // 0x15D8(0x0008) MISSED OFFSET
	TArray<struct FTslOutGameLog>                      OutGameLogs;                                              // 0x15E0(0x0010) (ZeroConstructor)
	class UDieAnimDB*                                  CachedDieAnimDB;                                          // 0x15F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData34[0x118];                                     // 0x15F8(0x0118) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameInstance"));

		return ptr;
	}


	bool STATIC_UseLobbyWidget();
	bool STATIC_UpdateReplayShouldKeepBP(const struct FString& RegionOrLocal, const struct FString& SessionName, bool bShouldKeep);
	bool STATIC_UpdateReplayAllDeadOrWinBP(const struct FString& RegionOrLocal, const struct FString& SessionName, bool bAllDeadOrWin);
	bool STATIC_UnPause();
	void STATIC_ToggleStaticMeshCache();
	void STATIC_StopStat(TEnumAsByte<EServerStatType> StatType);
	void STATIC_StopRecordingOutPacket();
	void STATIC_StopIfReplaying();
	bool STATIC_StartStat(TEnumAsByte<EServerStatType> StatType);
	void STATIC_StartRecordingOutPacket();
	void STATIC_SortByTimeReplayCameraEventItems();
	void STATIC_SortByTimeCurDataSetReplayCameraEventItems();
	bool STATIC_ShowYesNoMessage(const struct FString& strTitle, const struct FString& strMsg);
	void STATIC_ShowSystemMessage(const struct FString& strTitle, const struct FString& strMsg);
	void STATIC_ShowSpectateLoadingScreen();
	bool STATIC_ShowOkCancelMessage(const struct FString& strTitle, const struct FString& strMsg);
	void STATIC_ShowLoadingScreen();
	void STATIC_ShowLastSurvivorMatchResult();
	void STATIC_SetWayPointMode(int NewMode);
	void STATIC_SetWayPointMaxNum(int NewMaxNum);
	void STATIC_SetWayPointLineMode(int NewMode);
	void STATIC_SetStartedFromReplayListMap(bool bSet);
	void STATIC_SetReplayTimeSpeed(float TimeSpeed);
	void STATIC_SetReplayBusy(bool bBusy);
	void STATIC_SetOvercastWeightsDelegate__DelegateSignature(float fNoChange, float fChangeToRain, float fChangeToFog);
	void STATIC_SetOvercastWeights(float fNoChange, float fChangeToRain, float fChangeToFog);
	void STATIC_SetOvercastDurationsDelegate__DelegateSignature(float FMin, float FMax);
	void STATIC_SetOvercastDurations(float FMin, float FMax);
	void STATIC_SetMaxReplaysForNullStreamer();
	void STATIC_SetIsChangedSpectateCharacter(bool force);
	void STATIC_SetHighlightArray();
	void STATIC_SetForceTickWhenPaused(bool ForceTick);
	void STATIC_SaveReplayThumbnailImage(const struct FString& path, const struct FString& Filename);
	void STATIC_SaveReplayCameraEvent();
	void STATIC_ResetReplayStreamer();
	void STATIC_RequestReplayARecordTargetEvent(const struct FString& EventID);
	void STATIC_RequestReplayAKillEvent(const struct FString& EventID);
	void STATIC_RequestReplayAGroggyEvent(const struct FString& EventID);
	void STATIC_RequestReplayAEtceteraEvent(const struct FString& EventID);
	void STATIC_ReplayProblemDelegate__DelegateSignature();
	void STATIC_ReplayJumpTimeInSecondsAndPause(float TimeInSeconds);
	void STATIC_ReplayJumpTimeInSeconds(float TimeInSeconds);
	void STATIC_ReplayJumpInt(int second);
	void STATIC_ReplayJump(float TimelinePercentage);
	void STATIC_RemoveAllRecordTargetEvents();
	void STATIC_RemoveAllOvercastEvents();
	void STATIC_RemoveAllKillEvents();
	void STATIC_RemoveAllGroggyEvents();
	void STATIC_RemoveAllEventGroup(const struct FString& Group);
	void STATIC_RemoveAllEtceteraEvents();
	void STATIC_RemoveAllCustomFogEvents();
	void STATIC_RemoveAllCameraEvents();
	int STATIC_RecordTimeReplayCameraEventItemsEx(float GlobalStartSec, float GlobalEndSec);
	int STATIC_RecordTimeReplayCameraEventItems();
	void STATIC_RecordStartedDelegate__DelegateSignature();
	void STATIC_RecordOvercastEvent(float inInitDemoTime, const struct FString& inWeather, ETslOvercastAction inAction, float inInitElapsedTime, float inSaturateTime, float inBlendInTime, float inBlendOutTime, float inTimeMultiplier, float inThunderAngle, float inThunderDistance);
	int STATIC_RecordDurationSkipCount(float GlobalStartSec, float GlobalEndSec);
	int STATIC_RecordDurationKeyFrameCount(float GlobalStartSec, float GlobalEndSec);
	void STATIC_RecordCustomFogEvent(float inDemoTime, float inFogFallOff, float inFogStartDistance, float inFogDensity);
	bool STATIC_ReadyHighlight();
	void STATIC_QuitApplication(bool bShowMessage);
	void STATIC_PlayReplayCommand(const struct FString& RegionOrLocal, const struct FString& SessionName);
	void STATIC_PlayReplayBPByRegionOrLocal(const struct FString& Region, const struct FString& SessionName);
	void STATIC_PlayReplayBP(const struct FString& SessionName);
	bool STATIC_PlaybackHighlight();
	bool STATIC_Pause();
	float STATIC_ParseReplaySpeedStrToFloat(const struct FString& ReplaySpeed);
	void STATIC_OnSteamNetworkDisconnectedTimeExpired();
	void STATIC_OnPressedPopupSignOut(EPopupButtonID ButtonID);
	void STATIC_OnPressedPopupConfirmInvitePS4(EPopupButtonID ButtonID);
	void STATIC_OnPressedPopupConfirmInvite(EPopupButtonID ButtonID);
	void STATIC_OnPressedPopupCommon(EPopupButtonID ButtonID);
	void STATIC_KeepMaxReplaysAndDeleteOldestReplaysForNullStreamer();
	void STATIC_KeepAndDeleteOldestReplaysForNullStreamer(int nReplaysToKeep);
	void STATIC_KeepAndDeleteOldestReplaysDoneDelegate__DelegateSignature(int nRemains);
	void STATIC_JumpTimelineInHighlightMode(float Percentage);
	bool STATIC_IsShowLastSurvivorMatchResult();
	bool STATIC_IsReplayJumping();
	bool STATIC_IsReplaying();
	bool STATIC_IsReplayError();
	bool STATIC_IsReplayEditable();
	bool STATIC_IsRecording();
	bool STATIC_IsPlayingKillcam();
	bool STATIC_IsPlatform_PS4();
	bool STATIC_IsPaused();
	bool STATIC_IsOutsideKeyFrame(float InMilliSeconds);
	bool STATIC_IsLoadedForReplayExport();
	bool STATIC_IsLive();
	bool STATIC_IsLevelLoaded();
	bool STATIC_IsLastHighlightEventAndNoZero();
	bool STATIC_IsKillcamPlayback();
	bool STATIC_IsInPlayingState();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsEnterButton_Facebutton_Bottom();
	bool STATIC_IsEndHighlightCurrnetEvent();
	void STATIC_HideLastSurvivorMatchResult();
	void STATIC_GotoTimelineDoneDelegate__DelegateSignature();
	void STATIC_GotoReplayList();
	void STATIC_GotoEndOfReplayTimelineBP();
	int STATIC_GetUnderFpsCount(int Fps, int DuringSeconds);
	struct FString STATIC_GetStartParameterStringValue(const struct FString& Key, const struct FString& NotFoundValue);
	struct FTslStartParameter STATIC_GetStartParameter();
	bool STATIC_GetStartedFromReplayListMap();
	int STATIC_GetServerMaxTickRate(int DefaultMaxTickRate);
	float STATIC_GetReplayTotalTime();
	float STATIC_GetReplayTimeSpeed();
	void STATIC_GetReplaySummaryDoneDelegate__DelegateSignature(const struct FTslReplaySummary& aTslReplaySummary);
	void STATIC_GetReplaySummary(const struct FString& RegionOrLocal, const struct FString& SessionName);
	void STATIC_GetReplayListLocal(int PageIndex, int PageSize);
	void STATIC_GetReplayListDoneDelegate__DelegateSignature();
	void STATIC_GetReplayListByRegionOrLocal(const struct FString& RegionOrLocal, int PageIndex, int PageSize, int InReplayVer);
	void STATIC_GetReplayList();
	void STATIC_GetReplayKill__DelegateSignature();
	struct FString STATIC_GetReplayEventPath();
	float STATIC_GetReplayCurrentTime();
	float STATIC_GetReplayChunkSizeInSeonds();
	bool STATIC_GetReplayBusy();
	struct FTslPlayerStateSummary STATIC_GetRecordUserFromReplaySummary(const struct FTslReplaySummary& inReplaySummary);
	TArray<struct FTslPlayerStateSummary> STATIC_GetRecorderTeamMembersFromReplaySummary(const struct FTslReplaySummary& inReplaySummary);
	int STATIC_GetNumTotalReplays();
	void STATIC_GetNumReplaysForNullStreamer();
	int STATIC_GetMinFps(int DuringSeconds);
	int STATIC_GetMaxFps(int DuringSeconds);
	class ALevelAttribute* STATIC_GetLevelAttributeForReplaying();
	class UGameEventObserver* STATIC_GetGameEventObserver();
	float STATIC_GetDemoDiskFreeSpace();
	struct FName STATIC_GetCurrentGameState();
	bool STATIC_GetAvailableTimeKeyFrames(float BeginTime, float EndTime, TArray<float>* InArr);
	bool STATIC_GetAvailableTimeHighlightEvents(TArray<float>* InArr);
	void STATIC_FlushStaticMeshCache();
	class ATslCharacter* STATIC_FindRecorderCharacterForPlayback(TArray<class ATslCharacter*> ReplicatedCharacterList, bool bIsClip, const struct FString& ClipTargetUserId, const struct FString& ClipTargetUserNickName);
	bool STATIC_FindRecentReplayOvercast(const struct FString& inWeather, ETslOvercastAction inAction, int* CurrentIndex, struct FTslReplayOvercast* foundOvercast);
	bool STATIC_FindRecentReplayCustomFog(int* CurrentIndex, struct FTslReplayCustomFog* foundCustomFog);
	bool STATIC_FindNextReplayCustomFog(int inCurrentIndex, int* CurrentIndex, struct FTslReplayCustomFog* foundCustomFog);
	bool STATIC_FindNewReplayOvercast(int inCurrentIndex, int* CurrentIndex, struct FTslReplayOvercast* foundOvercast);
	bool STATIC_FindNewReplayCustomFog(int inCurrentIndex, int* CurrentIndex, struct FTslReplayCustomFog* foundCustomFog);
	void STATIC_FindCharactersForReplayExport();
	void STATIC_EnumerateReplayRecordTargetEvents();
	void STATIC_EnumerateReplayOvercastEventsDoneDelegate__DelegateSignature();
	void STATIC_EnumerateReplayOvercastEvents();
	void STATIC_EnumerateReplayKillEvents(int Time);
	void STATIC_EnumerateReplayGroggyEvents(int Time);
	void STATIC_EnumerateReplayEtceteraEvents(int Time);
	void STATIC_EnumerateReplayCustomFogEventsDoneDelegate__DelegateSignature();
	void STATIC_EnumerateReplayCustomFogEvents();
	void STATIC_EnumerateReplayCameraEvents();
	void STATIC_EndHighlightPlay();
	void STATIC_DumpStaticMeshCache();
	void STATIC_DownloadZippedReplayProgressDelegate__DelegateSignature(const struct FString& strFileName, int nReceived, int nTotal);
	void STATIC_DownloadZippedReplayCompleteDelegate__DelegateSignature(const struct FString& strFullPath, const struct FString& strDirToExtract);
	bool STATIC_DownloadZippedReplayBPByRegion(const struct FString& Region, const struct FString& SessionName, int nTotalSize);
	bool STATIC_DeleteZippedReplayBP(const struct FString& ArchiveName);
	bool STATIC_DeleteReplayBPByRegionOrLocal(const struct FString& RegionOrLocal, const struct FString& SessionName);
	void STATIC_CreateReplayHighlightEventByTargetName(const struct FString& TargetName);
	bool STATIC_CancelDownloadingZippedReplay(const struct FString& SessionName);
	void STATIC_BPStopRecordingKillcam(bool force);
	void STATIC_BeginHighlightPlay();
	void STATIC_AddReplayCameraEventAtTime(struct FReplayCameraEventItem* InputItem);
	void STATIC_AddReplayCameraEvent(int DataSetNumber, bool IsSkip, const struct FString& Type, float FOV, const struct FVector& Pos, const struct FRotator& Rot, const struct FString& TargetCharacterID, const struct FString& InterpolationType, const struct FString& CameraDirection, const struct FString& ReplaySpeed);
	void STATIC_AddPlayerStateToReplaySummary(class ATslPlayerState* pPlayerState, struct FTslReplaySummary* inReplaySummary);
	void STATIC_AddOutGameLogs();
};


// Class TslGame.GameEventObserver
// 0x00D0 (0x0100 - 0x0030)
class UGameEventObserver : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnClientStateToPlaying;                                   // 0x0030(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnClientStateOutofPlaying;                                // 0x0040(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnMatchEndRecording;                                      // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeathCamFinished;                                       // 0x0060(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	float                                              PriodicReportIntervalSec;                                 // 0x0070(0x0004) (ZeroConstructor, Transient, Config, IsPlainOldData)
	float                                              PriodicFrequentReportIntervalSec;                         // 0x0074(0x0004) (ZeroConstructor, Transient, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x88];                                      // 0x0078(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GameEventObserver"));

		return ptr;
	}

};


// Class TslGame.GamePadInputAixsComponent
// 0x0030 (0x0230 - 0x0200)
class UGamePadInputAixsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0200(0x000C) MISSED OFFSET
	float                                              YawAccelPct;                                              // 0x020C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              PitchAccelPct;                                            // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastYawAccelDir;                                          // 0x0214(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastPitchAccelDir;                                        // 0x0218(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastYawInput;                                             // 0x021C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastPitchInput;                                           // 0x0220(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0224(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GamePadInputAixsComponent"));

		return ptr;
	}

};


// Class TslGame.GameStateListenerComponent
// 0x0020 (0x0220 - 0x0200)
class UGameStateListenerComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnMatchStateChange;                                       // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameModeEvent;                                          // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GameStateListenerComponent"));

		return ptr;
	}

};


// Class TslGame.GatherSetDressingBox
// 0x0000 (0x03F0 - 0x03F0)
class AGatherSetDressingBox : public ATriggerBox
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GatherSetDressingBox"));

		return ptr;
	}

};


// Class TslGame.TslRewardCalculatorInterface
// 0x0000 (0x0030 - 0x0030)
class UTslRewardCalculatorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRewardCalculatorInterface"));

		return ptr;
	}

};


// Class TslGame.TslGameMode
// 0x0C88 (0x1150 - 0x04C8)
class ATslGameMode : public AGameMode
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x04C8(0x0078) MISSED OFFSET
	class UClass*                                      MalePawnClass;                                            // 0x0540(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       PerfBotPlayerControllerClass;                             // 0x0548(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	struct FStringClassReference                       ModeControllerClass;                                      // 0x0558(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	TArray<struct FStringClassReference>               AdditionalModeControllerClasses;                          // 0x0568(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear)
	struct FStringClassReference                       InitialItemDonatorClass;                                  // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FMatchPreparerClass>                 MatchPreparerClasses;                                     // 0x0588(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EMatchStartType                                    MatchStartType;                                           // 0x0598(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0599(0x0007) MISSED OFFSET
	struct FStringClassReference                       SpawnKitClass;                                            // 0x05A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	ECameraViewBehaviour                               CameraViewBehaviour;                                      // 0x05B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAllowObserverVoiceChatOutput;                            // 0x05B1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x05B2(0x0006) MISSED OFFSET
	struct FName                                       PresetName;                                               // 0x05B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayerRespawn;                                            // 0x05C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayerRandomRespawnLocation;                              // 0x05C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x05C2(0x0006) MISSED OFFSET
	TArray<struct FModeStringParameter>                ModeStringParameters;                                     // 0x05C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData04[0x11];                                      // 0x05D8(0x0011) MISSED OFFSET
	bool                                               bAllowGlobalVoiceChatAtInit;                              // 0x05E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x05EA(0x0002) MISSED OFFSET
	float                                              GlobalVoiceChannelMuteTimeInSeconds;                      // 0x05EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	int                                                PostMatchWaitingTime;                                     // 0x05F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	int                                                NextRoundWaitingTime;                                     // 0x05F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	int                                                EndRoundWaitingTime;                                      // 0x05F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	int                                                ServerQuitAfterLeavingMapTime;                            // 0x05FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MinPlayers;                                               // 0x0600(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PlayerSpawnTryMaxCount;                                   // 0x0604(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePerfBotInPIE;                                      // 0x0608(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePerfBotLogin;                                      // 0x0609(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsPerfBotSpawnToRandomPosition;                          // 0x060A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseXboxUnauthorizedDevice;                               // 0x060B(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bCanRestartPerfBot;                                       // 0x060C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableObserverInPIE;                                     // 0x060D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bPreventFinishMatchInPIE;                                 // 0x060E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x060F(0x0001) MISSED OFFSET
	struct FString                                     SelectedSpawnKit;                                         // 0x0610(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	struct FString                                     PlatoonSpawnKit;                                          // 0x0620(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	bool                                               bTakeoffAllItemAtEquipSpawnKit;                           // 0x0630(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStartPlayerAtMatchStart;                                 // 0x0631(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldSpawnAtStartSpot;                                  // 0x0632(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableDBNO;                                              // 0x0633(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0634(0x0001) MISSED OFFSET
	bool                                               bUseCeremonyState;                                        // 0x0635(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0636(0x0002) MISSED OFFSET
	int                                                TeamSize;                                                 // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableSquadInTeam;                                       // 0x063C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnablePlatoonCommander;                                  // 0x063D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x063E(0x0002) MISSED OFFSET
	struct FPlatoonSupportRequestManifest              PlatoonSupportRequestManifest;                            // 0x0640(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	int                                                SquadSize;                                                // 0x0658(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableBleedOut;                                          // 0x065C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUsingSelectableSpawnKit;                                 // 0x065D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUsingPlatoonSpawnKit;                                    // 0x065E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableClientPacketLossReport : 1;                        // 0x065F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	float                                              CeremonyDuration;                                         // 0x0660(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              EndRoundCeremonyDuration;                                 // 0x0664(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              RoundMatchCeremonyDuration;                               // 0x0668(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEditorTestZombieMode;                                  // 0x066C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsCustomGame;                                            // 0x066D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEventMode;                                             // 0x066E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bCanAllSpectate;                                          // 0x066F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bKillerSpectateMode;                                      // 0x0670(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShowLastCircleMark;                                      // 0x0671(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUsingLeagueReplay;                                       // 0x0672(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x5];                                       // 0x0673(0x0005) MISSED OFFSET
	struct FString                                     ESportsManagerURL;                                        // 0x0678(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	float                                              LastCircleAlgorithmPercent;                               // 0x0688(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bChangeStartingPoint;                                     // 0x068C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bKeepLastCirclePosition;                                  // 0x068D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bCustomEmoteMode;                                         // 0x068E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUsingInnerBlueZone;                                      // 0x068F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBlueZoneShape                                     BlueZoneShape;                                            // 0x0690(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0691(0x0003) MISSED OFFSET
	float                                              BlueZoneRectangleAspectRatio;                             // 0x0694(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   BlueZoneLeftTop;                                          // 0x0698(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   BlueZoneRightBottom;                                      // 0x06A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bFixedStartBlueZoneLocation;                              // 0x06A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x06A9(0x0003) MISSED OFFSET
	struct FVector2D                                   FixedStartBlueZoneCenterLocationRatio;                    // 0x06AC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bUsingOuterBlueZone;                                      // 0x06B4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x06B5(0x0003) MISSED OFFSET
	float                                              OuterBlueZoneSizeRatio;                                   // 0x06B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OuterBlueZoneDamage;                                      // 0x06BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBlueZoneShape                                     OuterBlueZoneShape;                                       // 0x06C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableDamageWhileRidingParachute;                        // 0x06C1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSurvivalIngameRewardActive;                            // 0x06C2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableAutoLooting;                                      // 0x06C3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x06C4(0x0004) MISSED OFFSET
	TArray<ERadioMessageCategory>                      ForbiddenRadioMessageList;                                // 0x06C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FCustomGameUpdateCharacterInfo              CustomGameUpdateCharacterInfo;                            // 0x06D8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData15[0x4];                                       // 0x06E4(0x0004) MISSED OFFSET
	TArray<struct FLimitCustomStringParameter>         LimitCustomStringParameters;                              // 0x06E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	struct FString                                     CustomWeaponDamage;                                       // 0x06F8(0x0010) (ZeroConstructor, Transient)
	float                                              MultiplierBlueZone;                                       // 0x0708(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              MultiplierCarePackageNormal;                              // 0x070C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bFlareGun;                                                // 0x0710(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0711(0x0003) MISSED OFFSET
	struct FRedZoneCustomOption                        RedZoneCustomOption;                                      // 0x0714(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	struct FBlackZoneCustomOption                      BlackZoneCustomOption;                                    // 0x0730(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	TArray<struct FBlueZoneCustomOption>               BlueZoneCustomOptions;                                    // 0x0770(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	int                                                TownWeight;                                               // 0x0780(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	int                                                FieldWeight;                                              // 0x0784(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	int                                                MountainWeight;                                           // 0x0788(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bHideNicknameOnKillfeed;                                  // 0x078C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseParachuteAutoDeploy;                                  // 0x078D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData17[0x2];                                       // 0x078E(0x0002) MISSED OFFSET
	float                                              ParachuteAutoDeployAltitudeMultiplier;                    // 0x0790(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              ParachuteStartDeployAltitudeMultiplier;                   // 0x0794(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              MultiplierParachuteLandingDamage;                         // 0x0798(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x079C(0x0004) MISSED OFFSET
	class UMaterialInterface*                          OverrideParachuteMaterial;                                // 0x07A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHideVisualizeTslDebugInfomation;                         // 0x07A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisableClientGameEventObserverLog;                       // 0x07A9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x2];                                       // 0x07AA(0x0002) MISSED OFFSET
	int                                                ServerMaxTickRate;                                        // 0x07AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	int                                                WinnerTeam;                                               // 0x07B0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x07B4(0x0004) MISSED OFFSET
	struct FStringClassReference                       TeamClass;                                                // 0x07B8(0x0010) (Edit, DisableEditOnInstance)
	struct FStringClassReference                       PlatoonCommanderSystemClass;                              // 0x07C8(0x0010) (Edit, DisableEditOnInstance)
	struct FStringClassReference                       ItemSpawnProcessorClass;                                  // 0x07D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FStringClassReference                       EventItemSpawnProcessorClass;                             // 0x07E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FStringClassReference                       ThingSpawnProcessorClass;                                 // 0x07F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FStringClassReference                       DroppedPackageSpawnProcessorClass;                        // 0x0808(0x0010) (Edit, BlueprintVisible)
	struct FStringClassReference                       JukeBoxSpawnProcessorClass;                               // 0x0818(0x0010) (Edit, BlueprintVisible)
	struct FStringClassReference                       InteractionSupplySpawnProcessorClass;                     // 0x0828(0x0010) (Edit, BlueprintVisible)
	struct FName                                       BasicBeltItemIDForNoBelt;                                 // 0x0838(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       CustomCarepackageRulesComponentClass;                     // 0x0840(0x0010) (Edit)
	struct FStringClassReference                       ItemPackageProcessorClass;                                // 0x0850(0x0010) (Edit)
	class UTslModifyDamageDataAsset*                   ModifyDamageDataAsset;                                    // 0x0860(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTslCraftFilterDataAsset*                    CraftFilterDataAsset;                                     // 0x0868(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<int, class ATslPlayerStart*>                  TeamPlayerStarts;                                         // 0x0870(0x0050) (ZeroConstructor)
	TArray<class APlayerStart*>                        PlayerStarts;                                             // 0x08C0(0x0010) (ZeroConstructor)
	TArray<struct FPlayerStartsUserCount>              PlayerStartsUserCount;                                    // 0x08D0(0x0010) (ZeroConstructor)
	TMap<struct FString, class ATslPlayerStart*>       PlayerStartsUniqueIdMap;                                  // 0x08E0(0x0050) (ZeroConstructor)
	int                                                PlayerStartCount;                                         // 0x0930(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x4];                                       // 0x0934(0x0004) MISSED OFFSET
	TArray<struct FRankingInfo>                        RankingInfos;                                             // 0x0938(0x0010) (ZeroConstructor)
	TArray<struct FRankingInfo>                        PrevRankingInfos;                                         // 0x0948(0x0010) (ZeroConstructor)
	TArray<struct FPointInfo>                          PointInfos;                                               // 0x0958(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData22[0x4];                                       // 0x0968(0x0004) MISSED OFFSET
	int                                                KillPoint;                                                // 0x096C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ConnectionTeamNumber;                                     // 0x0970(0x0010) (ZeroConstructor)
	struct FStringClassReference                       ModePresetClass;                                          // 0x0980(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              TeamKillDamageModifier;                                   // 0x0990(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              VehicleWheelDamageModifier;                               // 0x0994(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      OverrideDefaultHealth;                                    // 0x0998(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanDropEquipableItems;                                   // 0x0999(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x1E];                                      // 0x099A(0x001E) MISSED OFFSET
	class UGeneralItemSpawner*                         InitialItemDonator;                                       // 0x09B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItemSpawnProcessor*                         ItemSpawnProcessor;                                       // 0x09C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEventItemSpawnProcessor*                    EventItemSpawnProcessor;                                  // 0x09C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UThingSpawnProcessor*                        ThingSpawnProcessor;                                      // 0x09D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDroppedPackageSpawnProcessor*               DroppedPackageSpawnProcessor;                             // 0x09D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJukeBoxSpawnProcessor*                      JukeBoxSpawnProcessor;                                    // 0x09E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInteractionSupplySpawnProcessor*            InteractionSupplySpawnProcessor;                          // 0x09E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USpawnKit*                                   SpawnKit;                                                 // 0x09F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData24[0x8];                                       // 0x09F8(0x0008) MISSED OFFSET
	class AModeController*                             ModeController;                                           // 0x0A00(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ADroppedItemGridManager*                     DroppedItemGridManager;                                   // 0x0A08(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslTracerManager*                           ServerTracerManager;                                      // 0x0A10(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMissionManager*                             MissionManager;                                           // 0x0A18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UModePreset*                                 ModePreset;                                               // 0x0A20(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMatchPreparer*                              MatchPreparer;                                            // 0x0A28(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItemPackageProcessor*                       ItemPackageProcessor;                                     // 0x0A30(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0x8];                                       // 0x0A38(0x0008) MISSED OFFSET
	TArray<class AModeController*>                     AdditinalModeControllers;                                 // 0x0A40(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData26[0xF8];                                      // 0x0A50(0x00F8) MISSED OFFSET
	TMap<struct FString, class APlayerState*>          JoinedUserPlayerStateMap;                                 // 0x0B48(0x0050) (ZeroConstructor, Transient)
	TArray<struct FTeams>                              Teams;                                                    // 0x0B98(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData27[0xA8];                                      // 0x0BA8(0x00A8) MISSED OFFSET
	int                                                TeamId;                                                   // 0x0C50(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlareGunMsgDist;                                          // 0x0C54(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class UTslCharacterPropertyOverrider*              TslCharacterPropertyOverrider;                            // 0x0C58(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x10];                                      // 0x0C60(0x0010) MISSED OFFSET
	bool                                               bCanUseRespawnedItem;                                     // 0x0C70(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRemoveDroppedItemPeriodically;                           // 0x0C71(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x2];                                       // 0x0C72(0x0002) MISSED OFFSET
	float                                              DroppedItemLifeTime;                                      // 0x0C74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DroppedItemCheckInterval;                                 // 0x0C78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x84];                                      // 0x0C7C(0x0084) MISSED OFFSET
	bool                                               bAllowJoinAnyMatchState;                                  // 0x0D00(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowIntrusion;                                          // 0x0D01(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x2];                                       // 0x0D02(0x0002) MISSED OFFSET
	float                                              IntrusionReserveTime;                                     // 0x0D04(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnableIntrusionTimeSeconds;                               // 0x0D08(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData32[0x5C];                                      // 0x0D0C(0x005C) MISSED OFFSET
	class UTslNpcManager*                              NpcManager;                                               // 0x0D68(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslGameState*                               TslGameState;                                             // 0x0D70(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData33[0x4];                                       // 0x0D78(0x0004) MISSED OFFSET
	bool                                               bIsStartGround;                                           // 0x0D7C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData34[0x3];                                       // 0x0D7D(0x0003) MISSED OFFSET
	TMap<struct FName, int>                            ItemLimits;                                               // 0x0D80(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	struct FWuLogMatchRating                           LogMatchRating;                                           // 0x0DD0(0x0070) (Transient)
	unsigned char                                      UnknownData35[0x50];                                      // 0x0E40(0x0050) MISSED OFFSET
	class UTslPlatoonCommanderSystem*                  PlatoonCommanderSystem;                                   // 0x0E90(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bOpenAI;                                                  // 0x0E98(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x3];                                       // 0x0E99(0x0003) MISSED OFFSET
	uint32_t                                           SpawnAINum;                                               // 0x0E9C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOpenWarModeSwitch;                                       // 0x0EA0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SplitAIAndPlayerAtStartPos;                               // 0x0EA1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData37[0x6];                                       // 0x0EA2(0x0006) MISSED OFFSET
	class UTslAIActingComponent*                       AIActingComp;                                             // 0x0EA8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ATslAIWorldVolume*                           AIWorldVolume;                                            // 0x0EB0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NewAIControllerClass;                                     // 0x0EB8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       AIInitialItemDonatorClass;                                // 0x0EC0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UGeneralItemSpawner*                         AIInitialItemDonator;                                     // 0x0ED0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGamemodeAIDataAsset*                     GameModeAIDataAsset;                                      // 0x0ED8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPreventAISuicide;                                      // 0x0EE0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData38[0x4F];                                      // 0x0EE1(0x004F) MISSED OFFSET
	unsigned char                                      TestAI : 1;                                               // 0x0F30(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      UnknownData39[0x7];                                       // 0x0F31(0x0007) MISSED OFFSET
	class UDataTable*                                  CharacterCostumeSetDataTable;                             // 0x0F38(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData40[0x78];                                      // 0x0F40(0x0078) MISSED OFFSET
	TWeakObjectPtr<class ABattleRoyaleModeController>  BlueZoneController;                                       // 0x0FB8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData41[0x10];                                      // 0x0FC0(0x0010) MISSED OFFSET
	bool                                               bCanJump;                                                 // 0x0FD0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData42[0xA7];                                      // 0x0FD1(0x00A7) MISSED OFFSET
	TArray<struct FPlayerStartsUserCount>              AIStartsPosCount;                                         // 0x1078(0x0010) (ZeroConstructor)
	bool                                               bCanParachuteFollow;                                      // 0x1088(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData43[0x7];                                       // 0x1089(0x0007) MISSED OFFSET
	TMap<ETslBpRewardLogicType, struct FStringClassReference> BpRewardCalculatorClasses;                                // 0x1090(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<ETslXpRewardLogicType, struct FStringClassReference> XpRewardCalculatorClasses;                                // 0x10E0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTslBpRewardCalculator*                      BpRewardCalculator;                                       // 0x1130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslXpRewardCalculator*                      XpRewardCalculator;                                       // 0x1138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData44[0x10];                                      // 0x1140(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameMode"));

		return ptr;
	}


	bool STATIC_UseCeremonyState();
	void STATIC_TimerHandleSpawnAI();
	void STATIC_SendSystemMessageToAll(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_RestartAirborn();
	void STATIC_OnUpdateGamePhase(int PhaseIndex, bool bIsRelease);
	void STATIC_OnNetDriverError(const struct FString& Ip, int Port, const struct FString& ErrorType);
	void STATIC_OnKickPlayerFromBEServer(class APlayerController* InPlayerController, const struct FText& Reason);
	void STATIC_OnConnectionTimeOutError(float DriverTime, float Threshold, const struct FString& RemoteAddress, bool bIsServer, const struct FString& UniqueId);
	void STATIC_NotifyRestrictingPlayAreaToAll();
	void STATIC_NotifyNextGasInToAll(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_LogNetDriverError();
	bool STATIC_IsPreventFinishMatch();
	bool STATIC_IsPlayInEditor();
	void STATIC_HB_RestStartPosForAI();
	bool STATIC_HasRoundEnded();
	class UVoiceManager* STATIC_GetVoiceManager();
	float STATIC_GetVehicleWheelDamageModifier();
	class UThingSpawnProcessor* STATIC_GetThingSpawnProcessor();
	float STATIC_GetTeamKillDamageModifier();
	class ULobbyLink* STATIC_GetLobbyLink();
	class UJukeBoxSpawnProcessor* STATIC_GetJukeBoxSpawnProcessor();
	class UItemSpawnProcessor* STATIC_GetItemSpawnProcessor();
	class UInteractionSupplySpawnProcessor* STATIC_GetInteractionSupplySpawnProcessor();
	float STATIC_GetInProgressElapsedTimeSec();
	class UEventItemSpawnProcessor* STATIC_GetEventItemSpawnProcessor();
	class UDroppedPackageSpawnProcessor* STATIC_GetDroppedPackageSpawnProcessor();
	bool STATIC_GetCanParachuteFollow();
	class ABlackZoneController* STATIC_GetBlackZoneController();
	void STATIC_GetAllPawns(TArray<class APawn*>* OutPawns);
	void STATIC_FinishMatch(bool bForceFinish);
	class ATslCharacter* STATIC_FindCharacterByPlayerState(class APlayerState* State);
	bool STATIC_CheckFinish();
	void STATIC_ChangeGameEndState(EGameEndState NewGameEndState);
	bool STATIC_CanDealDamage(class ATslPlayerState* DamageInstigator, class ATslPlayerState* DamagedPlayer);
	void STATIC_BroadcastGameModeEvent(const struct FName& EventName, const struct FString& Parameter);
	void STATIC_BenchmarkFinished();
};


// Class TslGame.TslBpRewardCalculator
// 0x0010 (0x0040 - 0x0030)
class UTslBpRewardCalculator : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBpRewardCalculator"));

		return ptr;
	}

};


// Class TslGame.TslXpRewardCalculator
// 0x0010 (0x0040 - 0x0030)
class UTslXpRewardCalculator : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslXpRewardCalculator"));

		return ptr;
	}

};


// Class TslGame.BattleRoyaleModeController
// 0x0160 (0x0660 - 0x0500)
class ABattleRoyaleModeController : public AModeController
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0500(0x0070) MISSED OFFSET
	TArray<struct FBattleRoyalePoisionGasData>         BattleRoyalePoisonGasDataArray;                           // 0x0570(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              BattleRoyaleZoneTypeCheckTime;                            // 0x0580(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0584(0x0004) MISSED OFFSET
	TArray<float>                                      PoisonWarningTime;                                        // 0x0588(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              WaterVolumeRayHeight;                                     // 0x0598(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x059C(0x0004) MISSED OFFSET
	struct FString                                     TestMapDataName;                                          // 0x05A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                NextPoisonGasIndex;                                       // 0x05B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x05B4(0x0014) MISSED OFFSET
	TArray<class ATslBlueZoneCreateArea*>              BlueZoneCreateAreas;                                      // 0x05C8(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslPassBluezoneArea*>                PassBluezoneAreas;                                        // 0x05D8(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslPassBlueZoneAreaRectangle*>       PassBluezoneAreasRectangle;                               // 0x05E8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x68];                                      // 0x05F8(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BattleRoyaleModeController"));

		return ptr;
	}


	void STATIC_UpdateGamePhase();
	bool STATIC_SetNextGasInBlackboard();
	void STATIC_SetNeedUpdateGasData(bool InbNeedUpdateGasData);
	bool STATIC_LastCircleAlgorithm();
	bool STATIC_IsPauseBlueZone();
	void STATIC_InitRadius();
	float STATIC_GetPoisonGasDamagePerSecond(float CharaterToCenterDistance, float SafetyZoneRadius, float PoisonGasWarningRadius);
	bool STATIC_GetNeedUpdateGasData();
	int STATIC_GetMaxPhaseCount();
};


// Class TslGame.SpawnSimulatable
// 0x0000 (0x0030 - 0x0030)
class USpawnSimulatable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SpawnSimulatable"));

		return ptr;
	}

};


// Class TslGame.ThingSpawnProcessor
// 0x0028 (0x0058 - 0x0030)
class UThingSpawnProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThingSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.JukeBoxSpawnProcessor
// 0x0028 (0x0058 - 0x0030)
class UJukeBoxSpawnProcessor : public UObject
{
public:
	float                                              TotalSpawnFromActorRate;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TotalSpawnFromComponentRate;                              // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FStringClassReference                       JukeBoxClass;                                             // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class UJukeBoxSpotComponent*>               Spots;                                                    // 0x0048(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.JukeBoxSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.InteractionSupplySpawnProcessor
// 0x0020 (0x0050 - 0x0030)
class UInteractionSupplySpawnProcessor : public UObject
{
public:
	class UDataTable*                                  SpawnCountTable;                                          // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  CategoryDataTable;                                        // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UTslVendingMachineSpotComponent*>     Spots;                                                    // 0x0040(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InteractionSupplySpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.ItemSpawnProcessor
// 0x0020 (0x0050 - 0x0030)
class UItemSpawnProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	bool                                               bInitialized;                                             // 0x0040(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemSpawnProcessor"));

		return ptr;
	}


	void STATIC_ProcessSpawnItem(class UItemSpotGroupComponent* Spawner);
	void STATIC_ProcessGroup(class UItemSpotGroupComponent* SpotGroup, TArray<class UItemSpotComponent*> Spots);
	bool STATIC_CheckItemGroup(class UItemSpotGroupComponent* SpotGroup);
};


// Class TslGame.MatchPreparer
// 0x0030 (0x0060 - 0x0030)
class UMatchPreparer : public UObject
{
public:
	int                                                WarmupTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                WarmupTimeInPIE;                                          // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class ATslGameMode*                                TslGameMode;                                              // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MatchPreparer"));

		return ptr;
	}


	void STATIC_TimerGameStartCountDown();
};


// Class TslGame.AirborneMatchPreparer
// 0x0088 (0x00E8 - 0x0060)
class UAirborneMatchPreparer : public UMatchPreparer
{
public:
	TAssetPtr<class UClass>                            AircraftClass;                                            // 0x0060(0x0020) (Edit, DisableEditOnInstance)
	TArray<class ATransportAircraftVehicle*>           Aircrafts;                                                // 0x0080(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslCharacter*>                       RodeCharacters;                                           // 0x0090(0x0010) (ZeroConstructor, Transient)
	int                                                AircraftCount;                                            // 0x00A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AircraftCapacityOverride;                                 // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x00A8(0x0014) MISSED OFFSET
	float                                              AircraftAltitude;                                         // 0x00BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StartDeployAltitudeMultiplier;                            // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndThetaDegree;                                           // 0x00C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AircraftIntervalDistance;                                 // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AllowRangeByBlueZone;                                     // 0x00CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AirborneMatchPreparer"));

		return ptr;
	}


	void STATIC_CreateAircraft();
	void STATIC_AllowDealDamage();
};


// Class TslGame.ModePreset
// 0x0050 (0x0080 - 0x0030)
class UModePreset : public UObject
{
public:
	TArray<struct FModePresetsPerMap>                  ModePresets;                                              // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     MapName;                                                  // 0x0040(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0050(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ModePreset"));

		return ptr;
	}

};


// Class TslGame.TableGeneralItemSpawner
// 0x00F0 (0x0120 - 0x0030)
class UTableGeneralItemSpawner : public UGeneralItemSpawner
{
public:
	TArray<struct FGeneralItemSpawnCount>              SpawnCountByTeamPlayers;                                  // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FGeneralItemSpawnProb>               SpawnProbArray;                                           // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FItemTableSpawner                           TableItemSpawner;                                         // 0x0068(0x00B8)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TableGeneralItemSpawner"));

		return ptr;
	}

};


// Class TslGame.ModePresetItemSpawner
// 0x0010 (0x0130 - 0x0120)
class UModePresetItemSpawner : public UTableGeneralItemSpawner
{
public:
	struct FString                                     PresetSpawnTableKey;                                      // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ModePresetItemSpawner"));

		return ptr;
	}

};


// Class TslGame.GroggyDamageCalculator
// 0x0000 (0x0030 - 0x0030)
class UGroggyDamageCalculator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GroggyDamageCalculator"));

		return ptr;
	}

};


// Class TslGame.StaticGroggyDamageCalculator
// 0x0008 (0x0038 - 0x0030)
class UStaticGroggyDamageCalculator : public UGroggyDamageCalculator
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StaticGroggyDamageCalculator"));

		return ptr;
	}

};


// Class TslGame.HighlightSession
// 0x0078 (0x00A8 - 0x0030)
class UHighlightSession : public UObject
{
public:
	struct FHighlightRecordConfig                      Config_Kill;                                              // 0x0030(0x000C) (Config)
	struct FHighlightRecordConfig                      Config_KillGroggy;                                        // 0x003C(0x000C) (Config)
	struct FHighlightRecordConfig                      Config_Die;                                               // 0x0048(0x000C) (Config)
	struct FHighlightRecordConfig                      Config_DieGroggy;                                         // 0x0054(0x000C) (Config)
	struct FHighlightRecordConfig                      Config_EndMatch;                                          // 0x0060(0x000C) (Config)
	struct FHighlightRecordConfig                      Config_DeathCam;                                          // 0x006C(0x000C) (Config)
	class UTslGameInstance*                            TslGameInstance;                                          // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0080(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.HighlightSession"));

		return ptr;
	}


	void STATIC_RecordRemainEvents();
	void STATIC_MatchEnded(bool isWinner);
	void STATIC_DeathCamFinished(float DeathCamRunningTime);
};


// Class TslGame.CharacterInteractionComponent
// 0x0050 (0x0420 - 0x03D0)
class UCharacterInteractionComponent : public UInteractionComponent
{
public:
	struct FCastConfig                                 AlternativeCastConfig;                                    // 0x03D0(0x0040) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FName                                       InstantRevivalKitID;                                      // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CharacterInteractionComponent"));

		return ptr;
	}

};


// Class TslGame.DoublePhaseInteractionComponent
// 0x00D0 (0x04A0 - 0x03D0)
class UDoublePhaseInteractionComponent : public UInteractionComponent
{
public:
	struct FText                                       FirstInteractionVerb;                                     // 0x03D0(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       FirstInteractiveObjectName;                               // 0x03E8(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       SecondInteractionVerb;                                    // 0x0400(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       SecondInteractiveObjectName;                              // 0x0418(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnSecondInteractBy;                                       // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ClientOnSecondInteractBy;                                 // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0450(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DoublePhaseInteractionComponent"));

		return ptr;
	}

};


// Class TslGame.DroppedItemActorComponent
// 0x0020 (0x03F0 - 0x03D0)
class UDroppedItemActorComponent : public UInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedItemActorComponent"));

		return ptr;
	}


	struct FText STATIC_GetInteractiveObjectName();
	struct FText STATIC_GetInteractionVerb();
	bool STATIC_AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.JukeBoxInteractionComponent
// 0x0050 (0x0420 - 0x03D0)
class UJukeBoxInteractionComponent : public UInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x03D0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.JukeBoxInteractionComponent"));

		return ptr;
	}


	struct FText STATIC_GetInteractiveObjectName();
	struct FText STATIC_GetInteractionVerb();
	bool STATIC_AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.OnceInteractionComponent
// 0x0010 (0x03E0 - 0x03D0)
class UOnceInteractionComponent : public UInteractionComponent
{
public:
	TArray<struct FName>                               CharacterHistory;                                         // 0x03D0(0x0010) (Net, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.OnceInteractionComponent"));

		return ptr;
	}

};


// Class TslGame.InteractorComponent
// 0x0000 (0x0200 - 0x0200)
class UInteractorComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InteractorComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.AmmoItem
// 0x0040 (0x0380 - 0x0340)
class UAmmoItem : public UItem
{
public:
	class UTexture*                                    AmmoIcon;                                                 // 0x0340(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AmmoIconRatio;                                            // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	TAssetPtr<class UTexture>                          AmmoIconPtr;                                              // 0x0350(0x0020)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0370(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AmmoItem"));

		return ptr;
	}

};


// Class TslGame.CastableItem
// 0x0058 (0x0398 - 0x0340)
class UCastableItem : public UItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0340(0x0008) MISSED OFFSET
	ECastableItemType                                  CastableItemType;                                         // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	struct FCastConfig                                 CastConfig;                                               // 0x0350(0x0040) (Edit, DisableEditOnInstance)
	bool                                               bCanUseInWater;                                           // 0x0390(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0391(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CastableItem"));

		return ptr;
	}

};


// Class TslGame.EquipmentRepairKitItem
// 0x0008 (0x03A0 - 0x0398)
class UEquipmentRepairKitItem : public UCastableItem
{
public:
	EEquipSlotID                                       EquipSlot;                                                // 0x0398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	float                                              RepairAmount;                                             // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.EquipmentRepairKitItem"));

		return ptr;
	}

};


// Class TslGame.HealItem
// 0x0000 (0x0398 - 0x0398)
class UHealItem : public UCastableItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.HealItem"));

		return ptr;
	}

};


// Class TslGame.HealOverTimeItem
// 0x0038 (0x03D0 - 0x0398)
class UHealOverTimeItem : public UHealItem
{
public:
	class UClass*                                      HealOverTimeBuffClass;                                    // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            HealOverTimeBuffPtr;                                      // 0x03A0(0x0020) (Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.HealOverTimeItem"));

		return ptr;
	}

};


// Class TslGame.InstantHealItem
// 0x0008 (0x03A0 - 0x0398)
class UInstantHealItem : public UHealItem
{
public:
	float                                              HealLimit;                                                // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InstantHealItem"));

		return ptr;
	}

};


// Class TslGame.InstantSignalItem
// 0x0008 (0x03A0 - 0x0398)
class UInstantSignalItem : public UCastableItem
{
public:
	float                                              SignalLimit;                                              // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InstantSignalItem"));

		return ptr;
	}

};


// Class TslGame.MagneticInductorItem
// 0x0000 (0x0398 - 0x0398)
class UMagneticInductorItem : public UCastableItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MagneticInductorItem"));

		return ptr;
	}

};


// Class TslGame.VehicleRepairKitItem
// 0x0008 (0x03A0 - 0x0398)
class UVehicleRepairKitItem : public UCastableItem
{
public:
	float                                              RepairAmount;                                             // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleRepairKitItem"));

		return ptr;
	}

};


// Class TslGame.CraftItem
// 0x0000 (0x0340 - 0x0340)
class UCraftItem : public UItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftItem"));

		return ptr;
	}


	bool STATIC_UseBy(class ATslCharacter* Character);
	bool STATIC_PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_OnRepStackCount(int OldStackCount);
	void STATIC_OnRepItemID();
	bool STATIC_IsWeapon();
	bool STATIC_IsToy();
	bool STATIC_IsToolTipIconAsyncLoading();
	bool STATIC_IsPackageItem();
	bool STATIC_IsIconAsyncLoading();
	bool STATIC_IsEquipable();
	bool STATIC_IsCastableItem();
	bool STATIC_IsAttachment();
	struct FName STATIC_GetItemID();
	class UTexture* STATIC_GetIconTexture();
};


// Class TslGame.EquipableItem
// 0x0210 (0x0550 - 0x0340)
class UEquipableItem : public UItem
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0340(0x0018) MISSED OFFSET
	EEquipSlotID                                       EquipSlotID;                                              // 0x0358(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              SpaceExtension;                                           // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageReductionRate;                                      // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DurabilityMax;                                            // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DestroyByDurability;                                      // 0x0368(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0369(0x0003) MISSED OFFSET
	float                                              Durability;                                               // 0x036C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	EDurabilityConsumeType                             DurabilityConsumeType;                                    // 0x0370(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	float                                              DamageTransferRate;                                       // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FCustomizableObjectIdentifier               CustomizableObjectIdentifierForMale;                      // 0x0378(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FCustomizableObjectIdentifier               CustomizableObjectIdentifierForFemale;                    // 0x03A8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FCustomizableObjectIdPair                   CustomizableObjectOriginalSkin;                           // 0x03D8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UAkAudioEvent*                               EquipedSoundAk;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EEquipableItemSoundGroup                           SoundGroup;                                               // 0x0400(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EEquipableItemSoundType                            SoundType;                                                // 0x0401(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanZombieEquip;                                          // 0x0402(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ESlotOffsetType                                    SlotOffsetType;                                           // 0x0403(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	struct FName                                       SkinTag;                                                  // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EEquipableItemLevelType                            EquipableItemLevelType;                                   // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7F];                                      // 0x0411(0x007F) MISSED OFFSET
	struct FName                                       EquipmentOverridableFilter;                               // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsUnequipable;                                           // 0x0498(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0499(0x0007) MISSED OFFSET
	TAssetPtr<class UTexture>                          HudDisplayEquipIcon;                                      // 0x04A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x8];                                       // 0x04C0(0x0008) MISSED OFFSET
	struct FReplicatedSkinItem                         ReplicatedSkinItem;                                       // 0x04C8(0x0010) (Net, Transient)
	TArray<struct FConstraintSlotConfig>               ConstraintSlotConfigs;                                    // 0x04D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FTslBuffType>                        BuffSpawnInfo;                                            // 0x04E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class ATslBuff*>                            Buffs;                                                    // 0x04F8(0x0010) (ZeroConstructor, Transient)
	TAssetPtr<class UAkAudioEvent>                     EquipSoundPtr;                                            // 0x0508(0x0020)
	unsigned char                                      UnknownData08[0x28];                                      // 0x0528(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.EquipableItem"));

		return ptr;
	}


	void STATIC_UnequipBy(class ATslCharacter* Character);
	void STATIC_PostEquip(class ATslCharacter* Character);
	void STATIC_OnRep_ReplicatedSkinItem();
	void STATIC_OnRep_Durability();
	bool STATIC_EquipBy(class ATslCharacter* Character, const struct FEquipPosition& Position);
	bool STATIC_CanEquipTo(class ATslCharacter* Character);
};


// Class TslGame.BaseWeaponItem
// 0x0040 (0x0590 - 0x0550)
class UBaseWeaponItem : public UEquipableItem
{
public:
	class UClass*                                      WeaponType;                                               // 0x0550(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            WeaponAssetPtr;                                           // 0x0558(0x0020)
	struct FReplicatedMasteryItem                      MasteryItem;                                              // 0x0578(0x0004) (Net, Transient)
	struct FReplicatedMasteryItem                      AssignedMasteryItem;                                      // 0x057C(0x0004) (Net, Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0580(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BaseWeaponItem"));

		return ptr;
	}


	void STATIC_OnRep_ReplicatedMasteryItem();
	void STATIC_OnRep_ReplicatedAssignedMasteryItem();
	class ATslWeapon* STATIC_GetEquippedWeapon();
	int STATIC_GetAppliedCharmId();
};


// Class TslGame.ThrowableItem
// 0x0010 (0x05A0 - 0x0590)
class UThrowableItem : public UBaseWeaponItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0590(0x0008) MISSED OFFSET
	class ATslWeapon*                                  EquippedWeapon;                                           // 0x0598(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThrowableItem"));

		return ptr;
	}


	class ATslWeapon* STATIC_GetEquippedWeapon();
	class ATslWeapon* STATIC_GetDefaultWeaponObject();
};


// Class TslGame.StatTrakableInterface
// 0x0000 (0x0030 - 0x0030)
class UStatTrakableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StatTrakableInterface"));

		return ptr;
	}

};


// Class TslGame.TslItemDataTableManager
// 0x0290 (0x02C0 - 0x0030)
class UTslItemDataTableManager : public UObject
{
public:
	struct FItemTableInfo                              AllTable;                                                 // 0x0030(0x0120) (Edit)
	TArray<class UDataTable*>                          Tables;                                                   // 0x0150(0x0010) (ZeroConstructor, Transient)
	TMap<struct FName, class UItem*>                   AllDefalultItems;                                         // 0x0160(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x50];                                      // 0x01B0(0x0050) MISSED OFFSET
	TArray<struct FName>                               LegacyIDs;                                                // 0x0200(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               AmmoIDs;                                                  // 0x0210(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               AttachmentIDs;                                            // 0x0220(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               EquipmentIDs;                                             // 0x0230(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               SkinIDs;                                                  // 0x0240(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               WeaponIDs;                                                // 0x0250(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               WeaponThrowableIDs;                                       // 0x0260(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               WeaponShieldIDs;                                          // 0x0270(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               CastableIDs;                                              // 0x0280(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UsedByActionIDs;                                          // 0x0290(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               EventItemIDs;                                             // 0x02A0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               CraftItemIDs;                                             // 0x02B0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemDataTableManager"));

		return ptr;
	}

};


// Class TslGame.TslWeapon
// 0x04D8 (0x08C0 - 0x03E8)
class ATslWeapon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x03E8(0x0030) MISSED OFFSET
	class UTexture*                                    WeaponIcon;                                               // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponIconRatio;                                          // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AmmoIconsCount;                                           // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PrimaryClipIconOffset;                                    // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SecondaryClipIconOffset;                                  // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseLaserDot;                                              // 0x0430(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseCustomCrosshair;                                       // 0x0431(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseCustomAimingCrosshair;                                 // 0x0432(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHideCrosshairWhileNotAiming;                             // 0x0433(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                LogWeaponFirePerFireCount;                                // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0438(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUpdatedAttachment;                                      // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdatedSkinData;                                        // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdatedMasteryItem;                                     // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdatedAttachmentOnServer;                              // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdatedCharacterEvent;                                  // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04A8(0x0008) MISSED OFFSET
	struct FWeaponData                                 WeaponConfig;                                             // 0x04B0(0x0190) (Edit, DisableEditOnInstance)
	EWeaponHand                                        WeaponHand;                                               // 0x0640(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0641(0x0007) MISSED OFFSET
	TArray<EWeaponClass>                               CompatibleDualWeapons;                                    // 0x0648(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0658(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslWeapon.Mesh3P
	unsigned char                                      UnknownData05[0x8];                                       // 0x0660(0x0008) UNKNOWN PROPERTY: EncryptedObjectProperty TslGame.TslWeapon.RootScene
	int8_t                                             EquippedWeaponIndex;                                      // 0x0668(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0669(0x0001) MISSED OFFSET
	EAttachmentCalculateType                           AttachmentAniRateCalculateType;                           // 0x066A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAttachmentCalculateType                           AttachmentRecoilPatternScaleCalculateType;                // 0x066B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	TArray<struct FWeaponAttachmentPositionData>       AttachmentPositionData;                                   // 0x0670(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponAttachmentAssetData>          DefaultAttachedItemAssets;                                // 0x0680(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               AttachedItemClasses;                                      // 0x0690(0x0010) (Net, ZeroConstructor, Transient)
	TArray<class UAttachableItem*>                     AttachedItems;                                            // 0x06A0(0x0010) (ZeroConstructor, Transient)
	struct FName                                       WeaponTag;                                                // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       ItemName;                                                 // 0x06B8(0x0018) (Net, Transient)
	EAccessorySlot                                     OverrideAccessorySlot;                                    // 0x06D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAllowedThrowMode                                  AllowedThrowMode;                                         // 0x06D1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x06D2(0x0006) MISSED OFFSET
	class UAkComponent*                                AkComponent;                                              // 0x06D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x06E0(0x0008) MISSED OFFSET
	struct FName                                       MuzzleAttachPoint;                                        // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FiringAttachPoint;                                        // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             MuzzleFx;                                                 // 0x06F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ShellFxAttachPoint;                                       // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ShellFxClass;                                             // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystemComponent*                    MuzzlePSC;                                                // 0x0710(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    MuzzlePSCSecondary;                                       // 0x0718(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UClass*                                      FireCameraShake;                                          // 0x0720(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        FireForceFeedback;                                        // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FireSoundAk;                                              // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FireLoopSoundAk;                                          // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FireFinishSoundAk;                                        // 0x0740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               OutOfAmmoSoundAk;                                         // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ReloadSoundAk;                                            // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               EquipSoundAk;                                             // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               UnequipSoundAk;                                           // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               AimingStartSoundAk;                                       // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               AimingFinishSoundAk;                                      // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ScopingStartSoundAk;                                      // 0x0778(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ScopingFinishSoundAk;                                     // 0x0780(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAnimWeaponType                                    AnimWeaponType;                                           // 0x0788(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0789(0x0007) MISSED OFFSET
	struct FWeaponBasicAnim                            WeaponAnim;                                               // 0x0790(0x0018) (Edit, DisableEditOnInstance)
	struct FWeaponRollAnim                             ProneRollAnim;                                            // 0x07A8(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              HipDuration;                                              // 0x07B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bLoopedMuzzleFX : 1;                                      // 0x07BC(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bLoopedFireSound : 1;                                     // 0x07BC(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData11[0x4B];                                      // 0x07BD(0x004B) MISSED OFFSET
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x0808(0x0020) (Net, Transient)
	struct FReplicatedMasteryItem                      ReplicatedMasteryItem;                                    // 0x0828(0x0004) (Net, Transient)
	struct FReplicatedMasteryItem                      ReplicatedAssignedMasteryItem;                            // 0x082C(0x0004) (Net, Transient)
	struct FName                                       WeaponMeshName;                                           // 0x0830(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x20];                                      // 0x0838(0x0020) MISSED OFFSET
	class UMeshComponent*                              WeaponMasteryMesh;                                        // 0x0858(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               StaticWeaponMasteryItem;                                  // 0x0860(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x5F];                                      // 0x0861(0x005F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon"));

		return ptr;
	}


	void STATIC_Weapon_AttachShoulder();
	void STATIC_Weapon_AttachHand();
	void STATIC_UpdateServerStartFire();
	void STATIC_UpdateAttachmentAssets(bool bSameAssetReload);
	void STATIC_SimulatePhysicalBodyHit(const struct FHitResult& Impact, const struct FVector& ShotDirection);
	void STATIC_SetWeaponMeshHidden(bool Hidden, bool bCastShadow, bool bCastHiddenShadow);
	void STATIC_ServerLogFireWeapon(const struct FAttackId& AttackId);
	void STATIC_OnRep_ReplicatedSkinParam();
	void STATIC_OnRep_ReplicatedMasteryItem();
	void STATIC_OnRep_ReplicatedAssignedMasteryItem();
	void STATIC_OnRep_AttachedItemClasses(TArray<struct FName> OldVal);
	void STATIC_OnLoadedAttachmentAssetDatas(TArray<struct FWeaponAttachmentAssetData> LoadedAttachmentAssetDatas);
	void STATIC_OnAttachmentChanged();
	void STATIC_OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	bool STATIC_IsWeaponAttachedToShoulder();
	bool STATIC_IsCustomSightAttached(EWeaponAttachmentSlotID SlotID);
	float STATIC_GetWeaponReadyDuration();
	class UWeaponMeshComponent* STATIC_GetWeaponMesh();
	struct FName STATIC_GetWeaponMasteryCharmSocketName();
	struct FName STATIC_GetWeaponMasteryCharmAttachSocketName();
	class UEquipableItem* STATIC_GetWeaponItem();
	float STATIC_GetWeaponIconRatio();
	EWeaponGripLeftHand STATIC_GetWeaponGripTypeLeft();
	float STATIC_GetWeaponEquipDuration();
	float STATIC_GetWeaponDamage();
	struct FWeaponData STATIC_GetWeaponConfig();
	EWeaponClass STATIC_GetWeaponClassEnum();
	struct FName STATIC_GetWeaponAttachmentPoint(EWeaponAttachmentSlotID SlotID, const struct FName& Tag);
	struct FWeaponAttachmentData STATIC_GetWeaponAttachmentData(EWeaponAttachmentSlotID SlotID);
	TArray<struct FWeaponAttachmentAssetData> STATIC_GetWeaponAttachmentAssetDatas();
	struct FWeaponAttachmentAssetData STATIC_GetWeaponAttachmentAsset(EWeaponAttachmentSlotID SlotID);
	EWeaponClass STATIC_GetWeaponAnimClassEnum();
	float STATIC_GetWeaponAnimationKick();
	EThrownWeaponType STATIC_GetThrownType();
	struct FVector STATIC_GetSwayModifier();
	float STATIC_GetStanceSwayModifier(EAnimStance Stance);
	class UAnimMontage* STATIC_GetRecoilMontage();
	class ATslCharacter* STATIC_GetPawnOwner();
	float STATIC_GetMovementModifierSprinting();
	float STATIC_GetMovementModifierRunning();
	float STATIC_GetMovementModifierJumpVelocity();
	struct FVector STATIC_GetLowerRailOffset();
	struct FText STATIC_GetItemName();
	bool STATIC_GetDoGripPose();
	TMap<EWeaponAttachmentSlotID, class UAsyncStaticMeshComponent*> STATIC_GetAttachedStaticComponentMap();
	int STATIC_GetAssignedCharmId();
	EWeaponArmState STATIC_GetArmState();
	EAnimWeaponType STATIC_GetAnimWeaponType();
	TArray<struct FWeaponAttachmentData> STATIC_GetAllWeaponAttachmentData();
	TArray<struct FWeaponAttachmentAssetData> STATIC_GetAllWeaponAttachmentAssets();
	void STATIC_AttachWeaponToSlot(int SlotIndex);
	void STATIC_AttachWeaponToMesh();
};


// Class TslGame.WeaponItem
// 0x00F0 (0x0680 - 0x0590)
class UWeaponItem : public UBaseWeaponItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0590(0x0008) MISSED OFFSET
	int                                                AmmoCount;                                                // 0x0598(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AmmoPerClip;                                              // 0x059C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FWeaponAttachmentTagData>            AttachmentTagData;                                        // 0x05A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                ForcedPrimarySlotIndex;                                   // 0x05B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisablePrimaryWeaponSwap;                                // 0x05B4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x05B5(0x0003) MISSED OFFSET
	TArray<class UAttachableItem*>                     AttachedItems;                                            // 0x05B8(0x0010) (Net, ZeroConstructor, Transient)
	EFiringMode                                        FiringMode;                                               // 0x05C8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x05C9(0x0007) MISSED OFFSET
	class ATslWeapon*                                  EquippedWeapon;                                           // 0x05D0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UAkAudioEvent*                               DropAllAttachmentsSoundAk;                                // 0x05D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               InventoryPutAllAttachmentsSoundAk;                        // 0x05E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               DropAndInventoryPutAttachmentsSoundAk;                    // 0x05E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UAkAudioEvent>                     DropAllAttachmentSoundPtr;                                // 0x05F0(0x0020) (Transient)
	TAssetPtr<class UAkAudioEvent>                     InventoryPutAllAttachmentSoundPtr;                        // 0x0610(0x0020) (Transient)
	TAssetPtr<class UAkAudioEvent>                     DropAndInventoryPutAttachmentSoundPtr;                    // 0x0630(0x0020) (Transient)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0650(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponItem"));

		return ptr;
	}


	void STATIC_SetFiringMode(EFiringMode fMode);
	bool STATIC_IsAttachable(class UAttachableItem* Item);
	bool STATIC_HasAttachmentSlot(EWeaponAttachmentSlotID SlotID);
	EFiringMode STATIC_GetFiringMode();
	class ATslWeapon* STATIC_GetEquippedWeapon();
	class ATslWeapon* STATIC_GetDefaultWeaponObject();
	int STATIC_GetAvailableSlotCount();
	class UAttachableItem* STATIC_GetAttachedItem(EWeaponAttachmentSlotID SlotID);
	int STATIC_GetAttachableItemCount();
	TArray<class UAttachableItem*> STATIC_GetAllAttachedItems();
	class UAttachableItem* STATIC_DetachItem(EWeaponAttachmentSlotID SlotID);
	bool STATIC_AttachItem(class UAttachableItem* Item);
};


// Class TslGame.JerryCanItem
// 0x0000 (0x0680 - 0x0680)
class UJerryCanItem : public UWeaponItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.JerryCanItem"));

		return ptr;
	}


	void STATIC_SetFiringMode(EFiringMode fMode);
	bool STATIC_IsAttachable(class UAttachableItem* Item);
	bool STATIC_HasAttachmentSlot(EWeaponAttachmentSlotID SlotID);
	EFiringMode STATIC_GetFiringMode();
	class ATslWeapon* STATIC_GetEquippedWeapon();
	class ATslWeapon* STATIC_GetDefaultWeaponObject();
	int STATIC_GetAvailableSlotCount();
	class UAttachableItem* STATIC_GetAttachedItem(EWeaponAttachmentSlotID SlotID);
	int STATIC_GetAttachableItemCount();
	TArray<class UAttachableItem*> STATIC_GetAllAttachedItems();
	class UAttachableItem* STATIC_DetachItem(EWeaponAttachmentSlotID SlotID);
	bool STATIC_AttachItem(class UAttachableItem* Item);
};


// Class TslGame.ShieldItem
// 0x0010 (0x0690 - 0x0680)
class UShieldItem : public UWeaponItem
{
public:
	int                                                DebuffChargesCount;                                       // 0x0680(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0684(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ShieldItem"));

		return ptr;
	}

};


// Class TslGame.CustomEquipableItem
// 0x00F0 (0x0640 - 0x0550)
class UCustomEquipableItem : public UEquipableItem
{
public:
	struct FTransform                                  SlotOffset_Primary;                                       // 0x0550(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  SlotOffset_Secondary;                                     // 0x0580(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  SlotOffset_SideArm;                                       // 0x05B0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  SlotOffset_Melee;                                         // 0x05E0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  SlotOffset_Thrown;                                        // 0x0610(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CustomEquipableItem"));

		return ptr;
	}


	struct FTransform STATIC_GetOffset_Thrown();
	struct FTransform STATIC_GetOffset_SideArm();
	struct FTransform STATIC_GetOffset_Secondary();
	struct FTransform STATIC_GetOffset_Primary();
	struct FTransform STATIC_GetOffset_Melee();
	int STATIC_GetItemLevel();
};


// Class TslGame.ParachuteItem
// 0x0000 (0x0550 - 0x0550)
class UParachuteItem : public UEquipableItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ParachuteItem"));

		return ptr;
	}


	void STATIC_UnequipBy(class ATslCharacter* Character);
	void STATIC_PostEquip(class ATslCharacter* Character);
	void STATIC_OnRep_ReplicatedSkinItem();
	void STATIC_OnRep_Durability();
	bool STATIC_EquipBy(class ATslCharacter* Character, const struct FEquipPosition& Position);
	bool STATIC_CanEquipTo(class ATslCharacter* Character);
};


// Class TslGame.TslFBRBuff
// 0x0020 (0x0480 - 0x0460)
class ATslFBRBuff : public ATslBuff
{
public:
	float                                              ModifiedValue;                                            // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CoolTimeDuration;                                         // 0x0464(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CoolTimeStartSec;                                         // 0x0468(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FFloatRange                                 PropertyValueRange;                                       // 0x046C(0x0010) (Edit)
	EBuffPropertyType                                  PropertyType;                                             // 0x047C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanRemoveBeneficalBuff;                                  // 0x047D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedReplicateBuffClass;                                  // 0x047E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x047F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRBuff"));

		return ptr;
	}

};


// Class TslGame.TslFBREquipableItem
// 0x0000 (0x0550 - 0x0550)
class UTslFBREquipableItem : public UEquipableItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBREquipableItem"));

		return ptr;
	}


	void STATIC_UnequipBy(class ATslCharacter* Character);
	void STATIC_PostEquip(class ATslCharacter* Character);
	void STATIC_OnRep_ReplicatedSkinItem();
	void STATIC_OnRep_Durability();
	bool STATIC_EquipBy(class ATslCharacter* Character, const struct FEquipPosition& Position);
	bool STATIC_CanEquipTo(class ATslCharacter* Character);
};


// Class TslGame.EventItem
// 0x0000 (0x0340 - 0x0340)
class UEventItem : public UItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.EventItem"));

		return ptr;
	}


	bool STATIC_UseBy(class ATslCharacter* Character);
	bool STATIC_PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_OnRepStackCount(int OldStackCount);
	void STATIC_OnRepItemID();
	bool STATIC_IsWeapon();
	bool STATIC_IsToy();
	bool STATIC_IsToolTipIconAsyncLoading();
	bool STATIC_IsPackageItem();
	bool STATIC_IsIconAsyncLoading();
	bool STATIC_IsEquipable();
	bool STATIC_IsCastableItem();
	bool STATIC_IsAttachment();
	struct FName STATIC_GetItemID();
	class UTexture* STATIC_GetIconTexture();
};


// Class TslGame.RandomlyGeneratableItem
// 0x0068 (0x03A8 - 0x0340)
class URandomlyGeneratableItem : public UItem
{
public:
	struct FString                                     RandomExpression;                                         // 0x0340(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bOpenByKey : 1;                                           // 0x0350(0x0001) (Edit)
	unsigned char                                      bOpenByPoint : 1;                                         // 0x0350(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            OpenKeyItem;                                              // 0x0358(0x0020) (Edit)
	int                                                OpenKeyItemCount;                                         // 0x0378(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PointOpenPrice;                                           // 0x037C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ExchangeBundleId;                                         // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	TArray<struct FLobbyItemBundle>                    BundleList;                                               // 0x0388(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    ReferenceItems;                                           // 0x0398(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RandomlyGeneratableItem"));

		return ptr;
	}

};


// Class TslGame.SurvivalMasteryItem
// 0x0008 (0x0348 - 0x0340)
class USurvivalMasteryItem : public UItem
{
public:
	class UClass*                                      Banner;                                                   // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SurvivalMasteryItem"));

		return ptr;
	}

};


// Class TslGame.UseByPickupItem
// 0x0000 (0x0340 - 0x0340)
class UUseByPickupItem : public UItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.UseByPickupItem"));

		return ptr;
	}


	bool STATIC_UseBy(class ATslCharacter* Character);
	bool STATIC_PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_OnRepStackCount(int OldStackCount);
	void STATIC_OnRepItemID();
	bool STATIC_IsWeapon();
	bool STATIC_IsToy();
	bool STATIC_IsToolTipIconAsyncLoading();
	bool STATIC_IsPackageItem();
	bool STATIC_IsIconAsyncLoading();
	bool STATIC_IsEquipable();
	bool STATIC_IsCastableItem();
	bool STATIC_IsAttachment();
	struct FName STATIC_GetItemID();
	class UTexture* STATIC_GetIconTexture();
};


// Class TslGame.UsedByActionItem
// 0x0000 (0x0340 - 0x0340)
class UUsedByActionItem : public UItem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.UsedByActionItem"));

		return ptr;
	}


	bool STATIC_UseBy(class ATslCharacter* Character);
	bool STATIC_PickUpBy(class ATslCharacter* Character, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_OnRepStackCount(int OldStackCount);
	void STATIC_OnRepItemID();
	bool STATIC_IsWeapon();
	bool STATIC_IsToy();
	bool STATIC_IsToolTipIconAsyncLoading();
	bool STATIC_IsPackageItem();
	bool STATIC_IsIconAsyncLoading();
	bool STATIC_IsEquipable();
	bool STATIC_IsCastableItem();
	bool STATIC_IsAttachment();
	struct FName STATIC_GetItemID();
	class UTexture* STATIC_GetIconTexture();
};


// Class TslGame.ItemPackageProcessor
// 0x0028 (0x0058 - 0x0030)
class UItemPackageProcessor : public UObject
{
public:
	class ATslGameMode*                                GameMode;                                                 // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  ItemSwitchDataTable;                                      // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bItemSwitchFromDroppedItems;                              // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bItemSwitchFromEquippedItems;                             // 0x0041(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bItemSwitchFromInventoryItems;                            // 0x0042(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIncludeSwitchFailedItem;                                 // 0x0043(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreInventoryItems;                                    // 0x0044(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreEquipmentItems;                                    // 0x0045(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x12];                                      // 0x0046(0x0012) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemPackageProcessor"));

		return ptr;
	}

};


// Class TslGame.SpawnTableItemSpawnProcessor
// 0x0F70 (0x0FC0 - 0x0050)
class USpawnTableItemSpawnProcessor : public UItemSpawnProcessor
{
public:
	TArray<struct FItemSpotGroupTypeProperty>          RawSpotGroupProperties;                                   // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  LoadedRawItemSpawnDataTable;                              // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringAssetReference                       RawItemSpawnDataTable;                                    // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UDataTable*                                  LoadedRawItemSpawnTogetherDataTable;                      // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringAssetReference                       RawItemSpawnTogetherDataTable;                            // 0x0080(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	EItemSpawnType                                     ItemSpawnType;                                            // 0x0090(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bOverrideDataTableByModePreset;                           // 0x0091(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE1E];                                     // 0x0092(0x0E1E) MISSED OFFSET
	struct FItemTableSpawner                           ItemTableSpawner;                                         // 0x0EB0(0x00B8)
	bool                                               bUseActorSpawn;                                           // 0x0F68(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x57];                                      // 0x0F69(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SpawnTableItemSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.RandomItemSpawnProcessor
// 0x0038 (0x0FF8 - 0x0FC0)
class URandomItemSpawnProcessor : public USpawnTableItemSpawnProcessor
{
public:
	TAssetPtr<class UDataTable>                        RandomItemSpawnProcessorDataTable;                        // 0x0FC0(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0FE0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RandomItemSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.ItemSpot
// 0x0008 (0x03F0 - 0x03E8)
class AItemSpot : public AActor
{
public:
	class UItemSpotGroupComponent*                     SpotGroupComponent;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemSpot"));

		return ptr;
	}

};


// Class TslGame.ItemSpotComponent
// 0x0010 (0x04C0 - 0x04B0)
class UItemSpotComponent : public USceneComponent
{
public:
	EItemSpotType                                      ItemSpotType;                                             // 0x04B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckComplexCollision;                                   // 0x04B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04B2(0x0002) MISSED OFFSET
	float                                              RandomSpawnRadius;                                        // 0x04B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           HouseID;                                                  // 0x04B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bItemCreated;                                             // 0x04BC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemSpotComponent"));

		return ptr;
	}

};


// Class TslGame.ItemSpotGroupComponent
// 0x0010 (0x04C0 - 0x04B0)
class UItemSpotGroupComponent : public USceneComponent
{
public:
	EItemSpotGroupType                                 SpotGroupType;                                            // 0x04B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x04B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemSpotGroupComponent"));

		return ptr;
	}

};


// Class TslGame.JukeBoxSpot
// 0x0008 (0x03F0 - 0x03E8)
class AJukeBoxSpot : public AActor
{
public:
	class UJukeBoxSpotComponent*                       SpotComponent;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.JukeBoxSpot"));

		return ptr;
	}

};


// Class TslGame.JukeBoxSpotComponent
// 0x0000 (0x04B0 - 0x04B0)
class UJukeBoxSpotComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.JukeBoxSpotComponent"));

		return ptr;
	}


	void STATIC_ToggleVisibility(bool bPropagateToChildren);
	bool STATIC_SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void STATIC_SetWorldScale3D(const struct FVector& NewScale);
	void STATIC_SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void STATIC_SetRelativeScale3D(const struct FVector& NewScale3D);
	void STATIC_SetIsAttachmentReplicated(bool ShouldReplicate);
	void STATIC_SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void STATIC_SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void STATIC_SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void STATIC_ResetRelativeTransform();
	void STATIC_OnRep_Visibility(bool OldValue);
	void STATIC_OnRep_Transform();
	void STATIC_OnRep_AttachSocketName();
	void STATIC_OnRep_AttachParent();
	void STATIC_OnRep_AttachChildren();
	void STATIC_K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform STATIC_K2_GetComponentToWorld();
	struct FVector STATIC_K2_GetComponentScale();
	struct FRotator STATIC_K2_GetComponentRotation();
	struct FVector STATIC_K2_GetComponentLocation();
	void STATIC_K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify);
	bool STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool STATIC_K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsVisible();
	bool STATIC_IsSimulatingPhysics(const struct FName& BoneName);
	bool STATIC_IsAnySimulatingPhysics();
	struct FVector STATIC_GetUpVector();
	struct FTransform STATIC_GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator STATIC_GetSocketRotation(const struct FName& InSocketName);
	struct FQuat STATIC_GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector STATIC_GetSocketLocation(const struct FName& InSocketName);
	struct FVector STATIC_GetRightVector();
	struct FTransform STATIC_GetRelativeTransform();
	class APhysicsVolume* STATIC_GetPhysicsVolume();
	void STATIC_GetParentComponents(TArray<class USceneComponent*>* Parents);
	int STATIC_GetNumChildrenComponents();
	struct FVector STATIC_GetForwardVector();
	struct FVector STATIC_GetComponentVelocity();
	void STATIC_GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* STATIC_GetChildComponent(int ChildIndex);
	struct FName STATIC_GetAttachSocketName();
	class USceneComponent* STATIC_GetAttachParent();
	TArray<struct FName> STATIC_GetAllSocketNames();
	bool STATIC_DoesSocketExist(const struct FName& InSocketName);
	void STATIC_DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class TslGame.KakaoSessionClientChecker
// 0x0028 (0x0058 - 0x0030)
class UKakaoSessionClientChecker : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.KakaoSessionClientChecker"));

		return ptr;
	}

};


// Class TslGame.MapLocationZoomTable
// 0x0000 (0x0088 - 0x0088)
class UMapLocationZoomTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapLocationZoomTable"));

		return ptr;
	}

};


// Class TslGame.TslPhysicsVolume
// 0x00A0 (0x04D8 - 0x0438)
class ATslPhysicsVolume : public APhysicsVolume
{
public:
	class AOceanManager*                               OceanManager;                                             // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UClass*                                      DefaultWaterSplash;                                       // 0x0440(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      VehicleWaterSplash;                                       // 0x0448(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              WaterSplashMuteTypes;                                     // 0x0450(0x0010) (Edit, ZeroConstructor)
	class UMeshClippingUnderwaterComponent*            MeshClippingUnderwaterComponent;                          // 0x0460(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0468(0x0010) MISSED OFFSET
	TMap<class UClass*, class UClass*>                 WaterSplashOverrideMap;                                   // 0x0478(0x0050) (Edit, ZeroConstructor)
	float                                              VolumeSizeRatioThrethold;                                 // 0x04C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TouchingActorZOffset;                                     // 0x04CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinWaterDivingVelocity;                                   // 0x04D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPhysicsVolume"));

		return ptr;
	}

};


// Class TslGame.LevelAttribute
// 0x0120 (0x0508 - 0x03E8)
class ALevelAttribute : public AInfo
{
public:
	int                                                NumMapBlock;                                              // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FBox2D                                      MapRect2D;                                                // 0x03EC(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	TAssetPtr<class UMaterialInterface>                MapImageMaterial;                                         // 0x0400(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TMap<struct FName, TAssetPtr<class UMaterialInterface>> AlternativeMapImageMaterials;                             // 0x0420(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMapLocationData>                    MapLocationNameTable;                                     // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EClimate>                              Climate;                                                  // 0x0480(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0481(0x0007) MISSED OFFSET
	struct FStringAssetReference                       WeatherLevelForGI;                                        // 0x0488(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FStringAssetReference                       LandscapeMaterialForGI;                                   // 0x0498(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector                                     LandscapeOriginOffset;                                    // 0x04A8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                LandscapeTileCount;                                       // 0x04B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LandscapeTileWidth;                                       // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseDestructibleBuildingBake;                             // 0x04BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideSplitLevelSettings;                              // 0x04BD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04BE(0x0002) MISSED OFFSET
	struct FBox2D                                      MapBox;                                                   // 0x04C0(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                MainSplitCount;                                           // 0x04D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SplitMaxCount;                                            // 0x04D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                GridMaxDepth;                                             // 0x04DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumOfGrid;                                                // 0x04E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	TArray<class ATslPhysicsVolume*>                   PhysicsVolumes;                                           // 0x04E8(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslPhysicsVolume*>                   OceanPhysicsVolumes;                                      // 0x04F8(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LevelAttribute"));

		return ptr;
	}


	bool STATIC_IsUsingDestructibleBuildingBake();
	bool STATIC_IsClimateCold();
};


// Class TslGame.LobbyCharacterPivot
// 0x0020 (0x0408 - 0x03E8)
class ALobbyCharacterPivot : public AActor
{
public:
	struct FString                                     NameTagSocket;                                            // 0x03E8(0x0010) (Edit, ZeroConstructor)
	struct FVector                                     NameTagOffset;                                            // 0x03F8(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyCharacterPivot"));

		return ptr;
	}

};


// Class TslGame.LobbyItemBundleIdPublisher
// 0x0028 (0x0058 - 0x0030)
class ULobbyItemBundleIdPublisher : public UObject
{
public:
	struct FString                                     LobbyItemPath;                                            // 0x0030(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0040(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyItemBundleIdPublisher"));

		return ptr;
	}

};


// Class TslGame.LobbyLink
// 0x00B0 (0x00E0 - 0x0030)
class ULobbyLink : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0030(0x00A8) MISSED OFFSET
	bool                                               bResponsePrepareUsers;                                    // 0x00D8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyLink"));

		return ptr;
	}

};


// Class TslGame.LobbyParachute
// 0x0040 (0x0428 - 0x03E8)
class ALobbyParachute : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	class USkeletalMesh*                               ParachuteSK;                                              // 0x03F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x0400(0x0020) (Net, Transient)
	class USkinnableSkeletalMeshComponent*             ParachuteSKReference;                                     // 0x0420(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyParachute"));

		return ptr;
	}


	void STATIC_OnRep_ReplicatedSkinParam();
	void STATIC_InitializeParachuteMesh();
};


// Class TslGame.LobbySceneManagerComponent
// 0x0200 (0x0400 - 0x0200)
class ULobbySceneManagerComponent : public UActorComponent
{
public:
	struct FString                                     CachedPreviousSceneName;                                  // 0x0200(0x0010) (ZeroConstructor, Transient)
	class UDataTable*                                  SceneDataTable;                                           // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  ViewModeSceneDataTable;                                   // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  SceneTravelDatatable;                                     // 0x0220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TMap<EViewModeCategory, EViewModeActorCenterPosition> ViewModeActorCenterPositionMap;                           // 0x0228(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       MainCameraTag;                                            // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstSceneTravel;                                         // 0x0280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       DefaultSceneTravel;                                       // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TMap<struct FString, class ACameraActor*>          CachedCameraActors;                                       // 0x0290(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x60];                                      // 0x02E0(0x0060) MISSED OFFSET
	class ATslPostProcessEffect*                       MainMenuPPE;                                              // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CachedDOFFarBlueSize;                                     // 0x0348(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	struct FString                                     CurrentSceneName;                                         // 0x0350(0x0010) (ZeroConstructor, Transient)
	class ATslBaseLobbySceneTravel*                    LobbySceneTravel;                                         // 0x0360(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslBaseLobbySceneTravel*                    CameraMove;                                               // 0x0368(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInitScene;                                             // 0x0370(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0371(0x000F) MISSED OFFSET
	struct FString                                     SaveCameraKey;                                            // 0x0380(0x0010) (ZeroConstructor, Transient)
	float                                              LastCharacterCameraMoveTime;                              // 0x0390(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TMap<uint32_t, bool>                               OverrideCharacterVisibility;                              // 0x0398(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbySceneManagerComponent"));

		return ptr;
	}


	void STATIC_OnUpdateWhenSceneVisibility(const struct FTslLobbySceneDataPair& SceneDataPair);
	void STATIC_OnUpdateSceneData(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void STATIC_OnUpdateScene_CameraMove(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void STATIC_OnUpdateScene(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void STATIC_OnFinishTravel_CameraMove(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void STATIC_OnFinishTravel(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void STATIC_DoLoadLevel();
};


// Class TslGame.LobbyWidget
// 0x0000 (0x0250 - 0x0250)
class ULobbyWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyWidget"));

		return ptr;
	}


	void STATIC_UnregisterInputComponent();
	void STATIC_Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void STATIC_StopListeningForInputAction(const struct FName& ActionName, TEnumAsByte<EInputEvent> EventType);
	void STATIC_StopListeningForAllInputActions();
	void STATIC_StopAnimation(class UWidgetAnimation* InAnimation);
	void STATIC_StopAllAnimations();
	void STATIC_SetPositionInViewport(const struct FVector2D& Position, bool bRemoveDPIScale);
	void STATIC_SetPlaybackSpeed(class UWidgetAnimation* InAnimation, float PlaybackSpeed);
	void STATIC_SetPadding(const struct FMargin& InPadding);
	void STATIC_SetOwningPlayer(class APlayerController* LocalPlayerController);
	void STATIC_SetOwningLocalPlayer(class ULocalPlayer* LocalPlayer);
	void STATIC_SetNumLoopsToPlay(class UWidgetAnimation* InAnimation, int NumLoopsToPlay);
	void STATIC_SetInputActionPriority(int NewPriority);
	void STATIC_SetInputActionBlocking(bool bShouldBlock);
	void STATIC_SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void STATIC_SetDesiredSizeInViewport(const struct FVector2D& Size);
	void STATIC_SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void STATIC_SetAnchorsInViewport(const struct FAnchors& Anchors);
	void STATIC_SetAlignmentInViewport(const struct FVector2D& Alignment);
	void STATIC_ReverseAnimation(class UWidgetAnimation* InAnimation);
	void STATIC_RemoveFromViewport();
	void STATIC_RegisterInputComponent();
	void STATIC_PreConstruct(bool IsDesignTime);
	void STATIC_PlaySound(class USoundBase* SoundToPlay);
	void STATIC_PlayAnimationTo(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed);
	void STATIC_PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed);
	float STATIC_PauseAnimation(class UWidgetAnimation* InAnimation);
	struct FEventReply STATIC_OnTouchStarted(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply STATIC_OnTouchMoved(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply STATIC_OnTouchGesture(const struct FGeometry& MyGeometry, const struct FPointerEvent& GestureEvent);
	struct FEventReply STATIC_OnTouchEnded(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply STATIC_OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void STATIC_OnPaint(struct FPaintContext* Context);
	struct FEventReply STATIC_OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void STATIC_OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void STATIC_OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply STATIC_OnMotionDetected(const struct FGeometry& MyGeometry, const struct FMotionEvent& InMotionEvent);
	struct FEventReply STATIC_OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply STATIC_OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply STATIC_OnKeyChar(const struct FGeometry& MyGeometry, const struct FCharacterEvent& InCharacterEvent);
	struct FEventReply STATIC_OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void STATIC_OnFocusLost(const struct FFocusEvent& InFocusEvent);
	bool STATIC_OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool STATIC_OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void STATIC_OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void STATIC_OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void STATIC_OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void STATIC_OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply STATIC_OnControllerButtonReleased(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply STATIC_OnControllerButtonPressed(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply STATIC_OnControllerAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	void STATIC_OnAnimationStarted(class UWidgetAnimation* Animation);
	void STATIC_OnAnimationFinished(class UWidgetAnimation* Animation);
	struct FEventReply STATIC_OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void STATIC_ListenForInputAction(const struct FName& ActionName, TEnumAsByte<EInputEvent> EventType, bool bConsume, const struct FScriptDelegate& Callback);
	bool STATIC_IsPlayingAnimation();
	bool STATIC_IsListeningForInputAction(const struct FName& ActionName);
	bool STATIC_IsInViewport();
	bool STATIC_IsInteractable();
	bool STATIC_IsAnyAnimationPlaying();
	bool STATIC_IsAnimationPlaying(class UWidgetAnimation* InAnimation);
	class APawn* STATIC_GetOwningPlayerPawn();
	class APlayerController* STATIC_GetOwningPlayer();
	class ULocalPlayer* STATIC_GetOwningLocalPlayer();
	bool STATIC_GetIsVisible();
	float STATIC_GetAnimationCurrentTime(class UWidgetAnimation* InAnimation);
	struct FAnchors STATIC_GetAnchorsInViewport();
	struct FVector2D STATIC_GetAlignmentInViewport();
	void STATIC_FinishStoppedSequencePlayers();
	void STATIC_Destruct();
	void STATIC_Construct();
	void STATIC_AddToViewport(int ZOrder);
	bool STATIC_AddToPlayerScreen(int ZOrder);
};


// Class TslGame.MasteryBannerController
// 0x0088 (0x0470 - 0x03E8)
class AMasteryBannerController : public AActor
{
public:
	struct FName                                       BannerMaterialSlotName;                                   // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RankParamName;                                            // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RankBorderParamName;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       PrimaryBannerColorParamName;                              // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SecondaryBannerColorParamName;                            // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             BannerAnimation;                                          // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TMap<int, class UTexture*>                         RankBorderTextures;                                       // 0x0418(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class AActor*                                      BannerActor;                                              // 0x0468(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MasteryBannerController"));

		return ptr;
	}


	void STATIC_SpawnBanner(const struct FString& BannerId, int SurvivalMasteryLevel, bool PlayAnimation, bool ShowBackgroundScene);
	void STATIC_DespawnBanner();
};


// Class TslGame.MasteryCharacter
// 0x0028 (0x0410 - 0x03E8)
class AMasteryCharacter : public AActor
{
public:
	class UAsyncStaticMeshComponent*                   BannerMeshComponent;                                      // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TAssetPtr<class USkeletalMesh>                     BannerAsset;                                              // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MasteryCharacter"));

		return ptr;
	}


	void STATIC_SpawnBanner();
	void STATIC_DespawnBanner();
};


// Class TslGame.WeaponMeshComponent
// 0x0100 (0x12A0 - 0x11A0)
class UWeaponMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x11A0(0x0018) MISSED OFFSET
	TArray<struct FWeaponAttachmentAssetData>          AttachedDatas;                                            // 0x11B8(0x0010) (ZeroConstructor, Transient)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x11C8(0x0020) (Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x11E8(0x0010) MISSED OFFSET
	TMap<EWeaponAttachmentSlotID, class UAsyncStaticMeshComponent*> AttachedStaticComponentMap;                               // 0x11F8(0x0050) (ExportObject, ZeroConstructor, Transient)
	float                                              ForceUpdatePoseDistanceSqr;                               // 0x1248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceTickPose;                                           // 0x124C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x124D(0x0003) MISSED OFFSET
	class AStatTrakActor*                              StatTrakActor;                                            // 0x1250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x1258(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLoadedAttachmentAssetDatas;                             // 0x1268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UpdateWeaponMeshOnLoadedAttachment;                       // 0x1278(0x0010) (ZeroConstructor, InstancedReference)
	struct FReplicatedMasteryItem                      ReplicatedMasteryItem;                                    // 0x1288(0x0004)
	unsigned char                                      UnknownData04[0x4];                                       // 0x128C(0x0004) MISSED OFFSET
	class UMeshComponent*                              WeaponMasteryMesh;                                        // 0x1290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               StaticWeaponMasteryItem;                                  // 0x1298(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x1299(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponMeshComponent"));

		return ptr;
	}


	void STATIC_OnAttachmentStaticMeshLoaded();
};


// Class TslGame.MasteryPose
// 0x0010 (0x03F8 - 0x03E8)
class AMasteryPose : public AActor
{
public:
	TArray<struct FString>                             ItemIds;                                                  // 0x03E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MasteryPose"));

		return ptr;
	}


	void STATIC_ShowEffects();
	void STATIC_InitWeaponMesh(class UWeaponMeshComponent* MeshRef, class UClass* InWeaponClass, const struct FName& InWeaponMeshName, bool bOverrideMeshToDefaultMesh, bool bIsShadowMesh);
	void STATIC_ClearEffectsEvent();
	void STATIC_AttachObjectsEvent(class ACharacter* Character);
	void STATIC_ApplySkins(class USceneComponent* PropToSkin);
};


// Class TslGame.CenterSafetyZoneAirborneMatchPreparer
// 0x0020 (0x0108 - 0x00E8)
class UCenterSafetyZoneAirborneMatchPreparer : public UAirborneMatchPreparer
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CenterSafetyZoneAirborneMatchPreparer"));

		return ptr;
	}


	void STATIC_CreateAircraft();
	void STATIC_AllowDealDamage();
};


// Class TslGame.ESportsAirborneMatchPreparer
// 0x0000 (0x00E8 - 0x00E8)
class UESportsAirborneMatchPreparer : public UAirborneMatchPreparer
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ESportsAirborneMatchPreparer"));

		return ptr;
	}


	void STATIC_CreateAircraft();
	void STATIC_AllowDealDamage();
};


// Class TslGame.NormalMatchPreparer
// 0x0018 (0x0078 - 0x0060)
class UNormalMatchPreparer : public UMatchPreparer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) MISSED OFFSET
	int                                                AvailablePlayerStartCount;                                // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NormalMatchPreparer"));

		return ptr;
	}

};


// Class TslGame.MaterialClipVolumeComponent
// 0x00E0 (0x0AA0 - 0x09C0)
class UMaterialClipVolumeComponent : public UPrimitiveComponent
{
public:
	struct FVector4                                    BoundingSphere;                                           // 0x09C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                VisualizePlaneCollection;                                 // 0x09D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisualizeSoftPlane;                                       // 0x09D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bVisualizeBoundingSphere;                                 // 0x09D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bClipVisualizedPlanes;                                    // 0x09D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyOutsidePlaneOffsets;                                // 0x09DA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x09DB(0x0001) MISSED OFFSET
	int                                                VisualizationLineDensityFront;                            // 0x09DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisualizationLineDensityBack;                             // 0x09E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisualizationPlaneSize;                                   // 0x09E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialClipVolumeImportance>         VolumeImportance;                                         // 0x09E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x09E9(0x0003) MISSED OFFSET
	struct FMaterialClipVolumeTypeMask                 MaterialClipVolumeTypes;                                  // 0x09EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                GenerateUnderwaterMaskForFirstNPlanes;                    // 0x09F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CullingDistance;                                          // 0x09F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FMaterialClipPlane>                  ConvexHullPlanes;                                         // 0x09F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection1;                                  // 0x0A08(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection2;                                  // 0x0A18(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection3;                                  // 0x0A28(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection4;                                  // 0x0A38(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection5;                                  // 0x0A48(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection6;                                  // 0x0A58(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection7;                                  // 0x0A68(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlane>                  ConcavePlaneCollection8;                                  // 0x0A78(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMaterialClipPlaneSoft>              SoftPlanes;                                               // 0x0A88(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0A98(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MaterialClipVolumeComponent"));

		return ptr;
	}

};


// Class TslGame.MaterialMergeSettings
// 0x0080 (0x00B0 - 0x0030)
class UMaterialMergeSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0030(0x0058) MISSED OFFSET
	class UMaterial*                                   MasterMaterial;                                           // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   MergedMaterial;                                           // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FMaterialMergerParameters>           ParameterList;                                            // 0x0098(0x0010) (Edit, ZeroConstructor)
	bool                                               bUpdateParameterList;                                     // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MaterialMergeSettings"));

		return ptr;
	}

};


// Class TslGame.MissionManager
// 0x0018 (0x0400 - 0x03E8)
class AMissionManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<class ATslSpecificLocationMarker*>          SpecificLocationMarkers;                                  // 0x03F0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MissionManager"));

		return ptr;
	}


	void STATIC_OnRedZoneStarted();
	void STATIC_OnRedZoneEnded();
	void STATIC_OnBlackZoneStarted();
	void STATIC_OnBlackZoneEnded();
	void STATIC_CheckIfDrivingInRedZone();
	void STATIC_CheckIfDrivingInBlackZone();
};


// Class TslGame.BattleRoyaleController_ESports
// 0x0000 (0x0660 - 0x0660)
class ABattleRoyaleController_ESports : public ABattleRoyaleModeController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BattleRoyaleController_ESports"));

		return ptr;
	}


	void STATIC_UpdateGamePhase();
	bool STATIC_SetNextGasInBlackboard();
	void STATIC_SetNeedUpdateGasData(bool InbNeedUpdateGasData);
	bool STATIC_LastCircleAlgorithm();
	bool STATIC_IsPauseBlueZone();
	void STATIC_InitRadius();
	float STATIC_GetPoisonGasDamagePerSecond(float CharaterToCenterDistance, float SafetyZoneRadius, float PoisonGasWarningRadius);
	bool STATIC_GetNeedUpdateGasData();
	int STATIC_GetMaxPhaseCount();
};


// Class TslGame.BattleRoyaleModeController_Random
// 0x0060 (0x06C0 - 0x0660)
class ABattleRoyaleModeController_Random : public ABattleRoyaleModeController
{
public:
	TAssetPtr<class UDataTable>                        RandomBlueZoneDataTable;                                  // 0x0660(0x0020) (Edit, BlueprintVisible)
	class UDataTable*                                  LoadedRandomBlueZoneDataTable;                            // 0x0680(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TAssetPtr<class UCurveFloat>                       DamageMagnifierCurve;                                     // 0x0688(0x0020) (Edit, BlueprintVisible)
	class UCurveFloat*                                 LoadedDamageMagnifierCurve;                               // 0x06A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x06B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BattleRoyaleModeController_Random"));

		return ptr;
	}

};


// Class TslGame.TslDestructibleSurfaceManager
// 0x02E8 (0x06D0 - 0x03E8)
class ATslDestructibleSurfaceManager : public AActor
{
public:
	TArray<TWeakObjectPtr<class ADestructibleBuildingContainer>> LoadedBuildingContainers;                                 // 0x03E8(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  LoadedInterfaceObjects;                                   // 0x03F8(0x0010) (Edit, ExportObject, ZeroConstructor, EditConst)
	TArray<struct FDestructibleBlackZoneOrigin>        BlackZoneOrigins;                                         // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0418(0x0010) MISSED OFFSET
	TMap<struct FGuid, struct FDestructibleBlackZoneBeacon> Beacons;                                                  // 0x0428(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	class UClass*                                      ShakeClass;                                               // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraShakeInner;                                         // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraShakeOuter;                                         // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraShakeFalloff;                                       // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               orientTowardsEpicenter;                                   // 0x048C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x048D(0x0003) MISSED OFFSET
	class UClass*                                      ExplosionEffectSubclass;                                  // 0x0490(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABZExplosionEffect*                          ExplosionEffect;                                          // 0x0498(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ExplosionDamageOriginOffset;                              // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	TArray<struct FDestroyedBuilding>                  DestroyedBuildings;                                       // 0x04A8(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor, EditConst)
	TArray<struct FDestructibleSurfaceBreach>          DestructibleSurfaceBreaches;                              // 0x04B8(0x0010) (Edit, Net, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData03[0x208];                                     // 0x04C8(0x0208) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructibleSurfaceManager"));

		return ptr;
	}


	void STATIC_SpawnMissile(class UClass* MissileSubclass, const struct FVector& StartLocation, const struct FVector& EndLocation, float TimeToDestination, float MissileIncomingAngle, float MissileIncomingZPivotRotation);
	void STATIC_ServerProcessExplosion(class AActor* IgnoredActor, const struct FVector& ExplosionOrigin, float ExplosionRadius, bool DoDamageHack, class APawn* ExplosionInstigator);
	void STATIC_ProcessBlackZoneBuildingExplosionMeshSwaps(const struct FGuid& BuildingID);
	void STATIC_OnRep_DestructibleSurfaceBreaches();
	void STATIC_OnRep_DestroyedBuildings();
	void STATIC_MultiCastHit(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, uint16_t InstancedComponentId, unsigned char DamageType);
	void STATIC_MultiCastExplosion_NonInstanced(const struct FDestructibleHitStripped& StrippedHit, uint16_t InstancedDestructibleComponentId, class UPrimitiveComponent* HitComponent, class APawn* ExplosionInstigator);
	void STATIC_MultiCastExplosion_Instanced(const struct FDestructibleHitStripped& StrippedHit, uint16_t InstancedDestructibleComponentId, class UPrimitiveComponent* HitComponent, class APawn* ExplosionInstigator);
	void STATIC_Multicast_ClientProcessExplosionEffects(const struct FVector& ExplosionOrigin);
	bool STATIC_IsDebugging();
	void STATIC_ClientRevertBuildingAndProcessBuildingContainers(const struct FGuid& BuildingID);
	void STATIC_ClientRevertAllBuildingsAndProcessBuildingContainers();
	void STATIC_ClientPlayDestructionAnim(class USkeletalMesh* BuildingMesh, class UAnimationAsset* destructionAnim, float SelfDeleteDelayTime, const struct FTransform& BeaconTransform, const struct FVector& BuildingLocalOriginOffset);
	void STATIC_ClientDrawDebugSphere(const struct FVector& Location, float Radius, bool isRed, float LifeTime);
	void STATIC_ClientDrawDebugLine(const struct FVector& Start, const struct FVector& End, const struct FColor& Color, float LifeTime);
	void STATIC_ClientDrawDebugBox(const struct FVector& Location, const struct FVector& Extent, const struct FQuat& Rotation, const struct FColor& Color, float LifeTime);
	bool STATIC_CheckLocationForValidBeacons(const struct FVector& BlueZoneCenter, float BlueZoneRadius, bool AllowInvaidTargets, bool SearchNearLocation, const struct FVector& SearchLocation, float StrikeInnerRadius, float StrikeMidRadius, float StrikeOuterRadius, int MaxMidCount, int MaxFarCount, TArray<struct FGuid>* BeaconIds, struct FVector* BlackZoneOrigin, float* BlackZoneRadius);
};


// Class TslGame.FloorSnapItemPackage
// 0x0028 (0x05C0 - 0x0598)
class AFloorSnapItemPackage : public AItemPackage
{
public:
	struct FText                                       CategoryName;                                             // 0x0598(0x0018) (Edit, DisableEditOnInstance)
	bool                                               bUseWaterSurface;                                         // 0x05B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05B1(0x0003) MISSED OFFSET
	float                                              WaterSurfaceThreshold;                                    // 0x05B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x05B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FloorSnapItemPackage"));

		return ptr;
	}


	struct FText STATIC_GetCategory();
};


// Class TslGame.BlackZoneController
// 0x0178 (0x0678 - 0x0500)
class ABlackZoneController : public AModeController
{
public:
	TArray<struct FGuid>                               ActiveBeaconIds;                                          // 0x0500(0x0010) (ZeroConstructor)
	struct FVector                                     BlackZoneCenter;                                          // 0x0510(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData)
	float                                              BlackZoneRadius;                                          // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BlackZoneAreaName;                                        // 0x0520(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NumberOfBuildingDestroyedThisBombing;                     // 0x0528(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NumberOfBuildingsToDestroy;                               // 0x052C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UClass*                                      MissileSubclass;                                          // 0x0530(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerNearBuildingMaxDamage;                              // 0x0538(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerNearBuildingMaxDistance;                            // 0x053C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StrikeInnerRadius;                                        // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StrikeMidRadius;                                          // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StrikeOuterRadius;                                        // 0x0548(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxMidCount;                                              // 0x054C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxFarCount;                                              // 0x0550(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EBlackZoneState                                    BlackZoneState;                                           // 0x0554(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0555(0x0007) MISSED OFFSET
	float                                              MIN_DAMAGE_DISTANCE;                                      // 0x055C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TINNITUS_DISTANCE;                                        // 0x0560(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               DoOnce;                                                   // 0x0564(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0565(0x0003) MISSED OFFSET
	struct FAttackId                                   BlackZoneAttackId;                                        // 0x0568(0x0004)
	bool                                               bStopBlackZone;                                           // 0x056C(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bDisableBlackZone;                                        // 0x056D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x056E(0x0002) MISSED OFFSET
	int                                                MissilesFired;                                            // 0x0570(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0574(0x0004) MISSED OFFSET
	struct FText                                       BlackZoneStartText;                                       // 0x0578(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      BombTemplateClass;                                        // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   BlackZoneSirenSound;                                      // 0x05A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundAttenuation*                           BlackZoneSirenSoundAttenuation;                           // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinimumBuildingsToDestroy;                                // 0x05B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StartDelay;                                               // 0x05B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StandbyDelay;                                             // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RequestedStandbyDelay;                                    // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BombingDelay;                                             // 0x05C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BombProjectileDelayTime;                                  // 0x05C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MissileSpawnHeight;                                       // 0x05C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFireMissilesAtAngle;                                     // 0x05CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x05CD(0x0003) MISSED OFFSET
	struct FVector2D                                   MissileIncomingAngleRange;                                // 0x05D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRandomizeMissileAngleZRotation;                          // 0x05D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05D9(0x0003) MISSED OFFSET
	struct FVector2D                                   BombingInterval;                                          // 0x05DC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              BlackZoneDuration;                                        // 0x05E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseBlackZoneCurves;                                      // 0x05E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x05E9(0x0007) MISSED OFFSET
	class UCurveFloat*                                 BombingDelayRateCurve;                                    // 0x05F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 BombingIntervalRateCurve;                                 // 0x05F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 DestructionRateCurve;                                     // 0x0600(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SirenServerParticleClass;                                 // 0x0608(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslServerParticle*                          SirenServerPaticle;                                       // 0x0610(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FBlackZoneTarget>                    TargetQueue;                                              // 0x0618(0x0010) (ZeroConstructor, Transient)
	bool                                               bAllowWarheadDestruction;                                 // 0x0628(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowInvalidTargets;                                     // 0x0629(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x6];                                       // 0x062A(0x0006) MISSED OFFSET
	TArray<class AActor*>                              ActiveEffectControllers;                                  // 0x0630(0x0010) (ZeroConstructor)
	TArray<class UAkAudioEvent*>                       TinnitusLevels;                                           // 0x0640(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear)
	bool                                               bFirstZoneSelected;                                       // 0x0650(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0651(0x0003) MISSED OFFSET
	float                                              BaseBombingDelay;                                         // 0x0654(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   BaseBombingInterval;                                      // 0x0658(0x0008) (IsPlainOldData)
	float                                              MissileIncomingAngle;                                     // 0x0660(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MissileIncomingZPivotRotation;                            // 0x0664(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x10];                                      // 0x0668(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BlackZoneController"));

		return ptr;
	}


	void STATIC_SpawnMissile(const struct FVector& Start, const struct FVector& End, float Delay);
	void STATIC_SpawnBombProjectile();
	void STATIC_RequestBlackZoneAtLocation(const struct FVector& Location, class ATslCharacter* TargetInstigator, bool PriorityTarget);
	void STATIC_RegisterEffectController(class AActor* EffectController);
	void STATIC_OnBombingStart(const struct FVector& BlackZonePosition);
	void STATIC_OnBombing();
	void STATIC_OnBlackZoneStart(const struct FVector& BlackZonePosition);
	void STATIC_OnBlackZoneEnd();
	bool STATIC_IsBlackZoneFinishedBombing();
	bool STATIC_IsBlackZoneDisabled();
	void STATIC_InitBlackZoneSetting();
	float STATIC_GetRandomBombingInterval();
	void STATIC_DropOnFloorOnTimer(class AFloorSnapItemPackage* Package);
	void STATIC_DestroyDroppedItems(struct FDestructibleBlackZoneKillBox* KillBox);
	void STATIC_DestroyBuildingOnTimer(const struct FGuid& beaconBuildingId, class AActor* DestructionSource);
	void STATIC_DamagePlayerInVehicle(class ATslCharacter* ridingCharacter, float DamageRatio, const struct FDamageEvent& DamageEvent, bool hasInstigator, class ATslCharacter* DamageInstigator);
};


// Class TslGame.RedZoneController
// 0x00F8 (0x05F8 - 0x0500)
class ARedZoneController : public AModeController
{
public:
	class UBehaviorTree*                               RedZoneBehaviorTree;                                      // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BombTemplateClass;                                        // 0x0508(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ERedZoneGenerateType                               RedZoneGenerateType;                                      // 0x0510(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0511(0x0003) MISSED OFFSET
	float                                              StartDelay;                                               // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   NextCreateRedZoneInterval;                                // 0x0518(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              BombingDelay;                                             // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OuterRadius;                                              // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0528(0x0004) MISSED OFFSET
	struct FVector2D                                   LimitExceptExplosionRadius;                               // 0x052C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              ExceptExplosionRadius;                                    // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RedZoneDuration;                                          // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   BombingInterval;                                          // 0x053C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              RedZoneLifeTime;                                          // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RayStartHeight;                                           // 0x0548(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RedZoneRadiusOffsetRate;                                  // 0x054C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       RedZoneStartText;                                         // 0x0550(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                RedZoneProjectileCount;                                   // 0x0568(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFGSquircularMapping;                                     // 0x056C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x056D(0x0003) MISSED OFFSET
	float                                              RayCheckAroundLength;                                     // 0x0570(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseRedZoneSizeRate;                                      // 0x0574(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0575(0x0003) MISSED OFFSET
	class UCurveFloat*                                 RedZoneSizeRateCurve;                                     // 0x0578(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 BombingDelayRateCurve;                                    // 0x0580(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 BombingIntervalRateCurve;                                 // 0x0588(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 ProjectileCountCurve;                                     // 0x0590(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 RedZoneDurationRateCurve;                                 // 0x0598(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               BombingStartSound;                                        // 0x05A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RedZoneBombingFieldClass;                                 // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RedZoneBombComponentClass;                                // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ARedZoneBombingField*                        CurrentBombingField;                                      // 0x05B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BeginSoundDelay;                                          // 0x05C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET
	TArray<ERedZoneGenerateType>                       RedZoneGenerateTypeByPhase;                               // 0x05C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              WaterVolumeRayHeight;                                     // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x05DC(0x0004) MISSED OFFSET
	struct FName                                       NAME_RedZoneRemainedTime;                                 // 0x05E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x05E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RedZoneController"));

		return ptr;
	}

};


// Class TslGame.TslPlatoonFireSupportController
// 0x0040 (0x0638 - 0x05F8)
class ATslPlatoonFireSupportController : public ARedZoneController
{
public:
	bool                                               bNotifyToAllPlayers;                                      // 0x05F8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05F9(0x0007) MISSED OFFSET
	class UTslPlatoonCommanderSystem*                  OwnerSystem;                                              // 0x0600(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0608(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonFireSupportController"));

		return ptr;
	}


	void STATIC_Callback_WrapUp();
	void STATIC_Callback_Prepare();
	void STATIC_Callback_Explode();
	void STATIC_Callback_Clear();
};


// Class TslGame.TslSurvivalIngameRewardController
// 0x0028 (0x0528 - 0x0500)
class ATslSurvivalIngameRewardController : public AModeController
{
public:
	struct FStringAssetReference                       ItemDataTableAssetRef;                                    // 0x0500(0x0010) (Edit, Transient, DisableEditOnInstance)
	class UDataTable*                                  ItemDataTableOnPhase;                                     // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class ATslPlayerController*>                CachePlayerControllers;                                   // 0x0518(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSurvivalIngameRewardController"));

		return ptr;
	}


	void STATIC_OnUpdateGamePhase(int InPhase, bool bIsReleased);
};


// Class TslGame.LobbyCharacter
// 0x0150 (0x09E0 - 0x0890)
class ALobbyCharacter : public AMutableCharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0890(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHost;                                                   // 0x0898(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRankEmblem;                                             // 0x08A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UTslEmoteComponent*                          EmoteComponent;                                           // 0x08B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x08C0(0x0040) MISSED OFFSET
	unsigned char                                      bHasJacket : 1;                                           // 0x0900(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsReady : 1;                                             // 0x0900(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsHost : 1;                                              // 0x0900(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsLogout : 1;                                            // 0x0900(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsInCustomizationScene : 1;                              // 0x0900(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	ELobbyCharacterAnimationType                       LobbyCharacterAnimationType;                              // 0x0901(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0902(0x0002) MISSED OFFSET
	struct FRotator                                    ToRotate;                                                 // 0x0904(0x000C) (Transient, IsPlainOldData)
	bool                                               bIsUsingCustomAnimation;                                  // 0x0910(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationMode>                        TempAnimationMode;                                        // 0x0911(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0912(0x0006) MISSED OFFSET
	struct FSingleAnimationPlayData                    TempAnimationData;                                        // 0x0918(0x0018)
	bool                                               bShouldTickRotation;                                      // 0x0930(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldSupressNametags;                                   // 0x0931(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4E];                                      // 0x0932(0x004E) MISSED OFFSET
	class UWeaponAnimInfoComponent*                    WeaponAnimInfoComponent;                                  // 0x0980(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FLobbyWeaponProcessor                       LobbyWeaponProcessor;                                     // 0x0988(0x0018) (Transient)
	TArray<struct FLobbyItem>                          SkinItemList;                                             // 0x09A0(0x0010) (ZeroConstructor, Transient)
	bool                                               bSimulateWind;                                            // 0x09B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x09B1(0x0007) MISSED OFFSET
	struct FString                                     NameTagSocket;                                            // 0x09B8(0x0010) (ZeroConstructor)
	struct FVector                                     NameTagOffset;                                            // 0x09C8(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x09D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyCharacter"));

		return ptr;
	}


	void STATIC_SetLobbyCharacterAnimationType(ELobbyCharacterAnimationType NewLobbyCharacterAnimationType);
	void STATIC_RemoveCustomAnimation();
	void STATIC_OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	bool STATIC_IsLogout();
	bool STATIC_IsInCustomizationScene();
	int STATIC_GetSlotId();
	ERatingRankType STATIC_GetRankType();
	struct FString STATIC_GetNickName();
	struct FString STATIC_GetNetId();
	ELobbyCharacterAnimationType STATIC_GetLobbyCharacterAnimationType();
	struct FString STATIC_GetClanName();
	EOutGamePlatformProvider STATIC_GetCharacterPlatform();
	void STATIC_ApplyCustomAnimation(class UAnimationAsset* Animation);
};


// Class TslGame.TestMutableCharacter
// 0x0000 (0x0890 - 0x0890)
class ATestMutableCharacter : public AMutableCharacter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TestMutableCharacter"));

		return ptr;
	}


	void STATIC_UpdateAppearence();
	void STATIC_OnRep_PlayerKey();
	void STATIC_OnRep_InstanceDescriptor();
	EGender STATIC_GetGender();
};


// Class TslGame.TslBot
// 0x0000 (0x2280 - 0x2280)
class ATslBot : public ATslCharacter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBot"));

		return ptr;
	}

};


// Class TslGame.TslNewBotCharacter
// 0x0080 (0x2300 - 0x2280)
class ATslNewBotCharacter : public ATslCharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x2280(0x0008) MISSED OFFSET
	struct FEnemyPicker_Fan                            FanData;                                                  // 0x2288(0x0018) (Edit, DisableEditOnInstance)
	TArray<struct FVector>                             FindBuildingInfo;                                         // 0x22A0(0x0010) (Net, ZeroConstructor)
	int                                                SelectItemSpotIndex;                                      // 0x22B0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x22B4(0x000C) MISSED OFFSET
	class ATransportAircraftVehicle*                   ThePlane;                                                 // 0x22C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x38];                                      // 0x22C8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewBotCharacter"));

		return ptr;
	}


	void STATIC_OnFinishUseItem(class UObject* CastObject);
	void STATIC_HB_ReLoad();
	void STATIC_HB_DoMeleeDamage();
};


// Class TslGame.NpcBTTask_ArmedWeapon
// 0x0008 (0x0080 - 0x0078)
class UNpcBTTask_ArmedWeapon : public UBTTaskNode
{
public:
	EAccessorySlot                                     Slot;                                                     // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcBTTask_ArmedWeapon"));

		return ptr;
	}

};


// Class TslGame.NpcBTTask_FireWeapon
// 0x0040 (0x00B8 - 0x0078)
class UNpcBTTask_FireWeapon : public UBTTaskNode
{
public:
	float                                              BurstTime_Min;                                            // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BurstTime_Max;                                            // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BurstInterval_Min;                                        // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BurstInterval_Max;                                        // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                BurstNum_Min;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                BurstNum_Max;                                             // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BurstTime;                                                // 0x0090(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BurstInterval;                                            // 0x0094(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                BurstNum;                                                 // 0x0098(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurBustCount;                                             // 0x009C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UBehaviorTreeComponent*                      MyOwnerComp;                                              // 0x00A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcBTTask_FireWeapon"));

		return ptr;
	}


	void STATIC_TimerBurstEnd();
	void STATIC_TimerBreakEnd();
};


// Class TslGame.NpcBTTask_MeleeAttack
// 0x0058 (0x00D0 - 0x0078)
class UNpcBTTask_MeleeAttack : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0078(0x0048) MISSED OFFSET
	struct FTimerHandle                                TimerHandle;                                              // 0x00C0(0x0008) (Transient)
	class UBehaviorTreeComponent*                      MyOwnerComp;                                              // 0x00C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcBTTask_MeleeAttack"));

		return ptr;
	}

};


// Class TslGame.NpcBTTask_Move
// 0x0008 (0x00C0 - 0x00B8)
class UNpcBTTask_Move : public UBTTask_MoveTo
{
public:
	bool                                               bIsAlwaysMoving;                                          // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLastMoveFailed;                                        // 0x00B9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00BA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcBTTask_Move"));

		return ptr;
	}

};


// Class TslGame.NpcBTTask_SetWanderLocation
// 0x0008 (0x00A8 - 0x00A0)
class UNpcBTTask_SetWanderLocation : public UBTTask_BlackboardBase
{
public:
	ERandomPointSelect                                 PointSelectType;                                          // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A0(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              Radius;                                                   // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcBTTask_SetWanderLocation"));

		return ptr;
	}

};


// Class TslGame.NpcDebugCameraController
// 0x0068 (0x0800 - 0x0798)
class ANpcDebugCameraController : public ADebugCameraController
{
public:
	TArray<class APawn*>                               SelectedPawnArray;                                        // 0x0798(0x0010) (ZeroConstructor, Transient)
	class ATslPlayerController*                        LocalPC;                                                  // 0x07A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ANpcDebugCameraHud*                          MyNDCHud;                                                 // 0x07B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFollowCamera;                                            // 0x07B8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07B9(0x0003) MISSED OFFSET
	struct FVector                                     FollowRelLocation;                                        // 0x07BC(0x000C) (Transient, IsPlainOldData)
	EPathDebugType                                     PathDebugType;                                            // 0x07C8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x07C8(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FVector                                     PathStartLocation;                                        // 0x07CC(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     PathEndLocation;                                          // 0x07D8(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x07E4(0x0004) MISSED OFFSET
	TArray<struct FVector>                             PathResultArray;                                          // 0x07E8(0x0010) (ZeroConstructor, Transient)
	int                                                NpcCount;                                                 // 0x07F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x07FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcDebugCameraController"));

		return ptr;
	}

};


// Class TslGame.NpcDebugCameraHud
// 0x0020 (0x04F0 - 0x04D0)
class ANpcDebugCameraHud : public AHUD
{
public:
	int                                                DrawMovingInfoMaxCounter;                                 // 0x04D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovingInfoDirScale;                                       // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovingInfoDirArrowSize;                                   // 0x04D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovingInfoDirArrowThickness;                              // 0x04DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      MovingInfoDirArrowColor;                                  // 0x04E0(0x0004) (Edit, IsPlainOldData)
	float                                              MovingInfoSpeedScale;                                     // 0x04E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      MovingInfoSpeedArrowColor;                                // 0x04E8(0x0004) (Edit, IsPlainOldData)
	bool                                               bDrawMovingPath;                                          // 0x04EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawAnimation;                                           // 0x04ED(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04EE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NpcDebugCameraHud"));

		return ptr;
	}

};


// Class TslGame.ObserverTagWidget
// 0x0370 (0x0760 - 0x03F0)
class UObserverTagWidget : public UUmgBaseWidget
{
public:
	float                                              OffsetZ;                                                  // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GroggyOffsetZ;                                            // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeadOffsetZ;                                              // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InVehicleOffsetZ;                                         // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Distance;                                                 // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceForName;                                          // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceForIndicator;                                     // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 WidgetCurve;                                              // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 AnchorCurve;                                              // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UTexture2D*>                          TeamBackgroundImages;                                     // 0x0420(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              LifeSpanOnDeath;                                          // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	class UTexture2D*                                  DeathTexture;                                             // 0x0438(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeathRatio;                                               // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0444(0x0004) MISSED OFFSET
	class ATslCharacter*                               Character;                                                // 0x0448(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AReplicatedCharacterData*                    ReplicatedCharacterData;                                  // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0458(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_SizeBox                    WeaponIconSizeBoxBinder;                                  // 0x0470(0x0028) (Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamLogoSwitcherBinder;                                   // 0x0498(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      TeamLogoBinder;                                           // 0x04C0(0x0028) (Edit)
	struct FUmgWidgetBinder_Border                     PlayerInfoBorderBinder;                                   // 0x04E8(0x0030) (Edit)
	struct FUmgWidgetBinder_Image                      TeamColorBgImageBinder;                                   // 0x0518(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      BlackBackgroundImageBinder;                               // 0x0540(0x0028) (Edit)
	struct FUmgWidgetBinder_SizeBox                    HPBoxBinder;                                              // 0x0568(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 HealthGaugeBinder;                                        // 0x0590(0x0020) (Edit)
	struct FUmgWidgetBinder_SizeBox                    PlayerTagNameBoxBinder;                                   // 0x05B0(0x0028) (Edit)
	struct FUmgWidgetBinder_TextBlock                  PlayerTagNameBinder;                                      // 0x05D8(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamNumberTextBinder;                                     // 0x05F8(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamNameBinder;                                           // 0x0618(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamNumberDistanceTextBinder;                             // 0x0638(0x0020) (Edit)
	struct FUmgWidgetBinder_Spacer                     HeadSpacerBinder;                                         // 0x0658(0x0020) (Edit)
	struct FUmgWidgetBinder_Spacer                     SpacerForDistanceBinder;                                  // 0x0678(0x0020) (Edit)
	struct FUmgWidgetBinder_SizeBox                    WeaponImageSizeBoxBinder;                                 // 0x0698(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      WeaponImageBinder;                                        // 0x06C0(0x0028) (Edit)
	struct FUmgWidgetBinder_Border                     CharacterNameTagBinder;                                   // 0x06E8(0x0030) (Edit)
	struct FUmgWidgetBinder_Image                      IndicatorArrowBinder;                                     // 0x0718(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 PlatformImage_Binder;                                     // 0x0740(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverTagWidget"));

		return ptr;
	}


	void STATIC_VisibilityUpdatebyDistance();
	void STATIC_UpdateWeaponIcon();
	void STATIC_UpdateTeamNumber();
	void STATIC_UpdateTeamIcon();
	void STATIC_UpdateTeamColor();
	void STATIC_UpdatePlayerNameTag();
	void STATIC_UpdateHealthVisibility();
	void STATIC_UpdateHealthGauge();
	void STATIC_TimerCheckUpdateList();
	void STATIC_SetTeamNumber(int TeamNumber);
	void STATIC_SetPlayerNameTag(const struct FName& PlayerName, int TeamId);
	void STATIC_OnUpdateWidgetTransform(const struct FVector2D& Pos_UC, bool IsHidden);
	void STATIC_OnMatchStarted(bool bConnection);
	void STATIC_OnJoinPlayerCountChanged(int Count);
	void STATIC_OnAlivePlayerCountChanged(int Count);
	void STATIC_NameTagCustomTick(float Period);
	bool STATIC_IsTeamMember();
	bool STATIC_IsLastSpectatedCharacter();
	void STATIC_HandleWeaponImagePrepass(class UWidget* Widget);
	int STATIC_GetTeamId(class ATslCharacter* TslCharacter);
	struct FLinearColor STATIC_GetTeamColor(class ATslCharacter* TslCharacter);
};


// Class TslGame.ObserverTagManagerBaseWidget
// 0x0078 (0x02C8 - 0x0250)
class UObserverTagManagerBaseWidget : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0250(0x0070) MISSED OFFSET
	class UClass*                                      WidgetTemplate;                                           // 0x02C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverTagManagerBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateReplicateCharacter();
	void STATIC_RemoveReplicatedCharacterData(TArray<class AReplicatedCharacterData*> CharacterData);
	void STATIC_RemoveReplicateCharacter(TArray<class ATslCharacter*> Characters);
	void STATIC_AddReplicatedCharacterData(TArray<class AReplicatedCharacterData*> CharacterData);
	void STATIC_AddReplicateCharacter(TArray<class ATslCharacter*> Characters);
};


// Class TslGame.PacketWatcher
// 0x01B0 (0x01E0 - 0x0030)
class UPacketWatcher : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	float                                              UnitTimeSecForFlush;                                      // 0x0040(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxPacketsToReportAtFlush;                                // 0x0044(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxBunchesToReportAtFlush;                                // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x194];                                     // 0x004C(0x0194) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PacketWatcher"));

		return ptr;
	}


	void STATIC_OnSendKeepAlive(int PacketID);
	void STATIC_OnRPCBunchQueued(class AActor* Actor, class UFunction* Function, int64_t BunchSizeBits, int PacketIdFirst, int PacketIdLast);
	void STATIC_OnPacketNacked(int PacketID);
	void STATIC_OnPacketAcked(int PacketID);
	void STATIC_OnLowLevelPacketSend(int PacketID, int PlainDataSizeBits, int EncryptedDataSizeBits, unsigned char PacketSendingFlag);
};


// Class TslGame.PhysicalMaterialAudioEventData
// 0x0058 (0x0090 - 0x0038)
class UPhysicalMaterialAudioEventData : public UDataAsset
{
public:
	class UAkAudioEvent*                               DefaultEvent;                                             // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<class UPhysicalMaterial*, class UAkAudioEvent*> EventMappings;                                            // 0x0040(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PhysicalMaterialAudioEventData"));

		return ptr;
	}

};


// Class TslGame.PilotSeatDataAsset
// 0x0060 (0x0098 - 0x0038)
class UPilotSeatDataAsset : public UDataAsset
{
public:
	class UBlendSpaceBase*                             PilotSteeringReference;                                   // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               PilotSteeringIdles;                                       // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             PilotSteeringReferenceFPP;                                // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               PilotSteeringIdlesFPP;                                    // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               PilotPedalReference;                                      // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WheelRotation;                                            // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class UAnimSequence*                               PilotLateralSwayAdditive;                                 // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               PilotTransverseSwayAdditive;                              // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAimOffsetBlendSpace*                        PilotAimOffset;                                           // 0x0078(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CamOffset;                                                // 0x0080(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     BodyScale;                                                // 0x008C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PilotSeatDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslBaseCheatManager
// 0x0060 (0x00E0 - 0x0080)
class UTslBaseCheatManager : public UCheatManager
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0080(0x0010) MISSED OFFSET
	TMap<class UDataAsset*, class UDataAsset*>         WeaponDataAssetClones;                                    // 0x0090(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseCheatManager"));

		return ptr;
	}


	void STATIC_UpdateTempMissionData();
	void STATIC_UObjectReflector(const struct FString& ObjName);
	void STATIC_TitleBarName(const struct FString& InName);
	void STATIC_SpawnPrerepInfoForItem();
	void STATIC_SpawnLivingThing(const struct FString& Params);
	void STATIC_ShowMemoryView(const struct FString& Params);
	void STATIC_ShowMemoryStats(const struct FString& Params);
	void STATIC_ShowCoherentLogWarningsOnScreen(bool bFlag);
	void STATIC_SetGameModeAliasForLoadingScreen(const struct FString& InModeAlias);
	void STATIC_SendGameSpecificMsg(unsigned char MessageByte, const struct FString& Message);
	void STATIC_PrintMemoryReferences(const struct FString& ObjectName);
	void STATIC_PackageLoadTest(const struct FString& InPathName, bool bUseAsync, bool bNewInst);
	void STATIC_NewInstanceTest(const struct FString& PackageName);
	void STATIC_LoadTempMissionDataAllAchieved();
	void STATIC_LoadTempMissionData();
	void STATIC_DumpMemTestResources(const struct FString& Params);
	void STATIC_DumpLivingThings(const struct FString& Params);
	void STATIC_DSLogTimerDelay(float InSec);
	void STATIC_DSLog();
	void STATIC_DBECommand(const struct FString& Params);
	void STATIC_CompleteTempMissionData();
	void STATIC_ClearPrerepInfos();
	void STATIC_AsyncLoadingThreadSuspend();
	void STATIC_AsyncLoadingThreadResume();
};


// Class TslGame.TestCheatInformer
// 0x0030 (0x0060 - 0x0030)
class UTestCheatInformer : public UObject
{
public:
	class ATslPlayerController*                        TslPlayerController;                                      // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     CurrentListName;                                          // 0x0038(0x0010) (ZeroConstructor, Transient)
	float                                              RemainTimeTotal;                                          // 0x0048(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              RemainTimeCurrent;                                        // 0x004C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                RemainCheatCount;                                         // 0x0050(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_RemainingTime;                                // 0x0058(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TestCheatInformer"));

		return ptr;
	}


	void STATIC_UpdateTestCheatRemainTimer();
	void STATIC_StartTestCheatRemainTimer(class ATslPlayerController* TslPC, float TimeTotal, float TimeCurrent, int CheatCount, struct FString* ListName);
};


// Class TslGame.PlayerMovePositionContainer
// 0x0050 (0x0080 - 0x0030)
class UPlayerMovePositionContainer : public UObject
{
public:
	TArray<struct FString>                             DesertPositions;                                          // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<struct FString>                             SavagePositions;                                          // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<struct FString>                             DihortokPositions;                                        // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<struct FString>                             BalticPositions;                                          // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<struct FString>                             SummerlandPositions;                                      // 0x0070(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerMovePositionContainer"));

		return ptr;
	}

};


// Class TslGame.TslCheatManager
// 0x00D8 (0x01B8 - 0x00E0)
class UTslCheatManager : public UTslBaseCheatManager
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00E0(0x0018) MISSED OFFSET
	TArray<struct FString>                             CheatSpawnClassName;                                      // 0x00F8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0108(0x0018) MISSED OFFSET
	TArray<struct FTestCheatCommand>                   TestCheatList;                                            // 0x0120(0x0010) (ZeroConstructor, Transient)
	struct FTimerHandle                                TimerHandle_TestCheat;                                    // 0x0130(0x0008) (Transient)
	struct FString                                     TestCheatListName;                                        // 0x0138(0x0010) (ZeroConstructor, Transient)
	int                                                TestCheatStep;                                            // 0x0148(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                TestCheatLoopingCounter;                                  // 0x014C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TestCheatRemainingTotalTime;                              // 0x0150(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	class UTestCheatInformer*                          TestCheatInformer;                                        // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPlayerMovePositionContainer*                MemreportMovePositionContainer;                           // 0x0160(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPlayerMovePositionContainer*                AutoProfileMovePositionContainer;                         // 0x0168(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ACharacter*                                  AutoAimTarget;                                            // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0178(0x0008) MISSED OFFSET
	float                                              AimPunchDebugShowDuration;                                // 0x0180(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                WorldOriginMaxX;                                          // 0x0184(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                WorldOriginMaxY;                                          // 0x0188(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_WorldOrigin;                                  // 0x0190(0x0008) (Transient)
	struct FString                                     CarePackageDebugString;                                   // 0x0198(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x8];                                       // 0x01A8(0x0008) MISSED OFFSET
	class UTslGMCommandInGameHelperWidget*             GMCommandInGameHelper;                                    // 0x01B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCheatManager"));

		return ptr;
	}


	void STATIC_WriteInstanceProperty(const struct FString& InInstanceName);
	void STATIC_VehicleJump(float Pitch, float VelScale);
	void STATIC_VaultToSky();
	void STATIC_UpdateSmoothTargetViewRotationSpeed(float Speed);
	void STATIC_UnarmAllWeapons(bool bInstant);
	void STATIC_ToggleVisibilityOfDestructibleComponents();
	void STATIC_ToggleVehicleCCD();
	void STATIC_ToggleParticleManager();
	void STATIC_ToggleMatchTimer();
	void STATIC_ToggleItemHighlight(int InToggle);
	void STATIC_ToggleII(float Interval);
	void STATIC_ToggleHudWidget(const struct FString& WidgetName);
	void STATIC_ToggleGMCommandInGameHelper();
	void STATIC_ToggleFreeMode();
	void STATIC_ToggleFlyingCar();
	void STATIC_ToggleComponentRegisterationManager();
	void STATIC_ToggleCollisionOfDestructibleComponents();
	void STATIC_ToggleAutoAim();
	void STATIC_TickAutoAim();
	void STATIC_TestVoiceAccessToken();
	void STATIC_TestTriggerAchievement(const struct FString& ID, int Num);
	void STATIC_TestShowAllOption();
	void STATIC_TestResetAchievementAll();
	void STATIC_TestResetAchievement(const struct FString& ID);
	void STATIC_TestParachuting(const struct FString& Argument);
	void STATIC_TestMapZoomAndMoveSafetyArea();
	void STATIC_TestCheat(const struct FString& ListName, int InLoopingCounter);
	void STATIC_TestCarePackageAirDrop(int InSpawnCount, bool bInDisplayDebugLines);
	void STATIC_TeleportPlayer(float InServerLocX, float InServerLocY, float InServerLocZ, float InPitch, float InYaw, float InRoll);
	void STATIC_TeleportDebug(int InIndex);
	void STATIC_TeleportCarHack();
	void STATIC_SweepToFloor(bool bInServer, bool bInComplex, float InExtentX, float InExtentY, float InExtentZ);
	void STATIC_SweepLinePerformanceCheck();
	void STATIC_StopTestCheat();
	void STATIC_StopOutputCapture();
	void STATIC_StopOtherPlayersTestCheat();
	void STATIC_StopAsyncLoadingFileReadLog();
	void STATIC_StartWave(int InWaveIndex);
	void STATIC_StartOutputCapture(const struct FString& InfilePath);
	void STATIC_StartMapBenchmarkSequence();
	void STATIC_StartAsyncLoadingFileReadLog();
	void STATIC_SpawnNpcFromLocation(float InX, float InY, float InZ, int InNpcArrayIndex, int InNum);
	void STATIC_SpawnNpc(int InNpcArrayIndex, int InNum, float InDistance);
	void STATIC_SpawnItemPackageByDead();
	void STATIC_SpawnAIInMatch(int Num);
	void STATIC_SpawnAI(int Num);
	void STATIC_SlomoMe(float NewTimeDilation);
	void STATIC_ShowVehicleComplexCollisionMeshes(int Show);
	void STATIC_ShowSimpleOkPopup(const struct FString& Message);
	void STATIC_ShowNearDoors(float dist, bool bShow);
	void STATIC_ShowLoadingScreen(bool OnOff);
	void STATIC_ShowKeyGuideWidget(int bShow);
	void STATIC_ShowDropItem(bool InShow);
	void STATIC_ShowAIInfo(int ID);
	void STATIC_SetWeaponSoundOcclusionInterval(float InValue);
	void STATIC_SetVehicleRepRotCorrection(float AngularDeltaThreshold, float AngularInterpAlpha, float AngularRecipFixTime);
	void STATIC_SetVehicleRepPosCorrection(float LinearDeltaThresholdSq, float LinearInterpAlpha, float LinearRecipFixTime, float BodySpeedThresholdSq);
	void STATIC_SetTotalRound(int InTotRound);
	void STATIC_SetTeamScore(int InTeamId, int InScore);
	void STATIC_SetRespawnPeriodSeconds(float InSec);
	void STATIC_SetRequestedBlockOnAsyncLoading(bool bFlag);
	void STATIC_SetPreventFinishMatch(bool bFlag);
	void STATIC_SetPktLagAndLoss(int InLag, int InLossPct);
	void STATIC_SetMyTeamScore(int InScore);
	void STATIC_SetMatchState(const struct FString& InStateName);
	void STATIC_SetKeepLastCirclePosition(bool bFlag);
	void STATIC_SetItemLimits(const struct FString& ItemClassName, int Limit);
	void STATIC_SetHealth(float InHealth);
	void STATIC_SetGlobleAveMMR(int MMR);
	void STATIC_SetFreeCameraMoveSpeed(float InSpeed);
	void STATIC_SetDeliver();
	void STATIC_SetDebugMyVehicle(int InOn);
	void STATIC_SetClientConnectionTimeout(float TimeoutSeconds);
	void STATIC_SetCinematicMode(int Mode);
	void STATIC_SetChangeStartingPoint(bool bFlag);
	void STATIC_SetCanResetDestructible(bool bInCanResetDestructible);
	void STATIC_SetAllMeshCollisionEnabled(int EnumValue);
	void STATIC_SetAASBpFactor(float factor);
	void STATIC_SelectSpawnKit(int InIndex);
	void STATIC_Run_KGB_AF(int Opt);
	void STATIC_Run_AutoHeal();
	void STATIC_ReturnLookAt();
	void STATIC_ResumeAllNpc();
	void STATIC_Respawn(bool bCurrentPosition);
	void STATIC_ResetWheeledVehicleTransform();
	void STATIC_ResetLevel();
	void STATIC_ResetDestructible();
	void STATIC_RemoveTrace();
	void STATIC_RemoveAllVehicleButSelected();
	void STATIC_RaycastToFloor(bool bInServer, bool bInComplex);
	void STATIC_RaycastInDirection(bool bInServer, bool bInComplex);
	void STATIC_ProcessTestCheat();
	void STATIC_PrintWeaponInformation();
	void STATIC_PrintVehicleInformation();
	void STATIC_PrintGameOptionHierarchy();
	void STATIC_PrintCharacterInformation();
	void STATIC_PlayEmoteAnimation(const struct FName& InEmoteName);
	void STATIC_PauseAllNpc();
	void STATIC_PauseAfterTick();
	void STATIC_OtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_OnTeleportCarHack();
	void STATIC_OnPeekReleased(bool bLeftSide);
	void STATIC_OnInteract();
	void STATIC_OnFullMapSequenceStop();
	void STATIC_OnClientFly();
	void STATIC_NpcStopMovement();
	void STATIC_NpcGod();
	void STATIC_NPCDrawMovement(bool bFlag);
	void STATIC_NpcDebugCamera();
	void STATIC_NotifyPlayerEnd();
	void STATIC_NeedHitchOnRenderThread();
	void STATIC_NeedHitchOnGameThread();
	void STATIC_MoveVehicleOnClient(float X, float Y, float Z);
	void STATIC_MovePlayerWhereToSpawnAI(int Index);
	void STATIC_MovePlayerWhereToMemreport();
	void STATIC_MatchLeavingMap();
	void STATIC_MatchInProgressConditional(bool bSkipIfInProgressAlready);
	void STATIC_MatchInProgress();
	void STATIC_MatchAborted();
	void STATIC_MasteryItemAdd(const struct FString& ItemName);
	void STATIC_MarkCharacterMeshDirty(int Num);
	void STATIC_MapStatAnalyzer(const struct FString& Argument);
	void STATIC_LookAt(float Pitch, float Yaw, float Roll);
	void STATIC_LoadMapBenchmarkSequence();
	void STATIC_ListCharacters();
	void STATIC_LandingDamage(int InDamage);
	void STATIC_KnockdownNpc(float InDuration);
	void STATIC_KillOtherPlayers();
	void STATIC_KillAllNpc();
	void STATIC_InVisibleToAI(bool bVisible);
	void STATIC_InsertCrashMeCommand();
	void STATIC_InfiniteAmmo(bool bTurnOn);
	void STATIC_Infinite_WorldOriginInternal();
	void STATIC_Infinite_WorldOrigin(int InRandMaxX, int InRandMaxY, float InRate);
	void STATIC_Infinite_OriginShift();
	void STATIC_IgnoreDoor();
	void STATIC_HitReactionTest(EHitDirection HitDirection, float Damage);
	void STATIC_HideSimpleOkPopup(EPopupButtonID NotUse);
	void STATIC_GiveItem(const struct FString& ItemClassName);
	void STATIC_GetWatchDogAndStatOneFrame(int Count);
	void STATIC_GetOutOfVehicle();
	void STATIC_ForceSetBluezoneShape(const struct FString& InShape);
	void STATIC_ForceSetBaseNull();
	void STATIC_ForceReloadGameOptionHierarchy();
	void STATIC_ForceMatchStart();
	void STATIC_ForceIgnoreClientVehicleMove();
	void STATIC_FlushDebugLines();
	void STATIC_ExplosionReactionTest(EHitDirection HitDirection, float Damage);
	void STATIC_ExplodeMyVehicle();
	void STATIC_EndWatchDogAndStatStartFile();
	void STATIC_EndRound();
	void STATIC_DumpVoiceDevices();
	void STATIC_DumpReplicatedItems();
	void STATIC_DumpParticleManager(int Detail);
	void STATIC_DumpNearestInstancedReactionComponent();
	void STATIC_DumpDestructibleComponents();
	void STATIC_DrawVehicleCenterOfMass();
	void STATIC_DrawItemPackageExtent();
	void STATIC_DiveStart();
	void STATIC_DisplayPassCarePackageAreas(float InHeight);
	void STATIC_DestoryAllRootItemPackage();
	void STATIC_DestoryAllItemPackage();
	void STATIC_DelayCrash(float DelaySeconds);
	void STATIC_DebugCancelAuthTicket();
	void STATIC_DDOSLog();
	void STATIC_DDOSError(const struct FString& Ip, const struct FString& Port);
	void STATIC_CtrlShortCutOnOff(bool OnOff);
	void STATIC_CreateTracerManagerForCheat();
	void STATIC_CopyTeleportPlayer();
	void STATIC_CopyDebugInfoRotation();
	void STATIC_CopyDebugInfoLocation();
	void STATIC_CopyDebugInfo();
	void STATIC_ClientFly(float InHeight);
	void STATIC_CheckAILandingPos(bool bCheck);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat(const struct FString& Msg);
	void STATIC_ChangeTeam(int NewTeamNumber);
	void STATIC_ChangeMaxActiveAI(int Num);
	void STATIC_ChangeCameraMode(int Mode);
	void STATIC_CameraShake(float RotAmplitude, float RotFrequency, float LocAmplitude, float LocFrequency, float Duration);
	void STATIC_CameraRatePitch(float multiple);
	void STATIC_CameraRateMoveUp(float multiple);
	void STATIC_BugItNoScreenshot(const struct FString& Description);
	void STATIC_BeginWatchDogAndStatStartFile();
	void STATIC_ApplyWorldOrigin(int InOriginX, int InOriginY);
	void STATIC_ApplyDamageMul(float InMultiplier);
	void STATIC_AimPunchDebugDuration(float Duration);
};


// Class TslGame.PracticeTarget
// 0x0118 (0x0500 - 0x03E8)
class APracticeTarget : public AActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        TargetRootComponent;                                      // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        TargetMeshComponent;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AkComponent;                                              // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bMovingTarget;                                            // 0x0408(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRandomizeInitialMovingProperty;                          // 0x0409(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x040A(0x0002) MISSED OFFSET
	struct FVector                                     MovingStartRelativeLocation;                              // 0x040C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MovingEndRelativeLocation;                                // 0x0418(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              MovementTimeSec;                                          // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     TargetForward;                                            // 0x0428(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     FlippingAxis;                                             // 0x0434(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReverseFlippingDirection;                                // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAutoFlippingTarget;                                      // 0x0441(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRandomizeInitialFlippingProperty;                        // 0x0442(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0443(0x0001) MISSED OFFSET
	float                                              FlippingInitialDegree;                                    // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlippingAutoDegree;                                       // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlippingAutoTimeSec;                                      // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlippingDegree;                                           // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlippingHitTimeSec;                                       // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 HitFlippingCurve;                                         // 0x0458(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               MovingAudio;                                              // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FlippingAudio;                                            // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnHitDelegate;                                            // 0x0470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangedMoveDirectionDelegate;                           // 0x0480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x70];                                      // 0x0490(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PracticeTarget"));

		return ptr;
	}


	void STATIC_OnTakenPointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
	void STATIC_OnHit();
	void STATIC_OnChangedMoveDirection();
	void STATIC_ClientHit(const struct FVector& HitLocation, const struct FVector& HitDirection, class UPrimitiveComponent* Target);
};


// Class TslGame.PrereplicatedInfo
// 0x0010 (0x03F8 - 0x03E8)
class APrereplicatedInfo : public AInfo
{
public:
	TArray<class UClass*>                              ReplicatedClasses;                                        // 0x03E8(0x0010) (Net, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PrereplicatedInfo"));

		return ptr;
	}

};


// Class TslGame.ProneTrackManager
// 0x0078 (0x0460 - 0x03E8)
class AProneTrackManager : public AActor
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UPhysicalMaterial*>                   MaterialsToApply;                                         // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0400(0x0003) MISSED OFFSET
	bool                                               bUsePool;                                                 // 0x0403(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DecalLifeSpan;                                            // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   DecalSizeForProne;                                        // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   DecalSizeForDBNO;                                         // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ProjectionSweep;                                          // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	class AInstancedDeferredDecalActor*                DecalActor;                                               // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              MinDistanceFromLastMark;                                  // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinRotationFromLastMark;                                  // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimTransitionDelay;                                      // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0434(0x000C) MISSED OFFSET
	struct FVector4                                    BorderOpacityBiases;                                      // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                NumErrorCreatingDecalActor;                               // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                RenderPriority;                                           // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ProneTrackManager"));

		return ptr;
	}

};


// Class TslGame.RandomDeferredDecal
// 0x0020 (0x0408 - 0x03E8)
class ARandomDeferredDecal : public AActor
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamicList;                              // 0x03E8(0x0010) (ZeroConstructor, Transient)
	struct FName                                       ParameterName;                                            // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FFloatInterval                              RandomRange;                                              // 0x0400(0x0008) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RandomDeferredDecal"));

		return ptr;
	}


	void STATIC_UpdateDecal(const struct FTransform& Transform);
};


// Class TslGame.WeaponGunRecoilData
// 0x00F0 (0x0128 - 0x0038)
class UWeaponGunRecoilData : public UDataAsset
{
public:
	struct FWeaponGunRecoilConfig                      WeaponGunRecoilConfig;                                    // 0x0038(0x00A8) (Edit, DisableEditOnInstance)
	bool                                               ApplyParentDataNow;                                       // 0x00E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
	TAssetPtr<class UWeaponGunDataAsset>               ParentWeaponGunData;                                      // 0x00E8(0x0020) (Edit, DisableEditOnInstance)
	TAssetPtr<class UWeaponTrajectoryData>             ParentWeaponTrajectoryData;                               // 0x0108(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponGunRecoilData"));

		return ptr;
	}

};


// Class TslGame.WeaponGunDataAsset
// 0x02C8 (0x0300 - 0x0038)
class UWeaponGunDataAsset : public UDataAsset
{
public:
	struct FWeaponGunConfigReplacement                 WeaponGunConfig;                                          // 0x0038(0x0158) (Edit, DisableEditOnInstance)
	struct FWeaponDeviationConfig                      WeaponDeviationConfig;                                    // 0x0190(0x0044) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	struct FWeaponAnimConfig                           WeaponAnimConfig;                                         // 0x01D8(0x0120) (Edit, DisableEditOnInstance)
	class UWeaponGunRecoilData*                        ConsoleWeaponRecoilData;                                  // 0x02F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponGunDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslBasePlayerController
// 0x0018 (0x0768 - 0x0750)
class ATslBasePlayerController : public APlayerController
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0750(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBasePlayerController"));

		return ptr;
	}


	bool STATIC_WasInputKeyJustReleased(const struct FKey& Key);
	bool STATIC_WasInputKeyJustPressed(const struct FKey& Key);
	void STATIC_ToggleSpeaking(bool bInSpeaking);
	void STATIC_SwitchLevel(const struct FString& URL);
	void STATIC_StopHapticEffect(EControllerHand Hand);
	void STATIC_StartFire(unsigned char FireModeNum);
	void STATIC_SetVirtualJoystickVisibility(bool bVisible);
	void STATIC_SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void STATIC_SetName(const struct FString& S);
	void STATIC_SetMouseLocation(int X, int Y);
	void STATIC_SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);
	void STATIC_SetControllerLightColor(const struct FColor& Color);
	void STATIC_SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void STATIC_SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void STATIC_ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void STATIC_ServerViewPrevPlayer();
	void STATIC_ServerViewNextPlayer();
	void STATIC_ServerVerifyViewTarget();
	void STATIC_ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities);
	void STATIC_ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void STATIC_ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void STATIC_ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ServerToggleAILogging();
	void STATIC_ServerShortTimeout();
	void STATIC_ServerSetSpectatorWaiting(bool bWaiting);
	void STATIC_ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void STATIC_ServerRestartPlayer();
	void STATIC_ServerPause();
	void STATIC_ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void STATIC_ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ServerCheckClientPossessionReliable();
	void STATIC_ServerCheckClientPossession();
	void STATIC_ServerChangeName(const struct FString& S);
	void STATIC_ServerCamera(const struct FName& NewMode);
	void STATIC_ServerAcknowledgePossession(class APawn* P);
	void STATIC_SendToConsole(const struct FString& Command);
	void STATIC_RestartLevel();
	bool STATIC_ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void STATIC_PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);
	void STATIC_PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void STATIC_Pause();
	void STATIC_OnServerStartedVisualLogger(bool bIsLogging);
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_LocalTravel(const struct FString& URL);
	bool STATIC_IsInputKeyDown(const struct FKey& Key);
	void STATIC_IncDISPSharpness();
	void STATIC_GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* STATIC_GetSpectatorPawn();
	bool STATIC_GetMousePosition(float* LocationX, float* LocationY);
	struct FVector STATIC_GetInputVectorKeyState(const struct FKey& Key);
	void STATIC_GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void STATIC_GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void STATIC_GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float STATIC_GetInputKeyTimeDown(const struct FKey& Key);
	void STATIC_GetInputAnalogStickStateRaw(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	void STATIC_GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float STATIC_GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* STATIC_GetHUD();
	bool STATIC_GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool STATIC_GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector STATIC_GetFocalLocation();
	void STATIC_FOV(float NewFOV);
	void STATIC_EnableTAA();
	void STATIC_EnableDLSS();
	void STATIC_EnableCheats();
	bool STATIC_DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool STATIC_DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void STATIC_DecDISPSharpness();
	void STATIC_ConsoleKey(const struct FKey& Key);
	void STATIC_ClientWasKicked(const struct FText& KickReason);
	void STATIC_ClientVoiceHandshakeComplete();
	void STATIC_ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses);
	void STATIC_ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void STATIC_ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ClientTravelInternal(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void STATIC_ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void STATIC_ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void STATIC_ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void STATIC_ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void STATIC_ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void STATIC_ClientStartOnlineSession();
	void STATIC_ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void STATIC_ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void STATIC_ClientSetSpectatorWaiting(bool bWaiting);
	void STATIC_ClientSetHUD(const struct FString& InHUDClass);
	void STATIC_ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void STATIC_ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void STATIC_ClientSetCameraMode(const struct FName& NewCamMode);
	void STATIC_ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void STATIC_ClientSetBlockOnAsyncLoading();
	void STATIC_ClientReturnToMainMenu(const struct FString& ReturnReason);
	void STATIC_ClientRetryClientRestart(class APawn* NewPawn);
	void STATIC_ClientRestart(class APawn* NewPawn);
	void STATIC_ClientReset();
	void STATIC_ClientRepObjRef(class UObject* Object);
	void STATIC_ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState02, class UObject* OptionalObject);
	void STATIC_ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void STATIC_ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void STATIC_ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void STATIC_ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void STATIC_ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void STATIC_ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void STATIC_ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void STATIC_ClientIgnoreMoveInput(bool bIgnore);
	void STATIC_ClientIgnoreLookInput(bool bIgnore);
	void STATIC_ClientGotoState(const struct FName& NewState);
	void STATIC_ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void STATIC_ClientForceGarbageCollection();
	void STATIC_ClientFlushLevelStreaming();
	void STATIC_ClientEndOnlineSession();
	void STATIC_ClientEnableNetworkVoice(bool bEnable);
	void STATIC_ClientCommitMapChange();
	void STATIC_ClientClearCameraLensEffects();
	void STATIC_ClientCapBandwidth(int Cap);
	void STATIC_ClientCancelPendingMapChange();
	void STATIC_ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void STATIC_ClearAudioListenerOverride();
	void STATIC_Camera(const struct FName& NewMode);
	void STATIC_AddYawInput(float Val);
	void STATIC_AddRollInput(float Val);
	void STATIC_AddPitchInput(float Val);
	void STATIC_ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class TslGame.StatTrakActor
// 0x0050 (0x0438 - 0x03E8)
class AStatTrakActor : public AActor
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamics_StatTrakMesh;                    // 0x03E8(0x0010) (ZeroConstructor, Transient)
	EStatTrakState                                     StatTrakState;                                            // 0x03F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	struct FString                                     SkinId;                                                   // 0x0400(0x0010) (ZeroConstructor, Transient)
	int                                                SkinOwnerPlayerId;                                        // 0x0410(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	struct FStatTrakDataPair                           SaveStatTrakDataPair;                                     // 0x0418(0x0018) (Transient)
	class ATslPlayerState*                             SaveSkinOnwerPlayerState;                                 // 0x0430(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StatTrakActor"));

		return ptr;
	}


	void STATIC_UpdatedStatTrakData(const struct FString& SkinId, const struct FStatTrakDataPair& StatTrakDataPair);
	void STATIC_OnUpdatedStatTrakDatas(TArray<struct FStatTrakDataPair> StatTrakDataPairs);
	void STATIC_OnUpdatedStatTrakData(const struct FString& SkinId, const struct FStatTrakDataPair& StatTrakDataPair);
	void STATIC_OnStatTrakStateUpdate(EStatTrakState StatTrakState);
	class UMeshComponent* STATIC_GetStatTrakMeshComponent();
};


// Class TslGame.TslBpRewardLogicDataTable_Public
// 0x0000 (0x0088 - 0x0088)
class UTslBpRewardLogicDataTable_Public : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBpRewardLogicDataTable_Public"));

		return ptr;
	}

};


// Class TslGame.TslBpRewardCalculator_Public
// 0x0078 (0x00B8 - 0x0040)
class UTslBpRewardCalculator_Public : public UTslBpRewardCalculator
{
public:
	class UDataTable*                                  RewardDataTable;                                          // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslGameMode*                                CachedAuthGameMode;                                       // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x68];                                      // 0x0050(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBpRewardCalculator_Public"));

		return ptr;
	}

};


// Class TslGame.TslXpRewardLogicDataAsset_Public
// 0x0018 (0x0050 - 0x0038)
class UTslXpRewardLogicDataAsset_Public : public UDataAsset
{
public:
	struct FTslXpRewardLogicDataStruct_Public          StructData;                                               // 0x0038(0x0018) (Edit, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslXpRewardLogicDataAsset_Public"));

		return ptr;
	}

};


// Class TslGame.TslXpRewardCalculator_Public
// 0x0030 (0x0070 - 0x0040)
class UTslXpRewardCalculator_Public : public UTslXpRewardCalculator
{
public:
	class UDataAsset*                                  RewardDataAsset;                                          // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslGameMode*                                CachedAuthGameMode;                                       // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0050(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslXpRewardCalculator_Public"));

		return ptr;
	}

};


// Class TslGame.TslPlayerState
// 0x05F0 (0x0A70 - 0x0480)
class ATslPlayerState : public APlayerState
{
public:
	struct FTslPlayerStatistics                        PlayerStatistics;                                         // 0x0480(0x0004) (Net, Transient)
	unsigned char                                      bQuitter : 1;                                             // 0x0484(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0485(0x0003) MISSED OFFSET
	struct FString                                     ReportToken;                                              // 0x0488(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0498(0x0004) MISSED OFFSET
	int                                                TeamNumber;                                               // 0x049C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bKilled : 1;                                              // 0x04A0(0x0001) (Net)
	EOutGamePlatformProvider                           OutGamePlatformProvider;                                  // 0x04A1(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x04A2(0x0002) MISSED OFFSET
	int                                                KillerPlayerTeamNum;                                      // 0x04A4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04A8(0x0008) MISSED OFFSET
	struct FString                                     ClanName;                                                 // 0x04B0(0x0010) (Net, ZeroConstructor)
	int                                                SquadIndex;                                               // 0x04C0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                SquadMemberIndex;                                         // 0x04C4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04C8(0x0004) MISSED OFFSET
	struct FMapMarker                                  MapMarker;                                                // 0x04CC(0x0010)
	struct FVector2D                                   PingPosition;                                             // 0x04DC(0x0008) (IsPlainOldData)
	float                                              PiningTimeSeconds;                                        // 0x04E4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET
	struct FMapWayPoint                                WayPointStr;                                              // 0x04F0(0x0018)
	int                                                currWayPointsNum;                                         // 0x0508(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x050C(0x0004) MISSED OFFSET
	TArray<struct FReplicatedThrowableItem>            ReplicatedThrowableItems;                                 // 0x0510(0x0010) (Net, ZeroConstructor, Transient)
	bool                                               bEmptyReplicatedThrowableItems;                           // 0x0520(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0521(0x0007) MISSED OFFSET
	struct FString                                     AccountId;                                                // 0x0528(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0538(0x0008) MISSED OFFSET
	struct FEmoteBitArray                              EmoteBitArray;                                            // 0x0540(0x0020) (Net)
	struct FOptionSyncData                             OptionSyncData;                                           // 0x0560(0x0005)
	EPartnerLevel                                      PartnerLevel;                                             // 0x0565(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsStreamerMode;                                          // 0x0566(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0567(0x0001) MISSED OFFSET
	struct FTslPlayerStatisticsNotReplicated           PlayerStatisticsNotReplicated;                            // 0x0568(0x0118) (Transient)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0680(0x0008) MISSED OFFSET
	float                                              DamageDealtOnEnemy;                                       // 0x0688(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEmptyReplicatedCastableItems;                            // 0x068C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1B7];                                     // 0x068D(0x01B7) MISSED OFFSET
	int                                                Ranking;                                                  // 0x0844(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                PersonalRanking;                                          // 0x0848(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDoMakeLastSurvivor;                                      // 0x084C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x084D(0x0003) MISSED OFFSET
	TArray<struct FReplicatedEquipableItem>            ReplicatedEquipableItems;                                 // 0x0850(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FReplicatedCastableItem>             ReplicatedCastableItems;                                  // 0x0860(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0870(0x0008) MISSED OFFSET
	EObserverAuthorityType                             ObserverAuthorityType;                                    // 0x0878(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x0879(0x0007) MISSED OFFSET
	struct FTslPlayerStatisticsForOwner                PlayerStatisticsForOwner;                                 // 0x0880(0x0010) (Net, Transient)
	bool                                               bIsInAircraft;                                            // 0x0890(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bWasKicked;                                               // 0x0891(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x6];                                       // 0x0892(0x0006) MISSED OFFSET
	class ATeam*                                       Team;                                                     // 0x0898(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	int                                                UnknownNumber;                                            // 0x08A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x54];                                      // 0x08A4(0x0054) MISSED OFFSET
	float                                              LastHitTime;                                              // 0x08F8(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x08FC(0x0004) MISSED OFFSET
	struct FString                                     CurrentAttackerPlayerNetId;                               // 0x0900(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0910(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUniqueIdReplicated;                                     // 0x0918(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnInsideBlackZone;                                        // 0x0928(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x28];                                      // 0x0938(0x0028) MISSED OFFSET
	struct FTslPlayTime                                PlayTime;                                                 // 0x0960(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	struct FTslPerUserBpRewardRuleData                 PerUserBpRewardRuleData;                                  // 0x0970(0x000C) (Net, Transient)
	struct FTslPerUserXpRewardRuleData                 PerUserXpRewardRuleData;                                  // 0x097C(0x0014) (Net, Transient)
	float                                              BpReward;                                                 // 0x0990(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              XpReward;                                                 // 0x0994(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x0998(0x0004) MISSED OFFSET
	struct FTslBpRewardDetail_Public                   BpRewardDetail_Public;                                    // 0x099C(0x0014) (Net, Transient)
	struct FTslXpRewardDetail_Public                   XpRewardDetail_Public;                                    // 0x09B0(0x0010) (Net, Transient)
	struct FStatTrakManager                            StatTrakManager;                                          // 0x09C0(0x0020) (Edit, Net, Transient, DisableEditOnInstance)
	unsigned char                                      SpawnKitIndex;                                            // 0x09E0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      ProvidedSpawnKitIndex;                                    // 0x09E1(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x5E];                                      // 0x09E2(0x005E) MISSED OFFSET
	TArray<struct FString>                             ArmWeaponNames;                                           // 0x0A40(0x0010) (ZeroConstructor)
	TArray<struct FString>                             EquipmentNames;                                           // 0x0A50(0x0010) (ZeroConstructor)
	bool                                               bIsPlatoonCommander;                                      // 0x0A60(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0x7];                                       // 0x0A61(0x0007) MISSED OFFSET
	struct FCommunicationPrivilege                     PlatformCommunicationPrivilege;                           // 0x0A68(0x0008) (Net)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerState"));

		return ptr;
	}


	void STATIC_UpdateMissionProgress(const struct FWuMissionProgressUpdateData& MissionProgress);
	void STATIC_SPing(TArray<unsigned char> Data);
	void STATIC_SetServerCommunicationPrivilege(int InCommunicationPrivilege_Multiplay, int InCommunicationPrivilege_CrossPlay);
	void STATIC_SetPlayerClanName(const struct FString& InClanName);
	void STATIC_SetPingPosition(const struct FVector2D& InPingPosition);
	void STATIC_SetEmoteBitArray(const struct FEmoteBitArray& InBitArray);
	void STATIC_SetClientUnknownNumber(int NewUnknownNumber);
	void STATIC_ServerTournamentData(TArray<uint32_t> Data);
	void STATIC_ServerSetOverrideEqupiableItemsFromPreparedUser(bool InbOverrideEquipableItemsFromPreparedUser);
	void STATIC_ServerMatchRating(int InMatchRating);
	void STATIC_OnRep_StreamerMode();
	void STATIC_OnRep_StatTrakManager();
	void STATIC_OnRep_ReportToken(const struct FString& OldReportToken);
	void STATIC_OnRep_ReplicatedThrowableItems();
	void STATIC_OnRep_ReplicatedEquipableItems();
	void STATIC_OnRep_Ranking(int OldRanking);
	void STATIC_OnRep_ProvidedSpawnKitIndex();
	void STATIC_OnRep_PlayerStatisticsForOwner();
	void STATIC_OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void STATIC_OnRep_PartnerLevel();
	void STATIC_OnRep_LastHitTime();
	void STATIC_OnRep_CommnunicationPrivilege();
	void STATIC_OnRep_bQuitter();
	void STATIC_OnRep_bIsPlatoonCommander(bool bOld);
	void STATIC_OnNewBlackZone();
	bool STATIC_IsShowWayPoint();
	bool STATIC_IsShowMapMarker();
	bool STATIC_IsQuitter();
	bool STATIC_IsOutGamePlatformProvider(EOutGamePlatformProvider InOutGamePlatformType);
	bool STATIC_IsObserver();
	bool STATIC_IsMaxLevel();
	bool STATIC_IsInAircraft();
	bool STATIC_IsCharacterInBlackZone(bool CheckInBuilding);
	void STATIC_IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackage);
	void STATIC_InformAboutKill(EDamageReason DamageReason, class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float STATIC_GetXpRewardByTeamSpectatingTime();
	float STATIC_GetXpRewardBySurvivalTime();
	float STATIC_GetXpBoostingAmount();
	float STATIC_GetXpBoost();
	struct FVector2D STATIC_GetWayPointPos_PS(int PointIndex);
	int STATIC_GetUnknownNumber();
	float STATIC_GetTotalXpRewardRaw();
	float STATIC_GetTotalXpRewardBoostedAndCapped();
	float STATIC_GetTotalXpRewardBoosted();
	float STATIC_GetTotalBpRewardRaw();
	float STATIC_GetTotalBpRewardBoosted();
	float STATIC_GetTeamSpectatingTimeInSeconds();
	int STATIC_GetTeamNum();
	class ATeam* STATIC_GetTeam();
	float STATIC_GetSurvivalTimeInSeconds();
	int STATIC_GetSquadMemberIndex();
	int STATIC_GetSquadIndex();
	struct FString STATIC_GetPlayerClanName();
	float STATIC_GetPiningTimeSeconds();
	struct FVector2D STATIC_GetPingPosition();
	float STATIC_GetPing();
	class ATslPlayerController* STATIC_GetOwningTslPlayerController();
	EOutGamePlatformProvider STATIC_GetOutGamePlatformProvider();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	EMarkerType STATIC_GetMapMarkerType();
	struct FVector2D STATIC_GetMapMarkerPosition();
	int STATIC_GetKills();
	struct FEmoteBitArray STATIC_GetEmoteBitArray();
	struct FString STATIC_GetDisplayNameFromLocal(bool bWithClanName);
	float STATIC_GetDailyXpMax();
	float STATIC_GetCurrentDailyXp();
	float STATIC_GetBpRewardByRanking();
	float STATIC_GetBpRewardByPlayTime();
	float STATIC_GetBpRewardByKills();
	float STATIC_GetBpRewardByDamageDealt();
	float STATIC_GetBpBoostingAmount();
	float STATIC_GetBpBoost();
	void STATIC_CPing(TArray<unsigned char> Data);
	void STATIC_ClientUpdateRankingOnlineEvent(int InRanking);
	void STATIC_ClientTournamentData(TArray<uint32_t> Data);
	void STATIC_ClientSetReconnectAddId();
	void STATIC_ClientInformFirstKill();
	void STATIC_ClientInformAssist();
	void STATIC_ClearWayPointsPos_PS();
	void STATIC_CheckCharacterInBlackZone();
	void STATIC_BroadcastMidGameBan(class ATslPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void STATIC_BroadcastDeath(class ATslPlayerState* KillerPlayerState, class ATslPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled, float InDistanceFromKillerToVictim);
};


// Class TslGame.TslPlayerController
// 0x0868 (0x0FD0 - 0x0768)
class ATslPlayerController : public ATslBasePlayerController
{
public:
	bool                                               bPlayWinnerWinnerChickenDinnerAnimationAtMatchFinished;   // 0x0768(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0769(0x0001) MISSED OFFSET
	bool                                               bProcessingInput;                                         // 0x076A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x25];                                      // 0x076B(0x0025) MISSED OFFSET
	float                                              NewCorpseLifeSpan;                                        // 0x0790(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x0794(0x0014) MISSED OFFSET
	class UTslPlayerPostProcessEffectComponent*        PostProcessEffectComponent;                               // 0x07A8(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x180];                                     // 0x07B0(0x0180) MISSED OFFSET
	struct FVector                                     CameraPeekLeftMove;                                       // 0x0930(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CameraPeekRightMove;                                      // 0x093C(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0948(0x0010) MISSED OFFSET
	ECameraViewBehaviour                               CameraViewBehaviour;                                      // 0x0958(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0959(0x0007) MISSED OFFSET
	class ATslTracerManager*                           TracerManager;                                            // 0x0960(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0968(0x0010) MISSED OFFSET
	TArray<struct FStringClassReference>               ObserverPreLoadClassList;                                 // 0x0978(0x0010) (ZeroConstructor, Config)
	struct FVector_NetQuantizeNormal                   SpectatorAccumViewRotation;                               // 0x0988(0x000C) (Net, Transient)
	EObserverAuthorityType                             ObserverAuthorityType;                                    // 0x0994(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIntentionallySwitchedToObserver;                         // 0x0995(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x12];                                      // 0x0996(0x0012) MISSED OFFSET
	TArray<struct FRankingInfo>                        RankingInfos;                                             // 0x09A8(0x0010) (ZeroConstructor, Transient)
	class UActorComponent*                             InteractionTargetComponent;                               // 0x09B8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslCharacter*                               SpectatorViewCharacter;                                   // 0x09C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x09C8(0x0010) MISSED OFFSET
	class ATslAchievement*                             Achievement;                                              // 0x09D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMeshComponent*                              SpectatorScopeMesh;                                       // 0x09E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData09[0x64];                                      // 0x09E8(0x0064) MISSED OFFSET
	struct FRotator                                    SpectatorVehicleViewRotation;                             // 0x0A4C(0x000C) (Transient, IsPlainOldData)
	TArray<struct FNearClippingLevelOverZ>             NearClippingLevelsOverZ;                                  // 0x0A58(0x0010) (ZeroConstructor, Config)
	float                                              MaxValidPing;                                             // 0x0A68(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultFOV;                                               // 0x0A6C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InteractGamepadHoldTime;                                  // 0x0A70(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1C];                                      // 0x0A74(0x001C) MISSED OFFSET
	class UVoiceComponent*                             VoiceComponent;                                           // 0x0A90(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class ATeam*>                               Teams;                                                    // 0x0A98(0x0010) (Net, ZeroConstructor)
	TArray<class ATeam*>                               KillerTeams;                                              // 0x0AA8(0x0010) (Net, ZeroConstructor)
	TArray<TWeakObjectPtr<class ATslCharacter>>        ReplicateTeamMembers;                                     // 0x0AB8(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class ATslCharacter>>        ReplicateKillerTeamMembers;                               // 0x0AC8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData11[0x50];                                      // 0x0AD8(0x0050) MISSED OFFSET
	TArray<TWeakObjectPtr<class ATslCharacter>>        ReplicateCharacter;                                       // 0x0B28(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class AReplicatedCharacterData>> ReplicatedCharacterDataList;                              // 0x0B38(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class ACarePackageItem>>     ReplicateCarePackageItemList;                             // 0x0B48(0x0010) (ZeroConstructor)
	class UBluezoneComponent*                          BluezoneComp;                                             // 0x0B58(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBluezoneSoundEffectComponent*               BluezoneSoundEffect;                                      // 0x0B60(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData12[0x20];                                      // 0x0B68(0x0020) MISSED OFFSET
	float                                              DeathResultDelaySeconds;                                  // 0x0B88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0xE1];                                      // 0x0B8C(0x00E1) MISSED OFFSET
	bool                                               bEnablePopupXboxUnautorizedDevice;                        // 0x0C6D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x32];                                      // 0x0C6E(0x0032) MISSED OFFSET
	TArray<class ATslCharacter*>                       AIBots;                                                   // 0x0CA0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0CB0(0x0008) MISSED OFFSET
	bool                                               bIsClientReplayRecordable;                                // 0x0CB8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsDevClientReplayRecordable;                             // 0x0CB9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsKillcamRecordable;                                     // 0x0CBA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsObserverClientReplayRecordable;                        // 0x0CBB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsDevObserverClientReplayRecordable;                     // 0x0CBC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTPAntibotClient;                                      // 0x0CBD(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0xA];                                       // 0x0CBE(0x000A) MISSED OFFSET
	bool                                               bIsAllLv3EquippedAlready;                                 // 0x0CC8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsRankingAlreadyUpdated;                                 // 0x0CC9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x6];                                       // 0x0CCA(0x0006) MISSED OFFSET
	class UTslGamepadPCInputComponent*                 TslGamepadInputComponent;                                 // 0x0CD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0CD8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShowReplayTimeline;                                     // 0x0CE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x10];                                      // 0x0CF0(0x0010) MISSED OFFSET
	TArray<struct FName>                               DistributedLoadoutItemArray;                              // 0x0D00(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData20[0x18];                                      // 0x0D10(0x0018) MISSED OFFSET
	bool                                               bIsSandboxMaster;                                         // 0x0D28(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0D29(0x0003) MISSED OFFSET
	int                                                CurSandboxItemNumber;                                     // 0x0D2C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxSandboxItemNumber;                                     // 0x0D30(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurSandboxVehicleNumber;                                  // 0x0D34(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxSandboxVehicleNumber;                                  // 0x0D38(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0xC4];                                      // 0x0D3C(0x00C4) MISSED OFFSET
	bool                                               bAllowObserverVoiceChatOutput;                            // 0x0E00(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData23[0x7];                                       // 0x0E01(0x0007) MISSED OFFSET
	class APlayerState*                                SavedViewTargetPlayerState;                               // 0x0E08(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsByPassAnticheat;                                       // 0x0E10(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bNeedScreenCheck;                                         // 0x0E11(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bAllowVoiceChatInput;                                     // 0x0E12(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCapturingAudioInputHere;                                 // 0x0E13(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUsingDebugCameraController;                              // 0x0E14(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData24[0x1];                                       // 0x0E15(0x0001) MISSED OFFSET
	bool                                               bEnableGVoice;                                            // 0x0E16(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0xA];                                       // 0x0E17(0x000A) MISSED OFFSET
	bool                                               bIsIgnoreClientVehicleMove;                               // 0x0E21(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsCheatFlyingCar;                                        // 0x0E22(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData26[0xD];                                       // 0x0E23(0x000D) MISSED OFFSET
	bool                                               bIsDucking;                                               // 0x0E30(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0x147];                                     // 0x0E31(0x0147) MISSED OFFSET
	bool                                               bIsAutoLootActive;                                        // 0x0F78(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x0F79(0x0003) MISSED OFFSET
	float                                              AutoLootRadius;                                           // 0x0F7C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	TArray<struct FText>                               AutoLootItemCategories;                                   // 0x0F80(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData29[0x10];                                      // 0x0F90(0x0010) MISSED OFFSET
	class AActor*                                      InvinciblePostProcessActor;                               // 0x0FA0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSpawnInvinciblePostProcess;                              // 0x0FA8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x3];                                       // 0x0FA9(0x0003) MISSED OFFSET
	int                                                AfkKickTime;                                              // 0x0FAC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x10];                                      // 0x0FB0(0x0010) MISSED OFFSET
	float                                              HoldSeconds;                                              // 0x0FC0(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bReleaseFollow;                                           // 0x0FC4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShowFollowButton;                                        // 0x0FC5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData32[0xA];                                       // 0x0FC6(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerController"));

		return ptr;
	}


	void STATIC_WarningAfkPlayer();
	void STATIC_UpdateHud();
	void STATIC_UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_UnreliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_TracerProjectileModeType(int InMode, int InType);
	void STATIC_TracerBulletModeType(int InMode, int InType);
	void STATIC_ToggleTracerManger();
	void STATIC_ToggleSandboxRedZone();
	void STATIC_ToggleSandboxMasterUI();
	void STATIC_ToggleSandboxInvulnerableEffect();
	void STATIC_ToggleSandboxFly();
	void STATIC_ToggleSandboxCarePackage();
	void STATIC_ToggleReport();
	void STATIC_TogglePopupXBoxXIMAPI();
	void STATIC_ToggleMissionList();
	void STATIC_ToggleInventory();
	void STATIC_ToggleDucking();
	void STATIC_TestUserProfile(float TotalPlayTime);
	void STATIC_Test_SpawnVehicle();
	void STATIC_Test_FirstCharacterKill();
	void STATIC_SwitchToObserverIntentionally();
	void STATIC_Suicide();
	bool STATIC_StopReleaseFollowPad();
	void STATIC_StopReleaseFollow();
	void STATIC_StopRecording();
	bool STATIC_StartReleaseFollowPad();
	void STATIC_StartReleaseFollow();
	void STATIC_SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void STATIC_SimulateInputKey(const struct FKey& Key, bool bPressed);
	void STATIC_ShutdownTracerManager();
	void STATIC_ShowTslDebugInfomation();
	void STATIC_ShowTeamDeathPopup();
	void STATIC_ShowPlayerControllerBindActions_Admin();
	void STATIC_ShowMatchResult();
	void STATIC_ShowInGameMenu();
	void STATIC_ShowGotoLobbyPopUp(EPopupButtonID ButtonID);
	void STATIC_ShowEmoteWheel();
	void STATIC_SetVoiceComponent(class UVoiceComponent* Component);
	void STATIC_SetShowFollowButton(bool bShow);
	void STATIC_SetPingAtViewingTargetPad();
	void STATIC_SetDefaultFOV(float NewFOV);
	void STATIC_SetCraftAllowFilter(const struct FString& CraftAllowFilter);
	void STATIC_SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void STATIC_ServerViewTargetReplicateUpdate();
	void STATIC_ServerTryGainFBRCarePackageItem(class ATslFBRCarePackageItem* InItem);
	void STATIC_ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void STATIC_ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void STATIC_ServerTestCarePackage(int InSpawnCount);
	void STATIC_ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void STATIC_ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void STATIC_ServerSuicide();
	void STATIC_ServerStopOtherPlayersTestCheat();
	void STATIC_ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void STATIC_ServerSteamNetworkStatusLog(int CountPerGame);
	void STATIC_ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void STATIC_ServerStartHoldRotation(const struct FRotator& Current);
	void STATIC_ServerSpawnVehicle();
	void STATIC_ServerSetViewTargetCharacterData(class AReplicatedCharacterData* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetViewTarget(class AActor* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void STATIC_ServerSetSpawnKit(int Index);
	void STATIC_ServerSetShowPlatoonMarker(bool bShow);
	void STATIC_ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void STATIC_ServerSetPlatoonMapMarkerPosition(const struct FVector2D& NewMapMarkerPos, EMarkerType NewMapMarkerType);
	void STATIC_ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void STATIC_ServerSetControlRotation(const struct FRotator& Rotation);
	void STATIC_ServerSetClientOptionData(const struct FOptionSyncData& ClientData);
	void STATIC_ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void STATIC_ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void STATIC_ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendOutPacketLossReport(const struct FOutPacketLossReportForNet& OutPacketLoss);
	void STATIC_ServerSendLogMissionListOpen_Unreliable();
	void STATIC_ServerSendLogMissionListOpen_Reliable();
	void STATIC_ServerSendFreeMemory(const struct FString& DeviceName, TArray<struct FWuMemoryStat> MemoryStats);
	void STATIC_ServerSendDevLog(const struct FWuDevLog& LogToSave);
	void STATIC_ServerSay(const struct FString& Msg);
	void STATIC_ServerResumeNpc(class APawn* InPawn);
	void STATIC_ServerResetWheeledVehicleTransform();
	void STATIC_ServerRequestRestorePlatoonMapMarkerData();
	void STATIC_ServerRequestPlatoonFireSupport(const struct FVector& SpawnAt);
	void STATIC_ServerRequestPlatoonCarePackage(EPlatoonCarePackageType CarePackageType, const struct FVector& DropAt);
	void STATIC_ServerRequestCheckClientTeamsLogTDM(const struct FString& ClientDataStr);
	void STATIC_ServerRequestCheckClientTeamsLog(const struct FTslClientTeamActorValidityCheckData& InCheckData);
	void STATIC_ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void STATIC_ServerRadioMessagePing(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessageNeedAmmo(int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ServerRadioMessageInteraction(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation, const struct FText& InInteractionText, ERadioMessageInteractionType InIteractionType);
	void STATIC_ServerRadioMessageEnemySpotted(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessage(int InMessageIndex);
	void STATIC_ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPauseNpc(class APawn* InPawn);
	void STATIC_ServerPauseAfterTick();
	void STATIC_ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitDestructibleSurfaceInst(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, unsigned char DamageType);
	void STATIC_ServerNextSetViewTarget(bool bIsPrev);
	void STATIC_ServerNextFollowCharacter(bool bIsPrev);
	void STATIC_ServerMoveToVehicleSeat(int SeatIndex);
	void STATIC_ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void STATIC_ServerMapLoadFinishedOnClient();
	void STATIC_ServerLogXboxUnautorizedDevice();
	void STATIC_ServerLeaveVehicle();
	void STATIC_ServerLeaveMatchIntentionally();
	void STATIC_ServerLeaveDebugPC();
	void STATIC_ServerKnockdownNpc(class APawn* InPawn);
	void STATIC_ServerKnockbackNpc(class APawn* InPawn);
	void STATIC_ServerKillNpc(class APawn* InPawn);
	void STATIC_ServerKickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_ServerJoinDebugPC();
	void STATIC_ServerGiveSandboxVehicle(class UClass* InVehicleClass);
	void STATIC_ServerGiveSandboxPower(ESandboxPowerType InPowerType, bool InActivate);
	void STATIC_ServerGiveSandboxItemArray(TArray<struct FName> InItemIdArray);
	void STATIC_ServerGiveSandboxItem(const struct FName& InItemID);
	void STATIC_ServeRestartAirborn();
	void STATIC_ServeReleaseFollow();
	void STATIC_ServerEACClientConnected();
	void STATIC_ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void STATIC_ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_ServerCheatDestroyActors();
	void STATIC_ServerCheat(const struct FString& Msg);
	void STATIC_ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void STATIC_ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_ServerAskDynamicWeatherSync(int DynamicWeatherIndex);
	void STATIC_ServerAIPath(class APawn* InPawn);
	void STATIC_ServerAdmin(const struct FString& AdminCommand);
	void STATIC_Server_UpdateTracerManager(bool bTracerOn);
	void STATIC_Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void STATIC_Server_ToggleTracerManger();
	void STATIC_Server_ShutdownTracerManager();
	void STATIC_Server_SetSwitchToObserverIntentionally(bool bSet);
	void STATIC_Server_SendWheelTrackInfo(const struct FString& Info);
	void STATIC_Server_ReplyToItemRequest(class ATslCharacter* RequestOwner);
	void STATIC_Server_BroadCastMidGameBanMessageForUncheater();
	void STATIC_ServeFollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void STATIC_SaveGearProfile(int ProfileIndex, TArray<struct FName> inArray);
	void STATIC_SaveDistributedLoadout(TArray<struct FName> InItemArray);
	void STATIC_RestartAirborn();
	void STATIC_ResetMinimapSize();
	void STATIC_ResetLBRBHold();
	void STATIC_ResetEmoteWheelPadLBRB();
	void STATIC_ResetAfkKickTimer();
	void STATIC_RequestDestructionData();
	void STATIC_ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_ReliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_ReleaseFollow();
	void STATIC_PrevMinimapSize();
	void STATIC_PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool STATIC_OnWalkingToggleCameraPad();
	void STATIC_OnUpdateProvidedSpawnKitIndex();
	bool STATIC_OnToggleWayPoint();
	void STATIC_OnToggleSpawnKitSelect_FBR();
	bool STATIC_OnToggleMapPad();
	bool STATIC_OnToggleInventoryPad();
	bool STATIC_OnToggleInGameMenuPad();
	bool STATIC_OnToggleExtendedMinimapPad();
	bool STATIC_OnToggleCameraPad();
	void STATIC_OnToggleCamera();
	void STATIC_OnTimerIgnoreClientVehicleMove();
	bool STATIC_OnStopMoveVehicleSeatPad();
	bool STATIC_OnStopHoldThrowableItemWheel();
	bool STATIC_OnStopHoldRotationPadRB();
	bool STATIC_OnStopHoldRotationPadLB();
	bool STATIC_OnStopHoldRotationPad();
	void STATIC_OnStopHoldRadioMessageWheel();
	bool STATIC_OnStopHoldHealItemWheel();
	bool STATIC_OnStartMoveVehicleSeatPad();
	bool STATIC_OnStartHoldThrowableItemWheel();
	bool STATIC_OnStartHoldRotationPadRB();
	bool STATIC_OnStartHoldRotationPadLB();
	bool STATIC_OnStartHoldRotationPad();
	void STATIC_OnStartHoldRadioMessageWheel();
	bool STATIC_OnStartHoldHealItemWheel();
	void STATIC_OnShowFollowButtonPadHold(bool IsPressed);
	void STATIC_OnReplaceAttachmentPadHold(bool IsPressed);
	bool STATIC_OnReplaceAttachmentPad();
	void STATIC_OnRep_TracerManager();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_OnRep_ObserverAuthorityType();
	void STATIC_OnRep_IntentionallySwitchedToObserver();
	void STATIC_OnRep_CameraViewBehaviour();
	void STATIC_OnRep_bUseTPAntibotClient();
	void STATIC_OnRep_bEnableGVoice();
	void STATIC_OnRep_AllowVoiceChatInput();
	void STATIC_OnRep_AfkKickTime();
	bool STATIC_OnReleaseRadioMessagePad();
	bool STATIC_OnReleasedHealItemPad();
	bool STATIC_OnPressRadioMessagePad();
	bool STATIC_OnPressedHealItemPad();
	void STATIC_OnParachuteFollowPadHold(bool IsPressed);
	void STATIC_OnMoveToVehicleSeat(unsigned char Idx);
	void STATIC_OnItemStackCountHandlingMode();
	bool STATIC_OnInteractInVehiclePad();
	bool STATIC_OnInteractGamepad();
	bool STATIC_OnHoldToggleSpawnKitSelectFBRPad();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnFinishInteractionCastOnServer(class UObject* CastObject);
	void STATIC_OnFinishInteractionCastOnClient(class UObject* CastObject);
	void STATIC_OnFBRClassSelectGuidePadHold(bool IsPressed);
	void STATIC_OnExecuteExitCommand();
	void STATIC_OnEmoteAnimation(unsigned char InIndex);
	bool STATIC_OnDrivingToggleCameraPad();
	void STATIC_OnClickedReportButton(EReportCause ReportCause, const struct FString& NetId, ESubjectToReport SubjectToReport, TArray<EReportDetailCauseType> ReportDetailCauseTypeList);
	void STATIC_OnCancelInteractionCast(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnBeginningOptimizationStateChanged(EBeginningState InState);
	void STATIC_OnAutomatedTesting();
	void STATIC_OffItemStackCountHandlingMode();
	void STATIC_ObserverTeleportTo(const struct FVector& Location);
	void STATIC_NextSetViewTarget();
	void STATIC_NextMinimapSize();
	void STATIC_MobileBodiesStatistics();
	void STATIC_LeagueReplaySwitchPlayer(class APlayerState* TslPlayerState, bool bSetPlayerCamera);
	void STATIC_KickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_KickAfkPlayer();
	bool STATIC_IsTeleportModeOn();
	bool STATIC_IsSwitchedToObserverIntentionally();
	bool STATIC_IsSpectatorState();
	bool STATIC_IsSpectating();
	bool STATIC_IsShowFollowButton();
	bool STATIC_IsSameObservingCameraMode(EObserverCameraMode CameraType);
	bool STATIC_IsReplayingKillcam();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsMissionListDisplayable();
	bool STATIC_IsLiveReplaying();
	bool STATIC_IsKillerSpectating();
	bool STATIC_IsItemStackCountHandlingMode();
	bool STATIC_IsHighPing();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsGroggying();
	bool STATIC_IsGamepadHoldProcessing();
	bool STATIC_IsGameInputAllowed();
	bool STATIC_IsClientFreecamFogIntensityControlEnabled();
	bool STATIC_IsCanParachuteFollow();
	bool STATIC_IsCanFollowPlayer(const struct FString& PlayerNam);
	bool STATIC_IsAllowedToSwitchToObserver();
	void STATIC_InitClientSandboxMaster();
	void STATIC_HideTslDebugInfomation();
	void STATIC_HideMatchResult();
	void STATIC_HideEmoteWheel();
	bool STATIC_HasNextSpectateCharacter();
	class UVoiceComponent* STATIC_GetVoiceComponent();
	class ATslCharacter* STATIC_GetViewTargetTslCharacter();
	class ATeam* STATIC_GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslPlayerMatchResultInfos();
	class UTslPawnInputBindingComponent* STATIC_GetTslPawnInputBindingComponent();
	class ATslCharacter* STATIC_GetTslCharacter();
	TArray<class ATslPlayerState*> STATIC_GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int STATIC_GetTeamOverallKillCountAtObserving();
	int STATIC_GetTeamMemberCount();
	int STATIC_GetTeamIdAtObserving();
	class ATslCharacter* STATIC_GetTeamCharacterByPlayerName(const struct FString& PlayerName);
	class ATeam* STATIC_GetTeamByPlayerName(const struct FString& PlayerName);
	struct FRotator STATIC_GetTargetViewRotation();
	TArray<class ATslPlayerState*> STATIC_GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString STATIC_GetSpectatingPlayerName();
	struct FString STATIC_GetSpectatingOrFollowingTslCharacterNetId();
	TArray<struct FName> STATIC_GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> STATIC_GetReplicateTeamMembers();
	TArray<class ATslCharacter*> STATIC_GetReplicateKillerTeamMembers();
	TArray<class AReplicatedCharacterData*> STATIC_GetReplicatedCharacterDataList();
	TArray<class ATslCharacter*> STATIC_GetReplicateCharacters();
	TArray<class ACarePackageItem*> STATIC_GetReplicateCarePackageItems();
	class ATeam* STATIC_GetPlayerTeam();
	float STATIC_GetOtherTotalCastTime();
	float STATIC_GetOtherElapsedCastTime();
	float STATIC_GetOtherDeltaCastTime();
	float STATIC_GetOtherCastTime();
	struct FText STATIC_GetOtherCastingName();
	EObserverCameraMode STATIC_GetObserverCameraMode();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> STATIC_GetKeysForAction(const struct FName& ActionName);
	struct FText STATIC_GetHudDebugText();
	TArray<struct FName> STATIC_GetGearProfile(int ProfileIndex);
	struct FString STATIC_GetFollowName(class ATslCharacter* FollowCharacter);
	class ATeam* STATIC_GetFollowLeaderTeam(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowLeader(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowCharacter(const struct FString& PlayerName);
	TArray<class ATslPlayerState*> STATIC_GetDeadPlayerStates();
	float STATIC_GetCurrentHoldProgressRate();
	TArray<class ATeam*> STATIC_GetClientTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientSquadInTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> STATIC_GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool STATIC_GetCanAllSpectate();
	TArray<struct FTslReportUserInfo> STATIC_GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> STATIC_GetAllPlayerStates();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters(class ATslCharacter* LeaderCharacter);
	int STATIC_GetAliveTeamMemberCount(bool bIncludeQuitter);
	void STATIC_ForceGotoLobbyPopUpHandler(EPopupButtonID ButtonID);
	void STATIC_FollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_EndStreamingPause();
	void STATIC_DumpActorDetailByRaycast();
	void STATIC_DropItem(const struct FString& ItemTypeName);
	void STATIC_DisplayParachuteFollowMessage();
	void STATIC_DeleteMapMarker();
	bool STATIC_CompleteReportKiller();
	void STATIC_CloseKickPlayerWarningPopupAndTerminate(EPopupButtonID ButtonID);
	void STATIC_CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void STATIC_ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedByAntiCheat(const struct FText& KickReason);
	void STATIC_ClientWasKickedAndExitTP(const struct FText& KickReason);
	void STATIC_ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void STATIC_ClientUpdatePlatoonMapMarker(int PlatoonId, bool bOffline, const struct FMapMarker& MapMarker);
	void STATIC_ClientUpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_ClientUpdatePlatoonCommander(int PlatoonId, const struct FTeamMemberIdentification& PlatoonMemberId);
	void STATIC_ClientUpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State, bool bForceUpdate);
	void STATIC_ClientUpdateOptionData();
	void STATIC_ClientUpdateDropPackageAchievement();
	void STATIC_ClientUpdateCollisionResponseToPawn(bool bActive);
	void STATIC_ClientUpdateCarePackageAchievement();
	void STATIC_ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void STATIC_ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void STATIC_ClientTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ClientStopTestCheat();
	void STATIC_ClientStartOnlineGame();
	void STATIC_ClientShowMatchResult();
	void STATIC_ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void STATIC_ClientSetCurSandboxVehicleNumber(int InNumber);
	void STATIC_ClientSetCurSandboxItemNumber(int InNumber);
	void STATIC_ClientSetCanAllSpectate(bool InbCanSpectate);
	void STATIC_ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void STATIC_ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendFakeAIDBNOMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, float InDistanceFromKillerToVictim);
	void STATIC_ClientRestoreSpectatorOnReconnection();
	void STATIC_ClientRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ClientRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_ClientRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_ClientProcessRevive();
	void STATIC_ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void STATIC_ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_ClientOnCharacterRestart();
	void STATIC_ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbSuicide);
	void STATIC_ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void STATIC_ClientNpcCount(int InCount);
	void STATIC_ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void STATIC_ClientNotifySpeedBoost(float Boost);
	void STATIC_ClientNotifyRestrictingPlayArea();
	void STATIC_ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void STATIC_ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void STATIC_ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_ClientNotifyHealAmount_Unreliable(float Heal);
	void STATIC_ClientNotifyHealAmount_Reliable(float Heal);
	void STATIC_ClientNotifyHealAmount(float Heal);
	void STATIC_ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void STATIC_ClientNetworkPingStateReceive(TArray<unsigned char> Data);
	void STATIC_ClientInteractByComponent(class UActorComponent* TargetComponent);
	void STATIC_ClientInteract(class AActor* TargetObject);
	void STATIC_ClientIgnoreClientVehicleMove(bool InIgnore);
	void STATIC_ClientGetDestructiblePenData(TArray<struct FDestructiblePenetrationState> PenState);
	void STATIC_ClientGetDestructibleBreachData(TArray<struct FDestructibleBreachState> BreachState);
	void STATIC_ClientGetDestructibleBeaconData(TArray<struct FGuid> BeaconGUIDs);
	void STATIC_ClientGameStarted(float worldTime);
	void STATIC_ClientForceOverwriteMapMarkerData(const struct FMapMarker& MapMarker);
	void STATIC_ClientEndOnlineGame();
	void STATIC_ClientDynamicWeatherSync(int DynamicWeatherIndex, bool bInitialized, float BlendInTime, float SaturationTime, float BlendOutTime);
	void STATIC_ClientDisplayCarePackage(const struct FVector& InSpawnLocation, const struct FVector& InEndLocation, TArray<struct FVector> InDropItemPos, TArray<int> InPassedCountList);
	void STATIC_ClientDebugVehicleLocation(TArray<struct FDebugVehicleLoation> InVehicleLocArray);
	void STATIC_ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void STATIC_ClientCeremonyRoundResult(int InWinnerTeamId, TArray<int> InWinningTeamIdList, bool bLastRound);
	void STATIC_ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void STATIC_ClientAllowSandboxMaster();
	void STATIC_ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void STATIC_ClientAdminExportStringFile(const struct FString& inString, const struct FString& InFileName);
	void STATIC_ClientAdminCopyString(const struct FString& inString);
	void STATIC_Client_TakeScreenshot();
	void STATIC_Client_ItemRequestReplied(class ATslCharacter* RequestOwner);
	void STATIC_Client_DrawDebugString(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat_ServerSpawnVehicle(int VehicleIndex);
	void STATIC_ChangeMeshCommand(int Parameter, float Time);
	void STATIC_CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool STATIC_CanSeeTerrainThroughFogInTheAir();
	bool STATIC_CanReport();
	void STATIC_BP_Test_SpawnVehicle(int VehicleIndex);
	void STATIC_BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_BEClient(const struct FString& Command);
	void STATIC_AllowVoiceChatInput(bool bAllow);
	void STATIC_Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslWeapon_Gun
// 0x04C0 (0x0D80 - 0x08C0)
class ATslWeapon_Gun : public ATslWeapon
{
public:
	bool                                               bSpawnBulletFromBarrel;                                   // 0x08C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x08C1(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               VariableZoomStepAk;                                       // 0x08C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ZeroingStepAk;                                            // 0x08D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAlwaysUseIronSightZeroing;                               // 0x08D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponState>                          CurrentState;                                             // 0x08D9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x08DA(0x0002) MISSED OFFSET
	int                                                AmmoPerClip;                                              // 0x08DC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentAmmoData;                                          // 0x08E0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentZeroLevel;                                         // 0x08E4(0x0004) (Edit, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentCantedZeroLevel;                                   // 0x08E8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsHipped : 1;                                            // 0x08EC(0x0001) (Net, Transient)
	unsigned char                                      bOverrideScopeCameraDistanceOffset : 1;                   // 0x08EC(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x3B];                                      // 0x08ED(0x003B) MISSED OFFSET
	int                                                FiringModeIndex;                                          // 0x0928(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSetDefaultFiringMode;                                    // 0x092C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1B];                                      // 0x092D(0x001B) MISSED OFFSET
	float                                              DeviationAimRaiseScalar;                                  // 0x0948(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationAimFallScalar;                                   // 0x094C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationADSRaiseScalar;                                  // 0x0950(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationADSFallScalar;                                   // 0x0954(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationCrouchRaiseScalar;                               // 0x0958(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationCrouchFallScalar;                                // 0x095C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationProneRaiseScalar;                                // 0x0960(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationProneFallScalar;                                 // 0x0964(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationJumpRaiseScalar;                                 // 0x0968(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationJumpFallScalar;                                  // 0x096C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationMoveInterpSpeed;                                 // 0x0970(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeviationFallingMoveInterpSpeed;                          // 0x0974(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x68];                                      // 0x0978(0x0068) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_SimulatedWeaponMontages;                      // 0x09E0(0x0008) (Transient)
	unsigned char                                      UnknownData05[0x38];                                      // 0x09E8(0x0038) MISSED OFFSET
	struct FWeaponPPSettings                           WeaponGunPostprocessSettings;                             // 0x0A20(0x00A8) (Edit, DisableEditOnInstance)
	class UReticlePostprocessData*                     ReticlePostprocessData;                                   // 0x0AC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScopingAttachPoint;                                       // 0x0AD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScopingAttachPointOverride;                               // 0x0AD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScopingFocusPoint;                                        // 0x0AE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x218];                                     // 0x0AE8(0x0218) MISSED OFFSET
	bool                                               bLoackLoadedAmmo;                                         // 0x0D00(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0D01(0x0003) MISSED OFFSET
	float                                              ClearDesiredDoFireActionDuration;                         // 0x0D04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0D08(0x0008) MISSED OFFSET
	class UWeaponGunDataAsset*                         WeaponGunData;                                            // 0x0D10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class UWeaponAudioData*                            WeaponAudioData;                                          // 0x0D18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class UAmmoItem*                                   CachedDefaultAmmoItem;                                    // 0x0D20(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     ShootTargetLoc;                                           // 0x0D28(0x000C) (BlueprintVisible, Net, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4C];                                      // 0x0D34(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Gun"));

		return ptr;
	}


	bool STATIC_WeaponCycleDone();
	void STATIC_UpdateDefaultReticleIndex(int InIndex);
	void STATIC_StopReloadAnimByOne();
	void STATIC_StartManualFireCycle();
	void STATIC_SimulateWeaponReload(EWeaponReloadAnimExec ReloadAnimExec);
	void STATIC_SetWeaponReloadInterrupted(bool bIsInterrupted);
	void STATIC_SetSpawnBulletFromBarrel(bool DoSpawnBulletFromBarrel);
	void STATIC_SetFiringMode(EFiringMode FiringMode);
	void STATIC_ServerStopReload();
	void STATIC_ServerStopFire();
	void STATIC_ServerStartReload();
	void STATIC_ServerStartFire();
	void STATIC_ServerSetHip(bool bNewIsHipped);
	void STATIC_ServerSetCurrentZeroLevel(int ZeroLevel);
	void STATIC_ServerSetCurrentCantedZeroLevel(int ZeroLevel);
	void STATIC_ServerHandleFiring(uint32_t T);
	void STATIC_ServerCancelReload(EWeaponReloadCancelReason CancelReason);
	void STATIC_Server_StartManualFireCycle();
	void STATIC_Server_SendClientFPS(TArray<unsigned char> FrameData, TArray<unsigned char> PingData);
	void STATIC_ProcessBoltAction(bool bFromReload);
	void STATIC_PlayWeaponCycleCameraAnim();
	void STATIC_PlayLongTailSound();
	void STATIC_OnZeroingChanged(EScopeType ScopeType);
	void STATIC_OnRep_FiringModeIndex();
	void STATIC_OnRep_CurrentZeroLevel(int LastCurrentZeroLevel);
	void STATIC_OnRep_CurrentCantedZeroLevel(int LastCurrentZeroLevel);
	void STATIC_OnRep_AmmoCount(int LastCurrentAmmoInClip);
	void STATIC_OnInventoryUpdated();
	void STATIC_OnAttachmentMainScopeLoaded();
	void STATIC_OnAttachmentAngledScopeLoaded();
	void STATIC_OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	void STATIC_ManualFireCycleFinished();
	bool STATIC_IsWeaponCycleInProgress();
	bool STATIC_IsWeaponCycleAnimActive();
	bool STATIC_IsWeaponCycleActive();
	bool STATIC_IsReloadInterrupted();
	bool STATIC_IsReloading();
	class UAnimMontage* STATIC_GetWeaponTacticalReload();
	struct FWeaponPPSettings STATIC_GetWeaponPostprocessSettings();
	struct FWeaponPPSettings STATIC_GetWeaponOrScopePostprocessSettings(EScopeType ScopeType);
	struct FVector STATIC_GetWeaponHandOffsetFPP();
	struct FVector STATIC_GetWeaponHandOffset();
	class UWeaponGunDataAsset* STATIC_GetWeaponGunData();
	struct FWeaponGunConfigReplacement STATIC_GetWeaponGunConfigReplacement();
	float STATIC_GetWeaponFullReloadTime();
	float STATIC_GetWeaponFullRealoadTimeWithAttachments();
	struct FWeaponDeviationConfig STATIC_GetWeaponDeviationConfigReplacement();
	float STATIC_GetWeaponCurrentRecoilValue();
	float STATIC_GetWeaponCurrentDeviationValue();
	class UAnimMontage* STATIC_GetWeaponChargeReload();
	struct FWeaponAttachmentData STATIC_GetWeaponAttachmentDataForScopeType(EScopeType ScopeType);
	struct FWeaponAnimConfig STATIC_GetWeaponAnimConfig();
	struct FVector STATIC_GetWeaponAimRelativePosition();
	struct FVector STATIC_GetScopeMeshRelativePosition(EScopeType ScopeType);
	float STATIC_GetReloadAnimationPlayRate();
	float STATIC_GetRecoilKick_MovementSpeed();
	float STATIC_GetRecoilKick_MovementMultiplier();
	int STATIC_GetNumOfFiringMode();
	float STATIC_GetMovementModifierScope();
	float STATIC_GetMovementModifierAim();
	int STATIC_GetMaxAmmo();
	float STATIC_GetMagOutDuration();
	struct FVector STATIC_GetMagDropLinearVelocity();
	struct FVector STATIC_GetMagDropAngularVelocity();
	EWeaponClass STATIC_GetLobbyAnimationEnum();
	int STATIC_GetGripTypeIndex();
	EFiringMode STATIC_GetFiringMode();
	class UAmmoItem* STATIC_GetDefaultAmmoObject();
	int STATIC_GetCurrentScopeZeroingLevel();
	float STATIC_GetCurrentDeviation();
	int STATIC_GetCurrentAmmoInInventory();
	int STATIC_GetCurrentAmmoInClip();
	int STATIC_GetCurrentAmmo();
	class UAnimMontage* STATIC_GetCharacterTacticalReloadFromAttach();
	class UAnimMontage* STATIC_GetCharacterReloadTacticalMontage();
	class UAnimMontage* STATIC_GetCharacterReloadChargeMontage();
	class UAnimMontage* STATIC_GetCharacterReloadByOneStopMontage();
	class UAnimMontage* STATIC_GetCharacterReloadByOneStartMontage();
	class UAnimMontage* STATIC_GetCharacterReloadByOneSingleMontage();
	class UBlendSpaceBase* STATIC_GetCharacterLHGripBlendspace();
	class UBlendSpace1D* STATIC_GetCharacterGripBlendspace();
	class UAnimMontage* STATIC_GetCharacterFireSelectorMontage();
	class UAnimMontage* STATIC_GetCharacterFireMontage();
	class UAnimMontage* STATIC_GetCharacterFireCycle();
	class UAnimMontage* STATIC_GetCharacterChargeReloadFromAttach();
	int STATIC_GetAmmoPerClip();
	struct FName STATIC_GetAmmoItemID();
	float STATIC_GetADSRecoilKick();
	void STATIC_ClientStopSimulatingWeaponFire();
	void STATIC_ClientSimulateWeaponFire();
	void STATIC_ClientSetFiringMode(EFiringMode FiringMode);
	void STATIC_ClientNotifyStopReloadByOne();
	void STATIC_ClientNotifyOutOfAmmo();
	void STATIC_ClientNotifyAmmo(int InCurrentAmmoData, bool bWhenArm);
	void STATIC_ClientCancelReload(EWeaponReloadCancelReason CancelReason);
	void STATIC_Client_StartManualFireCycle();
	void STATIC_ClearDesiredDoFireAction();
	bool STATIC_CheckMiddlePointCollision();
	void STATIC_CancelReloadImpl(EWeaponReloadCancelReason CancelReason);
	void STATIC_BroadcastOutOfAmmo();
	void STATIC_AnimCall_ToggleFireMode();
	void STATIC_AnimCall_ReloadTacticalWeapon();
	void STATIC_AnimCall_ReloadChargeWeapon();
	void STATIC_AnimCall_ReloadByOneStop();
	void STATIC_AnimCall_FireWeaponCycle();
	void STATIC_AnimCall_FireWeapon();
	void STATIC_AdjustReticleTexture(EScopeType ScopeType);
};


// Class TslGame.TslWeapon_Projectile
// 0x0000 (0x0D80 - 0x0D80)
class ATslWeapon_Projectile : public ATslWeapon_Gun
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Projectile"));

		return ptr;
	}


	void STATIC_ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
};


// Class TslGame.TslTrajectoryProviderInterface
// 0x0000 (0x0030 - 0x0030)
class UTslTrajectoryProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrajectoryProviderInterface"));

		return ptr;
	}

};


// Class TslGame.TslWeapon_Throwable
// 0x0140 (0x0A00 - 0x08C0)
class ATslWeapon_Throwable : public ATslWeapon
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x08C0(0x0008) MISSED OFFSET
	struct FThrowableWeaponData                        ThrowableConfig;                                          // 0x08C8(0x00B0) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0978(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnThrowableStateChanged;                                  // 0x0980(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0990(0x0030) MISSED OFFSET
	EThrowableState                                    ThrowableState;                                           // 0x09C0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x09C1(0x0007) MISSED OFFSET
	struct FName                                       ThrowWeaponSocketName;                                    // 0x09C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PawnMotionContributionMultiplier;                         // 0x09D0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x09DC(0x0014) MISSED OFFSET
	class ATslParticle*                                CookingEffect;                                            // 0x09F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      RingAttachment;                                           // 0x09F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Throwable"));

		return ptr;
	}


	void STATIC_ServerStartPinOff();
	void STATIC_ServerStartCooking();
	void STATIC_ServerRequestCancelThrow();
	void STATIC_ServerFireProjectile(int checksum1, int checksum2, const struct FVector& RelativeLocation, const struct FVector& AimDirection, float ClientPitch, int FakeIndex);
	void STATIC_ServerBeginThrow();
	void STATIC_OnRep_ThrowableState(EThrowableState LastThrowableState);
	void STATIC_OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	EThrowableState STATIC_GetThrowableState();
	int STATIC_GetThrowableCountInInventory();
	int STATIC_GetThrowableCount();
	void STATIC_Delayed_ServerFireProjectile(const struct FVector& RelativeLocation, const struct FVector_NetQuantizeNormal& AimDirection, float ClientPitch, int FakeIndex);
	void STATIC_CustomTrigger_BP(bool bIsActive);
	void STATIC_ClientNotifyReset();
	struct FVector STATIC_CalculateFinalThrowVelocity(const struct FVector& AimDirection);
};


// Class TslGame.TslBuoyancyForceComponent
// 0x0000 (0x0560 - 0x0560)
class UTslBuoyancyForceComponent : public UBuoyancyForceComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBuoyancyForceComponent"));

		return ptr;
	}

};


// Class TslGame.TslProjectile
// 0x0348 (0x0730 - 0x03E8)
class ATslProjectile : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET
	class UTslProjectileMovementComponent*             MovementComp;                                             // 0x0408(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleComp;                                             // 0x0418(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x0420(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            InterpolationTargetComp;                                  // 0x0428(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x0430(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UFakeProjectileComponent*                    FakeProjectileComponent;                                  // 0x0438(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FVector                                     MeshInitialRotationRate;                                  // 0x0440(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	struct FExplosionTracer                            ExplosionTracer;                                          // 0x0450(0x0040) (Edit, DisableEditOnInstance)
	EProjectileParticleClass                           ProjectileParticleClass;                                  // 0x0490(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0491(0x0003) MISSED OFFSET
	struct FVector                                     SpawnLocation;                                            // 0x0494(0x000C) (Net, Transient, IsPlainOldData)
	EProjectileExplosionStartType                      ExplosionStartType;                                       // 0x04A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	struct FName                                       ParticleToMeshAttachPointName;                            // 0x04A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EProjectileExplosionRotationType                   ExplosionRotationType;                                    // 0x04B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      HideMeshAtExplosion : 1;                                  // 0x04B1(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      ExplosionInWater : 1;                                     // 0x04B1(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      ForceSpawnDecalInAir : 1;                                 // 0x04B1(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseVelocityStartTimer : 1;                               // 0x04B1(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x6];                                       // 0x04B2(0x0006) MISSED OFFSET
	class UClass*                                      ExplosionTemplate;                                        // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionTemplateInAir;                                   // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionTemplateInWater;                                 // 0x04C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionTemplateDestroyedWall;                           // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseManualShakeEffectTrigger;                             // 0x04D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseManualAudioEffectTrigger;                             // 0x04D9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x04DA(0x0006) MISSED OFFSET
	class UTslExplosionEffectData*                     EffectData;                                               // 0x04E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ImpactSound;                                              // 0x04E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkComponent*                                AkComp;                                                   // 0x04F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET
	EProjectileExplodeState                            ExplodeState;                                             // 0x0500(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0501(0x0003) MISSED OFFSET
	int                                                FakeProjectileIndex;                                      // 0x0504(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08 : 1;                                        // 0x0508(0x0001)
	unsigned char                                      bActiveParticle : 1;                                      // 0x0508(0x0001) (Net, Transient)
	unsigned char                                      bPropagateEffectActor : 1;                                // 0x0508(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	float                                              VelocityStopStepDistance;                                 // 0x050C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VelocityCheckStepLimit;                                   // 0x0510(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LastStepLocation;                                         // 0x0514(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     LastTickLocation;                                         // 0x0520(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bEnableInitialMeshInterpolation : 1;                      // 0x052C(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x3];                                       // 0x052D(0x0003) MISSED OFFSET
	float                                              InitialMeshInterpolationRate;                             // 0x0530(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StepBuffer;                                               // 0x0534(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VelocityCheckTimerTick;                                   // 0x0538(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MovementBaseCheckTimerTick;                               // 0x053C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostExplodeLifetime;                                      // 0x0540(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bChangeFuseTimerOnImpact;                                 // 0x0544(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0545(0x0003) MISSED OFFSET
	float                                              PostImpactExplosionTimer;                                 // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LastImpactVelocity;                                       // 0x054C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ExplosionDelay;                                           // 0x0558(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x055C(0x0004) MISSED OFFSET
	struct FProjectileData                             ProjectileConfig;                                         // 0x0560(0x00C0) (Edit, DisableEditOnInstance)
	class UClass*                                      ReplicatedEffectActor;                                    // 0x0620(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageToSelfModifier;                                     // 0x0628(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CustomTickingInterval;                                    // 0x062C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CustomTickingFirstDelay;                                  // 0x0630(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   CustomTickingMapInputRange;                               // 0x0634(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   CustomTickingMapOutputRange;                              // 0x063C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0644(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               CustomTickingSound;                                       // 0x0648(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x30];                                      // 0x0650(0x0030) MISSED OFFSET
	float                                              AttachOffset;                                             // 0x0680(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0684(0x0004) MISSED OFFSET
	class AActor*                                      AttachedActor;                                            // 0x0688(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     AttachedLocation;                                         // 0x0690(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x069C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               PreExplosionSound;                                        // 0x06A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PreExplosionTime;                                         // 0x06A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeTillExplosion;                                        // 0x06AC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldAutoDestroyParticleComp;                           // 0x06B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x7];                                       // 0x06B1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEnterWater;                                             // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData18[0x30];                                      // 0x06C8(0x0030) MISSED OFFSET
	class ATslProjectile*                              FakeProjectile;                                           // 0x06F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x30];                                      // 0x0700(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectile"));

		return ptr;
	}


	void STATIC_TimerExplode();
	void STATIC_TakeDamageImp(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_Server_DetachedFromObject();
	void STATIC_PropagateEffectActor_BP();
	void STATIC_PropagateEffectActor();
	void STATIC_OverrideExplosionDelay();
	void STATIC_OnRep_TimeTillExplosion();
	void STATIC_OnRep_SetExplosionDelay();
	void STATIC_OnRep_AttachedLocation();
	void STATIC_OnRep_AttachedActor();
	void STATIC_OnRep_ActiveParticle();
	void STATIC_OnProjectileStopSim(const struct FHitResult& ImpactResult);
	void STATIC_OnImpact(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void STATIC_Multi_StopSimulation(const struct FVector& InStopLocation);
	void STATIC_Multi_ReactivateSimulation();
	void STATIC_Multi_PreExplosion();
	void STATIC_Multi_Exploded(EProjectileExplodeState State, const struct FVector& Location, const struct FVector& ForwardDirection);
	void STATIC_Multi_DrawDebugLocation(int DrawDebugIndex, const struct FVector& DrawDebugLocation);
	void STATIC_Multi_DetachedFromObject();
	void STATIC_ExplodeBP(const struct FVector& Location, const struct FRotator& Rotation, const struct FHitResult& Impact, float Radius);
	void STATIC_DetachedFromObject();
	void STATIC_CustomTicking();
	void STATIC_Client_SimulateExplosion(const struct FVector& Location, const struct FVector& ForwardDirection);
	void STATIC_CheckVelocityForStart();
	void STATIC_CheckMovementBase();
};


// Class TslGame.RedZoneBombComponent
// 0x0140 (0x05F0 - 0x04B0)
class URedZoneBombComponent : public USceneComponent
{
public:
	bool                                               bLocationReplicated;                                      // 0x04B0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET
	class UClass*                                      ExplosionTemplate;                                        // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionDelay;                                           // 0x04C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04C4(0x0004) MISSED OFFSET
	struct FExplosionTracer                            ExplosionTracer;                                          // 0x04C8(0x0040) (Edit, DisableEditOnInstance)
	class UAkAudioEvent*                               CreateSound;                                              // 0x0508(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ExplosionSound;                                           // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FProjectileData                             ProjectileConfig;                                         // 0x0518(0x00C0) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x18];                                      // 0x05D8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RedZoneBombComponent"));

		return ptr;
	}


	void STATIC_TimerExplosion();
	void STATIC_TimerExpire();
	void STATIC_Multi_Exploded();
	void STATIC_ExplodeBP(float Radius);
};


// Class TslGame.RedZoneBombingField
// 0x0008 (0x03F0 - 0x03E8)
class ARedZoneBombingField : public AInfo
{
public:
	class UAkComponent*                                AkComp;                                                   // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RedZoneBombingField"));

		return ptr;
	}


	void STATIC_StartBombingMulticast(const struct FString& BombingStartSound);
};


// Class TslGame.ReplayDemoActorChannel
// 0x02F8 (0x0600 - 0x0308)
class UReplayDemoActorChannel : public UDemoActorChannel
{
public:
	unsigned char                                      UnknownData00[0x2F8];                                     // 0x0308(0x02F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReplayDemoActorChannel"));

		return ptr;
	}

};


// Class TslGame.ReplicatedCharacterData
// 0x00B0 (0x0498 - 0x03E8)
class AReplicatedCharacterData : public AActor
{
public:
	struct FVector_NetQuantize100                      PlayerLocation;                                           // 0x03E8(0x000C) (Net, Transient)
	struct FRotator                                    PlayerRotation;                                           // 0x03F4(0x000C) (Net, Transient, IsPlainOldData)
	struct FString                                     PlayerName;                                               // 0x0400(0x0010) (Net, ZeroConstructor, Transient)
	struct FString                                     ClanName;                                                 // 0x0410(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      Health;                                                   // 0x0420(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      HealthMax;                                                // 0x0421(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      GroggyHealth;                                             // 0x0422(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      GroggyHealthMax;                                          // 0x0423(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CharacterState;                                           // 0x0424(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EMarkerType                                        MapMarkerType;                                            // 0x0428(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	struct FVector2D                                   MapMarkerPosition;                                        // 0x042C(0x0008) (Net, IsPlainOldData)
	struct FVector2D                                   PingPosition;                                             // 0x0434(0x0008) (Net, IsPlainOldData)
	unsigned char                                      bIsDying : 1;                                             // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bIsGroggying : 1;                                         // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bQuitter : 1;                                             // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bShowMapMarker : 1;                                       // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bIsInVehicle : 1;                                         // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bIsInAircraft : 1;                                        // 0x043C(0x0001) (Net, Transient)
	unsigned char                                      bIsVehicleDriver : 1;                                     // 0x043C(0x0001) (Net, Transient)
	bool                                               bIsSkydiving;                                             // 0x043D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsParachuting;                                           // 0x043E(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x043F(0x0001) MISSED OFFSET
	float                                              BoostGauge;                                               // 0x0440(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int8_t                                             TeamIdRep;                                                // 0x0444(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	int8_t                                             MemberIndex;                                              // 0x0445(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	int8_t                                             SquadIndex;                                               // 0x0446(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	int8_t                                             SquadMemberIndex;                                         // 0x0447(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0448(0x0004) MISSED OFFSET
	float                                              PiningTimeSeconds;                                        // 0x044C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bZombie : 1;                                              // 0x0450(0x0001) (Net, Transient)
	unsigned char                                      bHadZombieVirus : 1;                                      // 0x0450(0x0001) (Net, Transient)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0451(0x0007) MISSED OFFSET
	TArray<class AReplicatedCharacterData*>            RiderReplicatedCharacterDataList;                         // 0x0458(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	struct FString                                     UniqueId;                                                 // 0x0470(0x0010) (Net, ZeroConstructor, Transient)
	class ATslPlayerState*                             AuthorizedPlayerState;                                    // 0x0480(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPlayerState*                             CachedTslPlayerState;                                     // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      Signal;                                                   // 0x0490(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      SignalMax;                                                // 0x0491(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      GroggySignal;                                             // 0x0492(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      GroggySignalMax;                                          // 0x0493(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0494(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReplicatedCharacterData"));

		return ptr;
	}


	void STATIC_ServerSetShowMapMarker(bool bNewShowMapMarker);
	void STATIC_ServerSetPingPosition(const struct FVector2D& NewPingPosition);
	void STATIC_ServerSetMapMarkerPosition(const struct FVector2D& NewMapMarkerPosition, EMarkerType NewMapMarkerType);
	void STATIC_OnRep_Dying(bool bLastDying);
	bool STATIC_IsVehicleDriver();
	bool STATIC_IsSkydiving();
	bool STATIC_IsShowMapMarker();
	bool STATIC_IsQuitter();
	bool STATIC_IsParachuting();
	bool STATIC_IsGroggying();
	bool STATIC_IsDying();
	class APawn* STATIC_GetVehiclePawn();
	class ATslCharacter* STATIC_GetTslCharacter();
	int STATIC_GetSquadMemberIndex();
	int STATIC_GetSquadIndex();
	float STATIC_GetSignalMax();
	float STATIC_GetSignal();
	struct FString STATIC_GetPlayerUniqueId();
	struct FRotator STATIC_GetPlayerRotation(bool bAimOffset);
	struct FString STATIC_GetPlayerName();
	struct FVector STATIC_GetPlayerLocation();
	float STATIC_GetPiningTimeSeconds();
	struct FVector2D STATIC_GetPingPosition();
	class USkeletalMeshComponent* STATIC_GetPawnMesh();
	int STATIC_GetMemberNumber();
	EMarkerType STATIC_GetMapMarkerType();
	struct FVector2D STATIC_GetMapMarkerPosition();
	bool STATIC_GetIsInVehicle();
	bool STATIC_GetIsInAircraft();
	float STATIC_GetHealthMax();
	float STATIC_GetHealth();
	float STATIC_GetGroggySignalMax();
	float STATIC_GetGroggySignal();
	float STATIC_GetGroggyHealthMax();
	float STATIC_GetGroggyHealth();
	struct FString STATIC_GetClanName();
	int STATIC_GetCharacterState();
};


// Class TslGame.ReplicatedRootComponent
// 0x0000 (0x04B0 - 0x04B0)
class UReplicatedRootComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReplicatedRootComponent"));

		return ptr;
	}


	void STATIC_ToggleVisibility(bool bPropagateToChildren);
	bool STATIC_SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	void STATIC_SetWorldScale3D(const struct FVector& NewScale);
	void STATIC_SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void STATIC_SetRelativeScale3D(const struct FVector& NewScale3D);
	void STATIC_SetIsAttachmentReplicated(bool ShouldReplicate);
	void STATIC_SetIsAttachmentReferenceReplicated(bool ShouldReplicate);
	void STATIC_SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void STATIC_SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void STATIC_ResetRelativeTransform();
	void STATIC_OnRep_Visibility(bool OldValue);
	void STATIC_OnRep_Transform();
	void STATIC_OnRep_AttachSocketName();
	void STATIC_OnRep_AttachParent();
	void STATIC_OnRep_AttachChildren();
	void STATIC_K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform STATIC_K2_GetComponentToWorld();
	struct FVector STATIC_K2_GetComponentScale();
	struct FRotator STATIC_K2_GetComponentRotation();
	struct FVector STATIC_K2_GetComponentLocation();
	void STATIC_K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify);
	bool STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool STATIC_K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsVisible();
	bool STATIC_IsSimulatingPhysics(const struct FName& BoneName);
	bool STATIC_IsAnySimulatingPhysics();
	struct FVector STATIC_GetUpVector();
	struct FTransform STATIC_GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator STATIC_GetSocketRotation(const struct FName& InSocketName);
	struct FQuat STATIC_GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector STATIC_GetSocketLocation(const struct FName& InSocketName);
	struct FVector STATIC_GetRightVector();
	struct FTransform STATIC_GetRelativeTransform();
	class APhysicsVolume* STATIC_GetPhysicsVolume();
	void STATIC_GetParentComponents(TArray<class USceneComponent*>* Parents);
	int STATIC_GetNumChildrenComponents();
	struct FVector STATIC_GetForwardVector();
	struct FVector STATIC_GetComponentVelocity();
	void STATIC_GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* STATIC_GetChildComponent(int ChildIndex);
	struct FName STATIC_GetAttachSocketName();
	class USceneComponent* STATIC_GetAttachParent();
	TArray<struct FName> STATIC_GetAllSocketNames();
	bool STATIC_DoesSocketExist(const struct FName& InSocketName);
	void STATIC_DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class TslGame.ReplicationTrigger
// 0x0030 (0x0418 - 0x03E8)
class AReplicationTrigger : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<class AActor*>                              TargetReplicatedActors;                                   // 0x03F0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0400(0x0004) MISSED OFFSET
	int                                                ReplicationGroupCount;                                    // 0x0404(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0408(0x0004) MISSED OFFSET
	float                                              ReplicationGroupIntervalSeconds;                          // 0x040C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0410(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReplicationTrigger"));

		return ptr;
	}


	void STATIC_EnableReplicationGroup();
};


// Class TslGame.ReplicationTriggerManager
// 0x0028 (0x0410 - 0x03E8)
class AReplicationTriggerManager : public AInfo
{
public:
	TArray<class UClass*>                              TargetReplicatedActorClasses;                             // 0x03E8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	float                                              TriggerRadius;                                            // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              TriggerInterval;                                          // 0x03FC(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<class AReplicationTrigger*>                 Triggers;                                                 // 0x0400(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReplicationTriggerManager"));

		return ptr;
	}

};


// Class TslGame.ReporterManager
// 0x0088 (0x00B8 - 0x0030)
class UReporterManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x0030(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReporterManager"));

		return ptr;
	}

};


// Class TslGame.DroppedItemInteractionComponent
// 0x0070 (0x0680 - 0x0610)
class UDroppedItemInteractionComponent : public USceneInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0610(0x0038) MISSED OFFSET
	struct FVector                                     BuildingPos;                                              // 0x0648(0x000C) (Net, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0654(0x0004) MISSED OFFSET
	class UPrimitiveComponent*                         CollisionComponent;                                       // 0x0658(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItem*                                       Item;                                                     // 0x0660(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0668(0x0008) MISSED OFFSET
	class UAsyncStaticMeshComponent*                   StaticMeshComponent;                                      // 0x0670(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0678(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedItemInteractionComponent"));

		return ptr;
	}


	void STATIC_OnStaticMeshLoaded();
	void STATIC_OnRep_Item();
	bool STATIC_AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.DestructibleItemInteractionComponent
// 0x0020 (0x06A0 - 0x0680)
class UDestructibleItemInteractionComponent : public UDroppedItemInteractionComponent
{
public:
	struct FTimerHandle                                ExplosionDelayHandle;                                     // 0x0680(0x0008) (Transient)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0688(0x000C) MISSED OFFSET
	float                                              Health;                                                   // 0x0694(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bExploded;                                                // 0x0698(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0699(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DestructibleItemInteractionComponent"));

		return ptr;
	}


	void STATIC_OnRep_Explode();
};


// Class TslGame.TslVehicleInterface
// 0x0000 (0x0030 - 0x0030)
class UTslVehicleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleInterface"));

		return ptr;
	}

};


// Class TslGame.VehicleSeatInteractionComponent
// 0x0240 (0x0850 - 0x0610)
class UVehicleSeatInteractionComponent : public USceneInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0610(0x000C) MISSED OFFSET
	int                                                SeatIndex;                                                // 0x061C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ERiderType                                         RiderType;                                                // 0x0620(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0621(0x0007) MISSED OFFSET
	struct FName                                       LeaveSocketName;                                          // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RiderCollisionComponentName;                              // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterCollisionOverlapRadiusSlack;                         // 0x0638(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterCollisionOverlapCapsuleHalfHeightSlack;              // 0x063C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisablePlayerCapsuleCollision;                           // 0x0640(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBlockDrowning;                                           // 0x0641(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBlockRadialDamage;                                       // 0x0642(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0643(0x0005) MISSED OFFSET
	TMap<EWeaponClass, struct FVector2D>               ViewYawPerWeaponOverrideMap;                              // 0x0648(0x0050) (Edit, ZeroConstructor)
	float                                              ViewPitchMin;                                             // 0x0698(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x069C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x06A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x06A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CurvePitchMax;                                            // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 CurvePitchMin;                                            // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FirstPersonCameraName;                                    // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ThirdPersonCameraName;                                    // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EVehicleAnimType                                   SeatAnimationType;                                        // 0x06C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x06C9(0x0007) MISSED OFFSET
	class UBlendSpaceBase*                             SeatBlendspaceAiming;                                     // 0x06D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             SeatBlendspaceFPPAiming;                                  // 0x06D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Rifle;                                  // 0x06E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Launcher;                               // 0x06E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Melee;                                  // 0x06F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Unarmed;                                // 0x06F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Grenade;                                // 0x0700(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SeatAnimationIdle_Trap;                                   // 0x0708(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAimOffsetBlendSpace*                        SeatIdleAO;                                               // 0x0710(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             TransitionOutBlendspace;                                  // 0x0718(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             TransitionInBlendspace;                                   // 0x0720(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             SeatBlendspaceLauncherAiming;                             // 0x0728(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             TransitionOutLauncherBlendspace;                          // 0x0730(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             TransitionInLauncherBlendspace;                           // 0x0738(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SeatAnimDynamicsScale;                                    // 0x0740(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0744(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           DriverMain;                                               // 0x0748(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanHorizontalMeshSpaceAdditive;                    // 0x0750(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanVerticalMeshSpaceAdditive;                      // 0x0758(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_FrontBack;                               // 0x0760(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_LeftRight;                               // 0x0768(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopBase;                                           // 0x0770(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopMeshSpaceAdditive;                              // 0x0778(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRiderShouldLean;                                         // 0x0780(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRiderShouldUseStop;                                      // 0x0781(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAdjustRiderFPPPosition;                                  // 0x0782(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0783(0x0001) MISSED OFFSET
	struct FVector                                     AdjustRiderFPPScale;                                      // 0x0784(0x000C) (Edit, IsPlainOldData)
	bool                                               bRestricWeaponUse;                                        // 0x0790(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0791(0x0007) MISSED OFFSET
	TArray<EWeaponClass>                               AllowedWeaponClasses;                                     // 0x0798(0x0010) (Edit, ZeroConstructor)
	bool                                               bUseTargetingAnimationBone;                               // 0x07A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanOnlyFireWhileAiming;                                  // 0x07A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bStabilizeTargetingRotation;                              // 0x07AA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanAimFromSeat;                                          // 0x07AB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRestrictTargetingRoll;                                   // 0x07AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x07AD(0x0003) MISSED OFFSET
	float                                              MaxTargetingRoll;                                         // 0x07B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseEntryVelocityRestriction;                             // 0x07B4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x07B5(0x0003) MISSED OFFSET
	float                                              MaxVelocityForEntry;                                      // 0x07B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSeatChangeAngleRestriction;                           // 0x07BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEjectOnSeatChangeFail;                                   // 0x07BD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x07BE(0x0002) MISSED OFFSET
	float                                              MaxRollForSeatChange;                                     // 0x07C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpringArmLengthOverride;                                  // 0x07C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpringArmLengthOverride_Targeting;                        // 0x07C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTargetOffsetInLocalSpace;                             // 0x07CC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x07CD(0x0003) MISSED OFFSET
	struct FVector                                     TargetOffsetOverride;                                     // 0x07D0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     TargetOffsetOverride_Targeting;                           // 0x07DC(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SocketOffsetOverride;                                     // 0x07E8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SocketOffsetOverride_Targeting;                           // 0x07F4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                SocketOffsetCurve_Targeting;                              // 0x0800(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeAffectedByMolotov;                                  // 0x0808(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeAffectedByFlash;                                    // 0x0809(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRestrictMeleeWeaponAttack;                               // 0x080A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x080B(0x0001) MISSED OFFSET
	float                                              InteractionBlockDuration;                                 // 0x080C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0810(0x0008) MISSED OFFSET
	class UPrimitiveComponent*                         RiderCollisionComponent;                                  // 0x0818(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0820(0x0008) MISSED OFFSET
	class UAkAudioEvent*                               VehicleInsideEvent;                                       // 0x0828(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               CustomRideSound;                                          // 0x0830(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               CustomLeaveSound;                                         // 0x0838(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBlockFPPCameraUnderWaterEffect;                          // 0x0840(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0841(0x0003) MISSED OFFSET
	float                                              TargetSpringArmLengthInFirstPerson;                       // 0x0844(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TargetSpringArmLengthInThirdPerson;                       // 0x0848(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x084C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleSeatInteractionComponent"));

		return ptr;
	}


	void STATIC_OnRep_Rider();
	void STATIC_OnInteractDelegate(class ATslCharacter* OtherCharacter);
	bool STATIC_IsWeaponClassAllowed(EWeaponClass InClass);
	bool STATIC_IsSeatChangeAllowedByAngle();
	bool STATIC_IsEntryAllowedByVelocity();
	class UTslVehicleSeatComponent* STATIC_GetVehicleSeatComponent();
	class APawn* STATIC_GetVehiclePawn();
	TScriptInterface<class UTslVehicleInterface> STATIC_GetVehicleInterface();
	EVehicleAnimType STATIC_GetVehicleAnimType();
	class UBlendSpaceBase* STATIC_GetTransitionOutLauncherBlendspace();
	class UBlendSpaceBase* STATIC_GetTransitionOutBlendspace();
	class UBlendSpaceBase* STATIC_GetTransitionInLauncherBlendspace();
	class UBlendSpaceBase* STATIC_GetTransitionInBlendspace();
	class UBlendSpaceBase* STATIC_GetSeatLauncherAimingBlendspace();
	class UAimOffsetBlendSpace* STATIC_GetSeatIdleAO();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Unarmed();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Trap();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Rifle();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Melee();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Launcher();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Grenade();
	class UBlendSpaceBase* STATIC_GetSeatAimingFPPBlendspace();
	class UBlendSpaceBase* STATIC_GetSeatAimingBlendspace();
	float STATIC_GetMinPitchByYaw(float CurrentYaw);
	bool STATIC_GetMeleeWeaponAttackRestricted();
	float STATIC_GetMaxPitchByYaw(float CurrentYaw);
	bool STATIC_GetCanFireOnlyWhileAimed();
	bool STATIC_GetCanAimFromSeat();
	struct FText STATIC_GetAdditionalMessage(class ATslCharacter* Character);
	bool STATIC_AllowInteractDelegate(class ATslCharacter* OtherCharacter);
};


// Class TslGame.MotorbikeVehicleSeatInteraction
// 0x0020 (0x0870 - 0x0850)
class UMotorbikeVehicleSeatInteraction : public UVehicleSeatInteractionComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0850(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MotorbikeVehicleSeatInteraction"));

		return ptr;
	}


	void STATIC_OnRep_Rider();
	void STATIC_OnInteractDelegate(class ATslCharacter* OtherCharacter);
	bool STATIC_IsWeaponClassAllowed(EWeaponClass InClass);
	bool STATIC_IsSeatChangeAllowedByAngle();
	bool STATIC_IsEntryAllowedByVelocity();
	class UTslVehicleSeatComponent* STATIC_GetVehicleSeatComponent();
	class APawn* STATIC_GetVehiclePawn();
	TScriptInterface<class UTslVehicleInterface> STATIC_GetVehicleInterface();
	EVehicleAnimType STATIC_GetVehicleAnimType();
	class UBlendSpaceBase* STATIC_GetTransitionOutLauncherBlendspace();
	class UBlendSpaceBase* STATIC_GetTransitionOutBlendspace();
	class UBlendSpaceBase* STATIC_GetTransitionInLauncherBlendspace();
	class UBlendSpaceBase* STATIC_GetTransitionInBlendspace();
	class UBlendSpaceBase* STATIC_GetSeatLauncherAimingBlendspace();
	class UAimOffsetBlendSpace* STATIC_GetSeatIdleAO();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Unarmed();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Trap();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Rifle();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Melee();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Launcher();
	class UAnimSequenceBase* STATIC_GetSeatIdleAnimation_Grenade();
	class UBlendSpaceBase* STATIC_GetSeatAimingFPPBlendspace();
	class UBlendSpaceBase* STATIC_GetSeatAimingBlendspace();
	float STATIC_GetMinPitchByYaw(float CurrentYaw);
	bool STATIC_GetMeleeWeaponAttackRestricted();
	float STATIC_GetMaxPitchByYaw(float CurrentYaw);
	bool STATIC_GetCanFireOnlyWhileAimed();
	bool STATIC_GetCanAimFromSeat();
	struct FText STATIC_GetAdditionalMessage(class ATslCharacter* Character);
	bool STATIC_AllowInteractDelegate(class ATslCharacter* OtherCharacter);
};


// Class TslGame.SharedVehicleSeatInteractionCom
// 0x0020 (0x0870 - 0x0850)
class USharedVehicleSeatInteractionCom : public UVehicleSeatInteractionComponent
{
public:
	TArray<class ATslCharacter*>                       RiderArray;                                               // 0x0850(0x0010) (Net, ZeroConstructor, Transient)
	float                                              LeaveAreaRadius;                                          // 0x0860(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0864(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SharedVehicleSeatInteractionCom"));

		return ptr;
	}

};


// Class TslGame.ScopeInfo
// 0x0020 (0x0050 - 0x0030)
class UScopeInfo : public UObject
{
public:
	class UMeshComponent*                              MeshComponent;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAttachableItem*                             Scope;                                                    // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslWeapon_Gun*                              Gun;                                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ScopeInfo"));

		return ptr;
	}


	void STATIC_RemoveScopeComponent(class UActorComponent* Component);
	void STATIC_RemoveScopeActor(class AActor* Actor);
	void STATIC_RemoveScope(class UWorld* World);
};


// Class TslGame.ScopeGlintManager
// 0x0070 (0x0270 - 0x0200)
class UScopeGlintManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0200(0x0050) MISSED OFFSET
	TArray<class UScopeInfo*>                          ScopeInfoList;                                            // 0x0250(0x0010) (ZeroConstructor)
	class ATslPlayerController*                        PlayerController;                                         // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0268(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ScopeGlintManager"));

		return ptr;
	}

};


// Class TslGame.SimpleInterpolationMovement
// 0x00A0 (0x0330 - 0x0290)
class USimpleInterpolationMovement : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0290(0x0010) MISSED OFFSET
	float                                              LocationInterpTime;                                       // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	bool                                               bNeedLocationInterp;                                      // 0x02A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCheckForInterpEndLocation;                               // 0x02A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x02AA(0x0002) MISSED OFFSET
	struct FVector                                     InterpStartLocation;                                      // 0x02AC(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     InterpEndLocation;                                        // 0x02B8(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     InterpStartVelocity;                                      // 0x02C4(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     InterpEndVelocity;                                        // 0x02D0(0x000C) (Transient, IsPlainOldData)
	float                                              RotationInterpTime;                                       // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x02E0(0x0038) MISSED OFFSET
	bool                                               bUseOnlyYawRotation;                                      // 0x0318(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSweepMove;                                            // 0x0319(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x031A(0x0002) MISSED OFFSET
	float                                              ForceMoveTime;                                            // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0320(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SimpleInterpolationMovement"));

		return ptr;
	}

};


// Class TslGame.TslAircraftVehicleMovement
// 0x0000 (0x0330 - 0x0330)
class UTslAircraftVehicleMovement : public USimpleInterpolationMovement
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAircraftVehicleMovement"));

		return ptr;
	}

};


// Class TslGame.SkinDataConfig
// 0x0018 (0x0050 - 0x0038)
class USkinDataConfig : public UDataAsset
{
public:
	ESkinApplicationType                               SkinApplicationType;                                      // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FSkinMaterialData>                   SkinMaterials;                                            // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SkinDataConfig"));

		return ptr;
	}

};


// Class TslGame.SkinHelperComponent
// 0x01F0 (0x03F0 - 0x0200)
class USkinHelperComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	struct FSkinMessageFormat                          MsgFormatForWeapon;                                       // 0x0208(0x00F0) (Edit)
	struct FSkinMessageFormat                          MsgFormatForEquip;                                        // 0x02F8(0x00F0) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SkinHelperComponent"));

		return ptr;
	}


	void STATIC_ServerTestWeaponSkinApplyByItemReference(const struct FString& Reference);
	void STATIC_Server_UpdateMasteryItem(class UEquipableItem* EquipableItem, bool bNewEquippedState, const struct FSkinMessageFormat& SkinMessageFormat);
	void STATIC_Server_UpdateCharacterAppearance();
	void STATIC_Server_DoUpdateSkinItem(class UEquipableItem* EquipableIte, class USkinItem* SkinItem);
};


// Class TslGame.SkinnableSkeletalMeshComponent
// 0x0010 (0x11B0 - 0x11A0)
class USkinnableSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x11A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SkinnableSkeletalMeshComponent"));

		return ptr;
	}


	void STATIC_UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void STATIC_SuspendClothingSimulation();
	void STATIC_Stop();
	void STATIC_SnapshotPose(struct FPoseSnapshot* Snapshot);
	void STATIC_SetUpdateAnimationInEditor(bool NewUpdateState);
	void STATIC_SetPosition(float InPos, bool bFireNotifies);
	void STATIC_SetPlayRate(float Rate);
	void STATIC_SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void STATIC_SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void STATIC_SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void STATIC_SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void STATIC_SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void STATIC_SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void STATIC_SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void STATIC_SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void STATIC_SetClothMaxDistanceScale(float Scale);
	void STATIC_SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void STATIC_SetAnimInstanceClass(class UClass* NewClass);
	void STATIC_SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);
	void STATIC_SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void STATIC_SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void STATIC_SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void STATIC_SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void STATIC_SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void STATIC_SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void STATIC_SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void STATIC_SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void STATIC_SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void STATIC_ResumeClothingSimulation();
	void STATIC_ResetClothTeleportMode();
	void STATIC_ResetAllBodiesSimulatePhysics();
	void STATIC_PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void STATIC_Play(bool bLooping);
	void STATIC_OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	bool STATIC_K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);
	bool STATIC_IsPlaying();
	bool STATIC_IsClothingSimulationSuspended();
	bool STATIC_IsBodyGravityEnabled(const struct FName& BoneName);
	bool STATIC_HasValidAnimationInstance();
	struct FVector STATIC_GetSkeletalCenterOfMass();
	class UAnimInstance* STATIC_GetPostProcessInstance();
	float STATIC_GetPosition();
	float STATIC_GetPlayRate();
	float STATIC_GetMorphTarget(const struct FName& MorphTargetName);
	void STATIC_GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float STATIC_GetClothMaxDistanceScale();
	float STATIC_GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UAnimInstance* STATIC_GetAnimInstance();
	TEnumAsByte<EAnimationMode> STATIC_GetAnimationMode();
	void STATIC_ForceClothNextUpdateTeleportAndReset();
	void STATIC_ForceClothNextUpdateTeleport();
	struct FName STATIC_FindConstraintBoneName(int ConstraintIndex);
	void STATIC_ClearMorphTargets();
	void STATIC_BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);
	void STATIC_BindClothToMasterPoseComponent();
	void STATIC_AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void STATIC_AddForceToAllBodiesBelow(const struct FVector& force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void STATIC_AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class TslGame.MasterySkinnableProp
// 0x0010 (0x11C0 - 0x11B0)
class UMasterySkinnableProp : public USkinnableSkeletalMeshComponent
{
public:
	struct FName                                       SkinTag;                                                  // 0x11B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MeshName;                                                 // 0x11B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MasterySkinnableProp"));

		return ptr;
	}

};


// Class TslGame.SoundMapData
// 0x0070 (0x00A8 - 0x0038)
class USoundMapData : public UDataAsset
{
public:
	struct FString                                     MapName;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor)
	class UTexture2D*                                  Texture;                                                  // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int16_t                                            XOffset;                                                  // 0x0054(0x0002) (Edit, ZeroConstructor, IsPlainOldData)
	int16_t                                            YOffset;                                                  // 0x0056(0x0002) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<EMapColor, struct FString>                    RTPCMappings;                                             // 0x0058(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SoundMapData"));

		return ptr;
	}

};


// Class TslGame.SpawnKitData
// 0x0050 (0x0080 - 0x0030)
class USpawnKitData : public UObject
{
public:
	TMap<struct FName, struct FSpawnKitInfoListOfType> SpawnKitsDB;                                              // 0x0030(0x0050) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SpawnKitData"));

		return ptr;
	}

};


// Class TslGame.SpawnKit
// 0x0090 (0x00C0 - 0x0030)
class USpawnKit : public UObject
{
public:
	struct FStringClassReference                       SpawnKitDataClass;                                        // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	class USpawnKitData*                               SpawnKitData;                                             // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FSpawnKitInstance>                   SpawnKits;                                                // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FSpawnKitInstance>                   SelectableSpawnKits;                                      // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FSpawnKitInstance>                   PlatoonASpawnKits;                                        // 0x0068(0x0010) (ZeroConstructor)
	TArray<struct FSpawnKitInstance>                   PlatoonBSpawnKits;                                        // 0x0078(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0088(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SpawnKit"));

		return ptr;
	}

};


// Class TslGame.SpringArmInVehicleComponent
// 0x0060 (0x05A0 - 0x0540)
class USpringArmInVehicleComponent : public USpringArmComponent
{
public:
	bool                                               bUsePitchOffset;                                          // 0x0540(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0541(0x0003) MISSED OFFSET
	float                                              PitchOffsetScale;                                         // 0x0544(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InheritRollScale;                                         // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InheritPitchScale;                                        // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpringArmInterpSpeed;                                     // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetOffsetInterpSpeed;                                  // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SocketOffsetInterpSpeed;                                  // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x44];                                      // 0x055C(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SpringArmInVehicleComponent"));

		return ptr;
	}

};


// Class TslGame.TslPlayerStart
// 0x0030 (0x0448 - 0x0418)
class ATslPlayerStart : public APlayerStart
{
public:
	EMatchStartType                                    MatchStartType;                                           // 0x0418(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	float                                              StartRadius;                                              // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomRotation;                                          // 0x0420(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	TArray<class AStartActivationVolume*>              ActivationVolumes;                                        // 0x0428(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bForceSelect;                                             // 0x0438(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	int                                                Weight;                                                   // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0440(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerStart"));

		return ptr;
	}


	float STATIC_GetRandomStartYawRotation();
	struct FRotator STATIC_GetRandomStartRotation();
	struct FVector STATIC_GetRandomStartLocation();
};


// Class TslGame.StartActivationVolume
// 0x0008 (0x0428 - 0x0420)
class AStartActivationVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StartActivationVolume"));

		return ptr;
	}

};


// Class TslGame.ThingActivationVolume
// 0x0000 (0x0428 - 0x0428)
class AThingActivationVolume : public AStartActivationVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThingActivationVolume"));

		return ptr;
	}

};


// Class TslGame.StatTrakActor_Meter
// 0x0038 (0x0470 - 0x0438)
class AStatTrakActor_Meter : public AStatTrakActor
{
public:
	class UCurveFloat*                                 Curve_EffectOffset;                                       // 0x0438(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Fade;                                               // 0x0440(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Noise;                                              // 0x0448(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_NumChange;                                          // 0x0450(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FPlaceValue>                         PlaceValues;                                              // 0x0458(0x0010) (Edit, ZeroConstructor)
	bool                                               bUpdated;                                                 // 0x0468(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StatTrakActor_Meter"));

		return ptr;
	}

};


// Class TslGame.StatTrakActor_TextRender
// 0x0010 (0x0448 - 0x0438)
class AStatTrakActor_TextRender : public AStatTrakActor
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstanceDynamics_Text;                            // 0x0438(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.StatTrakActor_TextRender"));

		return ptr;
	}


	void STATIC_SetScalarParameterValue_TextRender(const struct FName& ParameterName, float Value);
	void STATIC_SetScalarParameterValue_StatTrakMesh(const struct FName& ParameterName, float Value);
	class UTextRenderComponent* STATIC_GetStatTextComponent();
};


// Class TslGame.SteamRichPresenceObserver
// 0x00D0 (0x0100 - 0x0030)
class USteamRichPresenceObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0030(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SteamRichPresenceObserver"));

		return ptr;
	}

};


// Class TslGame.InventoryFacade
// 0x0028 (0x0418 - 0x03F0)
class AInventoryFacade : public ASubActor
{
public:
	class AEquipment*                                  Equipment;                                                // 0x03F0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x03F8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<EEquipSlotID>                               AutoSwapEquipSlotID;                                      // 0x0400(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0410(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InventoryFacade"));

		return ptr;
	}


	bool STATIC_IsAutoSwappable(EEquipSlotID SlotID);
	bool STATIC_HasItemByClass(const struct FName& ItemID);
	int STATIC_GiveItem_Admin(const struct FName& ItemID, const struct FName& InTargetContainer, bool bIgnoreAutoSwap, int InStackCount);
	class ATslCharacter* STATIC_GetOwnerCharacter();
	int STATIC_GetItemCountByClass(const struct FName& ItemID, bool bIncludeEquipItem);
	class AInventory* STATIC_GetInventory();
	class AEquipment* STATIC_GetEquipment();
	void STATIC_DropItemByDead();
};


// Class TslGame.Equipment
// 0x0050 (0x0470 - 0x0420)
class AEquipment : public AItemSlotContainer
{
public:
	struct FScriptMulticastDelegate                    OnEquipmentUpdated;                                       // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0430(0x0030) MISSED OFFSET
	TArray<class UEquipableItem*>                      Items;                                                    // 0x0460(0x0010) (Net, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.Equipment"));

		return ptr;
	}


	struct FEquipPosition STATIC_WeaponIndexToEquipPosition(int WeaponIndex);
	void STATIC_WeaponAttachmentSwap(const struct FEquipPosition& SourceWeapon, const struct FEquipPosition& TargetWeapon, const struct FName& ItemClassForVerify, EWeaponAttachmentSlotID AttachmentSlotID, bool bSoundPlay);
	void STATIC_UnequipItem(const struct FEquipPosition& Position, const struct FName& ItemClassForVerify, bool bSoundPlay);
	bool STATIC_TryEquipItem(class UItem* Item, bool bSoundPlay, bool bSwap);
	void STATIC_PrimaryWeaponSwap(const struct FEquipPosition& EquipPosition, const struct FString& Options);
	void STATIC_Items_RepNotify();
	bool STATIC_IsSwapablePrimaryWeapon(const struct FEquipPosition& EquipPosition, const struct FString& Options);
	bool STATIC_IsAttachableToWeapon(int WeaponIndex, class UAttachableItem* AttachableItem, bool bOnlyFree);
	class ATslCharacter* STATIC_GetOwnerCharacter();
	int STATIC_GetItemCountByClass(const struct FName& ItemID);
	class UEquipableItem* STATIC_GetItem(const struct FEquipPosition& Position);
	class AInventoryFacade* STATIC_GetInventoryFacade();
	struct FEquipPosition STATIC_FindPosition(class UItem* Item);
	struct FEquipPosition STATIC_FindEquipPosition(EEquipSlotID SlotID, bool bOnlyFree);
	struct FEquipPosition STATIC_FindEquipableWeaponPosition(class UEquipableItem* EquipableItem, const struct FString& Options);
	int STATIC_FindAttachableWeaponIndex(class UAttachableItem* AttachableItem, const struct FString& Options);
	int STATIC_EquipPositionToWeaponIndex(const struct FEquipPosition& Position);
	bool STATIC_EquipItem(const struct FEquipPosition& Position, class UEquipableItem* Item, bool bCheckViaCanEquipTo, bool bSoundPlay);
	void STATIC_DropItemWithPhysics(const struct FEquipPosition& Position, const struct FName& ItemClassForVerify, const struct FItemThrowParams& ThrowParams, bool bIsForce, bool bNeedSimulate);
	void STATIC_DropItem(const struct FEquipPosition& Position, const struct FName& ItemClassForVerify, bool bIsForce, bool bNeedSimulate);
	void STATIC_DropAttachedItemAll(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void STATIC_DropAttachedItem(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, EWeaponAttachmentSlotID SlotID, bool bSoundPlay);
	void STATIC_DetachItemAll(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, bool bSoundPlay, EWeaponAttachmentSlotID FirstDetachSlotID);
	void STATIC_DetachItem(const struct FEquipPosition& EquipPosition, const struct FName& ItemClassForVerify, EWeaponAttachmentSlotID SlotID, bool bSoundPlay);
};


// Class TslGame.Inventory
// 0x0060 (0x0480 - 0x0420)
class AInventory : public AItemSlotContainer
{
public:
	struct FScriptMulticastDelegate                    OnInventoryUpdated;                                       // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdateInventoryItem;                                    // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0440(0x0008) MISSED OFFSET
	float                                              MaxSpace;                                                 // 0x0448(0x0004) (Edit, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x044C(0x001C) MISSED OFFSET
	TArray<class UItem*>                               Items;                                                    // 0x0468(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0478(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.Inventory"));

		return ptr;
	}


	void STATIC_ThrowRequestedItem(class ATslCharacter* TargetCharacter, int Index, const struct FName& ItemClassForVerify, const struct FString& Options, const struct FItemThrowParams& ThrowParams, bool bUseLocationPrediction);
	void STATIC_OnStartUseRecasts(class UObject* CastObject);
	void STATIC_OnFinishUseCast(class UObject* CastObject);
	void STATIC_MaxSpace_RepNotify();
	void STATIC_Items_RepNotify();
	class ATslCharacter* STATIC_GetOwnerCharacter();
	float STATIC_GetMaxSpace();
	int STATIC_GetItemCountByClass(const struct FName& ItemID);
	int STATIC_GetItemCount();
	class AInventoryFacade* STATIC_GetInventoryFacade();
	float STATIC_GetCurrentSpace();
	TArray<TScriptInterface<class USlotInterface>> STATIC_GetAllSlotsWithout(TArray<EItemCategory> Excepts);
	TArray<struct FInventoryItem> STATIC_GetAllItemsByType(class UClass* ItemSuperClass);
	TArray<struct FInventoryItem> STATIC_GetAllItemsByID(const struct FName& ItemID);
	TArray<struct FInventoryItem> STATIC_GetAllItemsByCategory(EItemCategory Category);
	TArray<struct FInventoryItem> STATIC_GetAllItems();
	int STATIC_GetAdditionalMaxCount(class UItem* Item);
	int STATIC_FindItemIndex(class UItem* Item);
	class UItem* STATIC_FindItemHasMinStack(const struct FName& ItemID);
	class UItem* STATIC_FindItem(const struct FName& ItemID);
	void STATIC_EquipOrDropItem(int Index, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void STATIC_EquipItem(int Index, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void STATIC_DropOrLaunchItem(int Index, const struct FName& ItemClassForVerify, const struct FString& Options, bool bSoundPlay);
	void STATIC_DropItemWithPhysics(int Index, const struct FName& ItemClassForVerify, const struct FString& Options, const struct FItemThrowParams& ThrowParams, bool bSoundPlay);
	void STATIC_DropItem(int Index, const struct FName& ItemClassForVerify, const struct FString& Options, bool bSoundPlay);
	bool STATIC_ConsumeItemByClass(const struct FName& ItemID, int Count);
	void STATIC_ClientNotifyUpdatedItem(const struct FName& InItemID, int InStackCount);
	void STATIC_ClientBroadcastNoBagSpaceEvent();
	void STATIC_AttachOrDropItem(int Index, const struct FName& ItemClassForVerify, bool bSoundPlay);
	void STATIC_AttachItem(int Index, const struct FName& ItemClassForVerify, const struct FEquipPosition& EquipPosition, bool bSoundPlay);
};


// Class TslGame.ItemExplorerProxy
// 0x0020 (0x0470 - 0x0450)
class AItemExplorerProxy : public AItemExplorer
{
public:
	struct FScriptDelegate                             OnChangeItemExplorerProxy;                                // 0x0450(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemExplorerProxy"));

		return ptr;
	}


	void STATIC_PropagateUpdateItemList();
	void STATIC_PropagateDestroyContextMenuWidget();
	void STATIC_PropagateCreateAndShowContextMenuWidget(const TScriptInterface<class USlotContainerInterface>& Param);
	void STATIC_Pop();
	bool STATIC_IsBaseExplorer();
};


// Class TslGame.CarePackageItem
// 0x0120 (0x06B8 - 0x0598)
class ACarePackageItem : public AItemPackage
{
public:
	class UClass*                                      ParachuteClass;                                           // 0x0598(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SmokeFxClass;                                             // 0x05A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SmokeAirFxClass;                                          // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      LightFxClass;                                             // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAsyncStaticMeshComponent*                   VisualStaticMesh;                                         // 0x05B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TAssetPtr<class UStaticMesh>                       VisualPackageMesh;                                        // 0x05C0(0x0020) (Edit, DisableEditOnInstance)
	float                                              LimitFallSpeed;                                           // 0x05E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05E4(0x0004) MISSED OFFSET
	struct FName                                       SmokeSocket;                                              // 0x05E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SmokeAirSocket;                                           // 0x05F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LightSocket;                                              // 0x05F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ParachuteSocket;                                          // 0x0600(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               LandSoundAk;                                              // 0x0608(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsFalling;                                               // 0x0610(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPickupedItem;                                          // 0x0611(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsHideIconOnMap;                                         // 0x0612(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsTranslucentIconOnMap;                                  // 0x0613(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              SmokeRemainTime;                                          // 0x0614(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0618(0x0028) MISSED OFFSET
	class ATslParticle*                                SmokeFx;                                                  // 0x0640(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                SmokeAirFx;                                               // 0x0648(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                LightFx;                                                  // 0x0650(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      Parachute;                                                // 0x0658(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FloorCheckDelayTime;                                      // 0x0660(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FloorCheckRemainedTime;                                   // 0x0664(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0668(0x0008) MISSED OFFSET
	class USimpleInterpolationMovement*                MovementComponent;                                        // 0x0670(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0678(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AkComponent;                                              // 0x0680(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0688(0x0028) MISSED OFFSET
	int                                                OwnerPlatoonId;                                           // 0x06B0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x06B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CarePackageItem"));

		return ptr;
	}


	bool STATIC_IsPickupedItem();
	bool STATIC_IsFalling();
};


// Class TslGame.TslFBRCarePackageItem
// 0x0090 (0x0748 - 0x06B8)
class ATslFBRCarePackageItem : public ACarePackageItem
{
public:
	int                                                MaxBuffNum;                                               // 0x06B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06BC(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x06BC(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslFBRCarePackageItem.BuffPlayerSet
	int                                                RepRemainingBuffCount;                                    // 0x0710(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0714(0x0004) MISSED OFFSET
	TArray<struct FTslBuffType>                        BuffDataArray;                                            // 0x0718(0x0010) (Edit, ZeroConstructor)
	struct FTslBuffOverrideProperties                  BuffOverrideProperties;                                   // 0x0728(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRCarePackageItem"));

		return ptr;
	}


	struct FText STATIC_OnClientInteractionMessage(class ATslCharacter* InTslCharacter);
};


// Class TslGame.DroppedPackageEventItem
// 0x0010 (0x05A8 - 0x0598)
class ADroppedPackageEventItem : public AItemPackage
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0598(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedPackageEventItem"));

		return ptr;
	}


	void STATIC_OnRep_EffectClass();
	void STATIC_OnDestroy(class AActor* Actor);
	void STATIC_Items_RepNotify();
	bool STATIC_IsOpenedBy(class ATslCharacter* Character);
	void STATIC_ClientOnInteractBy(class ATslCharacter* OtherCharacter);
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.DroppedPackageItem
// 0x0000 (0x0598 - 0x0598)
class ADroppedPackageItem : public AItemPackage
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.DroppedPackageItem"));

		return ptr;
	}


	void STATIC_OnRep_EffectClass();
	void STATIC_OnDestroy(class AActor* Actor);
	void STATIC_Items_RepNotify();
	bool STATIC_IsOpenedBy(class ATslCharacter* Character);
	void STATIC_ClientOnInteractBy(class ATslCharacter* OtherCharacter);
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.NearbyInteractiveItemExplorer
// 0x0010 (0x0460 - 0x0450)
class ANearbyInteractiveItemExplorer : public AItemExplorer
{
public:
	TArray<TWeakObjectPtr<class UObject>>              ExplorableItems;                                          // 0x0450(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NearbyInteractiveItemExplorer"));

		return ptr;
	}

};


// Class TslGame.SubThingSpawnProcessor
// 0x0018 (0x0048 - 0x0030)
class USubThingSpawnProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SubThingSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.CombinedThingSpawnProcessor
// 0x0020 (0x0078 - 0x0058)
class UCombinedThingSpawnProcessor : public UThingSpawnProcessor
{
public:
	TArray<class UClass*>                              SubProcessorClasses;                                      // 0x0058(0x0010) (Edit, ZeroConstructor)
	TArray<class USubThingSpawnProcessor*>             SubProcessors;                                            // 0x0068(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CombinedThingSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.PackageSubThingSpawnProcessor
// 0x03E8 (0x0430 - 0x0048)
class UPackageSubThingSpawnProcessor : public USubThingSpawnProcessor
{
public:
	class UDataTable*                                  RawItemSpawnDataTable;                                    // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  RawItemSpawnTogetherDataTable;                            // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FPackageSpotGroupProperty>           RawSpotGroupProperties;                                   // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FItemTableSpawner                           ItemTableSpawner;                                         // 0x0068(0x00B8)
	unsigned char                                      UnknownData00[0x310];                                     // 0x0120(0x0310) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PackageSubThingSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.VehicleSubThingSpawnProcessor
// 0x0470 (0x04B8 - 0x0048)
class UVehicleSubThingSpawnProcessor : public USubThingSpawnProcessor
{
public:
	TArray<struct FVehicleSpotGroupProperty>           RawSpotGroupProperties;                                   // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  RawVehicleSpawnDataTable;                                 // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringAssetReference                       RawVehicleSpawnDataTableString;                           // 0x0060(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              SpawnZOffsetFromFloor;                                    // 0x0070(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bOverrideDataTableByModePreset;                           // 0x0074(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x443];                                     // 0x0075(0x0443) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleSubThingSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.RandomVehicleSubThingSpawnProcessor
// 0x0038 (0x04F0 - 0x04B8)
class URandomVehicleSubThingSpawnProcessor : public UVehicleSubThingSpawnProcessor
{
public:
	TAssetPtr<class UDataTable>                        RandomVehicleSpawnProcessorDataTable;                     // 0x04B8(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x18];                                      // 0x04D8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RandomVehicleSubThingSpawnProcessor"));

		return ptr;
	}

};


// Class TslGame.FBRTeam
// 0x0038 (0x0518 - 0x04E0)
class AFBRTeam : public ATeam
{
public:
	int                                                TotalLevel;                                               // 0x04E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	struct FName                                       WeaponItemID[0x3];                                        // 0x04E8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  LevelDataTable;                                           // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringAssetReference                       LevelDataTableRef;                                        // 0x0508(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FBRTeam"));

		return ptr;
	}

};


// Class TslGame.ThingHolder
// 0x00A8 (0x0490 - 0x03E8)
class AThingHolder : public AActor
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x03E8(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThingHolder"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.ThingSpot
// 0x0008 (0x03F0 - 0x03E8)
class AThingSpot : public AActor
{
public:
	class UThingSpotComponent*                         SpotComponent;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThingSpot"));

		return ptr;
	}

};


// Class TslGame.ThingSpotComponent
// 0x0010 (0x04C0 - 0x04B0)
class UThingSpotComponent : public USceneComponent
{
public:
	EThingSpotGroupType                                SpotGroupType;                                            // 0x04B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	struct FVector2D                                   RandomRotatorRange;                                       // 0x04B4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ThingSpotComponent"));

		return ptr;
	}

};


// Class TslGame.TimerTextBlockUpdater
// 0x0018 (0x0048 - 0x0030)
class UTimerTextBlockUpdater : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnTimeUpdated;                                            // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TimerTextBlockUpdater"));

		return ptr;
	}


	void STATIC_SetWorldTimeLimitSeconds(float WorldTimeLimitSeconds);
	void STATIC_Reset(const struct FString& ResetText, int Seconds);
};


// Class TslGame.TrackManager
// 0x0020 (0x0408 - 0x03E8)
class ATrackManager : public AActor
{
public:
	class UStaticMesh*                                 MeshForSpline;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          MaterialForSpline;                                        // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PatchLength;                                              // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              speedThreshold;                                           // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AInstancedSplineDecalActor*                  SplineDecalActor;                                         // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TrackManager"));

		return ptr;
	}

};


// Class TslGame.TslAccessoryComponent
// 0x0040 (0x04F0 - 0x04B0)
class UTslAccessoryComponent : public USceneComponent
{
public:
	struct FTransform                                  InitialTransformAttachmentScene;                          // 0x04B0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	class USceneComponent*                             AttachmentScene;                                          // 0x04E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAccessoryComponent"));

		return ptr;
	}


	void STATIC_SetPhysicsSimulation(bool bSimulatePhysics);
	void STATIC_InitSetupComponent(bool bSimulatePhysics);
};


// Class TslGame.TslAccuracyManager
// 0x0070 (0x0458 - 0x03E8)
class ATslAccuracyManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x03E8(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAccuracyManager"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslAchievement
// 0x0108 (0x04F0 - 0x03E8)
class ATslAchievement : public AActor
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x03E8(0x0080) MISSED OFFSET
	TArray<TAssetPtr<class UClass>>                    HelmetLv3List;                                            // 0x0468(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    BackpackLv3List;                                          // 0x0478(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    VestLv3List;                                              // 0x0488(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    GhillieSuitList;                                          // 0x0498(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    SilenceWeaponList;                                        // 0x04A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    CrossbowClassList;                                        // 0x04B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    PanClassList;                                             // 0x04C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                             ObjArray;                                                 // 0x04D8(0x0010) (ZeroConstructor)
	bool                                               bPSNTrophyLogged;                                         // 0x04E8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAchievement"));

		return ptr;
	}

};


// Class TslGame.TslNpcControllerBase
// 0x0020 (0x0520 - 0x0500)
class ATslNpcControllerBase : public AAIController
{
public:
	int                                                TeamIndex;                                                // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0504(0x0004) MISSED OFFSET
	class UClass*                                      AggroClass;                                               // 0x0508(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTslAggroSystem*                             AggroSystem;                                              // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslNpcPathFollowingComponent*               NpcPathFollowingComponent;                                // 0x0518(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcControllerBase"));

		return ptr;
	}


	void STATIC_OnTargetPerceptionUpdated(class AActor* InActor, const struct FAIStimulus& InStimulus);
};


// Class TslGame.TslAggroSystem
// 0x0050 (0x0080 - 0x0030)
class UTslAggroSystem : public UObject
{
public:
	bool                                               bForceAddPlayer;                                          // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FTslAggroData                               AggroData;                                                // 0x0034(0x0020) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FTslAggroScore>                      AggroScoreArray;                                          // 0x0058(0x0010) (ZeroConstructor, Transient)
	struct FTimerHandle                                UpdateAggroTimerHandle;                                   // 0x0068(0x0008) (Transient)
	class AActor*                                      CachedCurrentEnemy;                                       // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bChangedCurrentEnemy;                                     // 0x0078(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAggroSystem"));

		return ptr;
	}

};


// Class TslGame.TslAIActingComponent
// 0x0270 (0x0470 - 0x0200)
class UTslAIActingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0200(0x0010) MISSED OFFSET
	TArray<struct FAIActingCandidateData>              CandidateAIList;                                          // 0x0210(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x0220(0x00A0) MISSED OFFSET
	int                                                MaxActiveAI;                                              // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ActiveAI_n;                                               // 0x02C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ActiveAI_m;                                               // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AISpawnCircleOriginOffset;                                // 0x02CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoWhiteCirclesRadius;                                     // 0x02D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SelectActionPeriod;                                       // 0x02D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpawnCheckHumanRadiusSquare;                              // 0x02D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                TryFindSpawnAILocNum;                                     // 0x02DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAIActingItem>                       AIActingItemList;                                         // 0x02E0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIBeginAttackEachOther>             AIAttackEachOtherRatingTimeConfig;                        // 0x02F0(0x0010) (Edit, ZeroConstructor)
	int                                                FullFeedLimit;                                            // 0x0300(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
	TArray<struct FDeliveryRatingConfig>               DeliveryWaveInterval;                                     // 0x0308(0x0010) (Edit, ZeroConstructor)
	float                                              DeliveryBeginTime;                                        // 0x0318(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DeliveryFreq;                                             // 0x031C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                DeliveryAINumEachPeriod;                                  // 0x0320(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinimumWarmScore;                                         // 0x0324(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAIDeliveryAreaLimit>                AIDeliveryAreaLimit;                                      // 0x0328(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIRatingDamage>                     AIRatingDamageConfig;                                     // 0x0338(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIAttackAIRatingDamage>             AIAttackAIRatingDamage;                                   // 0x0348(0x0010) (Edit, ZeroConstructor)
	TArray<struct FDeliveryPlayerConfig>               AIDeliveryPlayerConfig;                                   // 0x0358(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      BluezoneDamageType;                                       // 0x0368(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      FragGrendeDamageType;                                     // 0x0370(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              FakeAIWeaponList;                                         // 0x0378(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData03[0xE4];                                      // 0x0388(0x00E4) MISSED OFFSET
	int                                                CircleIndexFakeAIPoisonDamage;                            // 0x046C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAIActingComponent"));

		return ptr;
	}


	void STATIC_BroadFinishLastBreathFunction(class ATslNewBotAIController* Killer, class ATslNewBotAIController* Killed, int WeaponIndex, bool bDBNO);
};


// Class TslGame.TslAIController
// 0x0020 (0x0520 - 0x0500)
class ATslAIController : public AAIController
{
public:
	class UBlackboardComponent*                        BlackboardComp;                                           // 0x0500(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBehaviorTreeComponent*                      BehaviorComp;                                             // 0x0508(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0510(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAIController"));

		return ptr;
	}


	void STATIC_ShootEnemy();
	bool STATIC_FindClosestEnemyWithLOS(class ATslCharacter* ExcludeEnemy);
	void STATIC_FindClosestEnemy();
};


// Class TslGame.TslAIOcclusionBoundsVolume
// 0x0000 (0x0420 - 0x0420)
class ATslAIOcclusionBoundsVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAIOcclusionBoundsVolume"));

		return ptr;
	}

};


// Class TslGame.TslAircraftVehicle
// 0x00B8 (0x0500 - 0x0448)
class ATslAircraftVehicle : public APawn
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0448(0x0018) MISSED OFFSET
	struct FVector2D                                   RouteStartPointLocation;                                  // 0x0460(0x0008) (Net, Transient, IsPlainOldData)
	struct FVector2D                                   RouteEndPointLocation;                                    // 0x0468(0x0008) (Net, Transient, IsPlainOldData)
	TArray<struct FAircraftParticle>                   AircraftParticles;                                        // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class ATslParticle*>                        AttachedParticles;                                        // 0x0480(0x0010) (ZeroConstructor)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x0490(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslAircraftVehicleMovement*                 MovementComponent;                                        // 0x0498(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USplineComponent*                            SplineComponent;                                          // 0x04A0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x04A8(0x0048) MISSED OFFSET
	float                                              TotalFlyingTime;                                          // 0x04F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AircraftSpeed;                                            // 0x04F4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAircraftVehicle"));

		return ptr;
	}

};


// Class TslGame.TslVehicleDrop
// 0x0060 (0x0448 - 0x03E8)
class ATslVehicleDrop : public AActor
{
public:
	class UBoxComponent*                               CollisionComponent;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UProjectileMovementComponent*                MovementComponent;                                        // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      VehicleSpawnClass;                                        // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AltitudeCheck_LoopTime;                                   // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AltitudeCheck_ArriveDistance;                             // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AltitudeCheck_SphereTraceRadius;                          // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AltitudeCheck_TraceDistance;                              // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCorrectForGroundStaticMeshes;                            // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAltitudeVelocityClamp;                                // 0x0411(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0412(0x0002) MISSED OFFSET
	struct FVector2D                                   VelocityClampInMap;                                       // 0x0414(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   VelocityClampOutMap;                                      // 0x041C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      FakeMesh;                                                 // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0430(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleDrop"));

		return ptr;
	}

};


// Class TslGame.AircraftCarePackage
// 0x0098 (0x0598 - 0x0500)
class AAircraftCarePackage : public ATslAircraftVehicle
{
public:
	class UClass*                                      CarePackageItemSpawnerClass;                              // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CarePackageItemClass;                                     // 0x0508(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FDropCarePackageTableData>           DropCarePackageTableData;                                 // 0x0510(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bUseCustomCarepackageItem;                                // 0x0520(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0521(0x0007) MISSED OFFSET
	class UClass*                                      CustomCarepackageItem;                                    // 0x0528(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0530(0x0010) MISSED OFFSET
	class UGeneralItemSpawner*                         CarePackageItemSpawner;                                   // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x40];                                      // 0x0548(0x0040) MISSED OFFSET
	unsigned char                                      bCalledByFlareGun : 1;                                    // 0x0588(0x0001) (Net, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0589(0x0003) MISSED OFFSET
	int                                                OwnerPlatoonId;                                           // 0x058C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0590(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AircraftCarePackage"));

		return ptr;
	}


	bool STATIC_IsPlayInEditor();
};


// Class TslGame.TslPlatoonCarePackage
// 0x0008 (0x05A0 - 0x0598)
class ATslPlatoonCarePackage : public AAircraftCarePackage
{
public:
	class UTslPlatoonCarePackageRequestHandler*        OwnerRequestHandler;                                      // 0x0598(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonCarePackage"));

		return ptr;
	}

};


// Class TslGame.TransportAircraftVehicle
// 0x00A8 (0x05A8 - 0x0500)
class ATransportAircraftVehicle : public ATslAircraftVehicle
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0500(0x0048) MISSED OFFSET
	class UAkAudioEvent*                               RideSound;                                                // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               LeaveSound;                                               // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkComponent*                                AkSoundCom;                                               // 0x0558(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	int                                                TotalRiderCount;                                          // 0x0560(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                RiderCount;                                               // 0x0564(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	class UTslVehicleSeatComponent*                    VehicleSeatComponent;                                     // 0x0568(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       ParachuteItemID;                                          // 0x0570(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UInteractionComponent*                       InteractionComponent;                                     // 0x0578(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslTransportEjectionComponent*              EjectionComponent;                                        // 0x0580(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bIsEnteredAtEjectionArea;                                 // 0x0588(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAllEjected;                                            // 0x0589(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisible;                                               // 0x058A(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x058B(0x0001) MISSED OFFSET
	float                                              EjectPredictionTime;                                      // 0x058C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxEjectSpeed;                                            // 0x0590(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x0594(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TransportAircraftVehicle"));

		return ptr;
	}


	void STATIC_OnRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_OnRep_IsVisible();
	void STATIC_OnLocalPlayerRide();
	void STATIC_OnLocalPlayerLeave();
	void STATIC_OnLeave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_OnInteractBy(class ATslCharacter* Character);
	bool STATIC_IsInEjectionArea();
	void STATIC_HB_ReduceFakeRiderCount();
	int STATIC_GetTotalRiderCount();
	int STATIC_GetRiderCount();
	void STATIC_EnterAtEjectionArea();
	void STATIC_EjectAll();
	bool STATIC_AllowInteractBy(class ATslCharacter* Character);
};


// Class TslGame.TslAIWorldVolumeBase
// 0x0008 (0x0428 - 0x0420)
class ATslAIWorldVolumeBase : public AVolume
{
public:
	float                                              CellSize;                                                 // 0x0420(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAIWorldVolumeBase"));

		return ptr;
	}

};


// Class TslGame.TslAIWorldVolume
// 0x0088 (0x04B0 - 0x0428)
class ATslAIWorldVolume : public ATslAIWorldVolumeBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0428(0x0008) MISSED OFFSET
	struct FString                                     AIOcclusionFilePath;                                      // 0x0430(0x0010) (Edit, ZeroConstructor)
	struct FString                                     HousePathFilePath;                                        // 0x0440(0x0010) (Edit, ZeroConstructor)
	bool                                               bDebugOnClient;                                           // 0x0450(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5F];                                      // 0x0451(0x005F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAIWorldVolume"));

		return ptr;
	}

};


// Class TslGame.TslAnchorActor
// 0x0010 (0x03F8 - 0x03E8)
class ATslAnchorActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnchorActor"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.VehicleArmorDataAsset
// 0x00F0 (0x0128 - 0x0038)
class UVehicleArmorDataAsset : public UDataAsset
{
public:
	TMap<EDamageTypeCategory, struct FVehicleArmorMitigationData> DamageCategoryMap;                                        // 0x0038(0x0050) (Edit, ZeroConstructor)
	TMap<int, float>                                   TeamSizeDamageModifier;                                   // 0x0088(0x0050) (Edit, ZeroConstructor)
	TMap<int, float>                                   TeamSizeDamageModifierConsole;                            // 0x00D8(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleArmorDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslVehicleCommonComponent
// 0x01A0 (0x03A0 - 0x0200)
class UTslVehicleCommonComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBreak;                                                  // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRepair;                                                 // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeath;                                                  // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealthChange;                                           // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFuelChange;                                             // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCurveFloat*                                 FuelConsumptionCurve;                                     // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastFuelConsumptionTime;                                  // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelConsumptionModifierIdle;                              // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelEfficiency;                                           // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelConsumptionModifierBoost;                             // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelDetractionTime;                                       // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseBikeFuelConsumption;                                  // 0x0274(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0275(0x0003) MISSED OFFSET
	float                                              SimpleBodyMassMultiplier;                                 // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowSeatUseAfterDeath;                                  // 0x027C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x027D(0x0003) MISSED OFFSET
	float                                              CastMaxLinearVelocity;                                    // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0284(0x000C) MISSED OFFSET
	struct FName                                       SimpleBodyBoneName;                                       // 0x0290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               ComplexBodyBoneNames;                                     // 0x0298(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MainComplexBodyBoneName;                                  // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ComplexCollisionProfileName;                              // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bIsDying : 1;                                             // 0x02B8(0x0001) (Edit, Net, EditConst)
	unsigned char                                      bIsBroken : 1;                                            // 0x02B8(0x0001) (Edit, Net, EditConst)
	unsigned char                                      UnknownData04[0x3];                                       // 0x02B9(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x02BC(0x0004) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HealthMax;                                                // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fuel;                                                     // 0x02C4(0x0004) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              FuelMax;                                                  // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET
	class UClass*                                      VehicleExplosionDamageType;                               // 0x02D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<EDamageTypeCategory>                        CharacterDamageIgnores;                                   // 0x02D8(0x0010) (Edit, ZeroConstructor)
	class UVehicleArmorDataAsset*                      VehicleArmorData;                                         // 0x02E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<struct FString, float>                        ComponentDamageMultiplierMap;                             // 0x02F0(0x0050) (Edit, ZeroConstructor)
	class UClass*                                      VehicleUI;                                                // 0x0340(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMeshComponent*                        ComplexCollisionMesh;                                     // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UStaticMeshComponent*>                WeaponCollisions;                                         // 0x0350(0x0010) (ExportObject, ZeroConstructor)
	bool                                               bAllowVehiclePenetration;                                 // 0x0360(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0361(0x0007) MISSED OFFSET
	struct FName                                       MeshName;                                                 // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SkinTag;                                                  // 0x0370(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FReplicatedSkinParam                        ReplicatedSkinParam;                                      // 0x0378(0x0020) (Net, Transient)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleCommonComponent"));

		return ptr;
	}


	void STATIC_SetVehicleHealth(float NewHealth);
	void STATIC_SetVehicleFuelPercent(float Percent);
	void STATIC_SetVehicleFuel(float NewFuel);
	void STATIC_ServerApplySkinFromDriver(class ATslCharacter* Driver);
	void STATIC_Repair();
	void STATIC_OnRep_ReplicatedSkinParam();
	void STATIC_OnRep_Health(float LastHealth);
	void STATIC_OnRep_Fuel(float LastFuel);
	void STATIC_OnRep_Dying();
	void STATIC_OnRep_Broken();
	bool STATIC_IsDying();
	bool STATIC_IsBroken();
	class UClass* STATIC_GetVehicleUI();
	float STATIC_GetVehicleHealthPercent();
	float STATIC_GetVehicleHealth();
	float STATIC_GetVehicleFuelPercent();
	float STATIC_GetVehicleFuel();
	float STATIC_GetVehicleBaseHealth();
	float STATIC_GetVehicleBaseFuel();
	struct FName STATIC_GetSkinTag();
	bool STATIC_CanIgnoreCharacterDamage(EDamageTypeCategory DamageTypeCategory);
	void STATIC_Break();
	void STATIC_AddVehicleFuel(float Delta);
};


// Class TslGame.TslWheeledVehicle
// 0x04E8 (0x0940 - 0x0458)
class ATslWheeledVehicle : public AWheeledVehicle
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0458(0x00B0) MISSED OFFSET
	class USphereComponent*                            ActivationTrigger;                                        // 0x0508(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UGamePadInputAixsComponent*                  GamePadInputAixsComponent;                                // 0x0510(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              Health;                                                   // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              HealthMax;                                                // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Fuel;                                                     // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              FuelMax;                                                  // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bStabilizeActive;                                         // 0x0528(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0529(0x0003) MISSED OFFSET
	float                                              AirControlPitchInput;                                     // 0x052C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SpeedKPH;                                                 // 0x0530(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ThrottleInput;                                            // 0x0534(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RPM;                                                      // 0x0538(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Brake;                                                    // 0x053C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LatMax;                                                   // 0x0540(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LongSum;                                                  // 0x0544(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              WaterDepthMax;                                            // 0x0548(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SurfaceMax;                                               // 0x054C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SuspensionMax;                                            // 0x0550(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                FlatTireCount;                                            // 0x0554(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDirtySpeedKPH : 1;                                       // 0x0558(0x0001)
	unsigned char                                      bDirtyThrottleInput : 1;                                  // 0x0558(0x0001)
	unsigned char                                      bDirtyRPM : 1;                                            // 0x0558(0x0001)
	unsigned char                                      bDirtyWaterDepthMax : 1;                                  // 0x0558(0x0001)
	unsigned char                                      bDirtyBrake : 1;                                          // 0x0558(0x0001)
	unsigned char                                      bDetectedStartup : 1;                                     // 0x0558(0x0001)
	unsigned char                                      bDetectedBraking : 1;                                     // 0x0558(0x0001)
	unsigned char                                      bCanTiresBePunctured : 1;                                 // 0x0558(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0559(0x0007) MISSED OFFSET
	TArray<float>                                      WheelsLatSlip;                                            // 0x0560(0x0010) (ZeroConstructor, Transient)
	TArray<float>                                      WheelsLongSlip;                                           // 0x0570(0x0010) (ZeroConstructor, Transient)
	TArray<float>                                      WheelsSuspensionOffset;                                   // 0x0580(0x0010) (ZeroConstructor, Transient)
	TArray<class UPhysicalMaterial*>                   WheelsContactSurface;                                     // 0x0590(0x0010) (ZeroConstructor, Transient)
	TArray<class UPhysicalMaterial*>                   TestWheelsContactSurface_prev;                            // 0x05A0(0x0010) (ZeroConstructor, Transient)
	TArray<float>                                      WheelsSuspensionMaxDrop;                                  // 0x05B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      WheelsSuspensionMaxRaise;                                 // 0x05C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x8];                                       // 0x05D0(0x0008) MISSED OFFSET
	class UAkAudioEvent*                               NullSound;                                                // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTslImpactSoundInfo                         ImpactSound;                                              // 0x05E0(0x0060) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FTslImpactSoundInfo                         LandingSound;                                             // 0x0640(0x0060) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               StartupSound;                                             // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               BreakSound;                                               // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               StopSound;                                                // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               RideSound;                                                // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               LeaveSound;                                               // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               CharacterHitSound;                                        // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxClampThrottleInClutch;                                 // 0x06D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyCustomAnimUpdaterateSettings;                       // 0x06D4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x06D5(0x0003) MISSED OFFSET
	struct FAnimUpdateRateSettings                     AnimUpdateRateSettings;                                   // 0x06D8(0x0078) (Edit, DisableEditOnInstance)
	struct FName                                       FirstPersonSprinArmName;                                  // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FirstPersonCameraName;                                    // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEvalStickyConstraint;                                    // 0x0760(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0761(0x0003) MISSED OFFSET
	float                                              StickyConstraintThresholdSpeed;                           // 0x0764(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FStickyConstraintConfig                     StickyHighSpeedSettings;                                  // 0x0768(0x0010) (Edit)
	struct FStickyConstraintConfig                     StickyLowSpeedSettings;                                   // 0x0778(0x0010) (Edit)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0788(0x0004) MISSED OFFSET
	unsigned char                                      bWheelGrounded : 1;                                       // 0x078C(0x0001) (Net, Transient)
	unsigned char                                      bWantsToBoost : 1;                                        // 0x078C(0x0001) (Net, Transient)
	unsigned char                                      UnknownData07[0x3];                                       // 0x078D(0x0003) MISSED OFFSET
	struct FTslVehicleEngine                           VehicleEngine;                                            // 0x0790(0x0024) (Net, Transient)
	float                                              TorqueMultiplierForBoosting;                              // 0x07B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bTickWalkableCheck;                                       // 0x07B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x07B9(0x0003) MISSED OFFSET
	float                                              MinWalkableVelocity;                                      // 0x07BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x07C0(0x0008) MISSED OFFSET
	class UTslVehicleHitComponent*                     VehicleHitComponent;                                      // 0x07C8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleCommonComponent*                  VehicleCommonComponent;                                   // 0x07D0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleSeatComponent*                    VehicleSeatComponent;                                     // 0x07D8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleEffectComponent*                  VehicleEffectComponent;                                   // 0x07E0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleSyncComponent*                    VehicleSyncComponent;                                     // 0x07E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleTempComponent*                    VehicleTempComponent;                                     // 0x07F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleXRayComponent*                    VehicleXRayComponent;                                     // 0x07F8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslPawnInputBindingComponent*               TslPawnInputBindingComponent;                             // 0x0800(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x0808(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslHornComponent*                           TslHornComponent;                                         // 0x0810(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AudioComEngine;                                           // 0x0818(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslVehicleRadioComponent*                   RadioAudioComponent;                                      // 0x0820(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData10[0x10];                                      // 0x0828(0x0010) MISSED OFFSET
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0838(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       SinkPoint;                                                // 0x0840(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SinkBuffType;                                             // 0x0848(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0850(0x0008) MISSED OFFSET
	class UBuffComponet*                               BuffComponent;                                            // 0x0858(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UClass*>                              ComponentsToDestroyOnDedicatedServer;                     // 0x0860(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0870(0x0008) MISSED OFFSET
	bool                                               bProcessAutoEject;                                        // 0x0878(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0879(0x0003) MISSED OFFSET
	float                                              AutoEjectGroundDistance;                                  // 0x087C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEjectRoll;                                            // 0x0880(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEjectPitch;                                           // 0x0884(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEject_RiseRate;                                       // 0x0888(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEject_FallRate;                                       // 0x088C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x0890(0x0004) MISSED OFFSET
	bool                                               bRunStabilizeOnEntry;                                     // 0x0894(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0895(0x0003) MISSED OFFSET
	float                                              StabilizeInitialTimer;                                    // 0x0898(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StablizeCurrentTimer;                                     // 0x089C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SteeringYawBias;                                          // 0x08A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x9C];                                      // 0x08A4(0x009C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheeledVehicle"));

		return ptr;
	}


	void STATIC_UpdateWheelSound();
	void STATIC_UpdateWheelCaching();
	void STATIC_UpdateBasicInfoCaching();
	void STATIC_UnBindCallbackToHUD(class ATslPlayerController* InController);
	void STATIC_SetLightMaterialParameters(float InLightValue);
	void STATIC_SetAirControlPitchInput(float InInput);
	void STATIC_ServerVehicleRadioVolume(bool bIncrease);
	void STATIC_ServerVehicleRadioNextChannel();
	void STATIC_ServerVehicleRadioJumpPlayTime(float InOffset);
	void STATIC_ServerToggleVehicleRadio();
	void STATIC_ServerSetBoosting(bool bNewBoosting);
	void STATIC_Server_RequestEngineToggle();
	void STATIC_OverrideVehicleHealth(float InNewHealth);
	void STATIC_OverrideVehicleFuel(float InNewFuel);
	void STATIC_OnVehicleEjected();
	bool STATIC_OnToggleEnginePad();
	void STATIC_OnToggleEngine();
	bool STATIC_OnToggleAutoRunPad();
	void STATIC_OnToggleAutoRun();
	bool STATIC_OnStopReadyForAutoRunPad();
	bool STATIC_OnStopHandbrakePad();
	void STATIC_OnStopHandbrake();
	bool STATIC_OnStopBoostingPad();
	void STATIC_OnStopBoosting();
	bool STATIC_OnStartReadyForAutoRunPad();
	bool STATIC_OnStartHandbrakePad();
	void STATIC_OnStartHandbrake();
	bool STATIC_OnStartBoostingPad();
	void STATIC_OnStartBoosting();
	void STATIC_OnRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_OnRep_VehicleEngine();
	void STATIC_OnPostDriverRide();
	void STATIC_OnPostDriverLeave();
	void STATIC_OnLeave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_OnCharacterHit(class ATslCharacter* HitCharacter, float HitDamage);
	void STATIC_OnBreak();
	void STATIC_OnBlockingWidgetOpened(class UWidget* Widget);
	void STATIC_NotifyHandbrake(bool bPressed);
	void STATIC_MulticastCharacterHitEffects(class ATslCharacter* CharacterHit, float HitDamage);
	void STATIC_MoveForwardPad(float Val);
	bool STATIC_IsSunken();
	bool STATIC_IsStablizeOverrideActive();
	bool STATIC_IsStabilizeOverrideEnabled();
	bool STATIC_IsInWaterVolume();
	bool STATIC_IsBoosting();
	class UTslWheeledVehicleMovement* STATIC_GetTslVehicleMovement();
	float STATIC_GetSteeringInput();
	float STATIC_GetCurrentWaterSurfaceZ();
	class UBuffComponet* STATIC_GetBuffComponent();
	float STATIC_GetAirControlPitchInput();
	void STATIC_BrodcastWakeUp();
	void STATIC_BindCallbackToHUD(class ATslPlayerController* InController);
	void STATIC_ActivationTriggerEndOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void STATIC_ActivationTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
};


// Class TslGame.TslFloatingVehicle
// 0x0128 (0x0570 - 0x0448)
class ATslFloatingVehicle : public APawn
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0448(0x0028) MISSED OFFSET
	class UGamePadInputAixsComponent*                  GamePadInputAixsComponent;                                // 0x0470(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      MeshComponent;                                            // 0x0478(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0480(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslFloatingVehicleMovement*                 MovementComponent;                                        // 0x0488(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleHitComponent*                     VehicleHitComponent;                                      // 0x0490(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleCommonComponent*                  VehicleCommonComponent;                                   // 0x0498(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleSeatComponent*                    VehicleSeatComponent;                                     // 0x04A0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleEffectComponent*                  VehicleEffectComponent;                                   // 0x04A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleSyncComponent*                    VehicleSyncComponent;                                     // 0x04B0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleTempComponent*                    VehicleTempComponent;                                     // 0x04B8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslVehicleXRayComponent*                    VehicleXRayComponent;                                     // 0x04C0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslHornComponent*                           TslHornComponent;                                         // 0x04C8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslPawnInputBindingComponent*               TslPawnInputBindingComponent;                             // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x04D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AudioComEngine;                                           // 0x04E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UClass*>                              ComponentsToDestroyOnDedicatedServer;                     // 0x04E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       VehicleEnginePoint;                                       // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleEngineRadius;                                      // 0x0500(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Health;                                                   // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              HealthMax;                                                // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Fuel;                                                     // 0x050C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              FuelMax;                                                  // 0x0510(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EngineSoundModifier;                                      // 0x0514(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTslVehicleEngine                           VehicleEngine;                                            // 0x0518(0x0024) (Net, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x053C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               StopSound;                                                // 0x0540(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FirstPersonSprinArmName;                                  // 0x0548(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FirstPersonCameraName;                                    // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickWalkableCheck;                                       // 0x0558(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0559(0x0003) MISSED OFFSET
	float                                              MinWalkableVelocity;                                      // 0x055C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0560(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFloatingVehicle"));

		return ptr;
	}


	void STATIC_UnBindCallbackToHUD(class ATslPlayerController* InController);
	void STATIC_Server_RequestEngineToggle();
	bool STATIC_OnToggleEnginePad();
	void STATIC_OnToggleEngine();
	bool STATIC_OnToggleAutoRunPad();
	void STATIC_OnToggleAutoRun();
	bool STATIC_OnStopReadyForAutoRunPad();
	bool STATIC_OnStopBoostingPad();
	void STATIC_OnStopBoosting();
	bool STATIC_OnStartReadyForAutoRunPad();
	bool STATIC_OnStartBoostingPad();
	void STATIC_OnStartBoosting();
	void STATIC_OnRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_OnRep_VehicleEngine();
	void STATIC_OnPostDriverRide();
	void STATIC_OnPostDriverLeave();
	void STATIC_OnLeave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_OnBlockingWidgetOpened(class UWidget* Widget);
	void STATIC_MoveForwardPad(float Val);
	bool STATIC_IsBoosting();
	float STATIC_GetVehicleEngineImmersionDepth();
	struct FVector STATIC_GetVehicleAcceleration();
	float STATIC_GetSteerYawAngle();
	float STATIC_GetMaxSteerYawAngle();
	void STATIC_BindCallbackToHUD(class ATslPlayerController* InController);
};


// Class TslGame.WeaponTrajectoryData
// 0x00D0 (0x0108 - 0x0038)
class UWeaponTrajectoryData : public UDataAsset
{
public:
	struct FWeaponRecoilConfig                         RecoilConfig;                                             // 0x0038(0x0080) (Edit, DisableEditOnInstance)
	struct FWeaponTrajectoryConfig                     TrajectoryConfig;                                         // 0x00B8(0x0048) (Edit, DisableEditOnInstance)
	class UWeaponGunRecoilData*                        ConsoleWeaponRecoilData;                                  // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponTrajectoryData"));

		return ptr;
	}

};


// Class TslGame.TslWeapon_Trajectory
// 0x0180 (0x0F00 - 0x0D80)
class ATslWeapon_Trajectory : public ATslWeapon_Gun
{
public:
	float                                              TrajectoryGravityZ;                                       // 0x0D80(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0D84(0x0004) MISSED OFFSET
	TMap<float, class UClass*>                         UnderWaterTrailFXClassPerLength;                          // 0x0D88(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ProneSpreadModifier;                                      // 0x0DD8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0DDC(0x003C) MISSED OFFSET
	class UClass*                                      ImpactTemplate;                                           // 0x0E18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      LightImpactTemplate;                                      // 0x0E20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTrajectoryWeaponData                       TrajectoryConfig;                                         // 0x0E28(0x0040) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0E68(0x0010) MISSED OFFSET
	float                                              RunSpread;                                                // 0x0E78(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x0E7C(0x0024) MISSED OFFSET
	float                                              DefaultTimerFrequency;                                    // 0x0EA0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0EA4(0x000C) MISSED OFFSET
	float                                              RecoilSpreadScale;                                        // 0x0EB0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0EB4(0x0004) MISSED OFFSET
	struct FName                                       TrailTargetParam;                                         // 0x0EB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             TrailFX;                                                  // 0x0EC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FireAtViewPoint;                                          // 0x0EC8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0EC9(0x0007) MISSED OFFSET
	class UWeaponTrajectoryData*                       WeaponTrajectoryData;                                     // 0x0ED0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData07[0x28];                                      // 0x0ED8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Trajectory"));

		return ptr;
	}


	void STATIC_SimulateUnderwaterTrail(const struct FVector& SurfaceImpactPoint, const struct FVector& ShootDirection, float TravelDistance);
	void STATIC_SimulateUnderwaterHit(const struct FVector& UnderwaterImpactPoint, const struct FVector& ShootOrigin);
	void STATIC_SimulateHit_UnReliable(const struct FHitResult& Impact, const struct FVector& RelLocation);
	void STATIC_SimulateHit_Reliable(const struct FHitResult& Impact, const struct FVector& RelLocation);
	void STATIC_Simulate_CreateAmmoInstance(const struct FVector& ServerStartTrace, const struct FVector& Dir, const struct FAttackId& AttackId);
	void STATIC_SetCurrentRecoilValue(float InCurrent_RecoilValue);
	void STATIC_SetCurrentBullet(int InCurrent_Bullet);
	void STATIC_ServerWallCheckTest(const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void STATIC_ServerTestBallistics(const struct FVector& Origin, const struct FVector& OriginDir);
	void STATIC_ServerNotifyHit(TArray<int> Ints2, const struct FVector& vd, float t1, uint32_t uintr, float t2, uint32_t uinta, uint32_t uintp, uint32_t uintb, float L3, float L4, float CR_P, float CR_Y, TArray<int> Ints, unsigned char h0, uint64_t h1, int h2, unsigned char uint1, int chksum1, int checksum_CD, const struct FVector& SI, const struct FVector& L1, const struct FVector& L2, int LC, uint16_t Segment, const struct FVector& Dir0, unsigned char bUnder, const struct FVector& E1, float S1, const struct FVector& ClientImpactLocation, const struct FVector& RelativeImpact, const struct FHitResult& Impact, TArray<int> Ints3, const struct FVector& ClientOrigin, const struct FVector& Origin, const struct FVector& TraceStart, const struct FVector_NetQuantizeNormal& ShootDir, float TravelDistance, int TT, const struct FAttackId& AttackId, uint32_t HitSeq, const struct FVector& RelLocation, float SpeedLoss, const struct FVector& OD, float ts, const struct FVector& IV, bool bWasPenetration);
	void STATIC_ServerNotifyCrack(class ATslCharacter* TargetCharacter, const struct FVector_NetQuantize& LocationRelative, float BulletVelocity);
	void STATIC_ServerNotifyAmmoSpawned(const struct FVector& ServerStartTrace, const struct FVector& Dir, const struct FAttackId& AttackId);
	void STATIC_ServerLogBodyPenetration(int AttackId, const struct FName& DamageZone, float DamageDiff);
	void STATIC_OnWorldOriginShifted(const struct FVector& InShiftVector);
	void STATIC_OnRep_WeaponSpread(float LastWeaponSpread);
	bool STATIC_IsRecoilDebugEnabled_BP();
	bool STATIC_IsBulletInAir();
	class UWeaponTrajectoryData* STATIC_GetWeaponTrajectoryData();
	struct FWeaponTrajectoryConfig STATIC_GetWeaponTrajectoryConfig();
	struct FTrajectoryWeaponData STATIC_GetTrajectoryConfig();
	float STATIC_GetRecoilStartTime();
	struct FRecoilDebugInfo STATIC_GetRecoilDebugInfo();
	int STATIC_GetRecoilDebugCurrentBullet();
	struct FWeaponRecoilConfig STATIC_GetRecoilConfig();
	float STATIC_GetRecoilBlendInTime();
	float STATIC_GetInertiaPitchAdditive();
	float STATIC_GetCurrentStabilityVar();
	float STATIC_GetCurrentReoveryTarget();
	float STATIC_GetCurrentRecoilValue();
	struct FVector2D STATIC_GetCurrentRecoilTarget();
	struct FRotator STATIC_GetBulletRotation();
	struct FVector STATIC_GetBulletLocation();
	void STATIC_ClientWallCheckFail(const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FVector& Impact);
};


// Class TslGame.TslWheelDragData
// 0x0060 (0x0098 - 0x0038)
class UTslWheelDragData : public UDataAsset
{
public:
	bool                                               bScaleForceByMass;                                        // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bScaleForceByJounce;                                      // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET
	class UCurveFloat*                                 JounceScalarCurve;                                        // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<class UPhysicalMaterial*, struct FWheelDragSurfaceConfig> SurfaceDragMap;                                           // 0x0048(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheelDragData"));

		return ptr;
	}

};


// Class TslGame.TslVehicleWheel
// 0x0218 (0x0348 - 0x0130)
class UTslVehicleWheel : public UVehicleWheel
{
public:
	float                                              Health;                                                   // 0x0130(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HealthMax;                                                // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TireBoneName;                                             // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTireLink;                                             // 0x0140(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	int                                                TireLinkIndex;                                            // 0x0144(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FWheeledEffectPool                          WheeledEffectMap;                                         // 0x0148(0x0050)
	float                                              LongSlipSkidThreshold;                                    // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LateralSlipSkidThreshold;                                 // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpringCompressionLandingThreshold;                        // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bManualSuspensionSoundControl;                            // 0x01A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01A5(0x0003) MISSED OFFSET
	class UTslWheelSuspensionAudioData*                SuspensionAudioData;                                      // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     WheelEffectOffset;                                        // 0x01B0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	class UTslWheelEffectType*                         RollEffect;                                               // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PuncturedParticleClass;                                   // 0x01C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PuncturedSparkParticleClass;                              // 0x01D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              slipThresholdForPunkSpark;                                // 0x01D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               LandingSound;                                             // 0x01E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LastValidLocation;                                        // 0x01E8(0x000C) (Transient, IsPlainOldData)
	int                                                InvalidLocationFrames;                                    // 0x01F4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      LastValidSurface;                                         // 0x01F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseSpline;                                               // 0x01F9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x01FA(0x0002) MISSED OFFSET
	float                                              TrackWidth;                                               // 0x01FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseWheelDrag;                                            // 0x0200(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0201(0x0007) MISSED OFFSET
	class UTslWheelDragData*                           WheelDragData;                                            // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x0210(0x000C) MISSED OFFSET
	bool                                               bApplyForceOnPuncture;                                    // 0x021C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	float                                              PunctureForce;                                            // 0x0220(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PunctureVelocityScalar;                                   // 0x0224(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0228(0x0008) MISSED OFFSET
	class ATslParticle*                                TslParticleRoll;                                          // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                TslParticleSkid;                                          // 0x0238(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                TslParticleAccelSkid;                                     // 0x0240(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                TslParticlePunctureSpark;                                 // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0250(0x0008) MISSED OFFSET
	class UAkComponent*                                AudioCom;                                                 // 0x0258(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              MinZVelocityForSuspensionSound;                           // 0x0260(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3C];                                      // 0x0264(0x003C) MISSED OFFSET
	float                                              TotalSpeedKmPerHour;                                      // 0x02A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              Slip;                                                     // 0x02A4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               UseRoll;                                                  // 0x02A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               UseSkid;                                                  // 0x02A9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               UseAccelSkid;                                             // 0x02AA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHasLastStatus;                                           // 0x02AB(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSuspensionSoundConfig                      SuspensionSoundConfig;                                    // 0x02AC(0x0010) (Edit)
	unsigned char                                      UnknownData11[0x8C];                                      // 0x02BC(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleWheel"));

		return ptr;
	}

};


// Class TslGame.TslWheeledVehicleMovement
// 0x0170 (0x06F0 - 0x0580)
class UTslWheeledVehicleMovement : public UWheeledVehicleMovementComponent4W
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0580(0x0010) MISSED OFFSET
	struct FCustomTransmissionData                     CustomTransmission;                                       // 0x0590(0x0028) (Edit)
	bool                                               bUseSpeedDifferential;                                    // 0x05B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x05B9(0x0007) MISSED OFFSET
	struct FDifferentialOverrideData                   SpeedDifferentialSetup;                                   // 0x05C0(0x0040) (Edit)
	struct FWaterControlSetup                          WaterControlSetup;                                        // 0x0600(0x0080) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0680(0x0004) MISSED OFFSET
	bool                                               bAlwaysUseDirectInput;                                    // 0x0684(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0685(0x0003) MISSED OFFSET
	float                                              Anim_SteeringInputInterpSpeed;                            // 0x0688(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Anim_SteeringInputInterpSpeedCrossover;                   // 0x068C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Anim_SpeedForInputTypeSwitch;                             // 0x0690(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyBrakesOnDeath;                                      // 0x0694(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5B];                                      // 0x0695(0x005B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheeledVehicleMovement"));

		return ptr;
	}


	void STATIC_SetWheelRotationSpeed(int Index, float InSpeed);
	void STATIC_SetSimulateVehicle(bool bSimulate);
	void STATIC_ServerUpdateAdditionalState(int TargetGear);
	void STATIC_Server_SetMovementParameters(float InThrottle, float InSteer, float InBreak, float InHandbrake, int Gear);
	void STATIC_ProcessCustomTransmission(float InVelocity);
	void STATIC_OnDriverRide();
	void STATIC_OnDriverLeave();
	void STATIC_OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	void STATIC_OnBreak();
	bool STATIC_IsSimulatingVehicle();
	float STATIC_GetWheelWaterDepth(int Index);
	float STATIC_GetWheelSuspensionMaxRaise(int Index);
	float STATIC_GetWheelSuspensionMaxDrop(int Index);
	float STATIC_GetWheelRotationSpeed(int Index);
	TArray<float> STATIC_GetWheelHealthPercentages();
	TEnumAsByte<EWheelContactType> STATIC_GetWheelContactType(int Index, float MinVelocity, float MinSkid, float MinSpin, float SuspOffsetForContact);
	class UPhysicalMaterial* STATIC_GetWheelContactSurfaceMaterial(int Index);
	struct FWheelContactData STATIC_GetWheelContactData(int Index, float MinVelocity, float MinSkid, float MinSpin, float MinBrake, float MinRotationSpeed, bool bIgnoreHandbrake);
	float STATIC_GetThrottleInput();
	float STATIC_GetSteeringInputClamped();
	float STATIC_GetSteeringInput();
	float STATIC_GetPropulsionAlpha();
	float STATIC_GetInWaterAlpha();
	float STATIC_GetHandbrakeInput();
	float STATIC_GetBrakeInput();
	void STATIC_ClientPunctureTire(int WheelIndex, ETirePunctureReason Reason);
	void STATIC_Client_DrawBodyDebug(const struct FVector& InLocation, const struct FVector& InParentLocaiton, const struct FRotator& InRotation, float InMass, const struct FColor& InColor, const struct FBodyInstance& InBody);
};


// Class TslGame.TslFloatingVehicleMovement
// 0x0040 (0x02D0 - 0x0290)
class UTslFloatingVehicleMovement : public UPawnMovementComponent
{
public:
	float                                              StartAccelerationRate;                                    // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StopAccelerationRate;                                     // 0x0294(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRotationYawAngle;                                      // 0x0298(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RotationYawAngle;                                         // 0x029C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              RotationYawRate;                                          // 0x02A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class UCurveFloat*                                 DirectionalAccelerationCurve;                             // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoostModifier;                                            // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsBoosting;                                              // 0x02B4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02B5(0x0003) MISSED OFFSET
	float                                              ForwardInput;                                             // 0x02B8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RotationInput;                                            // 0x02BC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET
	float                                              HitCharacterDuration;                                     // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFloatingVehicleMovement"));

		return ptr;
	}


	void STATIC_ServerUpdateInput(float InForwardInput, float InRotationInput, bool bInIsBoosting);
	void STATIC_OnDriverLeave();
	bool STATIC_IsBoosting();
	float STATIC_GetRotationYawAngle();
	float STATIC_GetMaxRotationYawAngle();
	float STATIC_GetMaxAcceleration();
	struct FVector STATIC_GetCalculatedAcceleration();
	float STATIC_GetAcceleration();
};


// Class TslGame.TslAnimInstance
// 0x1150 (0x14F0 - 0x03A0)
class UTslAnimInstance : public UAnimInstance
{
public:
	struct FScriptMulticastDelegate                    WeaponFire;                                               // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponFireCycle;                                          // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipPrimary;                                             // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipSecondary;                                           // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EqupiSidearm;                                             // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipMelee;                                               // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrown;                                              // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipPrimary;                                           // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipSecondary;                                         // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEqupiSidearm;                                           // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipMelee;                                             // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnEquipThrown;                                            // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ToggleFireMode;                                           // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadTactical;                                           // 0x0470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadCharge;                                             // 0x0480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneStart;                                         // 0x0490(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneStop;                                          // 0x04A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneSingle;                                        // 0x04B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrownGrenade;                                       // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrownMolotov;                                       // 0x04D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipThrownOther;                                         // 0x04E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponThrowAway;                                          // 0x04F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowPrepare;                                             // 0x0500(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowCooking;                                             // 0x0510(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowStart;                                               // 0x0520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ThrowDrop;                                                // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandHeavy;                                                // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandExtreme;                                              // 0x0550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadCancel;                                             // 0x0560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CharacterPickup;                                          // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CharacterDropItem;                                        // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CharacterCatchItem;                                       // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnarmedAttack;                                            // 0x05A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ShieldPushAttack;                                         // 0x05B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PowerupUsed;                                              // 0x05C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangeCharacterAppearance;                                // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastStart;                                              // 0x05E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastCancel;                                             // 0x05F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastFinish;                                             // 0x0600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEmotePlay;                                              // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEmotePlayRNG;                                           // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEmoteStop;                                              // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNegativeEffectApplied;                                  // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNegativeEffectRemoved;                                  // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0660(0x0008) MISSED OFFSET
	class ATslCharacter*                               CharacterReference;                                       // 0x0668(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USkeletalMeshComponent*                      CharacterMesh_CP;                                         // 0x0670(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	EAnimPawnState                                     PreEvalPawnState;                                         // 0x0678(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0679(0x0003) MISSED OFFSET
	float                                              LocomotionSpeed_CP;                                       // 0x067C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionSpeed2D_CP;                                     // 0x0680(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionSpeedVertical_CP;                               // 0x0684(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMoving_CP;                                             // 0x0688(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0689(0x0003) MISSED OFFSET
	float                                              LocomotionDirection_CP;                                   // 0x068C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionDirectionClamped_CP;                            // 0x0690(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionJumpDirection_CP;                               // 0x0694(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanYaw_CP;                                               // 0x0698(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LastAbsoluteDirection_CP;                                 // 0x069C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotation_CP;                                       // 0x06A8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotationFPP_CP;                                    // 0x06B4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    CameraFPPRotation_CP;                                     // 0x06C0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotationLastMovement_CP;                           // 0x06CC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    CharacterRotation_CP;                                     // 0x06D8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	EAnimStance                                        Stance_CP;                                                // 0x06E4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAnimStance                                        LastKnownStance_CP;                                       // 0x06E5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSprintingFast_CP;                                      // 0x06E6(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSprinting_CP;                                          // 0x06E7(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsTransitiongProne_CP;                                   // 0x06E8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x06E9(0x0003) MISSED OFFSET
	float                                              WeaponGripType_CP;                                        // 0x06EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlpha_CP;                                           // 0x06F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintLocoAlpha_CP;                                       // 0x06F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintLeanValue_CP;                                       // 0x06F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlphaPitchComponent_CP;                             // 0x06FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlphaSprintLimit_High;                              // 0x0700(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlphaSprintLimit_Low;                               // 0x0704(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintValue_CP;                                           // 0x0708(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalQuickThrowHigh_CP;                                  // 0x070C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x070D(0x0003) MISSED OFFSET
	float                                              LocalThrowModeSwitchAlpha_CP;                             // 0x0710(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsJumping_CP;                                            // 0x0714(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPredictedWallImpact;                                     // 0x0715(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bJumpForward_CP;                                          // 0x0716(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSwimming_CP;                                           // 0x0717(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUnderWater_CP;                                         // 0x0718(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDBNO_CP;                                               // 0x0719(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAnimStance                                        DBNOEntryStance;                                          // 0x071A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReviving_CP;                                           // 0x071B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUpperbody_CP;                                          // 0x071C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsTransitioning_CP;                                      // 0x071D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSkydiveLanding_CP;                                     // 0x071E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPeekingRestrictedByAnimation_CP;                       // 0x071F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PlayerID_CP;                                              // 0x0720(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                AirCraftIDAnim_CP;                                        // 0x0724(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquippingPistol_CP;                                    // 0x0728(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0729(0x0007) MISSED OFFSET
	class UAnimMontage*                                PistolEquipMontageRefCP;                                  // 0x0730(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsFlying_CP;                                             // 0x0738(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLocalPlayer;                                           // 0x0739(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x073A(0x0002) MISSED OFFSET
	float                                              LocalPlayerAlpha;                                         // 0x073C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRagdollCacheActive_CP;                                 // 0x0740(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsBurning_CP;                                            // 0x0741(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFlashed_CP;                                            // 0x0742(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAffectedByStatus_CP;                                   // 0x0743(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldUseDerootFix;                                      // 0x0744(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPunching_CP;                                           // 0x0745(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0746(0x0002) MISSED OFFSET
	float                                              PunchingAlpha_CP;                                         // 0x0748(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAnimWeaponType                                    Weapon_CP;                                                // 0x074C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EWeaponClass                                       WeaponClass_CP;                                           // 0x074D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAnimWeaponType                                    LeftHandWeapon_CP;                                        // 0x074E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EWeaponClass                                       MainWeaponClass_CP;                                       // 0x074F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsArmedWithGun_CP;                                       // 0x0750(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsArmedWithShortGun_CP;                                  // 0x0751(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsArmedWithThrown_CP;                                    // 0x0752(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsArmedWithLauncher_CP;                                  // 0x0753(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsArmedWithFBRShield_CP;                                 // 0x0754(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPreparingThrow_CP;                                     // 0x0755(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EThrownWeaponType                                  ThrownWeapon_CP;                                          // 0x0756(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x0757(0x0001) MISSED OFFSET
	float                                              ThrowableAdditionalAimYaw_CP;                             // 0x0758(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x075C(0x0004) MISSED OFFSET
	class UAnimMontage*                                CurrentRecoilMontage_CP;                                  // 0x0760(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               GripBlendSpace_CP;                                        // 0x0768(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             GripBlendSpaceLH_CP;                                      // 0x0770(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                WeaponTriggerPullMontage_CP;                              // 0x0778(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                WeaponEquipMontage_CP;                                    // 0x0780(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                WeaponUnEquipMontage_CP;                                  // 0x0788(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LHGripIndex_CP;                                           // 0x0790(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReloading_CP;                                          // 0x0794(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0795(0x0003) MISSED OFFSET
	struct FVector                                     HandWeaponOffset_CP;                                      // 0x0798(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     HandWeaponOffsetTarget;                                   // 0x07A4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  WeaponInertia_CP;                                         // 0x07B0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ReloadAlpha_CP;                                           // 0x07E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceUpperbodyOverride_CP;                                // 0x07E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceUpperbodyScale_CP;                                   // 0x07E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HandWeaponOffsetAlpha_CP;                                 // 0x07EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RightClavicleRotation_CP;                                 // 0x07F0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FinalRecoilAlpha_CP;                                      // 0x07FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 ADSSocketByFOV_CP;                                        // 0x0800(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseDefaultWeaponLocomotionBlendspace_CP;                 // 0x0808(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0809(0x0007) MISSED OFFSET
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_CP;                            // 0x0810(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Pistol;                        // 0x0818(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_SMG;                           // 0x0820(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Rifle;                         // 0x0828(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Sniper;                        // 0x0830(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Pistol_FPP;                    // 0x0838(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_SMG_FPP;                       // 0x0840(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Rifle_FPP;                     // 0x0848(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             WeaponLocomotionBlendspace_Sniper_FPP;                    // 0x0850(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Scalar_CP;                                 // 0x0858(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Scalar_CP;                                 // 0x085C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Clamp_CP;                                  // 0x0860(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Clamp_CP;                                  // 0x0864(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_CP;                              // 0x0868(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Scalar_ADS_CP;                             // 0x086C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Scalar_ADS_CP;                             // 0x0870(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Clamp_ADS_CP;                              // 0x0874(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Clamp_ADS_CP;                              // 0x0878(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_ADS_CP;                          // 0x087C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_YawScalar_CP;                    // 0x0880(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_YawToRollScalar_CP;                         // 0x0884(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_YawToRollScalar_ADS_CP;                     // 0x0888(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaRoll_Clamp_ADS_CP;                           // 0x088C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaRoll_Clamp_CP;                               // 0x0890(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HandWeaponOffsetInterpSpeed;                              // 0x0894(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HandWeaponOffsetInterpSpeedReturn;                        // 0x0898(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x089C(0x0004) MISSED OFFSET
	struct FName                                       FireModeMontageSlotName_CP;                               // 0x08A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EmoteMontageSlotName_CP;                                  // 0x08A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_Yaw_CP;                                     // 0x08B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponInertia_Pitch_CP;                                   // 0x08B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponInertia_Roll_CP;                                    // 0x08B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintWeaponLoweringAlpha_CP;                             // 0x08BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShieldEquipped_CP;                                     // 0x08C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLeftHandShieldEquipped_CP;                             // 0x08C1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x6];                                       // 0x08C2(0x0006) MISSED OFFSET
	class UAnimMontage*                                WeaponInspectMontage_CP;                                  // 0x08C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<EThrownWeaponType, class UBlendSpaceBase*>    ThrownStandLocomotionMap;                                 // 0x08D0(0x0050) (Edit, ZeroConstructor)
	TMap<EThrownWeaponType, class UBlendSpaceBase*>    ThrownCrouchLocomotionMap;                                // 0x0920(0x0050) (Edit, ZeroConstructor)
	TMap<EThrownWeaponType, class UBlendSpaceBase*>    ThrownProneLocomotionMap;                                 // 0x0970(0x0050) (Edit, ZeroConstructor)
	TMap<EThrownWeaponType, class UBlendSpaceBase*>    ThrownStandCombatLocomotionMap;                           // 0x09C0(0x0050) (Edit, ZeroConstructor)
	TMap<EThrownWeaponType, class UBlendSpaceBase*>    ThrownCrouchCombatLocomotionMap;                          // 0x0A10(0x0050) (Edit, ZeroConstructor)
	TMap<EThrownWeaponType, class UBlendSpaceBase*>    ThrownProneCombatLocomotionMap;                           // 0x0A60(0x0050) (Edit, ZeroConstructor)
	float                                              ThrownIdleLocomotionSpeed;                                // 0x0AB0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bThrownForceTPPAnimations;                                // 0x0AB4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0AB5(0x0003) MISSED OFFSET
	float                                              ThrownLocomotionSpeed;                                    // 0x0AB8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0ABC(0x0004) MISSED OFFSET
	class UBlendSpaceBase*                             ThrownStandLocomotionBS;                                  // 0x0AC0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ThrownCrouchLocomotionBS;                                 // 0x0AC8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ThrownProneLocomotionBS;                                  // 0x0AD0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ThrownStandCombatLocomotionBS;                            // 0x0AD8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ThrownCrouchCombatLocomotionBS;                           // 0x0AE0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ThrownProneCombatLocomotionBS;                            // 0x0AE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CantedRotation;                                           // 0x0AF0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CantedRotationLeanMultiplier_CP;                          // 0x0AF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ADSMovementStabilization_CP;                              // 0x0AF8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ADSSwayPlayrate_CP;                                       // 0x0AFC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 ADSHoldBreathCounterCurve;                                // 0x0B00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 ADSScopeSwayCurve;                                        // 0x0B08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 ADSSightMisalignmentCurve;                                // 0x0B10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ADSScopeSway_CP;                                          // 0x0B18(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ADSSightMisalignment_CP;                                  // 0x0B1C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ADSMaxRoll_CP;                                            // 0x0B20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ADSRollInterpolationSpeed_CP;                             // 0x0B24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    ADSRoll_CP;                                               // 0x0B28(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              RecoilRollValue_CP;                                       // 0x0B34(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilTimer_CP;                                           // 0x0B38(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilRollRand_CP;                                        // 0x0B3C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilPlayStartTime_CP;                                   // 0x0B40(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilBlendInTime_CP;                                     // 0x0B44(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RecoilADSRotation_CP;                                     // 0x0B48(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              RecoilTimerScale_CP;                                      // 0x0B54(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 RecoilRollCurve_CP;                                       // 0x0B58(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponStabilityAlpha_CP;                                  // 0x0B60(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponStabilityRefSpeed_CP;                               // 0x0B64(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   WeaponStabilityRefMapIn_CP;                               // 0x0B68(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   WeaponStabilityRefMapOut_CP;                              // 0x0B70(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponStabilityInterpSpeed_CP;                            // 0x0B78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsAiming_CP;                                             // 0x0B7C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsScoping_CP;                                            // 0x0B7D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x0B7E(0x0002) MISSED OFFSET
	float                                              ScopingAlpha_CP;                                          // 0x0B80(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAimState_CP;                                        // 0x0B84(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlphaModifier_CP;                                   // 0x0B88(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAimingBackward_CP;                                     // 0x0B8C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRelaxed_CP;                                            // 0x0B8D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x2];                                       // 0x0B8E(0x0002) MISSED OFFSET
	float                                              RelaxedAlpha_CP;                                          // 0x0B90(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CombatAlpha_CP;                                           // 0x0B94(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFlareReady;                                            // 0x0B98(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0B99(0x0003) MISSED OFFSET
	float                                              FlareReadyAlpha_CP;                                       // 0x0B9C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAimStateInterpolated_CP;                            // 0x0BA0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShieldAimStateInterpolated_CP;                            // 0x0BA4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EAnimShieldState                                   ShieldState_CP;                                           // 0x0BA8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0BA9(0x0003) MISSED OFFSET
	float                                              Yaw_CP;                                                   // 0x0BAC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotationYaw_CP;                                           // 0x0BB0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Pitch_CP;                                                 // 0x0BB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YawNormalized_CP;                                         // 0x0BB8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YawInterpolationSpeed;                                    // 0x0BBC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              YawNormalizedInterpolated_CP;                             // 0x0BC0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YawNormalizedCombat_CP;                                   // 0x0BC4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DesiredPitch_CP;                                          // 0x0BC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AimDirectionCardinal_CP;                                  // 0x0BCC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0BCD(0x0003) MISSED OFFSET
	struct FRotator                                    AORot_CP;                                                 // 0x0BD0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    AORotBackwards_CP;                                        // 0x0BDC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              SwimmingPitch_CP;                                         // 0x0BE8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceAddAimOffset_CP;                                     // 0x0BEC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RiderLookLeft;                                            // 0x0BF0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RiderLookRight;                                           // 0x0BF4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponCollisionAlpha_CP;                                  // 0x0BF8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWeaponObstructedHigh_CP;                                 // 0x0BFC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0BFD(0x0003) MISSED OFFSET
	float                                              WeaponCollisionReloadAlpha_CP;                            // 0x0C00(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWeaponCollisionActive_CP;                                // 0x0C04(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFalling_CP;                                            // 0x0C05(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFallingAndOffGround_CP;                                // 0x0C06(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x1];                                       // 0x0C07(0x0001) MISSED OFFSET
	float                                              FallingOffGroudCheck_CP;                                  // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWasFalling_CP;                                           // 0x0C0C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0C0D(0x0003) MISSED OFFSET
	float                                              FallingAlpha_CP;                                          // 0x0C10(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   FallingMap2D;                                             // 0x0C14(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   FallingMapZ;                                              // 0x0C1C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceFall_CP;                                            // 0x0C24(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x3];                                       // 0x0C25(0x0003) MISSED OFFSET
	class UAnimMontage*                                MontageFallingRifle_CP;                                   // 0x0C28(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontageFallingUnarmed_CP;                                 // 0x0C30(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingAlpha_CP;                                          // 0x0C38(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceProne_CP;                                      // 0x0C3C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x0C3D(0x0003) MISSED OFFSET
	float                                              JumpHeight_CP;                                            // 0x0C40(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FallHeight_CP;                                            // 0x0C44(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     JumpStartLocation_CP;                                     // 0x0C48(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     LandPredictionVector_CP;                                  // 0x0C54(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              LeanLeftAlpha_CP;                                         // 0x0C60(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanRightAlpha_CP;                                        // 0x0C64(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanTwoSideAlpha_CP;                                      // 0x0C68(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanLeftApplyTranslation_CP;                              // 0x0C6C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanInterpSpeed_CP;                                       // 0x0C70(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanInterpSpeedCollisionClamp_CP;                         // 0x0C74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLinearLeanInterp;                                     // 0x0C78(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsFreefalling_CP;                                        // 0x0C79(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsParachuting_CP;                                        // 0x0C7A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUsingNewFreefall_CP;                                   // 0x0C7B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallX_CP;                                             // 0x0C7C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallY_CP;                                             // 0x0C80(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreeFallAlpha_CP;                                         // 0x0C84(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsParachuteLanding_CP;                                   // 0x0C88(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsParachuteMoving_CP;                                    // 0x0C89(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x2];                                       // 0x0C8A(0x0002) MISSED OFFSET
	float                                              Freefall_Yaw_CP;                                          // 0x0C8C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Freefall_Pitch_CP;                                        // 0x0C90(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_Accelerate_CP;                                  // 0x0C94(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_Brake_CP;                                       // 0x0C98(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_Lateral_CP;                                     // 0x0C9C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_Pitch_CP;                                       // 0x0CA0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_PitchAlpha_CP;                                  // 0x0CA4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_TurnAlphaInstant_CP;                            // 0x0CA8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_TurnAlphaInterpolated_CP;                       // 0x0CAC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_TurnDelta_CP;                                   // 0x0CB0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_VelocityAlpha_CP;                               // 0x0CB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    FreefallN_TargetRotation;                                 // 0x0CB8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FreefallN_TargetPitch;                                    // 0x0CC4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_TargetYaw;                                      // 0x0CC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_TargetRoll;                                     // 0x0CCC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_HorizontalStabilizationAlpha_CP;                // 0x0CD0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_VerticalStabilizationAlpha_CP;                  // 0x0CD4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    FreefallN_LegMove;                                        // 0x0CD8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    FreefallN_BodyMove;                                       // 0x0CE4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    FreefallN_Strafing;                                       // 0x0CF0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FreefallN_PitchInterpolated_CP;                           // 0x0CFC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FreefallN_Yaw_Interpolated_CP;                            // 0x0D00(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    FreefallN_DeltaRotation_CP;                               // 0x0D04(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              Parachute_Forward_CP;                                     // 0x0D10(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Parachute_Forward_Interpolated_CP;                        // 0x0D14(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Parachute_Lateral_CP;                                     // 0x0D18(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Parachute_Lateral_Interpolated_CP;                        // 0x0D1C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Parachute_RollTendency_CP;                                // 0x0D20(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Parachute_PitchTendency_CP;                               // 0x0D24(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Parachute_TendencyFrame_CP;                               // 0x0D28(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ParaAnimTimeSinceStart_CP;                                // 0x0D2C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFreelooking_CP;                                        // 0x0D30(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMeleeAttacking_CP;                                     // 0x0D31(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceRotationHipLeft_CP;                            // 0x0D32(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceRotationHipRight_CP;                           // 0x0D33(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceRotationAimed_CP;                              // 0x0D34(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x3];                                       // 0x0D35(0x0003) MISSED OFFSET
	float                                              RotationPlayrateAimed_CP;                                 // 0x0D38(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotationPlayrateAimedAdditiveSpine_CP;                    // 0x0D3C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LastRotation_CP;                                          // 0x0D40(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Freelook_Body_CP;                                         // 0x0D4C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Freelook_Delta_CP;                                        // 0x0D58(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                IdleIndex_CP;                                             // 0x0D64(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LastIdleIndex_CP;                                         // 0x0D68(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IdleTimer_CP;                                             // 0x0D6C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IdleTriggerRandom;                                        // 0x0D70(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IdleTriggerTimeMin_CP;                                    // 0x0D74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdleTriggerTimeVariation_CP;                              // 0x0D78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x0D7C(0x0004) MISSED OFFSET
	class UAnimMontage*                                PickupMontage_CP;                                         // 0x0D80(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PickingUpAlpha_CP;                                        // 0x0D88(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x4];                                       // 0x0D8C(0x0004) MISSED OFFSET
	struct FTransform                                  SlotPrimary_CP;                                           // 0x0D90(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  SlotSecondary_CP;                                         // 0x0DC0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  SlotMelee_CP;                                             // 0x0DF0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  SlotThrown_CP;                                            // 0x0E20(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotPrimary_Offset_CP;                                    // 0x0E50(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotSecondary_Offset_CP;                                  // 0x0E5C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotPrimary_Location_CP;                                  // 0x0E68(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotSecondary_Location_CP;                                // 0x0E74(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotMelee_Location_CP;                                    // 0x0E80(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotThrown_Location_CP;                                   // 0x0E8C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SlotPrimary_Rotation_CP;                                  // 0x0E98(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SlotSecondary_Rotation_CP;                                // 0x0EA4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SlotMelee_Rotation_CP;                                    // 0x0EB0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SlotThrown_Rotation_CP;                                   // 0x0EBC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              AnimDynamicsStandAlpha_CP;                                // 0x0EC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimDynamicsStandSprintAlpha_CP;                          // 0x0ECC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimDynamicsCrouchAlpha_CP;                               // 0x0ED0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimDynamicsProneAlpha_CP;                                // 0x0ED4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EFCoat_CP;                                                // 0x0ED8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bLocalFPP_CP;                                             // 0x0EE4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x3];                                       // 0x0EE5(0x0003) MISSED OFFSET
	float                                              LocalFPPAlpha_CP;                                         // 0x0EE8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocalFPPAlphaVehicleAimAO_CP;                             // 0x0EEC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInAircraft_CP;                                         // 0x0EF0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDriver_CP;                                             // 0x0EF1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSitting_CP;                                            // 0x0EF2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsZombie_CP;                                             // 0x0EF3(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInVehicle_CP;                                          // 0x0EF4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x3];                                       // 0x0EF5(0x0003) MISSED OFFSET
	float                                              LocalSteerInput_CP;                                       // 0x0EF8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocalSteerInputMoto_CP;                                   // 0x0EFC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocalStopMoto_CP;                                         // 0x0F00(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocalThrottleInput_CP;                                    // 0x0F04(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocalMotoFPPSpine_CP;                                     // 0x0F08(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocalMotoFPPSpine01Scale_CP;                              // 0x0F0C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     LocalMotoFPPSpine03Scale_CP;                              // 0x0F18(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    GasThighRot_CP;                                           // 0x0F24(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    GasAnkleRot_CP;                                           // 0x0F30(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData32[0x4];                                       // 0x0F3C(0x0004) MISSED OFFSET
	struct FTransform                                  GasKneeTransformX_CP;                                     // 0x0F40(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              LocalBrakeInput_CP;                                       // 0x0F70(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0xC];                                       // 0x0F74(0x000C) MISSED OFFSET
	struct FTransform                                  BrakeKneeTransform_CP;                                    // 0x0F80(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    BrakeAnkleRot_CP;                                         // 0x0FB0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              BackwardAOAlpha_CP;                                       // 0x0FBC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimBlendAlpha_CP;                                         // 0x0FC0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHasContact_CP;                                           // 0x0FC4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData34[0x3];                                       // 0x0FC5(0x0003) MISSED OFFSET
	float                                              GroundContactMoto_CP;                                     // 0x0FC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AirControlPitchInput_CP;                                  // 0x0FCC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  DriverIK_CP;                                              // 0x0FD0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              PassengerIKAlpha_CP;                                      // 0x1000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DriverSpineLocWS_CP;                                      // 0x1004(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	EVehicleAnimType                                   VehicleSeatType_CP;                                       // 0x1010(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMotoHasDriver_CP;                                        // 0x1011(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData35[0x6];                                       // 0x1012(0x0006) MISSED OFFSET
	class UPilotSeatDataAsset*                         PilotDataAsset;                                           // 0x1018(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  SteeringDeviceTransform;                                  // 0x1020(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FlyingSteeringPitchAlpha;                                 // 0x1050(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlyingSteeringRollAlpha;                                  // 0x1054(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlyingThrottleAlpha;                                      // 0x1058(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     FlyingCamOffset;                                          // 0x105C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     FlyingSpine1Scale;                                        // 0x1068(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     FlyingSpine3Scale;                                        // 0x1074(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    FlyingWheelTurnRot;                                       // 0x1080(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bVaultCanceled;                                           // 0x108C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVaulting_CP;                                           // 0x108D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAnticipatingLedgeGrab;                                 // 0x108E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x1];                                       // 0x108F(0x0001) MISSED OFFSET
	float                                              AnticipationAlpha;                                        // 0x1090(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimHairAlpha;                                            // 0x1094(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultTimer_CP;                                            // 0x1098(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultTimerLast_CP;                                        // 0x109C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EVaultAnimType                                     LocalVaultType_CP;                                        // 0x10A0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData37[0x7];                                       // 0x10A1(0x0007) MISSED OFFSET
	class UAnimSequenceBase*                           VaultAnimSequence_CP;                                     // 0x10A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AnticipationAnim;                                         // 0x10B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultAnimLength_CP;                                       // 0x10B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData38[0x4];                                       // 0x10BC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 VaultCurve_CP;                                            // 0x10C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultBlendInTime_CP;                                      // 0x10C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultBlendOutTime_CP;                                     // 0x10CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEndVaultToFall_CP;                                       // 0x10D0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData39[0x3];                                       // 0x10D1(0x0003) MISSED OFFSET
	float                                              VaultBlendOutProgressTime_CP;                             // 0x10D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultBlendOutExactTime_CP;                                // 0x10D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultLastActionTimer_CP;                                  // 0x10DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultAnimTime_CP;                                         // 0x10E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VaultBlendOutTimeBuffer;                                  // 0x10E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanVaultWithGun;                                         // 0x10E8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ECastAnim                                          CurrentCastAnim_CP;                                       // 0x10E9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCasting_CP;                                            // 0x10EA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsActiveRagdoll_CP;                                      // 0x10EB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponIKLH_CP;                                            // 0x10EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponIKRH_CP;                                            // 0x10F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MontageIKLH_CP;                                           // 0x10F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MontageIKRH_CP;                                           // 0x10F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IgnoreWeaponTransform_CP;                                 // 0x10FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceBasePose_CP;                                         // 0x1100(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceNoAimOffset_CP;                                      // 0x1104(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UseProceduralAimOffset_CP;                                // 0x1108(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PickupIKAlpha_CP;                                         // 0x110C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TargetIKRH_CP;                                            // 0x1110(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TargetIKLH_CP;                                            // 0x1114(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceLegsFromAnim_CP;                                     // 0x1118(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ThrowingItem_CP;                                          // 0x111C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ATslWeapon_Gun*                              LastGunCache_CP;                                          // 0x1120(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ATslWheeledVehicle*                          CachedWheeledVehicle_CP;                                  // 0x1128(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ATslFloatingVehicle*                         CachedFloatingVehicle_CP;                                 // 0x1130(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             PassengerAimBS_CP;                                        // 0x1138(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             PassengerTransitionOut_CP;                                // 0x1140(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             PassengerTransitionIn_CP;                                 // 0x1148(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Rifle_CP;                                   // 0x1150(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Unarmed_CP;                                 // 0x1158(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Grenade_CP;                                 // 0x1160(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PassengerIdle_Melee_CP;                                   // 0x1168(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CurveAimState_CP;                                         // 0x1170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           DriverMain;                                               // 0x1178(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanHorizontalMeshSpaceAdditive;                    // 0x1180(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverLeanVerticalMeshSpaceAdditive;                      // 0x1188(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_FrontBack;                               // 0x1190(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverAirControl_LeftRight;                               // 0x1198(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopBase;                                           // 0x11A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           DriverStopMeshSpaceAdditive;                              // 0x11A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData40[0x8];                                       // 0x11B0(0x0008) MISSED OFFSET
	bool                                               bIsLOD1;                                                  // 0x11B8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLowUpdateRate;                                         // 0x11B9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData41[0x2];                                       // 0x11BA(0x0002) MISSED OFFSET
	float                                              UseIK;                                                    // 0x11BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsWearingCoat;                                           // 0x11C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCold;                                                  // 0x11C1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanDisplayAnimationOnRemote;                             // 0x11C2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseLobbyIdles;                                           // 0x11C3(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData42[0x4];                                       // 0x11C4(0x0004) MISSED OFFSET
	class ATslGameState*                               GameState;                                                // 0x11C8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData43[0x10];                                      // 0x11D0(0x0010) MISSED OFFSET
	bool                                               bIsParentalControl;                                       // 0x11E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShadowMesh;                                            // 0x11E1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData44[0x2];                                       // 0x11E2(0x0002) MISSED OFFSET
	struct FVector                                     DBNOAdjustment_CP;                                        // 0x11E4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              DBNOAdjustMax_CP;                                         // 0x11F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DBNOAdjustMin_CP;                                         // 0x11F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DBNOSpeedSlowDown_CP;                                     // 0x11F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DBNOAdjustAlpha_CP;                                       // 0x11FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DBNOAnimSpeed_CP;                                         // 0x1200(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData45[0x4];                                       // 0x1204(0x0004) MISSED OFFSET
	class UAnimMontage*                                MontageMeleeAttack1;                                      // 0x1208(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontageMeleeAttack2;                                      // 0x1210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontageMeleeAttack3;                                      // 0x1218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontagePunchingAttack1;                                   // 0x1220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontagePunchingAttack2;                                   // 0x1228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontagePunchingAttack3;                                   // 0x1230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FPPSprintAnimScalar;                                      // 0x1238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     FPP_PrimaryAndSecondaryItemOffset;                        // 0x123C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              PunchingAlphaOneTarget_CP;                                // 0x1248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PunchingAlphaInterpSpeed;                                 // 0x124C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintWeaponLoweringScalar_CP;                            // 0x1250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowStateSwitchInterpSpeed;                              // 0x1254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VaultingEvalTimeout;                                      // 0x1258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData46[0x4];                                       // 0x125C(0x0004) MISSED OFFSET
	class UAnimDB*                                     UnarmedAnimDB_CP;                                         // 0x1260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimDB*                                     RifleAnimDB_CP;                                           // 0x1268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimDB*                                     ShieldAnimDB_CP;                                          // 0x1270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimDB*                                     MeleeAnimDB_CP;                                           // 0x1278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimDB*                                     GrenadeAnimDB_CP;                                         // 0x1280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UFreefallAnimData*                           Freefall_DataAsset;                                       // 0x1288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotPrimary_Male_CP;                               // 0x1290(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Male_CP;                             // 0x12C0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotMelee_Male_CP;                                 // 0x12F0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotThrown_Male_CP;                                // 0x1320(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotPrimary_Female_CP;                             // 0x1350(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Female_CP;                           // 0x1380(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotThrown_Female_CP;                              // 0x13B0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotMelee_Female_CP;                               // 0x13E0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoTimeMultiplier;                                 // 0x1410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoTimeMultiplier_FPP;                             // 0x1414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoTimeAlphaScalar;                                // 0x1418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoTimeAlphaScalar_FPP;                            // 0x141C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoInstantScalar;                                  // 0x1420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocomotionDirectionInterp;                                // 0x1424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawInterpSpeedMin;                                    // 0x1428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawInterpSpeedMax;                                    // 0x142C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawGlobalMultiplier;                                  // 0x1430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawClamp;                                             // 0x1434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoStandLimit_High;                                // 0x1438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoCrouchLimit_High;                               // 0x143C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoProneLimit_High;                                // 0x1440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoStandLimit_Low;                                 // 0x1444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoCrouchLimit_Low;                                // 0x1448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoProneLimit_Low;                                 // 0x144C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoLimitInterpSpeed;                               // 0x1450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlarePitchActivationLimit_Stand;                          // 0x1454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlarePitchActivationLimit_Prone;                          // 0x1458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlareReadyInterpSpeed;                                    // 0x145C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimDynamicsForceClamp;                                   // 0x1460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AnimDynamicsForceRandInMap;                               // 0x1464(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AnimDynamicsForceRandOutMap;                              // 0x146C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimDynamicsRandVectorRad;                                // 0x1474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    RightClavicleCompensation;                                // 0x1478(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIsReplayJumping_CP;                                      // 0x1484(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData47[0x23];                                      // 0x1485(0x0023) MISSED OFFSET
	struct FVector                                     CameraFPPPosition_CP;                                     // 0x14A8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     ShieldReloadLocation_CP;                                  // 0x14B4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     ShieldReloadRotation_CP;                                  // 0x14C0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              UnarmedAttackSpeedModifier;                               // 0x14CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData48[0x20];                                      // 0x14D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimInstance"));

		return ptr;
	}


	void STATIC_TslPlayMontage(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, float InBlendIn);
	void STATIC_SetWeaponThrowableStanceExtension(float Time);
	void STATIC_SetWeaponStatesEvaluationCooldown(float Time);
	void STATIC_SetLandPredictionVector(const struct FVector& newLandVector);
	void STATIC_SetJumpStartLocation(const struct FVector& NewLocation, float DefaultFallHeight);
	void STATIC_ResetRecoilRoll();
	void STATIC_ResetIdle();
	void STATIC_RandomizeIdleIndex_CP(bool ExludeLastIndex);
	void STATIC_ProcessCodePaths(float DeltaSeconds);
	void STATIC_PreEvaluatePawnState();
	void STATIC_OnHitReaction(EAnimWeaponType WeaponType, const struct FName& BoneName, const struct FVector& Direction);
	bool STATIC_IsInspectingWeapon();
	void STATIC_HandleSpeedAndDirection_CP();
	void STATIC_HandleItemOffsets_CP();
	unsigned char STATIC_HandleCardinalDirection90(float InDirection);
	void STATIC_HandleAnimCurves();
	void STATIC_HandleADSSocketOffset();
	void STATIC_GetVehicleAO(float* Yaw, float* Pitch);
	class UBlendSpace* STATIC_GetBlendSpaceRelaxed_TS(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP, class UAnimDB* InAnimDB);
	class UBlendSpace* STATIC_GetBlendSpace_TS(TEnumAsByte<EAnimStanceType> AnimStance, bool bIsFPP, class UAnimDB* InAnimDB);
	float STATIC_GetAnimSpeed_TS(TEnumAsByte<EAnimStanceType> AnimStance, float Direction, float InSpeed, class UAnimDB* InAnimDB, bool bIsSprinting, float* PlayRate, float* SprintAlpha);
	bool STATIC_GetAbsActorToBaseRotation(bool bInUseMin, float InAngle);
	float STATIC_FindPositionFromDistanceCurve(float Distance, class UAnimSequenceBase* InAnimSequence);
	void STATIC_EvaluateWeaponStates();
	void STATIC_EvaluateWeaponStability();
	void STATIC_EvaluateWeaponInertia(float DeltaSeconds);
	void STATIC_EvaluateWeaponCollision();
	void STATIC_EvaluateVehicle();
	void STATIC_EvaluateVaulting();
	void STATIC_EvaluateSwimming();
	void STATIC_EvaluateShield();
	void STATIC_EvaluateRotations();
	void STATIC_EvaluateRecoilRoll();
	void STATIC_EvaluatePawnStates();
	void STATIC_EvaluateMeleeAttack();
	void STATIC_EvaluateLocalPawnStates();
	void STATIC_EvaluateLeaning();
	void STATIC_EvaluateJumping();
	void STATIC_EvaluateJumpCamera();
	void STATIC_EvaluateItemOffsets();
	void STATIC_EvaluateIdle();
	void STATIC_EvaluateFreelook();
	void STATIC_EvaluateFreefallAndParachute();
	void STATIC_EvaluateFPP();
	void STATIC_EvaluateFallingAndLanding();
	void STATIC_EvaluateCoatExternalForce();
	void STATIC_EvaluateCharacterStates();
	void STATIC_EvaluateCasting();
	void STATIC_EvaluateAnimDynamics();
	void STATIC_EvaluateAimStates();
	void STATIC_EvaluateAimOffsets();
	void STATIC_CacheCharacterReference(class ATslCharacter* InCharacter);
};


// Class TslGame.TslAnimNotify_HideBone
// 0x0028 (0x0068 - 0x0040)
class UTslAnimNotify_HideBone : public UAnimNotify
{
public:
	struct FString                                     NotifyName;                                               // 0x0040(0x0010) (BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               BoneNames;                                                // 0x0050(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EPhysBodyOp>                           PhysBodyOp;                                               // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bVisibility;                                              // 0x0061(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0062(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimNotify_HideBone"));

		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_HideBone
// 0x0028 (0x0060 - 0x0038)
class UTslAnimNotifyState_HideBone : public UAnimNotifyState
{
public:
	struct FString                                     NotifyName;                                               // 0x0038(0x0010) (BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               BoneNames;                                                // 0x0048(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EPhysBodyOp>                           PhysBodyOp;                                               // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bVisibility;                                              // 0x0059(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x005A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimNotifyState_HideBone"));

		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_HideWeaponBone
// 0x0008 (0x0068 - 0x0060)
class UTslAnimNotifyState_HideWeaponBone : public UTslAnimNotifyState_HideBone
{
public:
	EWeaponHand                                        WeaponHand;                                               // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimNotifyState_HideWeaponBone"));

		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_MeleeThrow
// 0x0010 (0x0048 - 0x0038)
class UTslAnimNotifyState_MeleeThrow : public UAnimNotifyState
{
public:
	unsigned char                                      bPlayEquipAnimationAtStateEnd : 1;                        // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      bHideWeaponMesh : 1;                                      // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      bPreventAnimInstanceEvaluation : 1;                       // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0039(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimNotifyState_MeleeThrow"));

		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_Ragdoll
// 0x0028 (0x0060 - 0x0038)
class UTslAnimNotifyState_Ragdoll : public UAnimNotifyState
{
public:
	float                                              TimeDilation;                                             // 0x0038(0x0004) (BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PassedTime;                                               // 0x003C(0x0004) (BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LinearVelocity;                                           // 0x0040(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FName                                       SimulatePhysicsBoneName;                                  // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIncludePhysicsBone;                                      // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideLinearVelocity;                                  // 0x0059(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAddLinearVelocity;                                       // 0x005A(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCCD;                                                  // 0x005B(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRagdollOnHit;                                            // 0x005C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimNotifyState_Ragdoll"));

		return ptr;
	}

};


// Class TslGame.TslAnimNotifyState_ThrowableReleased
// 0x0010 (0x0048 - 0x0038)
class UTslAnimNotifyState_ThrowableReleased : public UAnimNotifyState
{
public:
	unsigned char                                      bPlayEquipAnimationAtStateEnd : 1;                        // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      bHideWeaponMesh : 1;                                      // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      bPreventAnimInstanceEvaluation : 1;                       // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0039(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAnimNotifyState_ThrowableReleased"));

		return ptr;
	}

};


// Class TslGame.TslAuroraActor
// 0x00A0 (0x0488 - 0x03E8)
class ATslAuroraActor : public AActor
{
public:
	class USplineComponent*                            SplineComponent;                                          // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMesh*                                 SplineMeshStart;                                          // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          SplineMaterialStart;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 SplineMeshMid;                                            // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          SplineMaterialMid;                                        // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 SplineMeshEnd;                                            // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          SplineMaterialEnd;                                        // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESplineMeshAxis>                       Forward;                                                  // 0x0420(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	float                                              Color_Intensity;                                          // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightOpa_Pow;                                            // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TopColor;                                                 // 0x0430(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                BottomColor;                                              // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              Pattern_Random;                                           // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Hightlight_Str;                                           // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Line_Str;                                                 // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WP_Speed;                                                 // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WP_Str;                                                   // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0468(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0478(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAuroraActor"));

		return ptr;
	}

};


// Class TslGame.TslBall
// 0x0000 (0x03E8 - 0x03E8)
class ATslBall : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBall"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslBaseAIController
// 0x0170 (0x0670 - 0x0500)
class ATslBaseAIController : public AAIController
{
public:
	TArray<class UBehaviorTree*>                       BehaviorTree;                                             // 0x0500(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      AIPlayerstateClass;                                       // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CheckPeriod;                                              // 0x0518(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RandomDeviation;                                          // 0x051C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProtectCountdownTime;                                     // 0x0520(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnEquipDelayTime;                                      // 0x0524(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnEquipFreezeRadius;                                   // 0x0528(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ProtectShootRadius;                                       // 0x052C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnVelocity;                                             // 0x0534(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   DarkMaxAttackDistRange;                                   // 0x0538(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	TMap<EWeatherStatusType, EWeatherStatusType>       WeatherToAttackDist;                                      // 0x0540(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0590(0x00A0) MISSED OFFSET
	struct FAIControllerCachedData                     AIControllerCachedData;                                   // 0x0630(0x0030)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0660(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseAIController"));

		return ptr;
	}


	void STATIC_Respawn();
};


// Class TslGame.TslNewBotAIController
// 0x0160 (0x07D0 - 0x0670)
class ATslNewBotAIController : public ATslBaseAIController
{
public:
	class UClass*                                      AIFemaleClass;                                            // 0x0670(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AIMaleClass;                                              // 0x0678(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0680(0x0058) MISSED OFFSET
	int                                                CanEquipGrenadeNum;                                       // 0x06D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                nowEquipGrenadeNum;                                       // 0x06DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CanhaveMedicalCapacity;                                   // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              nowMedicalCapacity;                                       // 0x06E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxWeaponAIFullVaule;                                     // 0x06E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NowWeaponFullVaue;                                        // 0x06EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxEquipWeaponFullVaue;                                   // 0x06F0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CanHaveWeaponPartsVaules;                                 // 0x06F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NowWeaponPartsVaules;                                     // 0x06F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               isHasMeleeWeapon;                                         // 0x06FC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x06FD(0x0003) MISSED OFFSET
	int                                                MaxEquipAIFullVaule;                                      // 0x0700(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BackPackFullVaule;                                        // 0x0704(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HeadFullVaule;                                            // 0x0708(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BodyFullVaule;                                            // 0x070C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Bullet9Num;                                               // 0x0710(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Bullet7PointNum;                                          // 0x0714(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Bullet5PointNum;                                          // 0x0718(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BulletPoint12Num;                                         // 0x071C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BulletPoint45Num;                                         // 0x0720(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BulletPoint300Num;                                        // 0x0724(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ArrowNum;                                                 // 0x0728(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxCountSameItem;                                         // 0x072C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoOpenDoorRange;                                        // 0x0730(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FAIShootingInfo                             ShootingDamageControl;                                    // 0x0734(0x0010) (Edit, DisableEditOnInstance)
	float                                              EmptyShotRadiusMinInStand;                                // 0x0744(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmptyShotRadiusMaxInStand;                                // 0x0748(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmptyShotRadiusYInStand;                                  // 0x074C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmptyShotRadiusZInStand;                                  // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmptyShotRadiusMinInProne;                                // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmptyShotRadiusMaxInProne;                                // 0x0758(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x075C(0x003C) MISSED OFFSET
	class UTslNewPathFollowingComponent*               newFollowingComponent;                                    // 0x0798(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x07A0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewBotAIController"));

		return ptr;
	}


	void STATIC_PickUpItemFinish(class UDroppedItemInteractionComponent* DroppedItem);
	void STATIC_OnFinishOpenDoor(class UObject* Target);
};


// Class TslGame.ViewModeStudio
// 0x0068 (0x0450 - 0x03E8)
class AViewModeStudio : public AActor
{
public:
	class UCameraComponent*                            CameraComponent;                                          // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneCaptureComponent2D*                    SceneCaptureComponent;                                    // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	struct FTransform                                  DefaultCameraSocketTransform;                             // 0x0400(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0430(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CameraSocketName;                                         // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxViewDistance;                                          // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ViewSlaveLocationDuration;                                // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ViewSlaveLocationDurationCheckTime;                       // 0x0448(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ViewModeStudio"));

		return ptr;
	}


	void STATIC_SetViewModeAbleActor(class AActor* Actor);
	void STATIC_SetTextureRenderTarget(class UTextureRenderTarget2D* NewTextureTarget);
	void STATIC_SetCameraSocketName(const struct FName& NewCameraSocketName);
	void STATIC_AddYaw(float Value);
	void STATIC_AddViewSlaveLocation(float Duration);
	void STATIC_AddViewDistance(float Value);
	void STATIC_AddRoll(float Value);
	void STATIC_AddPitch(float Value);
};


// Class TslGame.CharacterStudio
// 0x00A0 (0x04F0 - 0x0450)
class ACharacterStudio : public AViewModeStudio
{
public:
	class USpringArmComponent*                         SpringArmComponent;                                       // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bUseDynamicResolution;                                    // 0x0458(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0459(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            MaleCharacterProxyClass;                                  // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	TAssetPtr<class UClass>                            FemaleCharacterProxyClass;                                // 0x0480(0x0020) (Edit, DisableEditOnInstance)
	struct FTransform                                  CharacterInitialTransform;                                // 0x04A0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	class ATslCharacterProxy*                          CharacterProxy;                                           // 0x04D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             CharacterRotationPivot;                                   // 0x04D8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    SceneCaptureMaterial;                                     // 0x04E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CharacterStudio"));

		return ptr;
	}


	void STATIC_Update();
	void STATIC_SetSceneCaptureMaterial(class UMaterialInstanceDynamic* Mid);
	void STATIC_SetCharacter(class ATslCharacter* Character);
	void STATIC_ResetRotation();
	bool STATIC_IsUsingDynamicResolution();
	bool STATIC_IsCharacterValid();
	class UMaterialInstanceDynamic* STATIC_GetSceneCaptureMaterial();
	class ATslCharacter* STATIC_GetCharacter();
};


// Class TslGame.TslHUD
// 0x0850 (0x0E70 - 0x0620)
class ATslHUD : public ATslBaseHUD
{
public:
	struct FScriptMulticastDelegate                    OnPossessPawnChange;                                      // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplaySystemMessage;                                   // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayVoiceChannelStateMessage;                        // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdateSoundDucking;                                     // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayKilledMessage;                                   // 0x0660(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKillCountChanged;                                       // 0x0670(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAlivePlayerCountChanged;                                // 0x0680(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJoinPlayerCountChanged;                                 // 0x0690(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyHit;                                              // 0x06A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamPlayerJoin;                                         // 0x06B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamPlayerRemove;                                       // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMatchStarted;                                           // 0x06D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMatchWaitingToStart;                                    // 0x06E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParachuteLanding;                                       // 0x06F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyStartBuff;                                        // 0x0700(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyHealAmount;                                       // 0x0710(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyRestrictingPlayArea;                              // 0x0720(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyNextGasIn;                                        // 0x0730(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyDisplayMessage;                                   // 0x0740(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyTeamElimination;                                  // 0x0750(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyPersonalKillingSpree;                             // 0x0760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyTeamKillingSpree;                                 // 0x0770(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyWeaponChange;                                     // 0x0780(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyWeaponUnarm;                                      // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyHeal;                                             // 0x07A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyDropSlotOnOtherContainer;                         // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyBlockingWidgetOpened;                             // 0x07C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseHealItemPad;                                         // 0x07D0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnSelectNextHealItemPad;                                  // 0x07E0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyReloadingNeed;                                    // 0x07F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyReloaded;                                         // 0x0800(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyVehicleRide;                                      // 0x0810(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyVehicleLeave;                                     // 0x0820(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNotifyVehicleSkinOverrided;                             // 0x0830(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractionWidgetEnabled;                               // 0x0840(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterDeath;                                         // 0x0850(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnMyCharacterDeath;                                       // 0x0860(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyGroggy;                                           // 0x0870(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyExtendMinimap;                                    // 0x0880(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyMatchIdUpdated;                                   // 0x0890(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyStreamerMode;                                     // 0x08A0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnStanceChanged;                                          // 0x08B0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnReportPlayer;                                           // 0x08C0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnSkydiveState;                                           // 0x08D0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateViewTarget;                                       // 0x08E0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnLanguageChanged;                                        // 0x08F0(0x0010) (ZeroConstructor, InstancedReference)
	bool                                               bShowSelectSpawnKitMessage;                               // 0x0900(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0901(0x0003) MISSED OFFSET
	float                                              DisplayMessageDurationForStart;                           // 0x0904(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisplayMessageDurationForDeath;                           // 0x0908(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x090C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNotifyDetectionHuman;                                   // 0x0910(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyDisDetectionHuman;                                // 0x0920(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyAddDetectionHuman;                                // 0x0930(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateReplicatedEquipableItems;                   // 0x0940(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateReplicatedThrowableItems;                   // 0x0950(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateBreath;                                     // 0x0960(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateBoostGauge;                                 // 0x0970(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateWeaponAmmo;                                 // 0x0980(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateBulletsChambered;                           // 0x0990(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateWeaponFiringMode;                           // 0x09A0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUsingCastObject;                                  // 0x09B0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateHealth;                                     // 0x09C0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateGroggyHealth;                               // 0x09D0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyUpdateSignal;                                     // 0x09E0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateSignalZone;                                       // 0x09F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnShowElimination;                                        // 0x0A00(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnNotifyCPPWinShow;                                       // 0x0A10(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0A20(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNotifyRiderReplicated;                                  // 0x0A30(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnReset;                                                  // 0x0A40(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnMatchStateChanged;                                      // 0x0A50(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateRoundCount;                                       // 0x0A60(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnSelectableSpawnKit;                                     // 0x0A70(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdatePlatoonSupportRequestManifest;                    // 0x0A80(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnAppointedAsPlatoonCommander;                            // 0x0A90(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnDismissedFromPlatoonCommander;                          // 0x0AA0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdatePlatoonMapMarker;                                 // 0x0AB0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdatePlatoonFireSupportState;                          // 0x0AC0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdatePlatoonCarePackageState;                          // 0x0AD0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateRemainingTime;                                    // 0x0AE0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateMySpawnKitIndex;                                  // 0x0AF0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateTeamSpawnKitIndex;                                // 0x0B00(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnToggleFBRClassSelectWidget;                             // 0x0B10(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateRanking;                                          // 0x0B20(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnUpdateTakeHitInfo;                                      // 0x0B30(0x0010) (ZeroConstructor, InstancedReference)
	int                                                BluezoneState;                                            // 0x0B40(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bGpsReset;                                                // 0x0B44(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBluezoneReset;                                           // 0x0B45(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPlayzoneReset;                                           // 0x0B46(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0B47(0x0001) MISSED OFFSET
	float                                              GpsResetTimeCheck;                                        // 0x0B48(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2C];                                      // 0x0B4C(0x002C) MISSED OFFSET
	class UTslSceneCaptureWorld*                       SceneCaptureWorld;                                        // 0x0B78(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTslSceneCaptureWorld*                       MasterySceneCaptureWorld;                                 // 0x0B80(0x0008) (ZeroConstructor, IsPlainOldData)
	class ACharacterStudio*                            CharacterStudio;                                          // 0x0B88(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0B90(0x0010) MISSED OFFSET
	struct FVector                                     NextPlayzonePosition;                                     // 0x0BA0(0x000C) (BlueprintVisible, IsPlainOldData)
	float                                              NextPlayzoneRadius;                                       // 0x0BAC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CurrentPlayzonePosition;                                  // 0x0BB0(0x000C) (BlueprintVisible, IsPlainOldData)
	float                                              CurrentPlayzoneRadius;                                    // 0x0BBC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x40];                                      // 0x0BC0(0x0040) MISSED OFFSET
	TMap<int, class AItemStudio*>                      ItemStudioMap;                                            // 0x0C00(0x0050) (ZeroConstructor, Transient)
	class ACharacterStudio*                            InGameCharacterStudio;                                    // 0x0C50(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAkComponent*                                AkSound;                                                  // 0x0C58(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0C60(0x0008) MISSED OFFSET
	struct FString                                     SceneCapturePackageName;                                  // 0x0C68(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     MasterySceneCapturePackageName;                           // 0x0C78(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0xE8];                                      // 0x0C88(0x00E8) MISSED OFFSET
	struct FName                                       DisplayBoneName;                                          // 0x0D70(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x10];                                      // 0x0D78(0x0010) MISSED OFFSET
	class UTslHoldButtonWidget*                        HoldButtons[0x4];                                         // 0x0D88(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData10[0x50];                                      // 0x0DA8(0x0050) MISSED OFFSET
	class ATslPlayerCardControllerV2*                  PlayerCardController;                                     // 0x0DF8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     CardControllerClassName;                                  // 0x0E00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData11[0x60];                                      // 0x0E10(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHUD"));

		return ptr;
	}


	void STATIC_TestSendSystemMessage(const struct FText& Message, float Duration);
	void STATIC_TestSendImportantMessage(const struct FText& Message, float Duration);
	void STATIC_TestKillMessage(const struct FString& KillerName, const struct FString& VictimName, int KillerTeamNum, int VictimTeamNum, bool bKillerIsOwner, bool bVictimIsOwner);
	void STATIC_TestGameEvent_MatchEnded();
	void STATIC_TestGameEvent_KillOtherPlayer(bool bGroggy);
	void STATIC_TestGameEvent_Die(bool bGroggy);
	void STATIC_SpawnActorInSceneCaptureWorld(class UClass* ActorClass, const struct FTransform& SpawnTransform, const struct FScriptDelegate& DelegateToCall);
	void STATIC_ShowSystemMenuWidgetCanvasPanel(bool bShow);
	void STATIC_SetTslHoldButtonWidget(class UTslHoldButtonWidget* Widget, EHoldButtonWidgetType Type);
	void STATIC_SetHighlightProvider(const struct FString& Provider);
	void STATIC_RunTestKillMessages(bool bRun, float MessageInterval);
	void STATIC_RecordReplayHighlightSession(float timeLength);
	void STATIC_OnMicVuMeterUpdated(bool bIsMicActive, float FastMicEnergy, float CurrNoiseLevel);
	void STATIC_OnDisplayMessageMyCharacterDeath();
	void STATIC_NotifyTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_NotifyTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int EliminatedTeamRankingDetermined);
	void STATIC_NotifyStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void STATIC_NotifyPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_NotifyExtendMinimap();
	void STATIC_NotifyDropSlotOnOtherContainer(const TScriptInterface<class USlotContainerInterface>& Container, const TScriptInterface<class USlotInterface>& Slot, const TScriptInterface<class USlotContainerInterface>& OtherContainer);
	bool STATIC_IsInitCaptureWorld();
	bool STATIC_IsGameEnded();
	void STATIC_InitCaptureWorld();
	void STATIC_GoToLobby(bool bInSkipServerRPC);
	class UTslHoldButtonWidget* STATIC_GetTslHoldButtonWidget(EHoldButtonWidgetType Type);
	class APawn* STATIC_GetPossessPawn();
	class ATslCharacter* STATIC_GetPossessCharacter();
	class UTslSceneCaptureWorld* STATIC_GetMasteryCaptureWorld();
	float STATIC_GetHealAmount();
	void STATIC_DisplayWeaponIndex(int InIndex);
	void STATIC_DisplayWeaponAudioListener();
	void STATIC_DisplayVoiceChannelStateMessage();
	void STATIC_DisplayOtherWeaponAnim();
	void STATIC_DisplayOtherCharacterAnim();
	void STATIC_DisplayMyWeaponAnim();
	void STATIC_DisplayMyCharacterAnim();
	void STATIC_DisplayCharAccessorySlot();
	void STATIC_DisplayBone(const struct FName& InDisplayBoneName);
	void STATIC_DisplayAudioListener();
};


// Class TslGame.LobbyHUD
// 0x0460 (0x12D0 - 0x0E70)
class ALobbyHUD : public ATslHUD
{
public:
	struct FScriptMulticastDelegate                    OnShowCurtain;                                            // 0x0E70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideCurtain;                                            // 0x0E80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0E90(0x0010) MISSED OFFSET
	struct FString                                     StartURL;                                                 // 0x0EA0(0x0010) (Edit, ZeroConstructor)
	TArray<class UCoherentCommonBinder*>               CommonBinders;                                            // 0x0EB0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0EC0(0x0020) MISSED OFFSET
	bool                                               bSaveBlur;                                                // 0x0EE0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0EE1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRequestSystemMenu;                                      // 0x0EE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnToggleSystemMenu;                                       // 0x0EF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0F08(0x0004) MISSED OFFSET
	int                                                CachedTslMovableLightShadowSetting;                       // 0x0F0C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CachedTextureMipBias;                                     // 0x0F10(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedAASamples;                                          // 0x0F14(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                RollbackStreamingBoost;                                   // 0x0F18(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedDynamicRes;                                         // 0x0F1C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedHBAOEnabled;                                        // 0x0F20(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedShadowMaxRes;                                       // 0x0F24(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedFallbackGI;                                         // 0x0F28(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedDOFQuality;                                         // 0x0F2C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedVFogGridSizeZ;                                      // 0x0F30(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedVFogGridPixelSize;                                  // 0x0F34(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0F38(0x0008) MISSED OFFSET
	class ULobbySceneManagerComponent*                 LobbySceneManagerComponent;                               // 0x0F40(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCreateCharacter;                                        // 0x0F48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyCharacter;                                       // 0x0F58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdateNickNameAndClanName;                              // 0x0F68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TAssetPtr<class UClass>                            LobbyCharacterMaleClass;                                  // 0x0F78(0x0020) (Edit, DisableEditOnInstance)
	TAssetPtr<class UClass>                            LobbyCharacterFemaleClass;                                // 0x0F98(0x0020) (Edit, DisableEditOnInstance)
	class UClass*                                      LoadedMaleClass;                                          // 0x0FB8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      LoadedFemaleClass;                                        // 0x0FC0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<uint32_t, class ALobbyCharacter*>             LobbyCharacters;                                          // 0x0FC8(0x0050) (ZeroConstructor, Transient)
	bool                                               bSaveIsGenderMale;                                        // 0x1018(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0xD3];                                      // 0x1019(0x00D3) MISSED OFFSET
	bool                                               DelayShowMasteryPose;                                     // 0x10EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2B];                                      // 0x10ED(0x002B) MISSED OFFSET
	float                                              SceneChangeDelayTime;                                     // 0x1118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x111C(0x0004) MISSED OFFSET
	class ATslWeaponDisplay*                           LobbyWeaponDisplay;                                       // 0x1120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMasteryBannerController*                    MasteryBanner;                                            // 0x1128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bResetRotation;                                           // 0x1130(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x1131(0x0003) MISSED OFFSET
	float                                              ResetStartTime;                                           // 0x1134(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       CameraSocketName;                                         // 0x1138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ViewModeSocketName;                                       // 0x1140(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ViewModeInterpSpeed;                                      // 0x1148(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x114C(0x0004) MISSED OFFSET
	class AActor*                                      ViewModeActor;                                            // 0x1150(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      ViewModeActor_Character;                                  // 0x1158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMeshComponent*                              ViewModeMeshComponent;                                    // 0x1160(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	EViewModeCategory                                  LastViewModeCategory;                                     // 0x1168(0x0001) (ZeroConstructor, IsPlainOldData)
	ELobbyCharacterCameraType                          LastLobbyCharacterCameraType;                             // 0x1169(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x6];                                       // 0x116A(0x0006) MISSED OFFSET
	class AActor*                                      CachedViewModePivot;                                      // 0x1170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x1178(0x0008) MISSED OFFSET
	struct FQuat                                       ViewModeTargetRotation;                                   // 0x1180(0x0010) (Transient, IsPlainOldData)
	float                                              ViewModeCurrentScale;                                     // 0x1190(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ViewModeTargetScale;                                      // 0x1194(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLightingChannels                           ViewModeLightingChannels;                                 // 0x1198(0x0003) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData12[0x1];                                       // 0x119B(0x0001) MISSED OFFSET
	float                                              MaxRotationValue;                                         // 0x119C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ComputeValue;                                             // 0x11A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRotationInputReceive;                                  // 0x11A4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x11A5(0x0003) MISSED OFFSET
	class UClass*                                      LobbyParachute;                                           // 0x11A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSimulateWind;                                            // 0x11B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x11B1(0x0007) MISSED OFFSET
	struct FString                                     CachedViewModeActorTargetId;                              // 0x11B8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData15[0x48];                                      // 0x11C8(0x0048) MISSED OFFSET
	class UClass*                                      ViewModeStudioClass;                                      // 0x1210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AViewModeStudio*                             ViewModeStudio;                                           // 0x1218(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x18];                                      // 0x1220(0x0018) MISSED OFFSET
	struct FViewModeActorAsyncLoadCacheData            VehicleAsyncLoadCacheData;                                // 0x1238(0x0050) (Transient)
	struct FString                                     LoadingSpinnerWidgetName;                                 // 0x1288(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              VehicleAsyncLoadingSpinnerWaitTimeToStart;                // 0x1298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x34];                                      // 0x129C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LobbyHUD"));

		return ptr;
	}


	void STATIC_WMZoomWeapon(float Delta);
	void STATIC_WMShowWeapon(const struct FString& WeaponId, const struct FString& CharmId, const struct FString& VariantId, const struct FString& SkinId, bool PlayAnimation);
	void STATIC_WMRotateWeapon(float AngleInDegreeX, float AngleInDegreeY);
	void STATIC_WMResetWeapon(bool Immediate);
	void STATIC_WMHideWeapon();
	void STATIC_WMDelayNextShowWeapon();
	void STATIC_UpdateStatTrak(uint32_t Value, int NumKills);
	void STATIC_UnBindUIIndex(int ViewIndex, bool bByDestroy);
	void STATIC_UnBindUIAll();
	void STATIC_TryAsyncLoadedSpawnVehicleActor();
	void STATIC_ToggleSystemMenu();
	void STATIC_ToggleSafeZone9060();
	void STATIC_ToggleSafeZone6040();
	void STATIC_ToggleLobbyDebugWidget();
	void STATIC_ToggleDebugString();
	void STATIC_Timeout_CheckConectingLobby();
	void STATIC_TestShowWebPopup(const struct FString& Uri, bool bShowButtonGroup);
	void STATIC_TestShowCharacterPreview();
	void STATIC_TestPreloadWebPopup();
	void STATIC_TestLobbyCharacterReady(int SlotIndex, bool bReady);
	void STATIC_TestLobbyCharacterHost(uint32_t SlotIndex);
	void STATIC_TestLobbyCharacterAddAngle(int SlotIndex, float InYawInDegree);
	void STATIC_TestLobbyCamera_SpawnCharacters(int Num);
	void STATIC_TestChinaPCCafeApi();
	void STATIC_Test_UpdateLobbyCharacterRank(uint32_t SlotIndex, int InRankTypeInteger);
	void STATIC_Test_UpdateLobbyCharacter(uint32_t SlotIndex);
	void STATIC_Test_ShowPlayerCard(int PositionX, int PositionY, bool IsGenderMale);
	void STATIC_Test_ShowCharacterViewModeEx(const struct FString& SceneName, int CameraType);
	void STATIC_Test_SetCharacterViewModeCamera(int CameraType, int bForceUpdate);
	void STATIC_Test_RemoveLobbyItem(const struct FString& ItemID);
	void STATIC_Test_RemoveAllLobbyItem();
	void STATIC_Test_PrintWeaponItem(uint32_t SlotIndex);
	void STATIC_Test_PrintSkinItem(uint32_t SlotIndex);
	void STATIC_Test_ForceLodLevel(int ForceLodLevel);
	void STATIC_Test_CreateLobbyCharacter(uint32_t SlotIndex, bool IsGenderMale, const struct FString& NetId, const struct FString& Nickname, const struct FString& ClanName, EOutGamePlatformProvider CharacterPlatform);
	void STATIC_Test_AddLobbyItem(const struct FString& ItemID);
	void STATIC_SpawnActorInMasterySceneCaptureWorld(class UClass* ActorClass, const struct FTransform& SpawnTransform, const struct FScriptDelegate& DelegateToCall);
	void STATIC_SMHideBanner();
	void STATIC_SMDelayNextShowBanner();
	void STATIC_ShowViewMode(const struct FString& ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemID);
	void STATIC_ShowTermsOfService();
	void STATIC_ShowSystemMenuWidgetCanvasPanel(bool bShow);
	void STATIC_ShowMasteryPose(const struct FString& PoseId, TArray<struct FString> ItemIds);
	void STATIC_ShowItemViewModeWithSceneTravel(const struct FString& SceneName, const struct FString& ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemID, const struct FName& OverrideSceneTravel);
	void STATIC_ShowItemViewModeEnum(const struct FString& SceneName, EViewModeCategory ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemID, const struct FName& OverrideSceneTravel);
	void STATIC_ShowItemViewMode(const struct FString& SceneName, const struct FString& ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemID);
	void STATIC_ShowControllerGuide();
	void STATIC_SetWidgetForBinding(int ViewIndex, class UCoherentUIGTWidget* Widget);
	void STATIC_SetShowLobbyUI(bool bShow);
	void STATIC_SetRotationInputReceive(bool bNewIsRotationInputReceive);
	void STATIC_SetOverrideCharacterVisibility(uint32_t SlotIndex, bool bShow);
	void STATIC_SetMainCoherentWidgetVisiblity(ESlateVisibility InVisibility);
	void STATIC_SetLocalUserData(const struct FString& Key, const struct FString& Value);
	void STATIC_SetLobbyCharacterHiddenInGame(uint32_t SlotIndex, bool bNewHidden);
	void STATIC_SetLobbyCharacterCustomizationScene(uint32_t SlotIndex, bool bCustomScene);
	void STATIC_SetLobbyCharacterBlur(bool bBlur);
	void STATIC_SetCurrentCameraLocation(const struct FVector& Location);
	void STATIC_SetCharacterViewModeCameraEnum(ELobbyCharacterCameraType CameraType, bool bForceUpdate);
	void STATIC_ResetViewMode();
	void STATIC_ResetVehicleAsyncLoadState();
	void STATIC_RequestSystemMenu();
	void STATIC_PlayEmoteAnimation(const struct FName& InEmoteName);
	void STATIC_OnStopRotation();
	void STATIC_OnStartRotation();
	void STATIC_OnResponseSaveGameOptionsToCloud(bool bSuccess);
	void STATIC_OnReplaySummary(const struct FTslReplaySummary& ReplaySummary);
	void STATIC_OnReplayList();
	void STATIC_OnDeleteOldReplays(int RemainedReplayNum);
	void STATIC_OnControllerConnectionChanged(bool bIsConnection);
	void STATIC_OnCloseControllerGuide();
	void STATIC_NotifyPressedEsc();
	void STATIC_NotifyLobbyConnecting();
	bool STATIC_NotifyLobbyCharacterDestroyedForLevelActor(int Index);
	void STATIC_NotifyLobbyCharacterDestroyed(int InSlotIndex);
	bool STATIC_NotifyLobbyCharacterCreatedForLevelActor(int Index);
	void STATIC_NotifyLobbyCharacterCreated(int InSlotIndex);
	void STATIC_LoadGameOptionsFromCloud(TArray<unsigned char> DataBytes);
	bool STATIC_IsViewModeScene();
	bool STATIC_IsTransitionPlaying();
	bool STATIC_IsSystemMenuButtonEnabled();
	bool STATIC_IsSceneLevelVisible(const struct FName& SceneLevelName);
	bool STATIC_IsRotationInputReceive();
	bool STATIC_IsParticipantMute(const struct FString& TargetUniqueId);
	bool STATIC_IsLobbyCharacterReady(int InSlotIndex);
	bool STATIC_IsInitMasteryCaptureWorld();
	void STATIC_InitMasteryCaptureWorld();
	void STATIC_HideViewMode();
	void STATIC_HideSystemMenu();
	void STATIC_HidePlayerCard();
	void STATIC_HideOptionWidget();
	void STATIC_HideMasteryPose();
	void STATIC_HideCharacterPreview();
	void STATIC_HandleParticipantMute(const struct FString& TargetUniqueId, bool bIsMuted);
	TArray<struct FLobbyWeaonItemPair> STATIC_GetWeaponItemPairs();
	EViewModeCategory STATIC_GetViewModeCategory();
	int STATIC_GetUsableViewIndex();
	struct FString STATIC_GetStartUrl();
	TArray<struct FLobbySkinPair> STATIC_GetSkinItemPairs(const struct FName& SkinTag);
	struct FName STATIC_GetNextSceneLevelName();
	ELobbyCameraStates STATIC_GetNextLobbyCameraState();
	class ALobbyCharacter* STATIC_GetMainLobbyCharacter();
	class UCoherentUIGTWidget* STATIC_GetMainCoherentWidget();
	struct FString STATIC_GetLocalUserData(const struct FString& Key);
	TArray<struct FVector2D> STATIC_GetLobbyCharacterZoomRect();
	int STATIC_GetLobbyCharacterNum();
	ELobbyCharacterCameraType STATIC_GetLobbyCharacterCameraType();
	class ALobbyCharacter* STATIC_GetLobbyCharacter(int SlotIndex);
	ELobbyCameraStates STATIC_GetLobbyCameraState();
	EViewModeCategory STATIC_GetLastViewModeCategory();
	struct FName STATIC_GetCurrentSceneLevelName();
	ELobbyCharacterCameraType STATIC_GetCharacterCameratypeFromMousePosition(const struct FVector2D& MousePosition);
	void STATIC_EnableSystemMenuButton();
	void STATIC_DisplayLobbyCharacterAnim(int InIndex);
	void STATIC_DisableSystemMenuButton();
	void STATIC_CoherentGTFailLoadHandler(const struct FString& path, const struct FString& Error, bool isMainFrame);
	void STATIC_CloseControllerGuide();
	void STATIC_ClearWidget(int Index);
	void STATIC_ClearLobbyCharacterAnim();
	void STATIC_ClearAllWidget();
	void STATIC_CheckLobbyConecting();
	void STATIC_ChangeSceneFromNameWithSceneTravel(const struct FString& SceneName, const struct FName& OverrideSceneTravel);
	void STATIC_ChangeSceneFromName(const struct FString& SceneName);
	void STATIC_ChangeSceneDelayed();
	void STATIC_CancelOverrideCharacterVisibility(uint32_t SlotIndex);
	void STATIC_AddLobbyViewModeScale(const struct FString& ViewModeCategory, float Value);
	void STATIC_AddLobbyViewModeAngleXYFromEnum(EViewModeCategory ViewModeCategory, float XAngleInDegree, float YAngleInDegree);
	void STATIC_AddLobbyViewModeAngleXY(const struct FString& ViewModeCategory, float XAngleInDegree, float YAngleInDegree);
	void STATIC_AddLobbyViewModeAngle(const struct FString& ViewModeCategory, float AngleInDegree);
	void STATIC_AddLobbyCharacterAngle(int SlotIndex, float AngleInDegree);
	void STATIC_AddCurrentCameraZoomIn(float AddValue);
	void STATIC_AddCurrentCameraZoom(float AddValue);
	void STATIC_AddCurrentCameraDirection(const struct FVector& Dir);
};


// Class TslGame.TslWelcomeBaseHUD
// 0x0060 (0x0680 - 0x0620)
class ATslWelcomeBaseHUD : public ATslBaseHUD
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0620(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStateChanged;                                           // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EWelcomeState                                      WelcomeState;                                             // 0x0640(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2F];                                      // 0x0641(0x002F) MISSED OFFSET
	struct FString                                     EntitlementsRequestUrl;                                   // 0x0670(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWelcomeBaseHUD"));

		return ptr;
	}


	void STATIC_OnPressedPopupCommon(EPopupButtonID ButtonID);
};


// Class TslGame.TslBaseLobbyLevelScriptActor
// 0x0000 (0x03F0 - 0x03F0)
class ATslBaseLobbyLevelScriptActor : public ALevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseLobbyLevelScriptActor"));

		return ptr;
	}


	void STATIC_WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void STATIC_SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool STATIC_RemoteEvent(const struct FName& EventName);
	void STATIC_LevelReset();
};


// Class TslGame.TslLobbyLevelScriptActor
// 0x0000 (0x03F0 - 0x03F0)
class ATslLobbyLevelScriptActor : public ATslBaseLobbyLevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyLevelScriptActor"));

		return ptr;
	}


	void STATIC_WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void STATIC_SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool STATIC_RemoteEvent(const struct FName& EventName);
	void STATIC_LevelReset();
};


// Class TslGame.TslLobbyLevelScriptCustom
// 0x0000 (0x03F0 - 0x03F0)
class ATslLobbyLevelScriptCustom : public ATslBaseLobbyLevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyLevelScriptCustom"));

		return ptr;
	}


	void STATIC_WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void STATIC_SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool STATIC_RemoteEvent(const struct FName& EventName);
	void STATIC_LevelReset();
};


// Class TslGame.TslLobbyLevelScriptMainMenu
// 0x0000 (0x03F0 - 0x03F0)
class ATslLobbyLevelScriptMainMenu : public ATslBaseLobbyLevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyLevelScriptMainMenu"));

		return ptr;
	}


	void STATIC_WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void STATIC_SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool STATIC_RemoteEvent(const struct FName& EventName);
	void STATIC_LevelReset();
};


// Class TslGame.TslBaseLobbySceneTravel
// 0x0098 (0x0480 - 0x03E8)
class ATslBaseLobbySceneTravel : public AActor
{
public:
	class ACameraActor*                                MainCamera;                                               // 0x03E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ACameraActor*                                CurrentSceneCamera;                                       // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ACameraActor*                                NextSceneCamera;                                          // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     NextSceneName;                                            // 0x0400(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0410(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTslLobbySceneUpdate;                                    // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTslLobbySceneTravelFinished;                            // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0438(0x0008) MISSED OFFSET
	struct FTransform                                  CurrentCameraStartTM;                                     // 0x0440(0x0030) (Transient, IsPlainOldData)
	float                                              CurrentCameraStartFieldOfView;                            // 0x0470(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanceledTravel;                                          // 0x0474(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x0475(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseLobbySceneTravel"));

		return ptr;
	}


	void STATIC_UpdateScene();
	void STATIC_SetMainCameraTransformAndFieldOfView(const struct FTransform& TM, float FieldOfView);
	void STATIC_OnStartTravel();
	void STATIC_GetNextSceneCameraTransformAndFieldOfView(struct FTransform* TM, float* FieldOfView);
	void STATIC_GetCurrentSceneCameraTransformAndFieldOfView(struct FTransform* TM, float* FieldOfView);
	void STATIC_FinishTravel(bool bUpdateScene, bool bInCanceled);
};


// Class TslGame.TslEntryPlayerController
// 0x0010 (0x0778 - 0x0768)
class ATslEntryPlayerController : public ATslBasePlayerController
{
public:
	class UVoiceLobbyComponent*                        VoiceComponent;                                           // 0x0768(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   CaptureMousePosition;                                     // 0x0770(0x0008) (Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEntryPlayerController"));

		return ptr;
	}


	void STATIC_LoadReplay(const struct FString& SessionName);
	void STATIC_HandleLobbySystemMenu();
};


// Class TslGame.PerfBotPlayerController
// 0x0050 (0x1020 - 0x0FD0)
class APerfBotPlayerController : public ATslPlayerController
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0FD0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PerfBotPlayerController"));

		return ptr;
	}


	void STATIC_ServerMoveToLocation(const struct FVector& Location);
	void STATIC_ClientQuit();
};


// Class TslGame.TslBattleRoyalePlayerController
// 0x0000 (0x0FD0 - 0x0FD0)
class ATslBattleRoyalePlayerController : public ATslPlayerController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyalePlayerController"));

		return ptr;
	}


	void STATIC_WarningAfkPlayer();
	void STATIC_UpdateHud();
	void STATIC_UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_UnreliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_TracerProjectileModeType(int InMode, int InType);
	void STATIC_TracerBulletModeType(int InMode, int InType);
	void STATIC_ToggleTracerManger();
	void STATIC_ToggleSandboxRedZone();
	void STATIC_ToggleSandboxMasterUI();
	void STATIC_ToggleSandboxInvulnerableEffect();
	void STATIC_ToggleSandboxFly();
	void STATIC_ToggleSandboxCarePackage();
	void STATIC_ToggleReport();
	void STATIC_TogglePopupXBoxXIMAPI();
	void STATIC_ToggleMissionList();
	void STATIC_ToggleInventory();
	void STATIC_ToggleDucking();
	void STATIC_TestUserProfile(float TotalPlayTime);
	void STATIC_Test_SpawnVehicle();
	void STATIC_Test_FirstCharacterKill();
	void STATIC_SwitchToObserverIntentionally();
	void STATIC_Suicide();
	bool STATIC_StopReleaseFollowPad();
	void STATIC_StopReleaseFollow();
	void STATIC_StopRecording();
	bool STATIC_StartReleaseFollowPad();
	void STATIC_StartReleaseFollow();
	void STATIC_SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void STATIC_SimulateInputKey(const struct FKey& Key, bool bPressed);
	void STATIC_ShutdownTracerManager();
	void STATIC_ShowTslDebugInfomation();
	void STATIC_ShowTeamDeathPopup();
	void STATIC_ShowPlayerControllerBindActions_Admin();
	void STATIC_ShowMatchResult();
	void STATIC_ShowInGameMenu();
	void STATIC_ShowGotoLobbyPopUp(EPopupButtonID ButtonID);
	void STATIC_ShowEmoteWheel();
	void STATIC_SetVoiceComponent(class UVoiceComponent* Component);
	void STATIC_SetShowFollowButton(bool bShow);
	void STATIC_SetPingAtViewingTargetPad();
	void STATIC_SetDefaultFOV(float NewFOV);
	void STATIC_SetCraftAllowFilter(const struct FString& CraftAllowFilter);
	void STATIC_SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void STATIC_ServerViewTargetReplicateUpdate();
	void STATIC_ServerTryGainFBRCarePackageItem(class ATslFBRCarePackageItem* InItem);
	void STATIC_ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void STATIC_ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void STATIC_ServerTestCarePackage(int InSpawnCount);
	void STATIC_ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void STATIC_ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void STATIC_ServerSuicide();
	void STATIC_ServerStopOtherPlayersTestCheat();
	void STATIC_ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void STATIC_ServerSteamNetworkStatusLog(int CountPerGame);
	void STATIC_ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void STATIC_ServerStartHoldRotation(const struct FRotator& Current);
	void STATIC_ServerSpawnVehicle();
	void STATIC_ServerSetViewTargetCharacterData(class AReplicatedCharacterData* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetViewTarget(class AActor* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void STATIC_ServerSetSpawnKit(int Index);
	void STATIC_ServerSetShowPlatoonMarker(bool bShow);
	void STATIC_ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void STATIC_ServerSetPlatoonMapMarkerPosition(const struct FVector2D& NewMapMarkerPos, EMarkerType NewMapMarkerType);
	void STATIC_ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void STATIC_ServerSetControlRotation(const struct FRotator& Rotation);
	void STATIC_ServerSetClientOptionData(const struct FOptionSyncData& ClientData);
	void STATIC_ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void STATIC_ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void STATIC_ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendOutPacketLossReport(const struct FOutPacketLossReportForNet& OutPacketLoss);
	void STATIC_ServerSendLogMissionListOpen_Unreliable();
	void STATIC_ServerSendLogMissionListOpen_Reliable();
	void STATIC_ServerSendFreeMemory(const struct FString& DeviceName, TArray<struct FWuMemoryStat> MemoryStats);
	void STATIC_ServerSendDevLog(const struct FWuDevLog& LogToSave);
	void STATIC_ServerSay(const struct FString& Msg);
	void STATIC_ServerResumeNpc(class APawn* InPawn);
	void STATIC_ServerResetWheeledVehicleTransform();
	void STATIC_ServerRequestRestorePlatoonMapMarkerData();
	void STATIC_ServerRequestPlatoonFireSupport(const struct FVector& SpawnAt);
	void STATIC_ServerRequestPlatoonCarePackage(EPlatoonCarePackageType CarePackageType, const struct FVector& DropAt);
	void STATIC_ServerRequestCheckClientTeamsLogTDM(const struct FString& ClientDataStr);
	void STATIC_ServerRequestCheckClientTeamsLog(const struct FTslClientTeamActorValidityCheckData& InCheckData);
	void STATIC_ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void STATIC_ServerRadioMessagePing(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessageNeedAmmo(int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ServerRadioMessageInteraction(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation, const struct FText& InInteractionText, ERadioMessageInteractionType InIteractionType);
	void STATIC_ServerRadioMessageEnemySpotted(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessage(int InMessageIndex);
	void STATIC_ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPauseNpc(class APawn* InPawn);
	void STATIC_ServerPauseAfterTick();
	void STATIC_ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitDestructibleSurfaceInst(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, unsigned char DamageType);
	void STATIC_ServerNextSetViewTarget(bool bIsPrev);
	void STATIC_ServerNextFollowCharacter(bool bIsPrev);
	void STATIC_ServerMoveToVehicleSeat(int SeatIndex);
	void STATIC_ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void STATIC_ServerMapLoadFinishedOnClient();
	void STATIC_ServerLogXboxUnautorizedDevice();
	void STATIC_ServerLeaveVehicle();
	void STATIC_ServerLeaveMatchIntentionally();
	void STATIC_ServerLeaveDebugPC();
	void STATIC_ServerKnockdownNpc(class APawn* InPawn);
	void STATIC_ServerKnockbackNpc(class APawn* InPawn);
	void STATIC_ServerKillNpc(class APawn* InPawn);
	void STATIC_ServerKickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_ServerJoinDebugPC();
	void STATIC_ServerGiveSandboxVehicle(class UClass* InVehicleClass);
	void STATIC_ServerGiveSandboxPower(ESandboxPowerType InPowerType, bool InActivate);
	void STATIC_ServerGiveSandboxItemArray(TArray<struct FName> InItemIdArray);
	void STATIC_ServerGiveSandboxItem(const struct FName& InItemID);
	void STATIC_ServeRestartAirborn();
	void STATIC_ServeReleaseFollow();
	void STATIC_ServerEACClientConnected();
	void STATIC_ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void STATIC_ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_ServerCheatDestroyActors();
	void STATIC_ServerCheat(const struct FString& Msg);
	void STATIC_ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void STATIC_ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_ServerAskDynamicWeatherSync(int DynamicWeatherIndex);
	void STATIC_ServerAIPath(class APawn* InPawn);
	void STATIC_ServerAdmin(const struct FString& AdminCommand);
	void STATIC_Server_UpdateTracerManager(bool bTracerOn);
	void STATIC_Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void STATIC_Server_ToggleTracerManger();
	void STATIC_Server_ShutdownTracerManager();
	void STATIC_Server_SetSwitchToObserverIntentionally(bool bSet);
	void STATIC_Server_SendWheelTrackInfo(const struct FString& Info);
	void STATIC_Server_ReplyToItemRequest(class ATslCharacter* RequestOwner);
	void STATIC_Server_BroadCastMidGameBanMessageForUncheater();
	void STATIC_ServeFollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void STATIC_SaveGearProfile(int ProfileIndex, TArray<struct FName> inArray);
	void STATIC_SaveDistributedLoadout(TArray<struct FName> InItemArray);
	void STATIC_RestartAirborn();
	void STATIC_ResetMinimapSize();
	void STATIC_ResetLBRBHold();
	void STATIC_ResetEmoteWheelPadLBRB();
	void STATIC_ResetAfkKickTimer();
	void STATIC_RequestDestructionData();
	void STATIC_ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_ReliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_ReleaseFollow();
	void STATIC_PrevMinimapSize();
	void STATIC_PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool STATIC_OnWalkingToggleCameraPad();
	void STATIC_OnUpdateProvidedSpawnKitIndex();
	bool STATIC_OnToggleWayPoint();
	void STATIC_OnToggleSpawnKitSelect_FBR();
	bool STATIC_OnToggleMapPad();
	bool STATIC_OnToggleInventoryPad();
	bool STATIC_OnToggleInGameMenuPad();
	bool STATIC_OnToggleExtendedMinimapPad();
	bool STATIC_OnToggleCameraPad();
	void STATIC_OnToggleCamera();
	void STATIC_OnTimerIgnoreClientVehicleMove();
	bool STATIC_OnStopMoveVehicleSeatPad();
	bool STATIC_OnStopHoldThrowableItemWheel();
	bool STATIC_OnStopHoldRotationPadRB();
	bool STATIC_OnStopHoldRotationPadLB();
	bool STATIC_OnStopHoldRotationPad();
	void STATIC_OnStopHoldRadioMessageWheel();
	bool STATIC_OnStopHoldHealItemWheel();
	bool STATIC_OnStartMoveVehicleSeatPad();
	bool STATIC_OnStartHoldThrowableItemWheel();
	bool STATIC_OnStartHoldRotationPadRB();
	bool STATIC_OnStartHoldRotationPadLB();
	bool STATIC_OnStartHoldRotationPad();
	void STATIC_OnStartHoldRadioMessageWheel();
	bool STATIC_OnStartHoldHealItemWheel();
	void STATIC_OnShowFollowButtonPadHold(bool IsPressed);
	void STATIC_OnReplaceAttachmentPadHold(bool IsPressed);
	bool STATIC_OnReplaceAttachmentPad();
	void STATIC_OnRep_TracerManager();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_OnRep_ObserverAuthorityType();
	void STATIC_OnRep_IntentionallySwitchedToObserver();
	void STATIC_OnRep_CameraViewBehaviour();
	void STATIC_OnRep_bUseTPAntibotClient();
	void STATIC_OnRep_bEnableGVoice();
	void STATIC_OnRep_AllowVoiceChatInput();
	void STATIC_OnRep_AfkKickTime();
	bool STATIC_OnReleaseRadioMessagePad();
	bool STATIC_OnReleasedHealItemPad();
	bool STATIC_OnPressRadioMessagePad();
	bool STATIC_OnPressedHealItemPad();
	void STATIC_OnParachuteFollowPadHold(bool IsPressed);
	void STATIC_OnMoveToVehicleSeat(unsigned char Idx);
	void STATIC_OnItemStackCountHandlingMode();
	bool STATIC_OnInteractInVehiclePad();
	bool STATIC_OnInteractGamepad();
	bool STATIC_OnHoldToggleSpawnKitSelectFBRPad();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnFinishInteractionCastOnServer(class UObject* CastObject);
	void STATIC_OnFinishInteractionCastOnClient(class UObject* CastObject);
	void STATIC_OnFBRClassSelectGuidePadHold(bool IsPressed);
	void STATIC_OnExecuteExitCommand();
	void STATIC_OnEmoteAnimation(unsigned char InIndex);
	bool STATIC_OnDrivingToggleCameraPad();
	void STATIC_OnClickedReportButton(EReportCause ReportCause, const struct FString& NetId, ESubjectToReport SubjectToReport, TArray<EReportDetailCauseType> ReportDetailCauseTypeList);
	void STATIC_OnCancelInteractionCast(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnBeginningOptimizationStateChanged(EBeginningState InState);
	void STATIC_OnAutomatedTesting();
	void STATIC_OffItemStackCountHandlingMode();
	void STATIC_ObserverTeleportTo(const struct FVector& Location);
	void STATIC_NextSetViewTarget();
	void STATIC_NextMinimapSize();
	void STATIC_MobileBodiesStatistics();
	void STATIC_LeagueReplaySwitchPlayer(class APlayerState* TslPlayerState, bool bSetPlayerCamera);
	void STATIC_KickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_KickAfkPlayer();
	bool STATIC_IsTeleportModeOn();
	bool STATIC_IsSwitchedToObserverIntentionally();
	bool STATIC_IsSpectatorState();
	bool STATIC_IsSpectating();
	bool STATIC_IsShowFollowButton();
	bool STATIC_IsSameObservingCameraMode(EObserverCameraMode CameraType);
	bool STATIC_IsReplayingKillcam();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsMissionListDisplayable();
	bool STATIC_IsLiveReplaying();
	bool STATIC_IsKillerSpectating();
	bool STATIC_IsItemStackCountHandlingMode();
	bool STATIC_IsHighPing();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsGroggying();
	bool STATIC_IsGamepadHoldProcessing();
	bool STATIC_IsGameInputAllowed();
	bool STATIC_IsClientFreecamFogIntensityControlEnabled();
	bool STATIC_IsCanParachuteFollow();
	bool STATIC_IsCanFollowPlayer(const struct FString& PlayerNam);
	bool STATIC_IsAllowedToSwitchToObserver();
	void STATIC_InitClientSandboxMaster();
	void STATIC_HideTslDebugInfomation();
	void STATIC_HideMatchResult();
	void STATIC_HideEmoteWheel();
	bool STATIC_HasNextSpectateCharacter();
	class UVoiceComponent* STATIC_GetVoiceComponent();
	class ATslCharacter* STATIC_GetViewTargetTslCharacter();
	class ATeam* STATIC_GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslPlayerMatchResultInfos();
	class UTslPawnInputBindingComponent* STATIC_GetTslPawnInputBindingComponent();
	class ATslCharacter* STATIC_GetTslCharacter();
	TArray<class ATslPlayerState*> STATIC_GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int STATIC_GetTeamOverallKillCountAtObserving();
	int STATIC_GetTeamMemberCount();
	int STATIC_GetTeamIdAtObserving();
	class ATslCharacter* STATIC_GetTeamCharacterByPlayerName(const struct FString& PlayerName);
	class ATeam* STATIC_GetTeamByPlayerName(const struct FString& PlayerName);
	struct FRotator STATIC_GetTargetViewRotation();
	TArray<class ATslPlayerState*> STATIC_GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString STATIC_GetSpectatingPlayerName();
	struct FString STATIC_GetSpectatingOrFollowingTslCharacterNetId();
	TArray<struct FName> STATIC_GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> STATIC_GetReplicateTeamMembers();
	TArray<class ATslCharacter*> STATIC_GetReplicateKillerTeamMembers();
	TArray<class AReplicatedCharacterData*> STATIC_GetReplicatedCharacterDataList();
	TArray<class ATslCharacter*> STATIC_GetReplicateCharacters();
	TArray<class ACarePackageItem*> STATIC_GetReplicateCarePackageItems();
	class ATeam* STATIC_GetPlayerTeam();
	float STATIC_GetOtherTotalCastTime();
	float STATIC_GetOtherElapsedCastTime();
	float STATIC_GetOtherDeltaCastTime();
	float STATIC_GetOtherCastTime();
	struct FText STATIC_GetOtherCastingName();
	EObserverCameraMode STATIC_GetObserverCameraMode();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> STATIC_GetKeysForAction(const struct FName& ActionName);
	struct FText STATIC_GetHudDebugText();
	TArray<struct FName> STATIC_GetGearProfile(int ProfileIndex);
	struct FString STATIC_GetFollowName(class ATslCharacter* FollowCharacter);
	class ATeam* STATIC_GetFollowLeaderTeam(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowLeader(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowCharacter(const struct FString& PlayerName);
	TArray<class ATslPlayerState*> STATIC_GetDeadPlayerStates();
	float STATIC_GetCurrentHoldProgressRate();
	TArray<class ATeam*> STATIC_GetClientTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientSquadInTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> STATIC_GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool STATIC_GetCanAllSpectate();
	TArray<struct FTslReportUserInfo> STATIC_GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> STATIC_GetAllPlayerStates();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters(class ATslCharacter* LeaderCharacter);
	int STATIC_GetAliveTeamMemberCount(bool bIncludeQuitter);
	void STATIC_ForceGotoLobbyPopUpHandler(EPopupButtonID ButtonID);
	void STATIC_FollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_EndStreamingPause();
	void STATIC_DumpActorDetailByRaycast();
	void STATIC_DropItem(const struct FString& ItemTypeName);
	void STATIC_DisplayParachuteFollowMessage();
	void STATIC_DeleteMapMarker();
	bool STATIC_CompleteReportKiller();
	void STATIC_CloseKickPlayerWarningPopupAndTerminate(EPopupButtonID ButtonID);
	void STATIC_CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void STATIC_ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedByAntiCheat(const struct FText& KickReason);
	void STATIC_ClientWasKickedAndExitTP(const struct FText& KickReason);
	void STATIC_ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void STATIC_ClientUpdatePlatoonMapMarker(int PlatoonId, bool bOffline, const struct FMapMarker& MapMarker);
	void STATIC_ClientUpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_ClientUpdatePlatoonCommander(int PlatoonId, const struct FTeamMemberIdentification& PlatoonMemberId);
	void STATIC_ClientUpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State, bool bForceUpdate);
	void STATIC_ClientUpdateOptionData();
	void STATIC_ClientUpdateDropPackageAchievement();
	void STATIC_ClientUpdateCollisionResponseToPawn(bool bActive);
	void STATIC_ClientUpdateCarePackageAchievement();
	void STATIC_ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void STATIC_ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void STATIC_ClientTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ClientStopTestCheat();
	void STATIC_ClientStartOnlineGame();
	void STATIC_ClientShowMatchResult();
	void STATIC_ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void STATIC_ClientSetCurSandboxVehicleNumber(int InNumber);
	void STATIC_ClientSetCurSandboxItemNumber(int InNumber);
	void STATIC_ClientSetCanAllSpectate(bool InbCanSpectate);
	void STATIC_ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void STATIC_ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendFakeAIDBNOMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, float InDistanceFromKillerToVictim);
	void STATIC_ClientRestoreSpectatorOnReconnection();
	void STATIC_ClientRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ClientRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_ClientRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_ClientProcessRevive();
	void STATIC_ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void STATIC_ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_ClientOnCharacterRestart();
	void STATIC_ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbSuicide);
	void STATIC_ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void STATIC_ClientNpcCount(int InCount);
	void STATIC_ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void STATIC_ClientNotifySpeedBoost(float Boost);
	void STATIC_ClientNotifyRestrictingPlayArea();
	void STATIC_ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void STATIC_ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void STATIC_ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_ClientNotifyHealAmount_Unreliable(float Heal);
	void STATIC_ClientNotifyHealAmount_Reliable(float Heal);
	void STATIC_ClientNotifyHealAmount(float Heal);
	void STATIC_ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void STATIC_ClientNetworkPingStateReceive(TArray<unsigned char> Data);
	void STATIC_ClientInteractByComponent(class UActorComponent* TargetComponent);
	void STATIC_ClientInteract(class AActor* TargetObject);
	void STATIC_ClientIgnoreClientVehicleMove(bool InIgnore);
	void STATIC_ClientGetDestructiblePenData(TArray<struct FDestructiblePenetrationState> PenState);
	void STATIC_ClientGetDestructibleBreachData(TArray<struct FDestructibleBreachState> BreachState);
	void STATIC_ClientGetDestructibleBeaconData(TArray<struct FGuid> BeaconGUIDs);
	void STATIC_ClientGameStarted(float worldTime);
	void STATIC_ClientForceOverwriteMapMarkerData(const struct FMapMarker& MapMarker);
	void STATIC_ClientEndOnlineGame();
	void STATIC_ClientDynamicWeatherSync(int DynamicWeatherIndex, bool bInitialized, float BlendInTime, float SaturationTime, float BlendOutTime);
	void STATIC_ClientDisplayCarePackage(const struct FVector& InSpawnLocation, const struct FVector& InEndLocation, TArray<struct FVector> InDropItemPos, TArray<int> InPassedCountList);
	void STATIC_ClientDebugVehicleLocation(TArray<struct FDebugVehicleLoation> InVehicleLocArray);
	void STATIC_ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void STATIC_ClientCeremonyRoundResult(int InWinnerTeamId, TArray<int> InWinningTeamIdList, bool bLastRound);
	void STATIC_ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void STATIC_ClientAllowSandboxMaster();
	void STATIC_ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void STATIC_ClientAdminExportStringFile(const struct FString& inString, const struct FString& InFileName);
	void STATIC_ClientAdminCopyString(const struct FString& inString);
	void STATIC_Client_TakeScreenshot();
	void STATIC_Client_ItemRequestReplied(class ATslCharacter* RequestOwner);
	void STATIC_Client_DrawDebugString(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat_ServerSpawnVehicle(int VehicleIndex);
	void STATIC_ChangeMeshCommand(int Parameter, float Time);
	void STATIC_CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool STATIC_CanSeeTerrainThroughFogInTheAir();
	bool STATIC_CanReport();
	void STATIC_BP_Test_SpawnVehicle(int VehicleIndex);
	void STATIC_BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_BEClient(const struct FString& Command);
	void STATIC_AllowVoiceChatInput(bool bAllow);
	void STATIC_Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslBattleRoyalePlayerController_CPP
// 0x0000 (0x0FD0 - 0x0FD0)
class ATslBattleRoyalePlayerController_CPP : public ATslBattleRoyalePlayerController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyalePlayerController_CPP"));

		return ptr;
	}


	void STATIC_ServerSetCPPWin(bool bIsCPPWin);
	void STATIC_ClientGameCPPWin();
};


// Class TslGame.TslPlayerController_ESports
// 0x0000 (0x0FD0 - 0x0FD0)
class ATslPlayerController_ESports : public ATslBattleRoyalePlayerController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerController_ESports"));

		return ptr;
	}


	void STATIC_WarningAfkPlayer();
	void STATIC_UpdateHud();
	void STATIC_UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_UnreliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_TracerProjectileModeType(int InMode, int InType);
	void STATIC_TracerBulletModeType(int InMode, int InType);
	void STATIC_ToggleTracerManger();
	void STATIC_ToggleSandboxRedZone();
	void STATIC_ToggleSandboxMasterUI();
	void STATIC_ToggleSandboxInvulnerableEffect();
	void STATIC_ToggleSandboxFly();
	void STATIC_ToggleSandboxCarePackage();
	void STATIC_ToggleReport();
	void STATIC_TogglePopupXBoxXIMAPI();
	void STATIC_ToggleMissionList();
	void STATIC_ToggleInventory();
	void STATIC_ToggleDucking();
	void STATIC_TestUserProfile(float TotalPlayTime);
	void STATIC_Test_SpawnVehicle();
	void STATIC_Test_FirstCharacterKill();
	void STATIC_SwitchToObserverIntentionally();
	void STATIC_Suicide();
	bool STATIC_StopReleaseFollowPad();
	void STATIC_StopReleaseFollow();
	void STATIC_StopRecording();
	bool STATIC_StartReleaseFollowPad();
	void STATIC_StartReleaseFollow();
	void STATIC_SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void STATIC_SimulateInputKey(const struct FKey& Key, bool bPressed);
	void STATIC_ShutdownTracerManager();
	void STATIC_ShowTslDebugInfomation();
	void STATIC_ShowTeamDeathPopup();
	void STATIC_ShowPlayerControllerBindActions_Admin();
	void STATIC_ShowMatchResult();
	void STATIC_ShowInGameMenu();
	void STATIC_ShowGotoLobbyPopUp(EPopupButtonID ButtonID);
	void STATIC_ShowEmoteWheel();
	void STATIC_SetVoiceComponent(class UVoiceComponent* Component);
	void STATIC_SetShowFollowButton(bool bShow);
	void STATIC_SetPingAtViewingTargetPad();
	void STATIC_SetDefaultFOV(float NewFOV);
	void STATIC_SetCraftAllowFilter(const struct FString& CraftAllowFilter);
	void STATIC_SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void STATIC_ServerViewTargetReplicateUpdate();
	void STATIC_ServerTryGainFBRCarePackageItem(class ATslFBRCarePackageItem* InItem);
	void STATIC_ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void STATIC_ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void STATIC_ServerTestCarePackage(int InSpawnCount);
	void STATIC_ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void STATIC_ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void STATIC_ServerSuicide();
	void STATIC_ServerStopOtherPlayersTestCheat();
	void STATIC_ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void STATIC_ServerSteamNetworkStatusLog(int CountPerGame);
	void STATIC_ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void STATIC_ServerStartHoldRotation(const struct FRotator& Current);
	void STATIC_ServerSpawnVehicle();
	void STATIC_ServerSetViewTargetCharacterData(class AReplicatedCharacterData* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetViewTarget(class AActor* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void STATIC_ServerSetSpawnKit(int Index);
	void STATIC_ServerSetShowPlatoonMarker(bool bShow);
	void STATIC_ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void STATIC_ServerSetPlatoonMapMarkerPosition(const struct FVector2D& NewMapMarkerPos, EMarkerType NewMapMarkerType);
	void STATIC_ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void STATIC_ServerSetControlRotation(const struct FRotator& Rotation);
	void STATIC_ServerSetClientOptionData(const struct FOptionSyncData& ClientData);
	void STATIC_ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void STATIC_ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void STATIC_ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendOutPacketLossReport(const struct FOutPacketLossReportForNet& OutPacketLoss);
	void STATIC_ServerSendLogMissionListOpen_Unreliable();
	void STATIC_ServerSendLogMissionListOpen_Reliable();
	void STATIC_ServerSendFreeMemory(const struct FString& DeviceName, TArray<struct FWuMemoryStat> MemoryStats);
	void STATIC_ServerSendDevLog(const struct FWuDevLog& LogToSave);
	void STATIC_ServerSay(const struct FString& Msg);
	void STATIC_ServerResumeNpc(class APawn* InPawn);
	void STATIC_ServerResetWheeledVehicleTransform();
	void STATIC_ServerRequestRestorePlatoonMapMarkerData();
	void STATIC_ServerRequestPlatoonFireSupport(const struct FVector& SpawnAt);
	void STATIC_ServerRequestPlatoonCarePackage(EPlatoonCarePackageType CarePackageType, const struct FVector& DropAt);
	void STATIC_ServerRequestCheckClientTeamsLogTDM(const struct FString& ClientDataStr);
	void STATIC_ServerRequestCheckClientTeamsLog(const struct FTslClientTeamActorValidityCheckData& InCheckData);
	void STATIC_ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void STATIC_ServerRadioMessagePing(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessageNeedAmmo(int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ServerRadioMessageInteraction(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation, const struct FText& InInteractionText, ERadioMessageInteractionType InIteractionType);
	void STATIC_ServerRadioMessageEnemySpotted(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessage(int InMessageIndex);
	void STATIC_ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPauseNpc(class APawn* InPawn);
	void STATIC_ServerPauseAfterTick();
	void STATIC_ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitDestructibleSurfaceInst(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, unsigned char DamageType);
	void STATIC_ServerNextSetViewTarget(bool bIsPrev);
	void STATIC_ServerNextFollowCharacter(bool bIsPrev);
	void STATIC_ServerMoveToVehicleSeat(int SeatIndex);
	void STATIC_ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void STATIC_ServerMapLoadFinishedOnClient();
	void STATIC_ServerLogXboxUnautorizedDevice();
	void STATIC_ServerLeaveVehicle();
	void STATIC_ServerLeaveMatchIntentionally();
	void STATIC_ServerLeaveDebugPC();
	void STATIC_ServerKnockdownNpc(class APawn* InPawn);
	void STATIC_ServerKnockbackNpc(class APawn* InPawn);
	void STATIC_ServerKillNpc(class APawn* InPawn);
	void STATIC_ServerKickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_ServerJoinDebugPC();
	void STATIC_ServerGiveSandboxVehicle(class UClass* InVehicleClass);
	void STATIC_ServerGiveSandboxPower(ESandboxPowerType InPowerType, bool InActivate);
	void STATIC_ServerGiveSandboxItemArray(TArray<struct FName> InItemIdArray);
	void STATIC_ServerGiveSandboxItem(const struct FName& InItemID);
	void STATIC_ServeRestartAirborn();
	void STATIC_ServeReleaseFollow();
	void STATIC_ServerEACClientConnected();
	void STATIC_ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void STATIC_ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_ServerCheatDestroyActors();
	void STATIC_ServerCheat(const struct FString& Msg);
	void STATIC_ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void STATIC_ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_ServerAskDynamicWeatherSync(int DynamicWeatherIndex);
	void STATIC_ServerAIPath(class APawn* InPawn);
	void STATIC_ServerAdmin(const struct FString& AdminCommand);
	void STATIC_Server_UpdateTracerManager(bool bTracerOn);
	void STATIC_Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void STATIC_Server_ToggleTracerManger();
	void STATIC_Server_ShutdownTracerManager();
	void STATIC_Server_SetSwitchToObserverIntentionally(bool bSet);
	void STATIC_Server_SendWheelTrackInfo(const struct FString& Info);
	void STATIC_Server_ReplyToItemRequest(class ATslCharacter* RequestOwner);
	void STATIC_Server_BroadCastMidGameBanMessageForUncheater();
	void STATIC_ServeFollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void STATIC_SaveGearProfile(int ProfileIndex, TArray<struct FName> inArray);
	void STATIC_SaveDistributedLoadout(TArray<struct FName> InItemArray);
	void STATIC_RestartAirborn();
	void STATIC_ResetMinimapSize();
	void STATIC_ResetLBRBHold();
	void STATIC_ResetEmoteWheelPadLBRB();
	void STATIC_ResetAfkKickTimer();
	void STATIC_RequestDestructionData();
	void STATIC_ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_ReliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_ReleaseFollow();
	void STATIC_PrevMinimapSize();
	void STATIC_PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool STATIC_OnWalkingToggleCameraPad();
	void STATIC_OnUpdateProvidedSpawnKitIndex();
	bool STATIC_OnToggleWayPoint();
	void STATIC_OnToggleSpawnKitSelect_FBR();
	bool STATIC_OnToggleMapPad();
	bool STATIC_OnToggleInventoryPad();
	bool STATIC_OnToggleInGameMenuPad();
	bool STATIC_OnToggleExtendedMinimapPad();
	bool STATIC_OnToggleCameraPad();
	void STATIC_OnToggleCamera();
	void STATIC_OnTimerIgnoreClientVehicleMove();
	bool STATIC_OnStopMoveVehicleSeatPad();
	bool STATIC_OnStopHoldThrowableItemWheel();
	bool STATIC_OnStopHoldRotationPadRB();
	bool STATIC_OnStopHoldRotationPadLB();
	bool STATIC_OnStopHoldRotationPad();
	void STATIC_OnStopHoldRadioMessageWheel();
	bool STATIC_OnStopHoldHealItemWheel();
	bool STATIC_OnStartMoveVehicleSeatPad();
	bool STATIC_OnStartHoldThrowableItemWheel();
	bool STATIC_OnStartHoldRotationPadRB();
	bool STATIC_OnStartHoldRotationPadLB();
	bool STATIC_OnStartHoldRotationPad();
	void STATIC_OnStartHoldRadioMessageWheel();
	bool STATIC_OnStartHoldHealItemWheel();
	void STATIC_OnShowFollowButtonPadHold(bool IsPressed);
	void STATIC_OnReplaceAttachmentPadHold(bool IsPressed);
	bool STATIC_OnReplaceAttachmentPad();
	void STATIC_OnRep_TracerManager();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_OnRep_ObserverAuthorityType();
	void STATIC_OnRep_IntentionallySwitchedToObserver();
	void STATIC_OnRep_CameraViewBehaviour();
	void STATIC_OnRep_bUseTPAntibotClient();
	void STATIC_OnRep_bEnableGVoice();
	void STATIC_OnRep_AllowVoiceChatInput();
	void STATIC_OnRep_AfkKickTime();
	bool STATIC_OnReleaseRadioMessagePad();
	bool STATIC_OnReleasedHealItemPad();
	bool STATIC_OnPressRadioMessagePad();
	bool STATIC_OnPressedHealItemPad();
	void STATIC_OnParachuteFollowPadHold(bool IsPressed);
	void STATIC_OnMoveToVehicleSeat(unsigned char Idx);
	void STATIC_OnItemStackCountHandlingMode();
	bool STATIC_OnInteractInVehiclePad();
	bool STATIC_OnInteractGamepad();
	bool STATIC_OnHoldToggleSpawnKitSelectFBRPad();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnFinishInteractionCastOnServer(class UObject* CastObject);
	void STATIC_OnFinishInteractionCastOnClient(class UObject* CastObject);
	void STATIC_OnFBRClassSelectGuidePadHold(bool IsPressed);
	void STATIC_OnExecuteExitCommand();
	void STATIC_OnEmoteAnimation(unsigned char InIndex);
	bool STATIC_OnDrivingToggleCameraPad();
	void STATIC_OnClickedReportButton(EReportCause ReportCause, const struct FString& NetId, ESubjectToReport SubjectToReport, TArray<EReportDetailCauseType> ReportDetailCauseTypeList);
	void STATIC_OnCancelInteractionCast(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnBeginningOptimizationStateChanged(EBeginningState InState);
	void STATIC_OnAutomatedTesting();
	void STATIC_OffItemStackCountHandlingMode();
	void STATIC_ObserverTeleportTo(const struct FVector& Location);
	void STATIC_NextSetViewTarget();
	void STATIC_NextMinimapSize();
	void STATIC_MobileBodiesStatistics();
	void STATIC_LeagueReplaySwitchPlayer(class APlayerState* TslPlayerState, bool bSetPlayerCamera);
	void STATIC_KickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_KickAfkPlayer();
	bool STATIC_IsTeleportModeOn();
	bool STATIC_IsSwitchedToObserverIntentionally();
	bool STATIC_IsSpectatorState();
	bool STATIC_IsSpectating();
	bool STATIC_IsShowFollowButton();
	bool STATIC_IsSameObservingCameraMode(EObserverCameraMode CameraType);
	bool STATIC_IsReplayingKillcam();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsMissionListDisplayable();
	bool STATIC_IsLiveReplaying();
	bool STATIC_IsKillerSpectating();
	bool STATIC_IsItemStackCountHandlingMode();
	bool STATIC_IsHighPing();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsGroggying();
	bool STATIC_IsGamepadHoldProcessing();
	bool STATIC_IsGameInputAllowed();
	bool STATIC_IsClientFreecamFogIntensityControlEnabled();
	bool STATIC_IsCanParachuteFollow();
	bool STATIC_IsCanFollowPlayer(const struct FString& PlayerNam);
	bool STATIC_IsAllowedToSwitchToObserver();
	void STATIC_InitClientSandboxMaster();
	void STATIC_HideTslDebugInfomation();
	void STATIC_HideMatchResult();
	void STATIC_HideEmoteWheel();
	bool STATIC_HasNextSpectateCharacter();
	class UVoiceComponent* STATIC_GetVoiceComponent();
	class ATslCharacter* STATIC_GetViewTargetTslCharacter();
	class ATeam* STATIC_GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslPlayerMatchResultInfos();
	class UTslPawnInputBindingComponent* STATIC_GetTslPawnInputBindingComponent();
	class ATslCharacter* STATIC_GetTslCharacter();
	TArray<class ATslPlayerState*> STATIC_GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int STATIC_GetTeamOverallKillCountAtObserving();
	int STATIC_GetTeamMemberCount();
	int STATIC_GetTeamIdAtObserving();
	class ATslCharacter* STATIC_GetTeamCharacterByPlayerName(const struct FString& PlayerName);
	class ATeam* STATIC_GetTeamByPlayerName(const struct FString& PlayerName);
	struct FRotator STATIC_GetTargetViewRotation();
	TArray<class ATslPlayerState*> STATIC_GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString STATIC_GetSpectatingPlayerName();
	struct FString STATIC_GetSpectatingOrFollowingTslCharacterNetId();
	TArray<struct FName> STATIC_GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> STATIC_GetReplicateTeamMembers();
	TArray<class ATslCharacter*> STATIC_GetReplicateKillerTeamMembers();
	TArray<class AReplicatedCharacterData*> STATIC_GetReplicatedCharacterDataList();
	TArray<class ATslCharacter*> STATIC_GetReplicateCharacters();
	TArray<class ACarePackageItem*> STATIC_GetReplicateCarePackageItems();
	class ATeam* STATIC_GetPlayerTeam();
	float STATIC_GetOtherTotalCastTime();
	float STATIC_GetOtherElapsedCastTime();
	float STATIC_GetOtherDeltaCastTime();
	float STATIC_GetOtherCastTime();
	struct FText STATIC_GetOtherCastingName();
	EObserverCameraMode STATIC_GetObserverCameraMode();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> STATIC_GetKeysForAction(const struct FName& ActionName);
	struct FText STATIC_GetHudDebugText();
	TArray<struct FName> STATIC_GetGearProfile(int ProfileIndex);
	struct FString STATIC_GetFollowName(class ATslCharacter* FollowCharacter);
	class ATeam* STATIC_GetFollowLeaderTeam(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowLeader(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowCharacter(const struct FString& PlayerName);
	TArray<class ATslPlayerState*> STATIC_GetDeadPlayerStates();
	float STATIC_GetCurrentHoldProgressRate();
	TArray<class ATeam*> STATIC_GetClientTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientSquadInTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> STATIC_GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool STATIC_GetCanAllSpectate();
	TArray<struct FTslReportUserInfo> STATIC_GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> STATIC_GetAllPlayerStates();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters(class ATslCharacter* LeaderCharacter);
	int STATIC_GetAliveTeamMemberCount(bool bIncludeQuitter);
	void STATIC_ForceGotoLobbyPopUpHandler(EPopupButtonID ButtonID);
	void STATIC_FollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_EndStreamingPause();
	void STATIC_DumpActorDetailByRaycast();
	void STATIC_DropItem(const struct FString& ItemTypeName);
	void STATIC_DisplayParachuteFollowMessage();
	void STATIC_DeleteMapMarker();
	bool STATIC_CompleteReportKiller();
	void STATIC_CloseKickPlayerWarningPopupAndTerminate(EPopupButtonID ButtonID);
	void STATIC_CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void STATIC_ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedByAntiCheat(const struct FText& KickReason);
	void STATIC_ClientWasKickedAndExitTP(const struct FText& KickReason);
	void STATIC_ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void STATIC_ClientUpdatePlatoonMapMarker(int PlatoonId, bool bOffline, const struct FMapMarker& MapMarker);
	void STATIC_ClientUpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_ClientUpdatePlatoonCommander(int PlatoonId, const struct FTeamMemberIdentification& PlatoonMemberId);
	void STATIC_ClientUpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State, bool bForceUpdate);
	void STATIC_ClientUpdateOptionData();
	void STATIC_ClientUpdateDropPackageAchievement();
	void STATIC_ClientUpdateCollisionResponseToPawn(bool bActive);
	void STATIC_ClientUpdateCarePackageAchievement();
	void STATIC_ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void STATIC_ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void STATIC_ClientTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ClientStopTestCheat();
	void STATIC_ClientStartOnlineGame();
	void STATIC_ClientShowMatchResult();
	void STATIC_ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void STATIC_ClientSetCurSandboxVehicleNumber(int InNumber);
	void STATIC_ClientSetCurSandboxItemNumber(int InNumber);
	void STATIC_ClientSetCanAllSpectate(bool InbCanSpectate);
	void STATIC_ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void STATIC_ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendFakeAIDBNOMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, float InDistanceFromKillerToVictim);
	void STATIC_ClientRestoreSpectatorOnReconnection();
	void STATIC_ClientRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ClientRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_ClientRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_ClientProcessRevive();
	void STATIC_ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void STATIC_ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_ClientOnCharacterRestart();
	void STATIC_ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbSuicide);
	void STATIC_ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void STATIC_ClientNpcCount(int InCount);
	void STATIC_ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void STATIC_ClientNotifySpeedBoost(float Boost);
	void STATIC_ClientNotifyRestrictingPlayArea();
	void STATIC_ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void STATIC_ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void STATIC_ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_ClientNotifyHealAmount_Unreliable(float Heal);
	void STATIC_ClientNotifyHealAmount_Reliable(float Heal);
	void STATIC_ClientNotifyHealAmount(float Heal);
	void STATIC_ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void STATIC_ClientNetworkPingStateReceive(TArray<unsigned char> Data);
	void STATIC_ClientInteractByComponent(class UActorComponent* TargetComponent);
	void STATIC_ClientInteract(class AActor* TargetObject);
	void STATIC_ClientIgnoreClientVehicleMove(bool InIgnore);
	void STATIC_ClientGetDestructiblePenData(TArray<struct FDestructiblePenetrationState> PenState);
	void STATIC_ClientGetDestructibleBreachData(TArray<struct FDestructibleBreachState> BreachState);
	void STATIC_ClientGetDestructibleBeaconData(TArray<struct FGuid> BeaconGUIDs);
	void STATIC_ClientGameStarted(float worldTime);
	void STATIC_ClientForceOverwriteMapMarkerData(const struct FMapMarker& MapMarker);
	void STATIC_ClientEndOnlineGame();
	void STATIC_ClientDynamicWeatherSync(int DynamicWeatherIndex, bool bInitialized, float BlendInTime, float SaturationTime, float BlendOutTime);
	void STATIC_ClientDisplayCarePackage(const struct FVector& InSpawnLocation, const struct FVector& InEndLocation, TArray<struct FVector> InDropItemPos, TArray<int> InPassedCountList);
	void STATIC_ClientDebugVehicleLocation(TArray<struct FDebugVehicleLoation> InVehicleLocArray);
	void STATIC_ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void STATIC_ClientCeremonyRoundResult(int InWinnerTeamId, TArray<int> InWinningTeamIdList, bool bLastRound);
	void STATIC_ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void STATIC_ClientAllowSandboxMaster();
	void STATIC_ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void STATIC_ClientAdminExportStringFile(const struct FString& inString, const struct FString& InFileName);
	void STATIC_ClientAdminCopyString(const struct FString& inString);
	void STATIC_Client_TakeScreenshot();
	void STATIC_Client_ItemRequestReplied(class ATslCharacter* RequestOwner);
	void STATIC_Client_DrawDebugString(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat_ServerSpawnVehicle(int VehicleIndex);
	void STATIC_ChangeMeshCommand(int Parameter, float Time);
	void STATIC_CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool STATIC_CanSeeTerrainThroughFogInTheAir();
	bool STATIC_CanReport();
	void STATIC_BP_Test_SpawnVehicle(int VehicleIndex);
	void STATIC_BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_BEClient(const struct FString& Command);
	void STATIC_AllowVoiceChatInput(bool bAllow);
	void STATIC_Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslDemoSpectator
// 0x0040 (0x1010 - 0x0FD0)
class ATslDemoSpectator : public ATslPlayerController
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0FD0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDemoSpectator"));

		return ptr;
	}


	void STATIC_WarningAfkPlayer();
	void STATIC_UpdateHud();
	void STATIC_UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_UnreliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_TracerProjectileModeType(int InMode, int InType);
	void STATIC_TracerBulletModeType(int InMode, int InType);
	void STATIC_ToggleTracerManger();
	void STATIC_ToggleSandboxRedZone();
	void STATIC_ToggleSandboxMasterUI();
	void STATIC_ToggleSandboxInvulnerableEffect();
	void STATIC_ToggleSandboxFly();
	void STATIC_ToggleSandboxCarePackage();
	void STATIC_ToggleReport();
	void STATIC_TogglePopupXBoxXIMAPI();
	void STATIC_ToggleMissionList();
	void STATIC_ToggleInventory();
	void STATIC_ToggleDucking();
	void STATIC_TestUserProfile(float TotalPlayTime);
	void STATIC_Test_SpawnVehicle();
	void STATIC_Test_FirstCharacterKill();
	void STATIC_SwitchToObserverIntentionally();
	void STATIC_Suicide();
	bool STATIC_StopReleaseFollowPad();
	void STATIC_StopReleaseFollow();
	void STATIC_StopRecording();
	bool STATIC_StartReleaseFollowPad();
	void STATIC_StartReleaseFollow();
	void STATIC_SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void STATIC_SimulateInputKey(const struct FKey& Key, bool bPressed);
	void STATIC_ShutdownTracerManager();
	void STATIC_ShowTslDebugInfomation();
	void STATIC_ShowTeamDeathPopup();
	void STATIC_ShowPlayerControllerBindActions_Admin();
	void STATIC_ShowMatchResult();
	void STATIC_ShowInGameMenu();
	void STATIC_ShowGotoLobbyPopUp(EPopupButtonID ButtonID);
	void STATIC_ShowEmoteWheel();
	void STATIC_SetVoiceComponent(class UVoiceComponent* Component);
	void STATIC_SetShowFollowButton(bool bShow);
	void STATIC_SetPingAtViewingTargetPad();
	void STATIC_SetDefaultFOV(float NewFOV);
	void STATIC_SetCraftAllowFilter(const struct FString& CraftAllowFilter);
	void STATIC_SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void STATIC_ServerViewTargetReplicateUpdate();
	void STATIC_ServerTryGainFBRCarePackageItem(class ATslFBRCarePackageItem* InItem);
	void STATIC_ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void STATIC_ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void STATIC_ServerTestCarePackage(int InSpawnCount);
	void STATIC_ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void STATIC_ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void STATIC_ServerSuicide();
	void STATIC_ServerStopOtherPlayersTestCheat();
	void STATIC_ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void STATIC_ServerSteamNetworkStatusLog(int CountPerGame);
	void STATIC_ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void STATIC_ServerStartHoldRotation(const struct FRotator& Current);
	void STATIC_ServerSpawnVehicle();
	void STATIC_ServerSetViewTargetCharacterData(class AReplicatedCharacterData* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetViewTarget(class AActor* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void STATIC_ServerSetSpawnKit(int Index);
	void STATIC_ServerSetShowPlatoonMarker(bool bShow);
	void STATIC_ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void STATIC_ServerSetPlatoonMapMarkerPosition(const struct FVector2D& NewMapMarkerPos, EMarkerType NewMapMarkerType);
	void STATIC_ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void STATIC_ServerSetControlRotation(const struct FRotator& Rotation);
	void STATIC_ServerSetClientOptionData(const struct FOptionSyncData& ClientData);
	void STATIC_ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void STATIC_ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void STATIC_ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendOutPacketLossReport(const struct FOutPacketLossReportForNet& OutPacketLoss);
	void STATIC_ServerSendLogMissionListOpen_Unreliable();
	void STATIC_ServerSendLogMissionListOpen_Reliable();
	void STATIC_ServerSendFreeMemory(const struct FString& DeviceName, TArray<struct FWuMemoryStat> MemoryStats);
	void STATIC_ServerSendDevLog(const struct FWuDevLog& LogToSave);
	void STATIC_ServerSay(const struct FString& Msg);
	void STATIC_ServerResumeNpc(class APawn* InPawn);
	void STATIC_ServerResetWheeledVehicleTransform();
	void STATIC_ServerRequestRestorePlatoonMapMarkerData();
	void STATIC_ServerRequestPlatoonFireSupport(const struct FVector& SpawnAt);
	void STATIC_ServerRequestPlatoonCarePackage(EPlatoonCarePackageType CarePackageType, const struct FVector& DropAt);
	void STATIC_ServerRequestCheckClientTeamsLogTDM(const struct FString& ClientDataStr);
	void STATIC_ServerRequestCheckClientTeamsLog(const struct FTslClientTeamActorValidityCheckData& InCheckData);
	void STATIC_ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void STATIC_ServerRadioMessagePing(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessageNeedAmmo(int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ServerRadioMessageInteraction(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation, const struct FText& InInteractionText, ERadioMessageInteractionType InIteractionType);
	void STATIC_ServerRadioMessageEnemySpotted(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessage(int InMessageIndex);
	void STATIC_ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPauseNpc(class APawn* InPawn);
	void STATIC_ServerPauseAfterTick();
	void STATIC_ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitDestructibleSurfaceInst(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, unsigned char DamageType);
	void STATIC_ServerNextSetViewTarget(bool bIsPrev);
	void STATIC_ServerNextFollowCharacter(bool bIsPrev);
	void STATIC_ServerMoveToVehicleSeat(int SeatIndex);
	void STATIC_ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void STATIC_ServerMapLoadFinishedOnClient();
	void STATIC_ServerLogXboxUnautorizedDevice();
	void STATIC_ServerLeaveVehicle();
	void STATIC_ServerLeaveMatchIntentionally();
	void STATIC_ServerLeaveDebugPC();
	void STATIC_ServerKnockdownNpc(class APawn* InPawn);
	void STATIC_ServerKnockbackNpc(class APawn* InPawn);
	void STATIC_ServerKillNpc(class APawn* InPawn);
	void STATIC_ServerKickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_ServerJoinDebugPC();
	void STATIC_ServerGiveSandboxVehicle(class UClass* InVehicleClass);
	void STATIC_ServerGiveSandboxPower(ESandboxPowerType InPowerType, bool InActivate);
	void STATIC_ServerGiveSandboxItemArray(TArray<struct FName> InItemIdArray);
	void STATIC_ServerGiveSandboxItem(const struct FName& InItemID);
	void STATIC_ServeRestartAirborn();
	void STATIC_ServeReleaseFollow();
	void STATIC_ServerEACClientConnected();
	void STATIC_ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void STATIC_ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_ServerCheatDestroyActors();
	void STATIC_ServerCheat(const struct FString& Msg);
	void STATIC_ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void STATIC_ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_ServerAskDynamicWeatherSync(int DynamicWeatherIndex);
	void STATIC_ServerAIPath(class APawn* InPawn);
	void STATIC_ServerAdmin(const struct FString& AdminCommand);
	void STATIC_Server_UpdateTracerManager(bool bTracerOn);
	void STATIC_Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void STATIC_Server_ToggleTracerManger();
	void STATIC_Server_ShutdownTracerManager();
	void STATIC_Server_SetSwitchToObserverIntentionally(bool bSet);
	void STATIC_Server_SendWheelTrackInfo(const struct FString& Info);
	void STATIC_Server_ReplyToItemRequest(class ATslCharacter* RequestOwner);
	void STATIC_Server_BroadCastMidGameBanMessageForUncheater();
	void STATIC_ServeFollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void STATIC_SaveGearProfile(int ProfileIndex, TArray<struct FName> inArray);
	void STATIC_SaveDistributedLoadout(TArray<struct FName> InItemArray);
	void STATIC_RestartAirborn();
	void STATIC_ResetMinimapSize();
	void STATIC_ResetLBRBHold();
	void STATIC_ResetEmoteWheelPadLBRB();
	void STATIC_ResetAfkKickTimer();
	void STATIC_RequestDestructionData();
	void STATIC_ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_ReliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_ReleaseFollow();
	void STATIC_PrevMinimapSize();
	void STATIC_PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool STATIC_OnWalkingToggleCameraPad();
	void STATIC_OnUpdateProvidedSpawnKitIndex();
	bool STATIC_OnToggleWayPoint();
	void STATIC_OnToggleSpawnKitSelect_FBR();
	bool STATIC_OnToggleMapPad();
	bool STATIC_OnToggleInventoryPad();
	bool STATIC_OnToggleInGameMenuPad();
	bool STATIC_OnToggleExtendedMinimapPad();
	bool STATIC_OnToggleCameraPad();
	void STATIC_OnToggleCamera();
	void STATIC_OnTimerIgnoreClientVehicleMove();
	bool STATIC_OnStopMoveVehicleSeatPad();
	bool STATIC_OnStopHoldThrowableItemWheel();
	bool STATIC_OnStopHoldRotationPadRB();
	bool STATIC_OnStopHoldRotationPadLB();
	bool STATIC_OnStopHoldRotationPad();
	void STATIC_OnStopHoldRadioMessageWheel();
	bool STATIC_OnStopHoldHealItemWheel();
	bool STATIC_OnStartMoveVehicleSeatPad();
	bool STATIC_OnStartHoldThrowableItemWheel();
	bool STATIC_OnStartHoldRotationPadRB();
	bool STATIC_OnStartHoldRotationPadLB();
	bool STATIC_OnStartHoldRotationPad();
	void STATIC_OnStartHoldRadioMessageWheel();
	bool STATIC_OnStartHoldHealItemWheel();
	void STATIC_OnShowFollowButtonPadHold(bool IsPressed);
	void STATIC_OnReplaceAttachmentPadHold(bool IsPressed);
	bool STATIC_OnReplaceAttachmentPad();
	void STATIC_OnRep_TracerManager();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_OnRep_ObserverAuthorityType();
	void STATIC_OnRep_IntentionallySwitchedToObserver();
	void STATIC_OnRep_CameraViewBehaviour();
	void STATIC_OnRep_bUseTPAntibotClient();
	void STATIC_OnRep_bEnableGVoice();
	void STATIC_OnRep_AllowVoiceChatInput();
	void STATIC_OnRep_AfkKickTime();
	bool STATIC_OnReleaseRadioMessagePad();
	bool STATIC_OnReleasedHealItemPad();
	bool STATIC_OnPressRadioMessagePad();
	bool STATIC_OnPressedHealItemPad();
	void STATIC_OnParachuteFollowPadHold(bool IsPressed);
	void STATIC_OnMoveToVehicleSeat(unsigned char Idx);
	void STATIC_OnItemStackCountHandlingMode();
	bool STATIC_OnInteractInVehiclePad();
	bool STATIC_OnInteractGamepad();
	bool STATIC_OnHoldToggleSpawnKitSelectFBRPad();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnFinishInteractionCastOnServer(class UObject* CastObject);
	void STATIC_OnFinishInteractionCastOnClient(class UObject* CastObject);
	void STATIC_OnFBRClassSelectGuidePadHold(bool IsPressed);
	void STATIC_OnExecuteExitCommand();
	void STATIC_OnEmoteAnimation(unsigned char InIndex);
	bool STATIC_OnDrivingToggleCameraPad();
	void STATIC_OnClickedReportButton(EReportCause ReportCause, const struct FString& NetId, ESubjectToReport SubjectToReport, TArray<EReportDetailCauseType> ReportDetailCauseTypeList);
	void STATIC_OnCancelInteractionCast(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnBeginningOptimizationStateChanged(EBeginningState InState);
	void STATIC_OnAutomatedTesting();
	void STATIC_OffItemStackCountHandlingMode();
	void STATIC_ObserverTeleportTo(const struct FVector& Location);
	void STATIC_NextSetViewTarget();
	void STATIC_NextMinimapSize();
	void STATIC_MobileBodiesStatistics();
	void STATIC_LeagueReplaySwitchPlayer(class APlayerState* TslPlayerState, bool bSetPlayerCamera);
	void STATIC_KickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_KickAfkPlayer();
	bool STATIC_IsTeleportModeOn();
	bool STATIC_IsSwitchedToObserverIntentionally();
	bool STATIC_IsSpectatorState();
	bool STATIC_IsSpectating();
	bool STATIC_IsShowFollowButton();
	bool STATIC_IsSameObservingCameraMode(EObserverCameraMode CameraType);
	bool STATIC_IsReplayingKillcam();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsMissionListDisplayable();
	bool STATIC_IsLiveReplaying();
	bool STATIC_IsKillerSpectating();
	bool STATIC_IsItemStackCountHandlingMode();
	bool STATIC_IsHighPing();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsGroggying();
	bool STATIC_IsGamepadHoldProcessing();
	bool STATIC_IsGameInputAllowed();
	bool STATIC_IsClientFreecamFogIntensityControlEnabled();
	bool STATIC_IsCanParachuteFollow();
	bool STATIC_IsCanFollowPlayer(const struct FString& PlayerNam);
	bool STATIC_IsAllowedToSwitchToObserver();
	void STATIC_InitClientSandboxMaster();
	void STATIC_HideTslDebugInfomation();
	void STATIC_HideMatchResult();
	void STATIC_HideEmoteWheel();
	bool STATIC_HasNextSpectateCharacter();
	class UVoiceComponent* STATIC_GetVoiceComponent();
	class ATslCharacter* STATIC_GetViewTargetTslCharacter();
	class ATeam* STATIC_GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslPlayerMatchResultInfos();
	class UTslPawnInputBindingComponent* STATIC_GetTslPawnInputBindingComponent();
	class ATslCharacter* STATIC_GetTslCharacter();
	TArray<class ATslPlayerState*> STATIC_GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int STATIC_GetTeamOverallKillCountAtObserving();
	int STATIC_GetTeamMemberCount();
	int STATIC_GetTeamIdAtObserving();
	class ATslCharacter* STATIC_GetTeamCharacterByPlayerName(const struct FString& PlayerName);
	class ATeam* STATIC_GetTeamByPlayerName(const struct FString& PlayerName);
	struct FRotator STATIC_GetTargetViewRotation();
	TArray<class ATslPlayerState*> STATIC_GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString STATIC_GetSpectatingPlayerName();
	struct FString STATIC_GetSpectatingOrFollowingTslCharacterNetId();
	TArray<struct FName> STATIC_GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> STATIC_GetReplicateTeamMembers();
	TArray<class ATslCharacter*> STATIC_GetReplicateKillerTeamMembers();
	TArray<class AReplicatedCharacterData*> STATIC_GetReplicatedCharacterDataList();
	TArray<class ATslCharacter*> STATIC_GetReplicateCharacters();
	TArray<class ACarePackageItem*> STATIC_GetReplicateCarePackageItems();
	class ATeam* STATIC_GetPlayerTeam();
	float STATIC_GetOtherTotalCastTime();
	float STATIC_GetOtherElapsedCastTime();
	float STATIC_GetOtherDeltaCastTime();
	float STATIC_GetOtherCastTime();
	struct FText STATIC_GetOtherCastingName();
	EObserverCameraMode STATIC_GetObserverCameraMode();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> STATIC_GetKeysForAction(const struct FName& ActionName);
	struct FText STATIC_GetHudDebugText();
	TArray<struct FName> STATIC_GetGearProfile(int ProfileIndex);
	struct FString STATIC_GetFollowName(class ATslCharacter* FollowCharacter);
	class ATeam* STATIC_GetFollowLeaderTeam(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowLeader(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowCharacter(const struct FString& PlayerName);
	TArray<class ATslPlayerState*> STATIC_GetDeadPlayerStates();
	float STATIC_GetCurrentHoldProgressRate();
	TArray<class ATeam*> STATIC_GetClientTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientSquadInTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> STATIC_GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool STATIC_GetCanAllSpectate();
	TArray<struct FTslReportUserInfo> STATIC_GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> STATIC_GetAllPlayerStates();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters(class ATslCharacter* LeaderCharacter);
	int STATIC_GetAliveTeamMemberCount(bool bIncludeQuitter);
	void STATIC_ForceGotoLobbyPopUpHandler(EPopupButtonID ButtonID);
	void STATIC_FollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_EndStreamingPause();
	void STATIC_DumpActorDetailByRaycast();
	void STATIC_DropItem(const struct FString& ItemTypeName);
	void STATIC_DisplayParachuteFollowMessage();
	void STATIC_DeleteMapMarker();
	bool STATIC_CompleteReportKiller();
	void STATIC_CloseKickPlayerWarningPopupAndTerminate(EPopupButtonID ButtonID);
	void STATIC_CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void STATIC_ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedByAntiCheat(const struct FText& KickReason);
	void STATIC_ClientWasKickedAndExitTP(const struct FText& KickReason);
	void STATIC_ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void STATIC_ClientUpdatePlatoonMapMarker(int PlatoonId, bool bOffline, const struct FMapMarker& MapMarker);
	void STATIC_ClientUpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_ClientUpdatePlatoonCommander(int PlatoonId, const struct FTeamMemberIdentification& PlatoonMemberId);
	void STATIC_ClientUpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State, bool bForceUpdate);
	void STATIC_ClientUpdateOptionData();
	void STATIC_ClientUpdateDropPackageAchievement();
	void STATIC_ClientUpdateCollisionResponseToPawn(bool bActive);
	void STATIC_ClientUpdateCarePackageAchievement();
	void STATIC_ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void STATIC_ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void STATIC_ClientTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ClientStopTestCheat();
	void STATIC_ClientStartOnlineGame();
	void STATIC_ClientShowMatchResult();
	void STATIC_ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void STATIC_ClientSetCurSandboxVehicleNumber(int InNumber);
	void STATIC_ClientSetCurSandboxItemNumber(int InNumber);
	void STATIC_ClientSetCanAllSpectate(bool InbCanSpectate);
	void STATIC_ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void STATIC_ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendFakeAIDBNOMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, float InDistanceFromKillerToVictim);
	void STATIC_ClientRestoreSpectatorOnReconnection();
	void STATIC_ClientRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ClientRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_ClientRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_ClientProcessRevive();
	void STATIC_ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void STATIC_ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_ClientOnCharacterRestart();
	void STATIC_ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbSuicide);
	void STATIC_ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void STATIC_ClientNpcCount(int InCount);
	void STATIC_ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void STATIC_ClientNotifySpeedBoost(float Boost);
	void STATIC_ClientNotifyRestrictingPlayArea();
	void STATIC_ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void STATIC_ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void STATIC_ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_ClientNotifyHealAmount_Unreliable(float Heal);
	void STATIC_ClientNotifyHealAmount_Reliable(float Heal);
	void STATIC_ClientNotifyHealAmount(float Heal);
	void STATIC_ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void STATIC_ClientNetworkPingStateReceive(TArray<unsigned char> Data);
	void STATIC_ClientInteractByComponent(class UActorComponent* TargetComponent);
	void STATIC_ClientInteract(class AActor* TargetObject);
	void STATIC_ClientIgnoreClientVehicleMove(bool InIgnore);
	void STATIC_ClientGetDestructiblePenData(TArray<struct FDestructiblePenetrationState> PenState);
	void STATIC_ClientGetDestructibleBreachData(TArray<struct FDestructibleBreachState> BreachState);
	void STATIC_ClientGetDestructibleBeaconData(TArray<struct FGuid> BeaconGUIDs);
	void STATIC_ClientGameStarted(float worldTime);
	void STATIC_ClientForceOverwriteMapMarkerData(const struct FMapMarker& MapMarker);
	void STATIC_ClientEndOnlineGame();
	void STATIC_ClientDynamicWeatherSync(int DynamicWeatherIndex, bool bInitialized, float BlendInTime, float SaturationTime, float BlendOutTime);
	void STATIC_ClientDisplayCarePackage(const struct FVector& InSpawnLocation, const struct FVector& InEndLocation, TArray<struct FVector> InDropItemPos, TArray<int> InPassedCountList);
	void STATIC_ClientDebugVehicleLocation(TArray<struct FDebugVehicleLoation> InVehicleLocArray);
	void STATIC_ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void STATIC_ClientCeremonyRoundResult(int InWinnerTeamId, TArray<int> InWinningTeamIdList, bool bLastRound);
	void STATIC_ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void STATIC_ClientAllowSandboxMaster();
	void STATIC_ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void STATIC_ClientAdminExportStringFile(const struct FString& inString, const struct FString& InFileName);
	void STATIC_ClientAdminCopyString(const struct FString& inString);
	void STATIC_Client_TakeScreenshot();
	void STATIC_Client_ItemRequestReplied(class ATslCharacter* RequestOwner);
	void STATIC_Client_DrawDebugString(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat_ServerSpawnVehicle(int VehicleIndex);
	void STATIC_ChangeMeshCommand(int Parameter, float Time);
	void STATIC_CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool STATIC_CanSeeTerrainThroughFogInTheAir();
	bool STATIC_CanReport();
	void STATIC_BP_Test_SpawnVehicle(int VehicleIndex);
	void STATIC_BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_BEClient(const struct FString& Command);
	void STATIC_AllowVoiceChatInput(bool bAllow);
	void STATIC_Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslPlayerController_Menu
// 0x0000 (0x0FD0 - 0x0FD0)
class ATslPlayerController_Menu : public ATslPlayerController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerController_Menu"));

		return ptr;
	}


	void STATIC_WarningAfkPlayer();
	void STATIC_UpdateHud();
	void STATIC_UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_UnreliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_TracerProjectileModeType(int InMode, int InType);
	void STATIC_TracerBulletModeType(int InMode, int InType);
	void STATIC_ToggleTracerManger();
	void STATIC_ToggleSandboxRedZone();
	void STATIC_ToggleSandboxMasterUI();
	void STATIC_ToggleSandboxInvulnerableEffect();
	void STATIC_ToggleSandboxFly();
	void STATIC_ToggleSandboxCarePackage();
	void STATIC_ToggleReport();
	void STATIC_TogglePopupXBoxXIMAPI();
	void STATIC_ToggleMissionList();
	void STATIC_ToggleInventory();
	void STATIC_ToggleDucking();
	void STATIC_TestUserProfile(float TotalPlayTime);
	void STATIC_Test_SpawnVehicle();
	void STATIC_Test_FirstCharacterKill();
	void STATIC_SwitchToObserverIntentionally();
	void STATIC_Suicide();
	bool STATIC_StopReleaseFollowPad();
	void STATIC_StopReleaseFollow();
	void STATIC_StopRecording();
	bool STATIC_StartReleaseFollowPad();
	void STATIC_StartReleaseFollow();
	void STATIC_SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void STATIC_SimulateInputKey(const struct FKey& Key, bool bPressed);
	void STATIC_ShutdownTracerManager();
	void STATIC_ShowTslDebugInfomation();
	void STATIC_ShowTeamDeathPopup();
	void STATIC_ShowPlayerControllerBindActions_Admin();
	void STATIC_ShowMatchResult();
	void STATIC_ShowInGameMenu();
	void STATIC_ShowGotoLobbyPopUp(EPopupButtonID ButtonID);
	void STATIC_ShowEmoteWheel();
	void STATIC_SetVoiceComponent(class UVoiceComponent* Component);
	void STATIC_SetShowFollowButton(bool bShow);
	void STATIC_SetPingAtViewingTargetPad();
	void STATIC_SetDefaultFOV(float NewFOV);
	void STATIC_SetCraftAllowFilter(const struct FString& CraftAllowFilter);
	void STATIC_SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void STATIC_ServerViewTargetReplicateUpdate();
	void STATIC_ServerTryGainFBRCarePackageItem(class ATslFBRCarePackageItem* InItem);
	void STATIC_ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void STATIC_ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void STATIC_ServerTestCarePackage(int InSpawnCount);
	void STATIC_ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void STATIC_ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void STATIC_ServerSuicide();
	void STATIC_ServerStopOtherPlayersTestCheat();
	void STATIC_ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void STATIC_ServerSteamNetworkStatusLog(int CountPerGame);
	void STATIC_ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void STATIC_ServerStartHoldRotation(const struct FRotator& Current);
	void STATIC_ServerSpawnVehicle();
	void STATIC_ServerSetViewTargetCharacterData(class AReplicatedCharacterData* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetViewTarget(class AActor* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void STATIC_ServerSetSpawnKit(int Index);
	void STATIC_ServerSetShowPlatoonMarker(bool bShow);
	void STATIC_ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void STATIC_ServerSetPlatoonMapMarkerPosition(const struct FVector2D& NewMapMarkerPos, EMarkerType NewMapMarkerType);
	void STATIC_ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void STATIC_ServerSetControlRotation(const struct FRotator& Rotation);
	void STATIC_ServerSetClientOptionData(const struct FOptionSyncData& ClientData);
	void STATIC_ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void STATIC_ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void STATIC_ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendOutPacketLossReport(const struct FOutPacketLossReportForNet& OutPacketLoss);
	void STATIC_ServerSendLogMissionListOpen_Unreliable();
	void STATIC_ServerSendLogMissionListOpen_Reliable();
	void STATIC_ServerSendFreeMemory(const struct FString& DeviceName, TArray<struct FWuMemoryStat> MemoryStats);
	void STATIC_ServerSendDevLog(const struct FWuDevLog& LogToSave);
	void STATIC_ServerSay(const struct FString& Msg);
	void STATIC_ServerResumeNpc(class APawn* InPawn);
	void STATIC_ServerResetWheeledVehicleTransform();
	void STATIC_ServerRequestRestorePlatoonMapMarkerData();
	void STATIC_ServerRequestPlatoonFireSupport(const struct FVector& SpawnAt);
	void STATIC_ServerRequestPlatoonCarePackage(EPlatoonCarePackageType CarePackageType, const struct FVector& DropAt);
	void STATIC_ServerRequestCheckClientTeamsLogTDM(const struct FString& ClientDataStr);
	void STATIC_ServerRequestCheckClientTeamsLog(const struct FTslClientTeamActorValidityCheckData& InCheckData);
	void STATIC_ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void STATIC_ServerRadioMessagePing(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessageNeedAmmo(int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ServerRadioMessageInteraction(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation, const struct FText& InInteractionText, ERadioMessageInteractionType InIteractionType);
	void STATIC_ServerRadioMessageEnemySpotted(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessage(int InMessageIndex);
	void STATIC_ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPauseNpc(class APawn* InPawn);
	void STATIC_ServerPauseAfterTick();
	void STATIC_ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitDestructibleSurfaceInst(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, unsigned char DamageType);
	void STATIC_ServerNextSetViewTarget(bool bIsPrev);
	void STATIC_ServerNextFollowCharacter(bool bIsPrev);
	void STATIC_ServerMoveToVehicleSeat(int SeatIndex);
	void STATIC_ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void STATIC_ServerMapLoadFinishedOnClient();
	void STATIC_ServerLogXboxUnautorizedDevice();
	void STATIC_ServerLeaveVehicle();
	void STATIC_ServerLeaveMatchIntentionally();
	void STATIC_ServerLeaveDebugPC();
	void STATIC_ServerKnockdownNpc(class APawn* InPawn);
	void STATIC_ServerKnockbackNpc(class APawn* InPawn);
	void STATIC_ServerKillNpc(class APawn* InPawn);
	void STATIC_ServerKickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_ServerJoinDebugPC();
	void STATIC_ServerGiveSandboxVehicle(class UClass* InVehicleClass);
	void STATIC_ServerGiveSandboxPower(ESandboxPowerType InPowerType, bool InActivate);
	void STATIC_ServerGiveSandboxItemArray(TArray<struct FName> InItemIdArray);
	void STATIC_ServerGiveSandboxItem(const struct FName& InItemID);
	void STATIC_ServeRestartAirborn();
	void STATIC_ServeReleaseFollow();
	void STATIC_ServerEACClientConnected();
	void STATIC_ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void STATIC_ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_ServerCheatDestroyActors();
	void STATIC_ServerCheat(const struct FString& Msg);
	void STATIC_ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void STATIC_ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_ServerAskDynamicWeatherSync(int DynamicWeatherIndex);
	void STATIC_ServerAIPath(class APawn* InPawn);
	void STATIC_ServerAdmin(const struct FString& AdminCommand);
	void STATIC_Server_UpdateTracerManager(bool bTracerOn);
	void STATIC_Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void STATIC_Server_ToggleTracerManger();
	void STATIC_Server_ShutdownTracerManager();
	void STATIC_Server_SetSwitchToObserverIntentionally(bool bSet);
	void STATIC_Server_SendWheelTrackInfo(const struct FString& Info);
	void STATIC_Server_ReplyToItemRequest(class ATslCharacter* RequestOwner);
	void STATIC_Server_BroadCastMidGameBanMessageForUncheater();
	void STATIC_ServeFollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void STATIC_SaveGearProfile(int ProfileIndex, TArray<struct FName> inArray);
	void STATIC_SaveDistributedLoadout(TArray<struct FName> InItemArray);
	void STATIC_RestartAirborn();
	void STATIC_ResetMinimapSize();
	void STATIC_ResetLBRBHold();
	void STATIC_ResetEmoteWheelPadLBRB();
	void STATIC_ResetAfkKickTimer();
	void STATIC_RequestDestructionData();
	void STATIC_ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_ReliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_ReleaseFollow();
	void STATIC_PrevMinimapSize();
	void STATIC_PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool STATIC_OnWalkingToggleCameraPad();
	void STATIC_OnUpdateProvidedSpawnKitIndex();
	bool STATIC_OnToggleWayPoint();
	void STATIC_OnToggleSpawnKitSelect_FBR();
	bool STATIC_OnToggleMapPad();
	bool STATIC_OnToggleInventoryPad();
	bool STATIC_OnToggleInGameMenuPad();
	bool STATIC_OnToggleExtendedMinimapPad();
	bool STATIC_OnToggleCameraPad();
	void STATIC_OnToggleCamera();
	void STATIC_OnTimerIgnoreClientVehicleMove();
	bool STATIC_OnStopMoveVehicleSeatPad();
	bool STATIC_OnStopHoldThrowableItemWheel();
	bool STATIC_OnStopHoldRotationPadRB();
	bool STATIC_OnStopHoldRotationPadLB();
	bool STATIC_OnStopHoldRotationPad();
	void STATIC_OnStopHoldRadioMessageWheel();
	bool STATIC_OnStopHoldHealItemWheel();
	bool STATIC_OnStartMoveVehicleSeatPad();
	bool STATIC_OnStartHoldThrowableItemWheel();
	bool STATIC_OnStartHoldRotationPadRB();
	bool STATIC_OnStartHoldRotationPadLB();
	bool STATIC_OnStartHoldRotationPad();
	void STATIC_OnStartHoldRadioMessageWheel();
	bool STATIC_OnStartHoldHealItemWheel();
	void STATIC_OnShowFollowButtonPadHold(bool IsPressed);
	void STATIC_OnReplaceAttachmentPadHold(bool IsPressed);
	bool STATIC_OnReplaceAttachmentPad();
	void STATIC_OnRep_TracerManager();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_OnRep_ObserverAuthorityType();
	void STATIC_OnRep_IntentionallySwitchedToObserver();
	void STATIC_OnRep_CameraViewBehaviour();
	void STATIC_OnRep_bUseTPAntibotClient();
	void STATIC_OnRep_bEnableGVoice();
	void STATIC_OnRep_AllowVoiceChatInput();
	void STATIC_OnRep_AfkKickTime();
	bool STATIC_OnReleaseRadioMessagePad();
	bool STATIC_OnReleasedHealItemPad();
	bool STATIC_OnPressRadioMessagePad();
	bool STATIC_OnPressedHealItemPad();
	void STATIC_OnParachuteFollowPadHold(bool IsPressed);
	void STATIC_OnMoveToVehicleSeat(unsigned char Idx);
	void STATIC_OnItemStackCountHandlingMode();
	bool STATIC_OnInteractInVehiclePad();
	bool STATIC_OnInteractGamepad();
	bool STATIC_OnHoldToggleSpawnKitSelectFBRPad();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnFinishInteractionCastOnServer(class UObject* CastObject);
	void STATIC_OnFinishInteractionCastOnClient(class UObject* CastObject);
	void STATIC_OnFBRClassSelectGuidePadHold(bool IsPressed);
	void STATIC_OnExecuteExitCommand();
	void STATIC_OnEmoteAnimation(unsigned char InIndex);
	bool STATIC_OnDrivingToggleCameraPad();
	void STATIC_OnClickedReportButton(EReportCause ReportCause, const struct FString& NetId, ESubjectToReport SubjectToReport, TArray<EReportDetailCauseType> ReportDetailCauseTypeList);
	void STATIC_OnCancelInteractionCast(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnBeginningOptimizationStateChanged(EBeginningState InState);
	void STATIC_OnAutomatedTesting();
	void STATIC_OffItemStackCountHandlingMode();
	void STATIC_ObserverTeleportTo(const struct FVector& Location);
	void STATIC_NextSetViewTarget();
	void STATIC_NextMinimapSize();
	void STATIC_MobileBodiesStatistics();
	void STATIC_LeagueReplaySwitchPlayer(class APlayerState* TslPlayerState, bool bSetPlayerCamera);
	void STATIC_KickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_KickAfkPlayer();
	bool STATIC_IsTeleportModeOn();
	bool STATIC_IsSwitchedToObserverIntentionally();
	bool STATIC_IsSpectatorState();
	bool STATIC_IsSpectating();
	bool STATIC_IsShowFollowButton();
	bool STATIC_IsSameObservingCameraMode(EObserverCameraMode CameraType);
	bool STATIC_IsReplayingKillcam();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsMissionListDisplayable();
	bool STATIC_IsLiveReplaying();
	bool STATIC_IsKillerSpectating();
	bool STATIC_IsItemStackCountHandlingMode();
	bool STATIC_IsHighPing();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsGroggying();
	bool STATIC_IsGamepadHoldProcessing();
	bool STATIC_IsGameInputAllowed();
	bool STATIC_IsClientFreecamFogIntensityControlEnabled();
	bool STATIC_IsCanParachuteFollow();
	bool STATIC_IsCanFollowPlayer(const struct FString& PlayerNam);
	bool STATIC_IsAllowedToSwitchToObserver();
	void STATIC_InitClientSandboxMaster();
	void STATIC_HideTslDebugInfomation();
	void STATIC_HideMatchResult();
	void STATIC_HideEmoteWheel();
	bool STATIC_HasNextSpectateCharacter();
	class UVoiceComponent* STATIC_GetVoiceComponent();
	class ATslCharacter* STATIC_GetViewTargetTslCharacter();
	class ATeam* STATIC_GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslPlayerMatchResultInfos();
	class UTslPawnInputBindingComponent* STATIC_GetTslPawnInputBindingComponent();
	class ATslCharacter* STATIC_GetTslCharacter();
	TArray<class ATslPlayerState*> STATIC_GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int STATIC_GetTeamOverallKillCountAtObserving();
	int STATIC_GetTeamMemberCount();
	int STATIC_GetTeamIdAtObserving();
	class ATslCharacter* STATIC_GetTeamCharacterByPlayerName(const struct FString& PlayerName);
	class ATeam* STATIC_GetTeamByPlayerName(const struct FString& PlayerName);
	struct FRotator STATIC_GetTargetViewRotation();
	TArray<class ATslPlayerState*> STATIC_GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString STATIC_GetSpectatingPlayerName();
	struct FString STATIC_GetSpectatingOrFollowingTslCharacterNetId();
	TArray<struct FName> STATIC_GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> STATIC_GetReplicateTeamMembers();
	TArray<class ATslCharacter*> STATIC_GetReplicateKillerTeamMembers();
	TArray<class AReplicatedCharacterData*> STATIC_GetReplicatedCharacterDataList();
	TArray<class ATslCharacter*> STATIC_GetReplicateCharacters();
	TArray<class ACarePackageItem*> STATIC_GetReplicateCarePackageItems();
	class ATeam* STATIC_GetPlayerTeam();
	float STATIC_GetOtherTotalCastTime();
	float STATIC_GetOtherElapsedCastTime();
	float STATIC_GetOtherDeltaCastTime();
	float STATIC_GetOtherCastTime();
	struct FText STATIC_GetOtherCastingName();
	EObserverCameraMode STATIC_GetObserverCameraMode();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> STATIC_GetKeysForAction(const struct FName& ActionName);
	struct FText STATIC_GetHudDebugText();
	TArray<struct FName> STATIC_GetGearProfile(int ProfileIndex);
	struct FString STATIC_GetFollowName(class ATslCharacter* FollowCharacter);
	class ATeam* STATIC_GetFollowLeaderTeam(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowLeader(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowCharacter(const struct FString& PlayerName);
	TArray<class ATslPlayerState*> STATIC_GetDeadPlayerStates();
	float STATIC_GetCurrentHoldProgressRate();
	TArray<class ATeam*> STATIC_GetClientTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientSquadInTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> STATIC_GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool STATIC_GetCanAllSpectate();
	TArray<struct FTslReportUserInfo> STATIC_GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> STATIC_GetAllPlayerStates();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters(class ATslCharacter* LeaderCharacter);
	int STATIC_GetAliveTeamMemberCount(bool bIncludeQuitter);
	void STATIC_ForceGotoLobbyPopUpHandler(EPopupButtonID ButtonID);
	void STATIC_FollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_EndStreamingPause();
	void STATIC_DumpActorDetailByRaycast();
	void STATIC_DropItem(const struct FString& ItemTypeName);
	void STATIC_DisplayParachuteFollowMessage();
	void STATIC_DeleteMapMarker();
	bool STATIC_CompleteReportKiller();
	void STATIC_CloseKickPlayerWarningPopupAndTerminate(EPopupButtonID ButtonID);
	void STATIC_CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void STATIC_ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedByAntiCheat(const struct FText& KickReason);
	void STATIC_ClientWasKickedAndExitTP(const struct FText& KickReason);
	void STATIC_ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void STATIC_ClientUpdatePlatoonMapMarker(int PlatoonId, bool bOffline, const struct FMapMarker& MapMarker);
	void STATIC_ClientUpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_ClientUpdatePlatoonCommander(int PlatoonId, const struct FTeamMemberIdentification& PlatoonMemberId);
	void STATIC_ClientUpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State, bool bForceUpdate);
	void STATIC_ClientUpdateOptionData();
	void STATIC_ClientUpdateDropPackageAchievement();
	void STATIC_ClientUpdateCollisionResponseToPawn(bool bActive);
	void STATIC_ClientUpdateCarePackageAchievement();
	void STATIC_ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void STATIC_ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void STATIC_ClientTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ClientStopTestCheat();
	void STATIC_ClientStartOnlineGame();
	void STATIC_ClientShowMatchResult();
	void STATIC_ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void STATIC_ClientSetCurSandboxVehicleNumber(int InNumber);
	void STATIC_ClientSetCurSandboxItemNumber(int InNumber);
	void STATIC_ClientSetCanAllSpectate(bool InbCanSpectate);
	void STATIC_ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void STATIC_ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendFakeAIDBNOMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, float InDistanceFromKillerToVictim);
	void STATIC_ClientRestoreSpectatorOnReconnection();
	void STATIC_ClientRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ClientRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_ClientRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_ClientProcessRevive();
	void STATIC_ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void STATIC_ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_ClientOnCharacterRestart();
	void STATIC_ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbSuicide);
	void STATIC_ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void STATIC_ClientNpcCount(int InCount);
	void STATIC_ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void STATIC_ClientNotifySpeedBoost(float Boost);
	void STATIC_ClientNotifyRestrictingPlayArea();
	void STATIC_ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void STATIC_ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void STATIC_ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_ClientNotifyHealAmount_Unreliable(float Heal);
	void STATIC_ClientNotifyHealAmount_Reliable(float Heal);
	void STATIC_ClientNotifyHealAmount(float Heal);
	void STATIC_ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void STATIC_ClientNetworkPingStateReceive(TArray<unsigned char> Data);
	void STATIC_ClientInteractByComponent(class UActorComponent* TargetComponent);
	void STATIC_ClientInteract(class AActor* TargetObject);
	void STATIC_ClientIgnoreClientVehicleMove(bool InIgnore);
	void STATIC_ClientGetDestructiblePenData(TArray<struct FDestructiblePenetrationState> PenState);
	void STATIC_ClientGetDestructibleBreachData(TArray<struct FDestructibleBreachState> BreachState);
	void STATIC_ClientGetDestructibleBeaconData(TArray<struct FGuid> BeaconGUIDs);
	void STATIC_ClientGameStarted(float worldTime);
	void STATIC_ClientForceOverwriteMapMarkerData(const struct FMapMarker& MapMarker);
	void STATIC_ClientEndOnlineGame();
	void STATIC_ClientDynamicWeatherSync(int DynamicWeatherIndex, bool bInitialized, float BlendInTime, float SaturationTime, float BlendOutTime);
	void STATIC_ClientDisplayCarePackage(const struct FVector& InSpawnLocation, const struct FVector& InEndLocation, TArray<struct FVector> InDropItemPos, TArray<int> InPassedCountList);
	void STATIC_ClientDebugVehicleLocation(TArray<struct FDebugVehicleLoation> InVehicleLocArray);
	void STATIC_ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void STATIC_ClientCeremonyRoundResult(int InWinnerTeamId, TArray<int> InWinningTeamIdList, bool bLastRound);
	void STATIC_ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void STATIC_ClientAllowSandboxMaster();
	void STATIC_ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void STATIC_ClientAdminExportStringFile(const struct FString& inString, const struct FString& InFileName);
	void STATIC_ClientAdminCopyString(const struct FString& inString);
	void STATIC_Client_TakeScreenshot();
	void STATIC_Client_ItemRequestReplied(class ATslCharacter* RequestOwner);
	void STATIC_Client_DrawDebugString(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat_ServerSpawnVehicle(int VehicleIndex);
	void STATIC_ChangeMeshCommand(int Parameter, float Time);
	void STATIC_CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool STATIC_CanSeeTerrainThroughFogInTheAir();
	bool STATIC_CanReport();
	void STATIC_BP_Test_SpawnVehicle(int VehicleIndex);
	void STATIC_BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_BEClient(const struct FString& Command);
	void STATIC_AllowVoiceChatInput(bool bAllow);
	void STATIC_Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslTrainingPlayerController
// 0x0000 (0x0FD0 - 0x0FD0)
class ATslTrainingPlayerController : public ATslPlayerController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrainingPlayerController"));

		return ptr;
	}


	void STATIC_WarningAfkPlayer();
	void STATIC_UpdateHud();
	void STATIC_UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_UnreliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_TracerProjectileModeType(int InMode, int InType);
	void STATIC_TracerBulletModeType(int InMode, int InType);
	void STATIC_ToggleTracerManger();
	void STATIC_ToggleSandboxRedZone();
	void STATIC_ToggleSandboxMasterUI();
	void STATIC_ToggleSandboxInvulnerableEffect();
	void STATIC_ToggleSandboxFly();
	void STATIC_ToggleSandboxCarePackage();
	void STATIC_ToggleReport();
	void STATIC_TogglePopupXBoxXIMAPI();
	void STATIC_ToggleMissionList();
	void STATIC_ToggleInventory();
	void STATIC_ToggleDucking();
	void STATIC_TestUserProfile(float TotalPlayTime);
	void STATIC_Test_SpawnVehicle();
	void STATIC_Test_FirstCharacterKill();
	void STATIC_SwitchToObserverIntentionally();
	void STATIC_Suicide();
	bool STATIC_StopReleaseFollowPad();
	void STATIC_StopReleaseFollow();
	void STATIC_StopRecording();
	bool STATIC_StartReleaseFollowPad();
	void STATIC_StartReleaseFollow();
	void STATIC_SpectateCharacterOnDeath(const struct FString& InViewTargetKillerUniqueId, int ViewTargetTeamId, const struct FVector& InLastDeathLocation);
	void STATIC_SimulateInputKey(const struct FKey& Key, bool bPressed);
	void STATIC_ShutdownTracerManager();
	void STATIC_ShowTslDebugInfomation();
	void STATIC_ShowTeamDeathPopup();
	void STATIC_ShowPlayerControllerBindActions_Admin();
	void STATIC_ShowMatchResult();
	void STATIC_ShowInGameMenu();
	void STATIC_ShowGotoLobbyPopUp(EPopupButtonID ButtonID);
	void STATIC_ShowEmoteWheel();
	void STATIC_SetVoiceComponent(class UVoiceComponent* Component);
	void STATIC_SetShowFollowButton(bool bShow);
	void STATIC_SetPingAtViewingTargetPad();
	void STATIC_SetDefaultFOV(float NewFOV);
	void STATIC_SetCraftAllowFilter(const struct FString& CraftAllowFilter);
	void STATIC_SetCanSeeTerrainThroughFogInTheAir(bool bCanSee);
	void STATIC_ServerViewTargetReplicateUpdate();
	void STATIC_ServerTryGainFBRCarePackageItem(class ATslFBRCarePackageItem* InItem);
	void STATIC_ServerTestSweep(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InBoxExtent);
	void STATIC_ServerTestRaycast(bool bInComplex, const struct FVector& InStart, const struct FVector& InEnd);
	void STATIC_ServerTestCarePackage(int InSpawnCount);
	void STATIC_ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings, uint32_t Seed, uint32_t ov);
	void STATIC_ServerSyncReactionDoorComponent(class UTslReactionDoorComponent* InComp, bool bIsBrokenTop, bool bIsBrokenCenter, bool bIsBrokenBottom);
	void STATIC_ServerSuicide();
	void STATIC_ServerStopOtherPlayersTestCheat();
	void STATIC_ServerStopHoldRotation(const struct FRotator& DeltaRotation, bool bUseInterp);
	void STATIC_ServerSteamNetworkStatusLog(int CountPerGame);
	void STATIC_ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void STATIC_ServerStartHoldRotation(const struct FRotator& Current);
	void STATIC_ServerSpawnVehicle();
	void STATIC_ServerSetViewTargetCharacterData(class AReplicatedCharacterData* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetViewTarget(class AActor* NewViewTarget, EObserverCameraMode ObserverCameraMode);
	void STATIC_ServerSetThirdPerson(bool bNewThirdPerson, uint32_t Seed, uint32_t hv);
	void STATIC_ServerSetSpawnKit(int Index);
	void STATIC_ServerSetShowPlatoonMarker(bool bShow);
	void STATIC_ServerSetRankingInfos(TArray<struct FRankingInfo> RankingInfos, TArray<struct FPointInfo> PointInfos, int KillPoint);
	void STATIC_ServerSetPlatoonMapMarkerPosition(const struct FVector2D& NewMapMarkerPos, EMarkerType NewMapMarkerType);
	void STATIC_ServerSetIsReviving(bool InbIsReviving, int A, int B, const struct FVector& L);
	void STATIC_ServerSetControlRotation(const struct FRotator& Rotation);
	void STATIC_ServerSetClientOptionData(const struct FOptionSyncData& ClientData);
	void STATIC_ServerSetClientFps(float Fps, int MinFPS, int MaxFPS, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void STATIC_ServerSetAccumViewRotation(const struct FVector_NetQuantizeNormal& InAccumViewRotation);
	void STATIC_ServerSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ServerSendOutPacketLossReport(const struct FOutPacketLossReportForNet& OutPacketLoss);
	void STATIC_ServerSendLogMissionListOpen_Unreliable();
	void STATIC_ServerSendLogMissionListOpen_Reliable();
	void STATIC_ServerSendFreeMemory(const struct FString& DeviceName, TArray<struct FWuMemoryStat> MemoryStats);
	void STATIC_ServerSendDevLog(const struct FWuDevLog& LogToSave);
	void STATIC_ServerSay(const struct FString& Msg);
	void STATIC_ServerResumeNpc(class APawn* InPawn);
	void STATIC_ServerResetWheeledVehicleTransform();
	void STATIC_ServerRequestRestorePlatoonMapMarkerData();
	void STATIC_ServerRequestPlatoonFireSupport(const struct FVector& SpawnAt);
	void STATIC_ServerRequestPlatoonCarePackage(EPlatoonCarePackageType CarePackageType, const struct FVector& DropAt);
	void STATIC_ServerRequestCheckClientTeamsLogTDM(const struct FString& ClientDataStr);
	void STATIC_ServerRequestCheckClientTeamsLog(const struct FTslClientTeamActorValidityCheckData& InCheckData);
	void STATIC_ServerRemoveAllVehicleButSelected(TArray<class APawn*> InVehiclePawnArray);
	void STATIC_ServerRadioMessagePing(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessageNeedAmmo(int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ServerRadioMessageInteraction(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation, const struct FText& InInteractionText, ERadioMessageInteractionType InIteractionType);
	void STATIC_ServerRadioMessageEnemySpotted(int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ServerRadioMessage(int InMessageIndex);
	void STATIC_ServerPickUpItemFromPackage(class UItem* Item, class AItemPackage* Package, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPickUpDroppedItem(class UObject* DroppedItemObject, uint32_t Checksum, const struct FName& TargetContainer, const struct FString& Options);
	void STATIC_ServerPauseNpc(class APawn* InPawn);
	void STATIC_ServerPauseAfterTick();
	void STATIC_ServerOtherPlayersTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ServerNotifyHitToGlassWindowInst(class AActor* DamageCauser, class UTslInstancedGlassWindowComponent* GlassWindowInstComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitToGlassWindow(class AActor* DamageCauser, class UTslGlassWindowComponent* GlassWindowComponent, const struct FHitResult& Hit);
	void STATIC_ServerNotifyHitDestructibleSurfaceInst(class UPrimitiveComponent* HitComponent, const struct FVector_NetQuantize& ImpactPoint, const struct FVector_NetQuantizeNormal& ImpactDirection, int16_t InstanceIndex, unsigned char DamageType);
	void STATIC_ServerNextSetViewTarget(bool bIsPrev);
	void STATIC_ServerNextFollowCharacter(bool bIsPrev);
	void STATIC_ServerMoveToVehicleSeat(int SeatIndex);
	void STATIC_ServerMoveNpc(class APawn* InPawn, const struct FVector& InLoc);
	void STATIC_ServerMapLoadFinishedOnClient();
	void STATIC_ServerLogXboxUnautorizedDevice();
	void STATIC_ServerLeaveVehicle();
	void STATIC_ServerLeaveMatchIntentionally();
	void STATIC_ServerLeaveDebugPC();
	void STATIC_ServerKnockdownNpc(class APawn* InPawn);
	void STATIC_ServerKnockbackNpc(class APawn* InPawn);
	void STATIC_ServerKillNpc(class APawn* InPawn);
	void STATIC_ServerKickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_ServerKickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_ServerJoinDebugPC();
	void STATIC_ServerGiveSandboxVehicle(class UClass* InVehicleClass);
	void STATIC_ServerGiveSandboxPower(ESandboxPowerType InPowerType, bool InActivate);
	void STATIC_ServerGiveSandboxItemArray(TArray<struct FName> InItemIdArray);
	void STATIC_ServerGiveSandboxItem(const struct FName& InItemID);
	void STATIC_ServeRestartAirborn();
	void STATIC_ServeReleaseFollow();
	void STATIC_ServerEACClientConnected();
	void STATIC_ServerCollectActorNames(const struct FName& InClassName, const struct FName& InItemName, float InCullDistance, const struct FVector& InCenterLocation);
	void STATIC_ServerCheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_ServerCheatDestroyActors();
	void STATIC_ServerCheat(const struct FString& Msg);
	void STATIC_ServerCancelInteraction(class UActorComponent* InteractionComponent);
	void STATIC_ServerBroadCastUpdateCameraInfo(bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ServerBEServerCommand(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_ServerAskDynamicWeatherSync(int DynamicWeatherIndex);
	void STATIC_ServerAIPath(class APawn* InPawn);
	void STATIC_ServerAdmin(const struct FString& AdminCommand);
	void STATIC_Server_UpdateTracerManager(bool bTracerOn);
	void STATIC_Server_TracerManagerAddInstance(const struct FTracerSimulationData& InTracerData);
	void STATIC_Server_ToggleTracerManger();
	void STATIC_Server_ShutdownTracerManager();
	void STATIC_Server_SetSwitchToObserverIntentionally(bool bSet);
	void STATIC_Server_SendWheelTrackInfo(const struct FString& Info);
	void STATIC_Server_ReplyToItemRequest(class ATslCharacter* RequestOwner);
	void STATIC_Server_BroadCastMidGameBanMessageForUncheater();
	void STATIC_ServeFollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_SendUniqueIdToServerLog(const struct FString& ClientUniqueIdString);
	void STATIC_SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_SaveStringDistributedLoadout(TArray<struct FTslItemStringClass> InItemStringArray);
	void STATIC_SaveGearProfile(int ProfileIndex, TArray<struct FName> inArray);
	void STATIC_SaveDistributedLoadout(TArray<struct FName> InItemArray);
	void STATIC_RestartAirborn();
	void STATIC_ResetMinimapSize();
	void STATIC_ResetLBRBHold();
	void STATIC_ResetEmoteWheelPadLBRB();
	void STATIC_ResetAfkKickTimer();
	void STATIC_RequestDestructionData();
	void STATIC_ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void STATIC_ReliablePing(int SeqID, int64_t DateTimeTick);
	void STATIC_ReleaseFollow();
	void STATIC_PrevMinimapSize();
	void STATIC_PawnTeleportTo(const struct FVector2D& Pos, bool bInServerLocation);
	bool STATIC_OnWalkingToggleCameraPad();
	void STATIC_OnUpdateProvidedSpawnKitIndex();
	bool STATIC_OnToggleWayPoint();
	void STATIC_OnToggleSpawnKitSelect_FBR();
	bool STATIC_OnToggleMapPad();
	bool STATIC_OnToggleInventoryPad();
	bool STATIC_OnToggleInGameMenuPad();
	bool STATIC_OnToggleExtendedMinimapPad();
	bool STATIC_OnToggleCameraPad();
	void STATIC_OnToggleCamera();
	void STATIC_OnTimerIgnoreClientVehicleMove();
	bool STATIC_OnStopMoveVehicleSeatPad();
	bool STATIC_OnStopHoldThrowableItemWheel();
	bool STATIC_OnStopHoldRotationPadRB();
	bool STATIC_OnStopHoldRotationPadLB();
	bool STATIC_OnStopHoldRotationPad();
	void STATIC_OnStopHoldRadioMessageWheel();
	bool STATIC_OnStopHoldHealItemWheel();
	bool STATIC_OnStartMoveVehicleSeatPad();
	bool STATIC_OnStartHoldThrowableItemWheel();
	bool STATIC_OnStartHoldRotationPadRB();
	bool STATIC_OnStartHoldRotationPadLB();
	bool STATIC_OnStartHoldRotationPad();
	void STATIC_OnStartHoldRadioMessageWheel();
	bool STATIC_OnStartHoldHealItemWheel();
	void STATIC_OnShowFollowButtonPadHold(bool IsPressed);
	void STATIC_OnReplaceAttachmentPadHold(bool IsPressed);
	bool STATIC_OnReplaceAttachmentPad();
	void STATIC_OnRep_TracerManager();
	void STATIC_OnRep_Team();
	void STATIC_OnRep_TargetViewRotation();
	void STATIC_OnRep_ObserverAuthorityType();
	void STATIC_OnRep_IntentionallySwitchedToObserver();
	void STATIC_OnRep_CameraViewBehaviour();
	void STATIC_OnRep_bUseTPAntibotClient();
	void STATIC_OnRep_bEnableGVoice();
	void STATIC_OnRep_AllowVoiceChatInput();
	void STATIC_OnRep_AfkKickTime();
	bool STATIC_OnReleaseRadioMessagePad();
	bool STATIC_OnReleasedHealItemPad();
	bool STATIC_OnPressRadioMessagePad();
	bool STATIC_OnPressedHealItemPad();
	void STATIC_OnParachuteFollowPadHold(bool IsPressed);
	void STATIC_OnMoveToVehicleSeat(unsigned char Idx);
	void STATIC_OnItemStackCountHandlingMode();
	bool STATIC_OnInteractInVehiclePad();
	bool STATIC_OnInteractGamepad();
	bool STATIC_OnHoldToggleSpawnKitSelectFBRPad();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnFinishInteractionCastOnServer(class UObject* CastObject);
	void STATIC_OnFinishInteractionCastOnClient(class UObject* CastObject);
	void STATIC_OnFBRClassSelectGuidePadHold(bool IsPressed);
	void STATIC_OnExecuteExitCommand();
	void STATIC_OnEmoteAnimation(unsigned char InIndex);
	bool STATIC_OnDrivingToggleCameraPad();
	void STATIC_OnClickedReportButton(EReportCause ReportCause, const struct FString& NetId, ESubjectToReport SubjectToReport, TArray<EReportDetailCauseType> ReportDetailCauseTypeList);
	void STATIC_OnCancelInteractionCast(class UObject* CastObject, ECastCancelReason CancelReason);
	void STATIC_OnBeginningOptimizationStateChanged(EBeginningState InState);
	void STATIC_OnAutomatedTesting();
	void STATIC_OffItemStackCountHandlingMode();
	void STATIC_ObserverTeleportTo(const struct FVector& Location);
	void STATIC_NextSetViewTarget();
	void STATIC_NextMinimapSize();
	void STATIC_MobileBodiesStatistics();
	void STATIC_LeagueReplaySwitchPlayer(class APlayerState* TslPlayerState, bool bSetPlayerCamera);
	void STATIC_KickCharacterByNetId(const struct FString& NetId, const struct FText& Reason);
	void STATIC_KickCharacter(class ATslCharacter* TslCharacter, const struct FText& Reason);
	void STATIC_KickAfkPlayer();
	bool STATIC_IsTeleportModeOn();
	bool STATIC_IsSwitchedToObserverIntentionally();
	bool STATIC_IsSpectatorState();
	bool STATIC_IsSpectating();
	bool STATIC_IsShowFollowButton();
	bool STATIC_IsSameObservingCameraMode(EObserverCameraMode CameraType);
	bool STATIC_IsReplayingKillcam();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsMissionListDisplayable();
	bool STATIC_IsLiveReplaying();
	bool STATIC_IsKillerSpectating();
	bool STATIC_IsItemStackCountHandlingMode();
	bool STATIC_IsHighPing();
	bool STATIC_IsHighlightPlaying();
	bool STATIC_IsHighlightFadeOut();
	bool STATIC_IsGroggying();
	bool STATIC_IsGamepadHoldProcessing();
	bool STATIC_IsGameInputAllowed();
	bool STATIC_IsClientFreecamFogIntensityControlEnabled();
	bool STATIC_IsCanParachuteFollow();
	bool STATIC_IsCanFollowPlayer(const struct FString& PlayerNam);
	bool STATIC_IsAllowedToSwitchToObserver();
	void STATIC_InitClientSandboxMaster();
	void STATIC_HideTslDebugInfomation();
	void STATIC_HideMatchResult();
	void STATIC_HideEmoteWheel();
	bool STATIC_HasNextSpectateCharacter();
	class UVoiceComponent* STATIC_GetVoiceComponent();
	class ATslCharacter* STATIC_GetViewTargetTslCharacter();
	class ATeam* STATIC_GetViewTargetTeam();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslPlayerMatchResultInfos();
	class UTslPawnInputBindingComponent* STATIC_GetTslPawnInputBindingComponent();
	class ATslCharacter* STATIC_GetTslCharacter();
	TArray<class ATslPlayerState*> STATIC_GetTeamPlayerStates(class ATslCharacter* TargetCharacter);
	int STATIC_GetTeamOverallKillCountAtObserving();
	int STATIC_GetTeamMemberCount();
	int STATIC_GetTeamIdAtObserving();
	class ATslCharacter* STATIC_GetTeamCharacterByPlayerName(const struct FString& PlayerName);
	class ATeam* STATIC_GetTeamByPlayerName(const struct FString& PlayerName);
	struct FRotator STATIC_GetTargetViewRotation();
	TArray<class ATslPlayerState*> STATIC_GetSquadPlayerStates(class ATslCharacter* TargetCharacter);
	struct FString STATIC_GetSpectatingPlayerName();
	struct FString STATIC_GetSpectatingOrFollowingTslCharacterNetId();
	TArray<struct FName> STATIC_GetSavedDistributedLoadout();
	TArray<class ATslCharacter*> STATIC_GetReplicateTeamMembers();
	TArray<class ATslCharacter*> STATIC_GetReplicateKillerTeamMembers();
	TArray<class AReplicatedCharacterData*> STATIC_GetReplicatedCharacterDataList();
	TArray<class ATslCharacter*> STATIC_GetReplicateCharacters();
	TArray<class ACarePackageItem*> STATIC_GetReplicateCarePackageItems();
	class ATeam* STATIC_GetPlayerTeam();
	float STATIC_GetOtherTotalCastTime();
	float STATIC_GetOtherElapsedCastTime();
	float STATIC_GetOtherDeltaCastTime();
	float STATIC_GetOtherCastTime();
	struct FText STATIC_GetOtherCastingName();
	EObserverCameraMode STATIC_GetObserverCameraMode();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	TArray<struct FInputActionKeyMapping> STATIC_GetKeysForAction(const struct FName& ActionName);
	struct FText STATIC_GetHudDebugText();
	TArray<struct FName> STATIC_GetGearProfile(int ProfileIndex);
	struct FString STATIC_GetFollowName(class ATslCharacter* FollowCharacter);
	class ATeam* STATIC_GetFollowLeaderTeam(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowLeader(const struct FString& PlayerName);
	class ATslCharacter* STATIC_GetFollowCharacter(const struct FString& PlayerName);
	TArray<class ATslPlayerState*> STATIC_GetDeadPlayerStates();
	float STATIC_GetCurrentHoldProgressRate();
	TArray<class ATeam*> STATIC_GetClientTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientSquadInTeam(bool bIncludeViewTarget);
	TArray<class ATeam*> STATIC_GetClientOwnTeam(bool bIncludeSelf);
	TArray<class ATeam*> STATIC_GetClientOwnSquadInTeam(bool bIncludeSelf);
	bool STATIC_GetCanAllSpectate();
	TArray<struct FTslReportUserInfo> STATIC_GetCachedReportUserInfos();
	TArray<class ATslPlayerState*> STATIC_GetAllPlayerStates();
	TArray<class ATslCharacter*> STATIC_GetAllFollowerCharacters(class ATslCharacter* LeaderCharacter);
	int STATIC_GetAliveTeamMemberCount(bool bIncludeQuitter);
	void STATIC_ForceGotoLobbyPopUpHandler(EPopupButtonID ButtonID);
	void STATIC_FollowPlayer(const struct FString& PlayerName, bool bChange);
	void STATIC_EndStreamingPause();
	void STATIC_DumpActorDetailByRaycast();
	void STATIC_DropItem(const struct FString& ItemTypeName);
	void STATIC_DisplayParachuteFollowMessage();
	void STATIC_DeleteMapMarker();
	bool STATIC_CompleteReportKiller();
	void STATIC_CloseKickPlayerWarningPopupAndTerminate(EPopupButtonID ButtonID);
	void STATIC_CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void STATIC_ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void STATIC_ClientWasKickedByAntiCheat(const struct FText& KickReason);
	void STATIC_ClientWasKickedAndExitTP(const struct FText& KickReason);
	void STATIC_ClientUpdateSpectatorCameraMode(const struct FName& InCameraName, bool InbFirstPerson, bool InbIsInVehicle, bool InbIsScoping);
	void STATIC_ClientUpdateRankingInfos(TArray<struct FRankingInfo> InRankingInfos);
	void STATIC_ClientUpdatePlatoonMapMarker(int PlatoonId, bool bOffline, const struct FMapMarker& MapMarker);
	void STATIC_ClientUpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_ClientUpdatePlatoonCommander(int PlatoonId, const struct FTeamMemberIdentification& PlatoonMemberId);
	void STATIC_ClientUpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State, bool bForceUpdate);
	void STATIC_ClientUpdateOptionData();
	void STATIC_ClientUpdateDropPackageAchievement();
	void STATIC_ClientUpdateCollisionResponseToPawn(bool bActive);
	void STATIC_ClientUpdateCarePackageAchievement();
	void STATIC_ClientTestSweep(bool bInComplex, const struct FHitResult& InHitResult, const struct FVector& InBoxExtent);
	void STATIC_ClientTestRaycast(bool bInComplex, const struct FHitResult& InHitResult);
	void STATIC_ClientTestCheat(int InIndex, int InLoopingCounter);
	void STATIC_ClientStopTestCheat();
	void STATIC_ClientStartOnlineGame();
	void STATIC_ClientShowMatchResult();
	void STATIC_ClientSetTslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> InTslPlayerMatchResultInfos);
	void STATIC_ClientSetCurSandboxVehicleNumber(int InNumber);
	void STATIC_ClientSetCurSandboxItemNumber(int InNumber);
	void STATIC_ClientSetCanAllSpectate(bool InbCanSpectate);
	void STATIC_ClientSendTPPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void STATIC_ClientSendPacketUnreliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendPacketReliable(TArray<unsigned char> Packet);
	void STATIC_ClientSendFakeAIDBNOMessage(class ATslPlayerState* GroggyCauserPlayerState, class ATslPlayerState* VictimPlayerState, class UDamageType* GroggyCauserDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, float InDistanceFromKillerToVictim);
	void STATIC_ClientRestoreSpectatorOnReconnection();
	void STATIC_ClientRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& AmmoItemID);
	void STATIC_ClientRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_ClientRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InServerLocation);
	void STATIC_ClientRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_ClientProcessRevive();
	void STATIC_ClientOnTeamKillingSpree(int TeamNum, int KillCount);
	void STATIC_ClientOnTeamElimination(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int Ranking);
	void STATIC_ClientOnPersonalKillingSpree(const struct FString& PlayerNameStr, const struct FString& ClanNameStr, int TeamNum, int KillCount, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_ClientOnCharacterRestart();
	void STATIC_ClientOnCharacterDeath(bool bIsTeamMatch, bool bHasAliveTeamMember, const struct FTslReportUserInfo& InKillerInfo, bool InbSuicide);
	void STATIC_ClientNPCDrawMovement(class ATslNpcCharacter* InTargetNPC, const struct FVector& InStartLoc, const struct FVector_NetQuantizeNormal& InDir, float InSpeed);
	void STATIC_ClientNpcCount(int InCount);
	void STATIC_ClientNotifyStartBuff(const struct FName& BuffName, bool bStart);
	void STATIC_ClientNotifySpeedBoost(float Boost);
	void STATIC_ClientNotifyRestrictingPlayArea();
	void STATIC_ClientNotifyPlayerEndWithoutHitInfo(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner);
	void STATIC_ClientNotifyPlayerEnd(int Ranking, const struct FTslPlayerStatistics& Statistics, const struct FTslPlayerStatisticsForOwner& StatisticsForOwner, const struct FTakeHitInfo& LastTakeHitInfo);
	void STATIC_ClientNotifyNextGasIn(const struct FVector_NetQuantize& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_ClientNotifyHealAmount_Unreliable(float Heal);
	void STATIC_ClientNotifyHealAmount_Reliable(float Heal);
	void STATIC_ClientNotifyHealAmount(float Heal);
	void STATIC_ClientNotifyHeal_Unreliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal_Reliable(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNotifyHeal(float HealthStart, float Health, float MaxHealth);
	void STATIC_ClientNextFollowCharacter(class ATslCharacter* TslCharacter);
	void STATIC_ClientNetworkPingStateReceive(TArray<unsigned char> Data);
	void STATIC_ClientInteractByComponent(class UActorComponent* TargetComponent);
	void STATIC_ClientInteract(class AActor* TargetObject);
	void STATIC_ClientIgnoreClientVehicleMove(bool InIgnore);
	void STATIC_ClientGetDestructiblePenData(TArray<struct FDestructiblePenetrationState> PenState);
	void STATIC_ClientGetDestructibleBreachData(TArray<struct FDestructibleBreachState> BreachState);
	void STATIC_ClientGetDestructibleBeaconData(TArray<struct FGuid> BeaconGUIDs);
	void STATIC_ClientGameStarted(float worldTime);
	void STATIC_ClientForceOverwriteMapMarkerData(const struct FMapMarker& MapMarker);
	void STATIC_ClientEndOnlineGame();
	void STATIC_ClientDynamicWeatherSync(int DynamicWeatherIndex, bool bInitialized, float BlendInTime, float SaturationTime, float BlendOutTime);
	void STATIC_ClientDisplayCarePackage(const struct FVector& InSpawnLocation, const struct FVector& InEndLocation, TArray<struct FVector> InDropItemPos, TArray<int> InPassedCountList);
	void STATIC_ClientDebugVehicleLocation(TArray<struct FDebugVehicleLoation> InVehicleLocArray);
	void STATIC_ClientCollectActorNames(TArray<struct FTslGame_FDisplayActorNames> InDisplayActors);
	void STATIC_ClientCeremonyRoundResult(int InWinnerTeamId, TArray<int> InWinningTeamIdList, bool bLastRound);
	void STATIC_ClientCeremonyMatchResult(bool bForce, int WinnerTeamId);
	void STATIC_ClientAllowSandboxMaster();
	void STATIC_ClientAIPath(class APawn* InPawn, TArray<struct FVector> InPathArray);
	void STATIC_ClientAdminExportStringFile(const struct FString& inString, const struct FString& InFileName);
	void STATIC_ClientAdminCopyString(const struct FString& inString);
	void STATIC_Client_TakeScreenshot();
	void STATIC_Client_ItemRequestReplied(class ATslCharacter* RequestOwner);
	void STATIC_Client_DrawDebugString(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_Client_DrawDebugItemSpotCollision(TArray<struct FVector> Centers, float Radius, int Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime);
	void STATIC_CheatSpawnActor(int InClassIndex, int InHeight);
	void STATIC_CheatDestroyActors();
	void STATIC_Cheat_ServerSpawnVehicle(int VehicleIndex);
	void STATIC_ChangeMeshCommand(int Parameter, float Time);
	void STATIC_CastInteractionByComponentOnServer(class UActorComponent* TargetComponent, uint32_t Checksum);
	bool STATIC_CanSeeTerrainThroughFogInTheAir();
	bool STATIC_CanReport();
	void STATIC_BP_Test_SpawnVehicle(int VehicleIndex);
	void STATIC_BEServer(const struct FString& Command, const struct FString& Arg0, const struct FString& Arg1, const struct FString& Arg2);
	void STATIC_BEClient(const struct FString& Command);
	void STATIC_AllowVoiceChatInput(bool bAllow);
	void STATIC_Admin(const struct FString& ServerAdminCommand);
};


// Class TslGame.TslWarPlayerController
// 0x0100 (0x10D0 - 0x0FD0)
class ATslWarPlayerController : public ATslPlayerController
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0FD0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMyTeamScoreChangedAtClient;                             // 0x0FD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHighEnemyScoreChangedAtClient;                          // 0x0FE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerStateReplicatedAtClient;                          // 0x0FF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x1008(0x00B8) MISSED OFFSET
	float                                              RespawnRequestTerm;                                       // 0x10C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x10C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWarPlayerController"));

		return ptr;
	}


	void STATIC_UpdateTeamScoreUI();
	void STATIC_ServerRequestRespawn();
	void STATIC_OnScoreChanged();
	void STATIC_OnInstantRespawn();
};


// Class TslGame.TslConquestPlayerController
// 0x0000 (0x10D0 - 0x10D0)
class ATslConquestPlayerController : public ATslWarPlayerController
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConquestPlayerController"));

		return ptr;
	}


	void STATIC_UpdateTeamScoreUI();
	void STATIC_ServerRequestRespawn();
	void STATIC_OnScoreChanged();
	void STATIC_OnInstantRespawn();
};


// Class TslGame.TslTDMPlayerController
// 0x0010 (0x10E0 - 0x10D0)
class ATslTDMPlayerController : public ATslWarPlayerController
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTDMPlayerController"));

		return ptr;
	}


	void STATIC_ServerEndPreviewScene();
	void STATIC_OnStartPreviewScene();
	void STATIC_OnEndPreviewScene();
	void STATIC_ClientStartPreviewScene(float InDuration);
};


// Class TslGame.TslZombiePlayerController
// 0x00A0 (0x1070 - 0x0FD0)
class ATslZombiePlayerController : public ATslPlayerController
{
public:
	class ATslPostProcessEffect*                       HumanChangeToZombie;                                      // 0x0FD0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0FD8(0x0008) MISSED OFFSET
	int                                                ZombieRespawnRemainingTime;                               // 0x0FE0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      ZombieCountDownType;                                      // 0x0FE4(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0FE5(0x0003) MISSED OFFSET
	float                                              TurningPostProcessTime;                                   // 0x0FE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZombiePostProcessTime;                                    // 0x0FEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MatParameterName;                                         // 0x0FF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MatParameterNameAfterTurning;                             // 0x0FF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialParameterCollection*                MaterialParameterCollectionZombie;                        // 0x1000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanDetectionInterval;                                   // 0x1008(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              HumanDetectionDuration;                                   // 0x100C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              HumanDetectionRange;                                      // 0x1010(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHumanDetection;                                          // 0x1014(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHumanDetectionIcons;                                     // 0x1015(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsRespawn;                                                // 0x1016(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x1017(0x0001) MISSED OFFSET
	class UClass*                                      ZombiePOVPPClass;                                         // 0x1018(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	class ATslPostProcessEffect*                       ZombiePOVPP;                                              // 0x1020(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x20];                                      // 0x1028(0x0020) MISSED OFFSET
	ETeamChangeZombieMode                              TeamChangeZombieMode;                                     // 0x1048(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bMatchStarted;                                            // 0x1049(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x104A(0x0002) MISSED OFFSET
	float                                              CurrentHumanDetectionIterval;                             // 0x104C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentHumanDetectionDuration;                            // 0x1050(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bStartDecection;                                          // 0x1054(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1B];                                      // 0x1055(0x001B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombiePlayerController"));

		return ptr;
	}


	void STATIC_StartZombiePostProcess();
	void STATIC_ServerZombieRevive();
	void STATIC_ServerRequestJoinTeam();
	void STATIC_OnRep_ZombieRespawnRemainingTime();
	void STATIC_OnRep_TeamChangeZombieMode();
	void STATIC_OnRep_bHumanDetectionIcons();
	void STATIC_OnMatchStarted(bool bReconnect);
	bool STATIC_IsZombieRespawnCountDown();
	void STATIC_HB_ZombieRespawn();
	unsigned char STATIC_GetZombieCountDownType();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslZombieMatchResultInfos();
	TArray<struct FTslPlayerMatchResultInfo> STATIC_GetTslHumanMatchResultInfos();
};


// Class TslGame.TslBaseRadioComponent
// 0x0040 (0x04F0 - 0x04B0)
class UTslBaseRadioComponent : public USceneComponent
{
public:
	class UAkComponent*                                AkComponent;                                              // 0x04B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslRadioDataAsset*                          RadioDataAsset;                                           // 0x04B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                SeekOnEventTimerHandle;                                   // 0x04C0(0x0008) (Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET
	struct FTimerHandle                                ServerTickTimerHandle;                                    // 0x04D0(0x0008) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04D8(0x0004) MISSED OFFSET
	float                                              ServerPlayTime;                                           // 0x04DC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int8_t                                             RadioVolume;                                              // 0x04E0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int8_t                                             RadioChannel;                                             // 0x04E1(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bPowerOn;                                                 // 0x04E2(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x04E3(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseRadioComponent"));

		return ptr;
	}


	void STATIC_PendingOnRep_ServerPlayTime();
	void STATIC_OnRep_ServerPlayTime();
	void STATIC_OnRep_RadioVolume();
	void STATIC_OnRep_RadioChannel();
	void STATIC_OnRep_PowerOn();
};


// Class TslGame.TslJukeBoxRadioComponent
// 0x0000 (0x04F0 - 0x04F0)
class UTslJukeBoxRadioComponent : public UTslBaseRadioComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslJukeBoxRadioComponent"));

		return ptr;
	}

};


// Class TslGame.TslVehicleRadioComponent
// 0x0000 (0x04F0 - 0x04F0)
class UTslVehicleRadioComponent : public UTslBaseRadioComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleRadioComponent"));

		return ptr;
	}


	void STATIC_PendingOnRep_ServerPlayTime();
	void STATIC_OnRep_ServerPlayTime();
	void STATIC_OnRep_RadioVolume();
	void STATIC_OnRep_RadioChannel();
	void STATIC_OnRep_PowerOn();
};


// Class TslGame.TslBlueZoneCreateArea
// 0x0020 (0x0408 - 0x03E8)
class ATslBlueZoneCreateArea : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     Name;                                                     // 0x03F0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	float                                              Radius;                                                   // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Weight;                                                   // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBlueZoneCreateArea"));

		return ptr;
	}

};


// Class TslGame.TslBotAIController
// 0x0058 (0x0558 - 0x0500)
class ATslBotAIController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0500(0x0038) MISSED OFFSET
	class ATslWheeledVehicle*                          MyVehicle;                                                // 0x0538(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class APawn*                                       FollowTarget;                                             // 0x0540(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0548(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBotAIController"));

		return ptr;
	}

};


// Class TslGame.TslBpRewardLogicDataTable_ScoreBased
// 0x0000 (0x0088 - 0x0088)
class UTslBpRewardLogicDataTable_ScoreBased : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBpRewardLogicDataTable_ScoreBased"));

		return ptr;
	}

};


// Class TslGame.TslBpRewardCalculator_ScoreBased
// 0x0030 (0x0070 - 0x0040)
class UTslBpRewardCalculator_ScoreBased : public UTslBpRewardCalculator
{
public:
	class UDataTable*                                  RewardDataTable;                                          // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslGameMode*                                CachedAuthGameMode;                                       // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0050(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBpRewardCalculator_ScoreBased"));

		return ptr;
	}

};


// Class TslGame.TslBreakableObject
// 0x0000 (0x03F8 - 0x03F8)
class ATslBreakableObject : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBreakableObject"));

		return ptr;
	}

};


// Class TslGame.CharacterBreathBuff
// 0x0008 (0x0468 - 0x0460)
class ACharacterBreathBuff : public ATslBuff
{
public:
	float                                              BreathPerTick;                                            // 0x0460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0464(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CharacterBreathBuff"));

		return ptr;
	}


	class ATslCharacter* STATIC_GetCharacter();
	EBreathType STATIC_GetBreathType();
};


// Class TslGame.HealOverTimeBuff
// 0x0018 (0x0478 - 0x0460)
class AHealOverTimeBuff : public ATslBuff
{
public:
	float                                              HealPerTick;                                              // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HealLimit;                                                // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseStrictHealLimit;                                      // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0469(0x0003) MISSED OFFSET
	int                                                BuffCount;                                                // 0x046C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0470(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.HealOverTimeBuff"));

		return ptr;
	}

};


// Class TslGame.TslFBRItemBuff
// 0x0020 (0x04A0 - 0x0480)
class ATslFBRItemBuff : public ATslFBRBuff
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0480(0x0008) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x0488(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxItemCount;                                             // 0x0490(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ProvidedItemCount;                                        // 0x0494(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreAutoSwap;                                          // 0x0498(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0499(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRItemBuff"));

		return ptr;
	}

};


// Class TslGame.TslFBRSoundBuff
// 0x0010 (0x0490 - 0x0480)
class ATslFBRSoundBuff : public ATslFBRBuff
{
public:
	TArray<struct FAkRTPCInfo>                         RTPCInfoList;                                             // 0x0480(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRSoundBuff"));

		return ptr;
	}

};


// Class TslGame.TslIncreaseMaxHpBuff
// 0x0000 (0x0480 - 0x0480)
class ATslIncreaseMaxHpBuff : public ATslFBRBuff
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslIncreaseMaxHpBuff"));

		return ptr;
	}

};


// Class TslGame.TslInvincibilityBuff
// 0x0010 (0x0470 - 0x0460)
class ATslInvincibilityBuff : public ATslBuff
{
public:
	bool                                               bUseInvinciblePP;                                         // 0x0460(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFireAbort;                                             // 0x0461(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x0462(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInvincibilityBuff"));

		return ptr;
	}

};


// Class TslGame.TslReplicatedBuff
// 0x0008 (0x0468 - 0x0460)
class ATslReplicatedBuff : public ATslBuff
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0460(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReplicatedBuff"));

		return ptr;
	}


	void STATIC_TickBuff();
	void STATIC_StopBuffBlueprint(bool bCanceled);
	void STATIC_StartBuffBlueprint();
	void STATIC_LeaveGameLogHeal(class ATslCharacter* InCharacter, float InHealAmount, bool bInstantHeal);
	class APawn* STATIC_GetOwnerPawn();
	class ATslCharacter* STATIC_GetOwnerCharacter();
	struct FAttackId STATIC_GetAttackId();
	bool STATIC_CanApplyBuff();
};


// Class TslGame.TslFlashbangDebuff
// 0x0088 (0x04F0 - 0x0468)
class ATslFlashbangDebuff : public ATslReplicatedBuff
{
public:
	class UFlashbangDebuffCurve*                       DebuffCurve;                                              // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	TArray<class UAkAudioEvent*>                       TinnitusLevels;                                           // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear)
	TArray<struct FPostProcessEffectParameter>         PostProcessEffectParametersArray;                         // 0x0480(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      EffectActorClass;                                         // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CaptureDelay;                                             // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DebuffDistance;                                           // 0x049C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x04A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFlashbangDebuff"));

		return ptr;
	}


	void STATIC_ClearScopeSettings();
};


// Class TslGame.TslMolotovFireDebuff
// 0x0030 (0x0498 - 0x0468)
class ATslMolotovFireDebuff : public ATslReplicatedBuff
{
public:
	float                                              PerTickDamage;                                            // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x046C(0x0004) MISSED OFFSET
	class UClass*                                      DamageTypeClass;                                          // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UParticleSystem*                             ParticleSystem;                                           // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ParticleSystemConsole;                                    // 0x0488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ParticleSystemKoreanRating;                               // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMolotovFireDebuff"));

		return ptr;
	}

};


// Class TslGame.TslZombieVirusBuff
// 0x0010 (0x0470 - 0x0460)
class ATslZombieVirusBuff : public ATslBuff
{
public:
	class UClass*                                      DamageTypeClass;                                          // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VirusDamagePreSecond;                                     // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x046C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombieVirusBuff"));

		return ptr;
	}

};


// Class TslGame.TslBuilding
// 0x0000 (0x03E8 - 0x03E8)
class ATslBuilding : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBuilding"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslBuildingComponent
// 0x0000 (0x0200 - 0x0200)
class UTslBuildingComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBuildingComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.TslCameraComponent
// 0x0010 (0x0AB0 - 0x0AA0)
class UTslCameraComponent : public UCameraComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0AA0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCameraComponent"));

		return ptr;
	}


	void STATIC_SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void STATIC_SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);
	void STATIC_SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void STATIC_SetOrthoWidth(float InOrthoWidth);
	void STATIC_SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void STATIC_SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void STATIC_SetFieldOfView(float InFieldOfView);
	void STATIC_SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void STATIC_SetAspectRatio(float InAspectRatio);
	void STATIC_GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void STATIC_AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class TslGame.TslCharacterCheatSubObject
// 0x0008 (0x0038 - 0x0030)
class UTslCharacterCheatSubObject : public UObject
{
public:
	bool                                               bIsOverrideCharacterCustomTimeDilation;                   // 0x0030(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x0034(0x0004) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterCheatSubObject"));

		return ptr;
	}


	void STATIC_OnRep_CustomTimeDilation();
};


// Class TslGame.TslCharacterEventBindable
// 0x0000 (0x0030 - 0x0030)
class UTslCharacterEventBindable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterEventBindable"));

		return ptr;
	}

};


// Class TslGame.TslCharacterPropertyOverrider
// 0x0018 (0x0048 - 0x0030)
class UTslCharacterPropertyOverrider : public UObject
{
public:
	class ATslGameMode*                                TslGameMode;                                              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslPlayerState*                             CachedTslPlayerState;                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslCharacter*                               CachedTslCharacter;                                       // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterPropertyOverrider"));

		return ptr;
	}

};


// Class TslGame.TslBattleRoyaleCharacterPropertyOverrider
// 0x0000 (0x0048 - 0x0048)
class UTslBattleRoyaleCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyaleCharacterPropertyOverrider"));

		return ptr;
	}

};


// Class TslGame.TslBattleRoyaleCharacterPropertyOverrider_CPP
// 0x0000 (0x0048 - 0x0048)
class UTslBattleRoyaleCharacterPropertyOverrider_CPP : public UTslBattleRoyaleCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyaleCharacterPropertyOverrider_CPP"));

		return ptr;
	}

};


// Class TslGame.TslTrainingCharacterPropertyOverrider
// 0x0000 (0x0048 - 0x0048)
class UTslTrainingCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrainingCharacterPropertyOverrider"));

		return ptr;
	}

};


// Class TslGame.TslWarCharacterPropertyOverrider
// 0x0008 (0x0050 - 0x0048)
class UTslWarCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:
	class UGroggyDamageCalculator*                     GroggyDamageCalculator;                                   // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWarCharacterPropertyOverrider"));

		return ptr;
	}

};


// Class TslGame.TslConquestCharacterPropertyOverrider
// 0x0000 (0x0050 - 0x0050)
class UTslConquestCharacterPropertyOverrider : public UTslWarCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConquestCharacterPropertyOverrider"));

		return ptr;
	}

};


// Class TslGame.TslZombieCharacterPropertyOverrider
// 0x0000 (0x0048 - 0x0048)
class UTslZombieCharacterPropertyOverrider : public UTslCharacterPropertyOverrider
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombieCharacterPropertyOverrider"));

		return ptr;
	}

};


// Class TslGame.TslCharacterProxy
// 0x0080 (0x08B0 - 0x0830)
class ATslCharacterProxy : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0830(0x0008) MISSED OFFSET
	TArray<class UWeaponClone*>                        ArmedWeapons;                                             // 0x0838(0x0010) (ZeroConstructor)
	class UWeaponAnimInfoComponent*                    WeaponAnimInfoComponent;                                  // 0x0848(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              WeaponUpdateIntervalSeconds;                              // 0x0850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0854(0x000C) MISSED OFFSET
	class UTslAccessoryComponent*                      AccessoryCom_Primary;                                     // 0x0860(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Primary;                             // 0x0868(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Secondary;                                   // 0x0870(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Secondary;                           // 0x0878(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Sidearm;                                     // 0x0880(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Sidearm;                             // 0x0888(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Melee;                                       // 0x0890(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Melee;                               // 0x0898(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      AccessoryCom_Thrown;                                      // 0x08A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             AccessoryAttachScene_Thrown;                              // 0x08A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterProxy"));

		return ptr;
	}


	void STATIC_UpdateEquippedWeapons();
	void STATIC_UpdateCharacterAppearance();
	void STATIC_SetAccessorySlot(class UTslAccessoryComponent* AccessoryComponent, EAccessorySlot Slot);
	class UTslAccessoryComponent* STATIC_GetAccessorySlot(EAccessorySlot Slot);
};


// Class TslGame.TslCharacterSpringArmComponent
// 0x0220 (0x0760 - 0x0540)
class UTslCharacterSpringArmComponent : public USpringArmComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0540(0x0004) MISSED OFFSET
	struct FVector                                     DefaultSocketOffset;                                      // 0x0544(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     IndoorSocketOffset;                                       // 0x0550(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeanLeftDefaultSocketOffsetAddition;                      // 0x055C(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeanRightDefaultSocketOffsetAddition;                     // 0x0568(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeftShoulderAimingSocketOffset;                           // 0x0574(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     RightShoulderAimingSocketOffset;                          // 0x0580(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeanLeftAimedSocketOffsetAddition;                        // 0x058C(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeanRightAimedSocketOffsetAddition;                       // 0x0598(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     SprintSocketOffsetAddition;                               // 0x05A4(0x000C) (Edit, IsPlainOldData)
	float                                              CrouchSocketOffsetZAddition;                              // 0x05B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CrouchSocketOffsetMovementZAddition;                      // 0x05B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ProneScoketOffsetZAddition;                               // 0x05B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffsetInterpSpeed;                                  // 0x05BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ParachuteSocketOffset;                                    // 0x05C0(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     FreefallSocketOffset;                                     // 0x05CC(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     DefaultTargetOffset;                                      // 0x05D8(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     IndoorTargetOffset;                                       // 0x05E4(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     AimingTargetOffset;                                       // 0x05F0(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     ParachuteTargetOffset;                                    // 0x05FC(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     FreefallTargetOffset;                                     // 0x0608(0x000C) (Edit, IsPlainOldData)
	float                                              ParachuteTargetOffsetLength;                              // 0x0614(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TargetOffsetInterpSpeed;                                  // 0x0618(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TargetOffsetInterpSpeed_Vaulting;                         // 0x061C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DefaultSpringArmLength;                                   // 0x0620(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              IndoorSpringArmLength;                                    // 0x0624(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AimingSpringArmLength;                                    // 0x0628(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlockingCompressOffset;                                   // 0x062C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlockingCompressCrouchOffset;                             // 0x0630(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpringArmLengthInterpSpeed;                               // 0x0634(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AimingSpringArmLengthInterpSpeed;                         // 0x0638(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VaultingSpringArmLengthInterpSpeed;                       // 0x063C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FreefallArmLength;                                        // 0x0640(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParachuteArmLength;                                       // 0x0644(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightBlockInMap;                                          // 0x0648(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   RightBlockOutMap;                                         // 0x0650(0x0008) (Edit, IsPlainOldData)
	struct FVector                                     RightBlockVectorStand;                                    // 0x0658(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     RightBlockVectorCrouch;                                   // 0x0664(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     RightBlockVectorCrouchMove;                               // 0x0670(0x000C) (Edit, IsPlainOldData)
	struct FVector2D                                   LeftBlockInMap;                                           // 0x067C(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   LeftBlockOutMap;                                          // 0x0684(0x0008) (Edit, IsPlainOldData)
	struct FVector                                     LeftBlockVectorStand;                                     // 0x068C(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeftBlockVectorCrouch;                                    // 0x0698(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     LeftBlockVectorCrouchMove;                                // 0x06A4(0x000C) (Edit, IsPlainOldData)
	struct FVector2D                                   TargetBlockInMap;                                         // 0x06B0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   TargetBlockOutMap;                                        // 0x06B8(0x0008) (Edit, IsPlainOldData)
	struct FVector                                     TargetBlockVectorStand;                                   // 0x06C0(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     TargetBlockVectorCrouch;                                  // 0x06CC(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     TargetBlockVectorCrouchMove;                              // 0x06D8(0x000C) (Edit, IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchHipMapIn;                                // 0x06E4(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchHipMapOut;                               // 0x06EC(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchAimMapIn;                                // 0x06F4(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   SocketOffsetPitchAimMapOut;                               // 0x06FC(0x0008) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0704(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CurveSpringarmOffsetVault;                                // 0x0708(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CurveSpringarmOffsetClimb;                                // 0x0710(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffset_YawLimitLow;                                 // 0x0718(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffset_YawLimitHigh;                                // 0x071C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffset_PitchLowScalar;                              // 0x0720(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffset_PitchHighScalar;                             // 0x0724(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffset_PitchLimitHigh;                              // 0x0728(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SocketOffset_PitchLimitLow;                               // 0x072C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0730(0x0020) MISSED OFFSET
	float                                              SpringArmRestoreInterpSpeed;                              // 0x0750(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0754(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterSpringArmComponent"));

		return ptr;
	}

};


// Class TslGame.TslCharacterValidateLocationComponent
// 0x0060 (0x0260 - 0x0200)
class UTslCharacterValidateLocationComponent : public UActorComponent
{
public:
	float                                              ValidLocationCacheInterval;                               // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0204(0x0010) MISSED OFFSET
	float                                              InvalidUndergroundCheckInterval;                          // 0x0214(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0218(0x0004) MISSED OFFSET
	float                                              InvalidUndergroundCheckLength;                            // 0x021C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAdjustRange;                                           // 0x0220(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxAdjustCount;                                           // 0x0224(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ValidLocationForVehicleEjectionCacheInterval;             // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x34];                                      // 0x022C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterValidateLocationComponent"));

		return ptr;
	}

};


// Class TslGame.TslCharmAnimInstance
// 0x0070 (0x0410 - 0x03A0)
class UTslCharmAnimInstance : public UAnimInstance
{
public:
	bool                                               bCalculateAnimDynamics;                                   // 0x03A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCalculateAnimDynamicsDrag;                               // 0x03A1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCalculateAnimDynamicsGravity;                            // 0x03A2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAnimDynamicsCalcInComponentSpace;                        // 0x03A3(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceScale;                                               // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DragScale;                                                // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DragClamp;                                                // 0x03AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FullForceClamp;                                           // 0x03B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GravityScale;                                             // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RBBlendInTime;                                            // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RigidBodyForce;                                           // 0x03BC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              RBAlpha;                                                  // 0x03C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CharmAttachLocation;                                      // 0x03CC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    CharmAttachRotation;                                      // 0x03D8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     CharmAttachScale;                                         // 0x03E4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03F0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharmAnimInstance"));

		return ptr;
	}

};


// Class TslGame.TslChatWidgetStyle
// 0x0988 (0x09C0 - 0x0038)
class UTslChatWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslChatStyle                               ChatStyle;                                                // 0x0038(0x0988) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslChatWidgetStyle"));

		return ptr;
	}

};


// Class TslGame.TslCoherentWidget
// 0x0010 (0x04A0 - 0x0490)
class UTslCoherentWidget : public UCoherentUIGTWidget
{
public:
	class UCoherentWidgetBinder*                       WidgetBinder;                                             // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCoherentWidget"));

		return ptr;
	}


	void STATIC_GoBack();
};


// Class TslGame.TslComponentRegistrationManager
// 0x0238 (0x0620 - 0x03E8)
class ATslComponentRegistrationManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03E8(0x0060) MISSED OFFSET
	bool                                               bActivateWhenStartup;                                     // 0x0448(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	float                                              PhysicsStateTimeLimitMS;                                  // 0x044C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RenderStateTimeLimitMS;                                   // 0x0450(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                RenderStateCallCountLimit;                                // 0x0454(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RenderStateResourceSizeLimit;                             // 0x0458(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PostLoadObjectThresholdMS;                                // 0x045C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                BucketBoundSize;                                          // 0x0460(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                TickBucketDistanceLimit;                                  // 0x0464(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1B8];                                     // 0x0468(0x01B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslComponentRegistrationManager"));

		return ptr;
	}

};


// Class TslGame.TslConsole
// 0x0008 (0x0140 - 0x0138)
class UTslConsole : public UConsole
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConsole"));

		return ptr;
	}

};


// Class TslGame.TslConsoleSetting
// 0x00B0 (0x0128 - 0x0078)
class UTslConsoleSetting : public UConsoleSettings
{
public:
	TArray<struct FString>                             AutoCompleteItemPaths;                                    // 0x0078(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteItemKinds;                                    // 0x0088(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteEquipKinds;                                   // 0x0098(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoVehicleTablePaths;                                    // 0x00A8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteVehiclePaths;                                 // 0x00B8(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteMaleBody;                                     // 0x00C8(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteMaleHair;                                     // 0x00D8(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteMaleFace;                                     // 0x00E8(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteFemaleBody;                                   // 0x00F8(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteFemaleHair;                                   // 0x0108(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             AutoCompleteFemaleFace;                                   // 0x0118(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConsoleSetting"));

		return ptr;
	}

};


// Class TslGame.TslCraftFilterDataAsset
// 0x0010 (0x0048 - 0x0038)
class UTslCraftFilterDataAsset : public UDataAsset
{
public:
	TArray<struct FName>                               FilterBySpawnKitIndex;                                    // 0x0038(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCraftFilterDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslCustomFogController
// 0x00F8 (0x04E0 - 0x03E8)
class ATslCustomFogController : public AActor
{
public:
	unsigned char                                      bAutoStart : 1;                                           // 0x03E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              IntervalMin;                                              // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              IntervalMax;                                              // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogStartDistanceMin;                                      // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogStartDistanceMax;                                      // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogFalloffMin;                                            // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogFalloffMax;                                            // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogDensityMin;                                            // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogDensityMax;                                            // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              TransitionTime;                                           // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ClientFreecamFogIntensity;                                // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FallingStartHeight;                                       // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FallingEndHeight;                                         // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogFalloffInAirplane;                                     // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogHeightInAirplane;                                      // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class UCurveFloat*                                 HeightFalloffCurve;                                       // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UCurveFloat*                                 HeightDensityCurve;                                       // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UCurveFloat*                                 HeightHeightCurve;                                        // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              VehicleSpeedMax;                                          // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FogFalloffInVehicleMaxSpeed;                              // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ClientFogFalloffTransitionSpeed;                          // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	class AExponentialHeightFog*                       CustomFog;                                                // 0x0450(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bOnTransition : 1;                                        // 0x0458(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              ElapsedTime;                                              // 0x045C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurFogStartDistance;                                      // 0x0460(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurFogFalloff;                                            // 0x0464(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurFogDensity;                                            // 0x0468(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurFogHeight;                                             // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0470(0x0028) MISSED OFFSET
	float                                              OrigFogIntensity;                                         // 0x0498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerTickInterval_Stable;                                // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ServerTickInterval_Transition;                            // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ClientTickInterval;                                       // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDebug : 1;                                               // 0x04A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData05[0x7];                                       // 0x04A9(0x0007) MISSED OFFSET
	class UTslGameInstance*                            TGI;                                                      // 0x04B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x28];                                      // 0x04B8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCustomFogController"));

		return ptr;
	}


	void STATIC_StartTransition();
	void STATIC_RecordReplay();
	void STATIC_OnReplayGotoTimelineDone();
	void STATIC_OnReplayCustomFogDone();
	void STATIC_EnumerateCustomFogEvents();
};


// Class TslGame.TslCustomizableSkeletalComponent
// 0x0000 (0x0500 - 0x0500)
class UTslCustomizableSkeletalComponent : public UCustomizableSkeletalComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCustomizableSkeletalComponent"));

		return ptr;
	}


	void STATIC_UpdateSkeletalMeshAsync(bool bNeverSkipUpdate);
};


// Class TslGame.TslSimpleCollisionManager
// 0x00E8 (0x04D0 - 0x03E8)
class ATslSimpleCollisionManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03E8(0x0020) MISSED OFFSET
	TArray<struct FSimpleSpherePersistentChecker>      PersistentExplosiveItemFields;                            // 0x0408(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x88];                                      // 0x0418(0x0088) MISSED OFFSET
	float                                              DamageFieldUpdatePeriod;                                  // 0x04A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DamageFieldFireDamage;                                    // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DamageFieldPassedTime;                                    // 0x04A8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x24];                                      // 0x04AC(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSimpleCollisionManager"));

		return ptr;
	}


	void STATIC_SCMDrawDebugDamageFields(float Duration);
	void STATIC_RemoveCheckerFromBoundingSphereByID(class UTslSimpleCollisionReceiver* OwnerTracer, int SubcheckerID);
	void STATIC_RemoveCheckerFromBoundingSphere(class UTslSimpleCollisionReceiver* OwnerTracer, class UTslSimpleCollisionReceiver* Receiver);
	void STATIC_RegisterPersistentReceiver(const struct FSimpleCollisionCapsule& Collision, class UTslSimpleCollisionReceiver* OwnerTracer, int ID, EScmCollisionGroup Group);
	void STATIC_RegisterBoundingSphere(const struct FVector& Origin, float Radius, class UTslSimpleCollisionReceiver* OwnerTracer, EScmCollisionGroup Group);
	void STATIC_AddRandomPersistentCapsules(int Num, float RngRadius);
	int STATIC_AddCheckerToBoundingSphere(const struct FSimpleCollisionCapsule& Collision, class UTslSimpleCollisionReceiver* OwnerTracer, class UTslSimpleCollisionReceiver* Receiver, bool RebuildSphere);
};


// Class TslGame.TslDamageField
// 0x0090 (0x0478 - 0x03E8)
class ATslDamageField : public AActor
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x03E8(0x000C) MISSED OFFSET
	float                                              DamageRadius;                                             // 0x03F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             DamageFieldFX;                                            // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EDamageFieldType                                   DamageFieldType;                                          // 0x0400(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0401(0x000B) MISSED OFFSET
	int                                                Damage;                                                   // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageInterval;                                           // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0420(0x0010) MISSED OFFSET
	class UClass*                                      DebuffTemplate;                                           // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USphereComponent*                            SphereCollision;                                          // 0x0438(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslSimpleCollisionReceiver*                 SimpleCollision;                                          // 0x0440(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FVector                                     SimpleCollisionOffset;                                    // 0x0448(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0454(0x000C) MISSED OFFSET
	TArray<class ATslCharacter*>                       OverlapCharacterArray;                                    // 0x0460(0x0010) (ZeroConstructor)
	class UParticleSystemComponent*                    EffectsParticleSystem;                                    // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDamageField"));

		return ptr;
	}


	void STATIC_OnFieldDestroyed(class AActor* DestroyedActor);
	void STATIC_OnCollision(const struct FSimpleCollisionEvent& Event);
};


// Class TslGame.TslDamageFieldContainer
// 0x0050 (0x0438 - 0x03E8)
class ATslDamageFieldContainer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<struct FDamageFieldLayout>                  DamageFieldLayouts;                                       // 0x03F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0400(0x0008) MISSED OFFSET
	class UClass*                                      DamageFieldTemplate;                                      // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FlameInWall;                                              // 0x0410(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	int                                                FlameMaxCountInWall;                                      // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlameDelayInWall;                                         // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x041C(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDamageFieldContainer"));

		return ptr;
	}

};


// Class TslGame.TslDeathCameraComponent
// 0x0060 (0x0260 - 0x0200)
class UTslDeathCameraComponent : public UActorComponent
{
public:
	struct FName                                       FollowBone;                                               // 0x0200(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCameraDistance;                                        // 0x0208(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CollisionDistanceFactor;                                  // 0x020C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeathFollowBlendTime;                                     // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EViewTargetBlendFunction>              DeathFollowBlendFunc;                                     // 0x0214(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	float                                              DeathFollowBlendExp;                                      // 0x0218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeathFollowTime;                                          // 0x021C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultFreeCameraArmLength;                               // 0x0220(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	struct FVector                                     DeathLocationOffset;                                      // 0x0224(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	class ATslCharacter*                               DeathCharacter;                                           // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0238(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDeathCameraComponent"));

		return ptr;
	}

};


// Class TslGame.TslDecalEmitter
// 0x0010 (0x03F8 - 0x03E8)
class ATslDecalEmitter : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDecalEmitter"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslDestructibleComponent
// 0x0000 (0x0D20 - 0x0D20)
class UTslDestructibleComponent : public UDestructibleComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructibleComponent"));

		return ptr;
	}


	void STATIC_SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* STATIC_GetDestructibleMesh();
	void STATIC_ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void STATIC_ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
};


// Class TslGame.TslDestructibleSurfaceFragment
// 0x0138 (0x0530 - 0x03F8)
class ATslDestructibleSurfaceFragment : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x138];                                     // 0x03F8(0x0138) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructibleSurfaceFragment"));

		return ptr;
	}

};


// Class TslGame.TslDestrusctibleByVehicleInterface
// 0x0000 (0x0030 - 0x0030)
class UTslDestrusctibleByVehicleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestrusctibleByVehicleInterface"));

		return ptr;
	}

};


// Class TslGame.TslDistanceBasedEventReceiver
// 0x0000 (0x0030 - 0x0030)
class UTslDistanceBasedEventReceiver : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDistanceBasedEventReceiver"));

		return ptr;
	}

};


// Class TslGame.TslDistanceBasedEventManager
// 0x0168 (0x0550 - 0x03E8)
class ATslDistanceBasedEventManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x168];                                     // 0x03E8(0x0168) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDistanceBasedEventManager"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslDistanceBasedEventTestActor
// 0x0018 (0x0400 - 0x03E8)
class ATslDistanceBasedEventTestActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDistanceBasedEventTestActor"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslDropMagazine
// 0x0018 (0x0400 - 0x03E8)
class ATslDropMagazine : public AActor
{
public:
	class UStaticMeshComponent*                        MagMeshComp;                                              // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslFPPShadowSupportComponent*               FPPShadowSupportComponent;                                // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AkComp;                                                   // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDropMagazine"));

		return ptr;
	}


	void STATIC_OnMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class TslGame.TslDynamicWeather
// 0x00A0 (0x0488 - 0x03E8)
class ATslDynamicWeather : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET
	class ATslWeatherParticle*                         WeatherParticle;                                          // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UCurveFloat*                                 SpawnScaleCurve;                                          // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      bUseWetEffect : 1;                                        // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      bUsePPEffect : 1;                                         // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      bUseLightning : 1;                                        // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0411(0x0007) MISSED OFFSET
	class ATslCustomFogController*                     FogController;                                            // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              CustomFogIntensity;                                       // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	unsigned char                                      bDebugPrint_Fog : 1;                                      // 0x0428(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	float                                              DebugInterval_Fog;                                        // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              DebugPrintDuration_Fog;                                   // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	class ATslGlobalWeatherSound*                      GlobalSound;                                              // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0440(0x0004) MISSED OFFSET
	float                                              ClientTickInterval_Stable;                                // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ClientTickInterval_Transition;                            // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData06[0x14];                                      // 0x044C(0x0014) MISSED OFFSET
	float                                              ElapsedTime;                                              // 0x0460(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0464(0x000C) MISSED OFFSET
	class UTslGameInstance*                            TGI;                                                      // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0478(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDynamicWeather"));

		return ptr;
	}


	void STATIC_OnRep_ElapsedTime();
	void STATIC_NetMulti_InitTimeline(float inBlendInTime, float inBlendOutTime, float InSaturationTime, float inTimeMultiplier);
	void STATIC_NetMulti_ExtendSaturationTime(float SaturationTimeAddd);
	void STATIC_DebugFogIntensity();
};


// Class TslGame.TslEditableText
// 0x0000 (0x04C0 - 0x04C0)
class UTslEditableText : public UEditableText
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEditableText"));

		return ptr;
	}


	void STATIC_SetText(const struct FText& InText);
	void STATIC_SetIsReadOnly(bool InbIsReadyOnly);
	void STATIC_SetIsPassword(bool InbIsPassword);
	void STATIC_SetHintText(const struct FText& InHintText);
	void STATIC_OnEditableTextCommittedEvent__DelegateSignature(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void STATIC_OnEditableTextChangedEvent__DelegateSignature(const struct FText& Text);
	struct FText STATIC_GetText();
};


// Class TslGame.TslEffectController
// 0x01D8 (0x05C0 - 0x03E8)
class ATslEffectController : public AActor
{
public:
	class UTslSimpleCollisionReceiver*                 SimpleCollision;                                          // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	class USceneComponent*                             SceneRoot;                                                // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TArray<struct FVector>                             InitialTraceArray;                                        // 0x0408(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                StepsPerTick;                                             // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SpreadDirectionCount;                                     // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxInstanceCount;                                         // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AbsoluteMaxInstanceCount;                                 // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxMaterialAdditiveInstanceCount;                         // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxCenteredInstanceCount;                                 // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialTraceHorizontalScale;                              // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	struct FName                                       BlockingTag;                                              // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NormalLimitZ;                                             // 0x0440(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroundTraceNormalScale_Start;                             // 0x0444(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialGroundTraceHeightZ;                                // 0x0448(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConcurrentGroundTraceHeightZ;                             // 0x044C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProcessedHitLenClamp;                                     // 0x0450(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SphereRadius;                                             // 0x0454(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpreadXY;                                                 // 0x0458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpreadZ;                                                  // 0x045C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageFieldClass;                                         // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bModifyEffectLifetime;                                    // 0x0468(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0469(0x0003) MISSED OFFSET
	float                                              InitialEffectLifetime;                                    // 0x046C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinEffectLifetimeForStart;                                // 0x0470(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EffectLifetimeVariation;                                  // 0x0474(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OriginOffsetScale;                                        // 0x0478(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageTickInterval;                                       // 0x047C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagePerTick;                                            // 0x0480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0490(0x0018) MISSED OFFSET
	TArray<class USphereComponent*>                    BlockerArray;                                             // 0x04A8(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class USphereComponent*>                    MaterialBlockerArray;                                     // 0x04B8(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class USphereComponent*>                    ActiveSpreadBlockerArray;                                 // 0x04C8(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class ATslDamageField*>                     DamageFieldArray;                                         // 0x04D8(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslCharacter*>                       CharacterInEffectArray;                                   // 0x04E8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0xC8];                                      // 0x04F8(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEffectController"));

		return ptr;
	}


	void STATIC_TickDamageFields();
	void STATIC_OnTakeDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_EndEffect();
	void STATIC_Client_ShowDebugString(const struct FVector& InLocation, const struct FString& InText, class AActor* InActor, const struct FColor& InColor, float InTime);
	void STATIC_Client_ShowDebugSphere(const struct FVector& InLocation, float InRadius, const struct FColor& InColor, float InTime);
	void STATIC_Client_ShowDebugLine(const struct FVector& InStart, const struct FVector& InEnd, const struct FColor& InColor, float InTime);
	void STATIC_Client_ShowDebugCoordinateSystem(const struct FVector& InStart, const struct FQuat& InQuat, float InTime, float InSize);
};


// Class TslGame.TslEmoteTraceData
// 0x0010 (0x0048 - 0x0038)
class UTslEmoteTraceData : public UDataAsset
{
public:
	TArray<struct FEmoteTraceCheck>                    TraceCheckArray;                                          // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEmoteTraceData"));

		return ptr;
	}

};


// Class TslGame.TslEmoteDB
// 0x0000 (0x0088 - 0x0088)
class UTslEmoteDB : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEmoteDB"));

		return ptr;
	}

};


// Class TslGame.TslEmoteComponent
// 0x0090 (0x0290 - 0x0200)
class UTslEmoteComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0200(0x0018) MISSED OFFSET
	class UAnimMontage*                                CurrentEmoteMontage;                                      // 0x0218(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	float                                              EmotePlayTimeout;                                         // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimulatedProxyFailedChecksTollerance;                     // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                OldMontage;                                               // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0238(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEmoteComponent"));

		return ptr;
	}


	void STATIC_Server_EmotePlay(const struct FName& InEmoteName, bool bIsRNG, const struct FName& SectionName, bool bCheatMenu, const struct FVector& L, int A, int B);
	void STATIC_SendSystemMessageEmoteUnavailable();
	void STATIC_SendSystemMessageEmoteEmpty();
	void STATIC_SendSystemMessageEmoteBlocked();
	void STATIC_OnMontageInterrupted(class UAnimMontage* Montage);
	class UTexture2D* STATIC_GetEmoteTextureByName(const struct FName& EmoteName);
	TArray<struct FName> STATIC_GetEmoteNames();
	class UAnimMontage* STATIC_GetEmoteMontageByName(const struct FName& EmoteName);
	class UMaterialInterface* STATIC_GetEmoteMaterialByName(const struct FName& EmoteName);
	struct FText STATIC_GetEmoteLocalizedName(const struct FName& EmoteName);
	class UDataTable* STATIC_GetEmoteDataTable();
	bool STATIC_Emote_TryToPlay(const struct FName& EmoteName, bool bIsLobby, bool bCheatMenu);
	void STATIC_Client_EmotePlay(const struct FName& InEmoteName, bool bIsRNG, const struct FName& SectionName);
	bool STATIC_CanOpenEmoteWheel();
};


// Class TslGame.TslEngine
// 0x0010 (0x0F60 - 0x0F50)
class UTslEngine : public UGameEngine
{
public:
	float                                              FrameRateCap;                                             // 0x0F50(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0F54(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEngine"));

		return ptr;
	}

};


// Class TslGame.TslEngineUtilSettings
// 0x0038 (0x0068 - 0x0030)
class UTslEngineUtilSettings : public UObject
{
public:
	struct FStringAssetReference                       TiledDoorMaterialName;                                    // 0x0030(0x0010) (Edit, Config)
	struct FStringAssetReference                       TiledDoorProxyMeshName;                                   // 0x0040(0x0010) (Edit, Config)
	TArray<struct FStringAssetReference>               TiledDoorMeshes;                                          // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	int                                                TiledFrameWidth;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEngineUtilSettings"));

		return ptr;
	}

};


// Class TslGame.TslEntryGameMode
// 0x0000 (0x04C8 - 0x04C8)
class ATslEntryGameMode : public AGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEntryGameMode"));

		return ptr;
	}


	void STATIC_StartMatch();
	void STATIC_SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_RestartGame();
	bool STATIC_ReadyToStartMatch();
	bool STATIC_ReadyToEndMatch();
	void STATIC_K2_OnSetMatchState(const struct FName& NewState);
	bool STATIC_IsMatchInProgress();
	bool STATIC_HasMatchEnded();
	struct FName STATIC_GetMatchState();
	void STATIC_EndMatch();
	void STATIC_AbortMatch();
};


// Class TslGame.TslEquippedWeaponsProxy
// 0x0040 (0x04F0 - 0x04B0)
class UTslEquippedWeaponsProxy : public USceneComponent
{
public:
	TArray<class UWeaponClone*>                        ArmedWeapons;                                             // 0x04B0(0x0010) (ZeroConstructor, Transient)
	class UCharacterWeaponAnimInfoComponent*           WeaponAnimInfo;                                           // 0x04C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class ATslCharacter>                CachedCharacter;                                          // 0x04C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class USkeletalMeshComponent>       CachedSkelMesh;                                           // 0x04D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x04D8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquippedWeaponsProxy"));

		return ptr;
	}


	void STATIC_UpdateEquippedWeapons();
	void STATIC_UpdateAccessoryAttachmentSlot(EAccessorySlot Slot);
};


// Class TslGame.TslExplosionEffectData
// 0x0040 (0x0078 - 0x0038)
class UTslExplosionEffectData : public UDataAsset
{
public:
	struct FExplosionShakeConfig                       ShakeConfig;                                              // 0x0038(0x0018) (Edit, DisableEditOnInstance)
	struct FExplosionAudioConfig                       AudioConfig;                                              // 0x0050(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslExplosionEffectData"));

		return ptr;
	}

};


// Class TslGame.TslExplosionReactionInterface
// 0x0000 (0x0030 - 0x0030)
class UTslExplosionReactionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslExplosionReactionInterface"));

		return ptr;
	}

};


// Class TslGame.TslFakeButton
// 0x0340 (0x07C0 - 0x0480)
class UTslFakeButton : public UButton
{
public:
	struct FButtonStyle                                AlternativeStyle;                                         // 0x0480(0x02A8) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x98];                                      // 0x0728(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFakeButton"));

		return ptr;
	}

};


// Class TslGame.TslFakeIpNetConnection
// 0x0000 (0x65858 - 0x65858)
class UTslFakeIpNetConnection : public UIpConnection
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFakeIpNetConnection"));

		return ptr;
	}

};


// Class TslGame.TslFBRBuffIconDataAsset
// 0x0060 (0x0098 - 0x0038)
class UTslFBRBuffIconDataAsset : public UDataAsset
{
public:
	struct FBuffIconDisplaySetting                     IconSettings[0x4];                                        // 0x0038(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRBuffIconDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslFBRWeaponComponent
// 0x0010 (0x0210 - 0x0200)
class UTslFBRWeaponComponent : public UActorComponent
{
public:
	class ATslWeapon*                                  OwnerWeapon;                                              // 0x0200(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHideMeshOnVehicle;                                       // 0x0208(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHideMeshOnGroggy;                                        // 0x0209(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUnarmOnGroggy;                                           // 0x020A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUnarmOnReviving;                                         // 0x020B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bMeshVisibility;                                          // 0x020C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x020D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRWeaponComponent"));

		return ptr;
	}


	void STATIC_OnUpdateVisibility();
	void STATIC_OnUpdateUnarm(const struct FName& InEvent);
	void STATIC_OnUpdatedCharacterEvent(const struct FName& InEvent);
	void STATIC_OnRep_MeshVisibility();
};


// Class TslGame.TslFence
// 0x00A0 (0x0488 - 0x03E8)
class ATslFence : public AActor
{
public:
	class USplineComponent*                            SplineComponent;                                          // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	ETslFenceSelector                                  BeginSelector;                                            // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	class UStaticMesh*                                 BeginMesh1;                                               // 0x03F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 BeginMesh2;                                               // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 BeginMesh3;                                               // 0x0408(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 BeginMesh4;                                               // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	ETslFenceSelector                                  EndSelector;                                              // 0x0418(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0419(0x0007) MISSED OFFSET
	class UStaticMesh*                                 EndMesh1;                                                 // 0x0420(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 EndMesh2;                                                 // 0x0428(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 EndMesh3;                                                 // 0x0430(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 EndMesh4;                                                 // 0x0438(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRandomForMiddle;                                      // 0x0440(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseMiddleSegmentsInOrder;                                // 0x0441(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0442(0x0002) MISSED OFFSET
	float                                              UnitLengthForMiddle;                                      // 0x0444(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UnitSpacingForMiddle;                                     // 0x0448(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PivotOffsetForMiddle;                                     // 0x044C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRandomStream                               RandomStreamForMiddle;                                    // 0x0450(0x0008) (Edit)
	class UStaticMesh*                                 MiddleMesh1;                                              // 0x0458(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 MiddleMesh2;                                              // 0x0460(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 MiddleMesh3;                                              // 0x0468(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 MiddleMesh4;                                              // 0x0470(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FCollisionProfileName                       FenceCollisionProfile;                                    // 0x0478(0x0008) (Edit)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0480(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFence"));

		return ptr;
	}


	class USplineComponent* STATIC_GetSplineComponent();
};


// Class TslGame.TslReactionData
// 0x0058 (0x0090 - 0x0038)
class UTslReactionData : public UDataAsset
{
public:
	float                                              DestroyDelay;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EReactionObjectType                                ObjectType;                                               // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FVehicleReactionData                        VehicleReactionData;                                      // 0x0040(0x000C) (Edit)
	struct FRadialDamageReactionData                   RadialDamageReactionData;                                 // 0x004C(0x000C) (Edit)
	struct FPointDamageReactionData                    PointDamageReactionData;                                  // 0x0058(0x0020) (Edit)
	int                                                DependancyCountBySibling;                                 // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               PhysicsReactionSoundAk;                                   // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               DestructibleReactionSoundAk;                              // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReactionData"));

		return ptr;
	}

};


// Class TslGame.TslReactionComponent
// 0x0060 (0x0BB0 - 0x0B50)
class UTslReactionComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	unsigned char                                      bPendingDestroy : 1;                                      // 0x0B58(0x0001) (Net)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0B59(0x0007) MISSED OFFSET
	class UTslReactionData*                            ReactionData;                                             // 0x0B60(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           ReactionDM;                                               // 0x0B68(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDestructibleBroken;                                     // 0x0B70(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0B80(0x0008) MISSED OFFSET
	class UDestructibleComponent*                      ReactionDestructible;                                     // 0x0B88(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        ReactionStaticMeshComponent;                              // 0x0B90(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x0B98(0x0014) MISSED OFFSET
	bool                                               bShouldRestore;                                           // 0x0BAC(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0BAD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReactionComponent"));

		return ptr;
	}


	void STATIC_OnRep_ShouldRestore();
	void STATIC_OnRep_PendingDestroy(bool PrevPendingDestroy);
	void STATIC_Client_ReactByVehicle(const struct FVector& Impact, const struct FVector& ImpulseDir, const struct FVector& Velocity);
	void STATIC_Client_ReactByRadialDamage(float DamageAmount, const struct FVector& Origin, const struct FVector& Impact, const struct FVector& ImpulseDir, float OuterRadius);
	void STATIC_Client_ReactByPointDamage(float DamageAmount, const struct FVector& Impact, const struct FVector& ImpulseDir);
};


// Class TslGame.TslBreakableFence
// 0x0068 (0x04F0 - 0x0488)
class ATslBreakableFence : public ATslFence
{
public:
	class UTslReactionData*                            ReactionData;                                             // 0x0488(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible1;                                        // 0x0490(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible2;                                        // 0x0498(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible3;                                        // 0x04A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           BeginDestuctible4;                                        // 0x04A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible1;                                          // 0x04B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible2;                                          // 0x04B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible3;                                          // 0x04C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           EndDestuctible4;                                          // 0x04C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible1;                                       // 0x04D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible2;                                       // 0x04D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible3;                                       // 0x04E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           MiddleDestuctible4;                                       // 0x04E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBreakableFence"));

		return ptr;
	}

};


// Class TslGame.TslStaticFence
// 0x0000 (0x0488 - 0x0488)
class ATslStaticFence : public ATslFence
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStaticFence"));

		return ptr;
	}


	class USplineComponent* STATIC_GetSplineComponent();
};


// Class TslGame.TslFilmCameraSpringArmComponent
// 0x0010 (0x0550 - 0x0540)
class UTslFilmCameraSpringArmComponent : public USpringArmComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0540(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFilmCameraSpringArmComponent"));

		return ptr;
	}

};


// Class TslGame.TslFlightComponent
// 0x03C0 (0x05C0 - 0x0200)
class UTslFlightComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                         // 0x0200(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                         // 0x0208(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FAirInput                                   RepInput;                                                 // 0x0210(0x0010) (Net, Transient)
	unsigned char                                      UnknownData00[0x84];                                      // 0x0220(0x0084) MISSED OFFSET
	struct FAirInputConfig                             InputConfig;                                              // 0x02A4(0x0024) (Edit, DisableEditOnInstance)
	struct FAirControlLimitConfig                      ControlLimitConfig;                                       // 0x02C8(0x000C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02D4(0x0004) MISSED OFFSET
	struct FAirEngineConfig                            EngineConfig;                                             // 0x02D8(0x00B0) (Edit, DisableEditOnInstance)
	struct FAirRotorConfig                             RotorConfig;                                              // 0x0388(0x0050) (Edit, DisableEditOnInstance)
	struct FAirDragConfig                              DragConfig;                                               // 0x03D8(0x0038) (Edit, DisableEditOnInstance)
	struct FAirControlTorqueConfig                     ControlTorqueConfig;                                      // 0x0410(0x0090) (Edit, DisableEditOnInstance)
	struct FAirControlForceConfig                      ControlForceConfig;                                       // 0x04A0(0x0038) (Edit, DisableEditOnInstance)
	struct FAirLiftConfig                              LiftConfig;                                               // 0x04D8(0x00B0) (Edit, DisableEditOnInstance)
	struct FAirGeneralConfig                           GeneralConfig;                                            // 0x0588(0x002C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0xC];                                       // 0x05B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFlightComponent"));

		return ptr;
	}


	void STATIC_Server_UpdateInput(const struct FAirInput& InAirInput);
	void STATIC_GetVehicleStateForUI(float* OutThrottle, float* OutAltitudeInMeters, float* OutClimbRate);
};


// Class TslGame.TslFlyingVehicleCockpitWidget
// 0x0018 (0x0268 - 0x0250)
class UTslFlyingVehicleCockpitWidget : public UUserWidget
{
public:
	class UTslAltitudeWidget*                          AltitudeGaugeWidget;                                      // 0x0250(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslAirSpeedWidget*                          AirSpeedWidget;                                           // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UVehicleThrottleBaseWidget*                  ThrottleWidget;                                           // 0x0260(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFlyingVehicleCockpitWidget"));

		return ptr;
	}

};


// Class TslGame.TslFocusableWidgetInterface
// 0x0000 (0x0030 - 0x0030)
class UTslFocusableWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFocusableWidgetInterface"));

		return ptr;
	}

};


// Class TslGame.TslFollowCameraComponent
// 0x0000 (0x0AA0 - 0x0AA0)
class UTslFollowCameraComponent : public UCameraComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFollowCameraComponent"));

		return ptr;
	}


	void STATIC_SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void STATIC_SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);
	void STATIC_SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void STATIC_SetOrthoWidth(float InOrthoWidth);
	void STATIC_SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void STATIC_SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void STATIC_SetFieldOfView(float InFieldOfView);
	void STATIC_SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void STATIC_SetAspectRatio(float InAspectRatio);
	void STATIC_GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void STATIC_AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class TslGame.TslFollowCameraSpringArmComponent
// 0x0030 (0x0570 - 0x0540)
class UTslFollowCameraSpringArmComponent : public USpringArmComponent
{
public:
	float                                              FollowArmTargetArmLength;                                 // 0x0540(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FollowAircraftArmTargetArmLength;                         // 0x0544(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FollowParachutingArmTargetArmLength;                      // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FollowFallingWithParachuteArmTargetArmLength;             // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FollowVehicleArmTargetArmLength;                          // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZoomStep;                                                 // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultTargetOffsetZ;                                     // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingWithParachuteTargetOffsetZ;                        // 0x055C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachuteTargetOffsetZ;                                   // 0x0560(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndTargetArmLength;                                       // 0x0564(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bZoomIn;                                                  // 0x0568(0x0001) (ZeroConstructor, IsPlainOldData)
	EFollowCameraMode                                  LastFollowCameraMode;                                     // 0x0569(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x056A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFollowCameraSpringArmComponent"));

		return ptr;
	}

};


// Class TslGame.TslForceFeedbackEffect
// 0x0008 (0x0050 - 0x0048)
class UTslForceFeedbackEffect : public UForceFeedbackEffect
{
public:
	float                                              UserValueMultiplier;                                      // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslForceFeedbackEffect"));

		return ptr;
	}

};


// Class TslGame.TslFPPShadowSupportComponent
// 0x0010 (0x09D0 - 0x09C0)
class UTslFPPShadowSupportComponent : public UPrimitiveComponent
{
public:
	TArray<class USceneComponent*>                     CachedChildren;                                           // 0x09C0(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFPPShadowSupportComponent"));

		return ptr;
	}

};


// Class TslGame.TslFuelPuddleContainer
// 0x02E8 (0x06D0 - 0x03E8)
class ATslFuelPuddleContainer : public AActor
{
public:
	class UAkComponent*                                AkComponent;                                              // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               FireSoundStart;                                           // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FireSoundStop;                                            // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DebuffTemplate;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FTslFireParticleFXSet>               FireParticle;                                             // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FDecalEffectData                            PuddleDecal;                                              // 0x0418(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      PuddleActorTemplate;                                      // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 PuddleSizeCurve_Appear;                                   // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 PuddleSizeCurve_Disappear;                                // 0x0488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 PuddleSizeCurve;                                          // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PuddleSizeLerpSpeed;                                      // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IgnitedPuddleLifespan;                                    // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       PuddleSizeMaterialParam;                                  // 0x04A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DecalSortOrder;                                           // 0x04A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinPuddleRadius;                                          // 0x04AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPuddleRadius;                                          // 0x04B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PuddleGrowFactor;                                         // 0x04B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GenerationDistance;                                       // 0x04B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceBetweenPuddles;                                // 0x04BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IgnitionDelay;                                            // 0x04C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PuddleLifespan;                                           // 0x04C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireLifespan;                                             // 0x04C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ActorDestroyDelay;                                        // 0x04CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AkCompMultiPositionStride;                                // 0x04D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageTickInterval;                                       // 0x04D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagePerTick;                                            // 0x04D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x04E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslSimpleCollisionReceiver*                 SimpleCollision_Puddle;                                   // 0x04E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslSimpleCollisionReceiver*                 SimpleCollision_FireField;                                // 0x04F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x04F8(0x0018) MISSED OFFSET
	class ATslFuelPuddleContainer*                     LastOverlapContainer;                                     // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x24];                                      // 0x0518(0x0024) MISSED OFFSET
	float                                              ReplicatedTimer;                                          // 0x053C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FTslFuelPuddleArray                         PuddleContainer;                                          // 0x0540(0x00C8) (Net)
	TMap<int, struct FTslFuelPuddleVisuals>            PuddleDecals;                                             // 0x0608(0x0050) (ZeroConstructor, Transient)
	TArray<class ATslCharacter*>                       OverlapCharacters;                                        // 0x0658(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x68];                                      // 0x0668(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFuelPuddleContainer"));

		return ptr;
	}


	void STATIC_OnStaticCollisionPuddle(const struct FSimpleCollisionEvent& CollisionEvent);
	void STATIC_OnCollisionPuddle(const struct FSimpleCollisionEvent& CollisionEvent);
	void STATIC_OnCollisionFire(const struct FSimpleCollisionEvent& CollisionEvent);
};


// Class TslGame.TslGame_Menu
// 0x0000 (0x04C8 - 0x04C8)
class ATslGame_Menu : public AGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGame_Menu"));

		return ptr;
	}


	void STATIC_StartMatch();
	void STATIC_SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void STATIC_Say(const struct FString& Msg);
	void STATIC_RestartGame();
	bool STATIC_ReadyToStartMatch();
	bool STATIC_ReadyToEndMatch();
	void STATIC_K2_OnSetMatchState(const struct FName& NewState);
	bool STATIC_IsMatchInProgress();
	bool STATIC_HasMatchEnded();
	struct FName STATIC_GetMatchState();
	void STATIC_EndMatch();
	void STATIC_AbortMatch();
};


// Class TslGame.TslBattleRoyaleGameMode
// 0x0000 (0x1150 - 0x1150)
class ATslBattleRoyaleGameMode : public ATslGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyaleGameMode"));

		return ptr;
	}

};


// Class TslGame.TslBattleRoyaleGameMode_CPP
// 0x0020 (0x1170 - 0x1150)
class ATslBattleRoyaleGameMode_CPP : public ATslBattleRoyaleGameMode
{
public:
	class UClass*                                      CPPWinDamageType;                                         // 0x1150(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      SignalDamageAddition;                                     // 0x1158(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1168(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyaleGameMode_CPP"));

		return ptr;
	}

};


// Class TslGame.TslDestructionGameMode
// 0x0000 (0x1150 - 0x1150)
class ATslDestructionGameMode : public ATslBattleRoyaleGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructionGameMode"));

		return ptr;
	}

};


// Class TslGame.TslNpcGameMode
// 0x0000 (0x1150 - 0x1150)
class ATslNpcGameMode : public ATslGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcGameMode"));

		return ptr;
	}


	bool STATIC_UseCeremonyState();
	void STATIC_TimerHandleSpawnAI();
	void STATIC_SendSystemMessageToAll(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void STATIC_RestartAirborn();
	void STATIC_OnUpdateGamePhase(int PhaseIndex, bool bIsRelease);
	void STATIC_OnNetDriverError(const struct FString& Ip, int Port, const struct FString& ErrorType);
	void STATIC_OnKickPlayerFromBEServer(class APlayerController* InPlayerController, const struct FText& Reason);
	void STATIC_OnConnectionTimeOutError(float DriverTime, float Threshold, const struct FString& RemoteAddress, bool bIsServer, const struct FString& UniqueId);
	void STATIC_NotifyRestrictingPlayAreaToAll();
	void STATIC_NotifyNextGasInToAll(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_LogNetDriverError();
	bool STATIC_IsPreventFinishMatch();
	bool STATIC_IsPlayInEditor();
	void STATIC_HB_RestStartPosForAI();
	bool STATIC_HasRoundEnded();
	class UVoiceManager* STATIC_GetVoiceManager();
	float STATIC_GetVehicleWheelDamageModifier();
	class UThingSpawnProcessor* STATIC_GetThingSpawnProcessor();
	float STATIC_GetTeamKillDamageModifier();
	class ULobbyLink* STATIC_GetLobbyLink();
	class UJukeBoxSpawnProcessor* STATIC_GetJukeBoxSpawnProcessor();
	class UItemSpawnProcessor* STATIC_GetItemSpawnProcessor();
	class UInteractionSupplySpawnProcessor* STATIC_GetInteractionSupplySpawnProcessor();
	float STATIC_GetInProgressElapsedTimeSec();
	class UEventItemSpawnProcessor* STATIC_GetEventItemSpawnProcessor();
	class UDroppedPackageSpawnProcessor* STATIC_GetDroppedPackageSpawnProcessor();
	bool STATIC_GetCanParachuteFollow();
	class ABlackZoneController* STATIC_GetBlackZoneController();
	void STATIC_GetAllPawns(TArray<class APawn*>* OutPawns);
	void STATIC_FinishMatch(bool bForceFinish);
	class ATslCharacter* STATIC_FindCharacterByPlayerState(class APlayerState* State);
	bool STATIC_CheckFinish();
	void STATIC_ChangeGameEndState(EGameEndState NewGameEndState);
	bool STATIC_CanDealDamage(class ATslPlayerState* DamageInstigator, class ATslPlayerState* DamagedPlayer);
	void STATIC_BroadcastGameModeEvent(const struct FName& EventName, const struct FString& Parameter);
	void STATIC_BenchmarkFinished();
};


// Class TslGame.TslTrainingGameMode
// 0x0000 (0x1150 - 0x1150)
class ATslTrainingGameMode : public ATslGameMode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrainingGameMode"));

		return ptr;
	}

};


// Class TslGame.WarModeCarePackage
// 0x0078 (0x00A8 - 0x0030)
class UWarModeCarePackage : public UObject
{
public:
	float                                              CarepackageStartDelayInSecRandomMIN;                      // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CarepackageStartDelayInSecRandomMAX;                      // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CarepackageNextSpawnTimeInSecRandomMIN;                   // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CarepackageNextSpawnTimeInSecRandomMAX;                   // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EWarModeCarePackageKitType                         CarePackageType;                                          // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TMap<EWarModeCarePackageKitType, class UClass*>    CarePackageItemSpawnerClassOfType;                        // 0x0048(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      AircraftCarePackageClass;                                 // 0x0098(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WarModeCarePackage"));

		return ptr;
	}

};


// Class TslGame.TslWarGameMode
// 0x0190 (0x12E0 - 0x1150)
class ATslWarGameMode : public ATslGameMode
{
public:
	class UClass*                                      DropItemFxClass;                                          // 0x1150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseEndCircleArea;                                        // 0x1158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseWarRoyaleBluezone;                                    // 0x1159(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x115A(0x0006) MISSED OFFSET
	TArray<struct FBattleRoyalePoisionGasData>         WarRoyaleBluezoneGasDataArray;                            // 0x1160(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FBattleRoyalePoisionGasData                 StaticBluezoneGasData;                                    // 0x1170(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FBattleRoyalePoisionGasData>         StaticBluezoneGasDataArray;                               // 0x11C0(0x0010) (ZeroConstructor)
	float                                              EjectionAreaBorderRadius;                                 // 0x11D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                GoalScore;                                                // 0x11D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeLimitInSec;                                           // 0x11D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanHaveNegativeScore;                                    // 0x11DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x11DD(0x0003) MISSED OFFSET
	float                                              PointDBNO;                                                // 0x11E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointKill;                                                // 0x11E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointTeamDBNO;                                            // 0x11E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointTeamKill;                                            // 0x11EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointRevive;                                              // 0x11F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointAssist;                                              // 0x11F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PointDeath;                                               // 0x11F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x11FC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 BonusKillPointRatioCurve;                                 // 0x1200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_Kill;                                       // 0x1208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_ChainKill;                                  // 0x120C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_Death;                                      // 0x1210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_Assist;                                     // 0x1214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_RoundWin;                                   // 0x1218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_RoundLoss;                                  // 0x121C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_MatchWin;                                   // 0x1220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PersonalPoint_MatchLoss;                                  // 0x1224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseRedZone;                                              // 0x1228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseBlackZone;                                            // 0x1229(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTeamElimination;                                         // 0x122A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x122B(0x0001) MISSED OFFSET
	float                                              LootBoxLifeTime;                                          // 0x122C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RespawnOffTimeLeftRatio;                                  // 0x1230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RespawnPeriodSeconds;                                     // 0x1234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthByRevive;                                           // 0x1238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroggyDamagePerSecond;                                    // 0x123C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroggyEnabledAltitudeInCentiMeter;                        // 0x1240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTeamXRay;                                             // 0x1244(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ERespawnType                                       RespawnType;                                              // 0x1245(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseInstantRespawn;                                       // 0x1246(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x1247(0x0001) MISSED OFFSET
	struct FString                                     BattleAreaType;                                           // 0x1248(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FRespawnTypeClass>                   RespawnProcessorClasses;                                  // 0x1258(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class AAbstractRespawnProcessor*                   RespawnProcessor;                                         // 0x1268(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x1270(0x0010) MISSED OFFSET
	class UClass*                                      CarePackegeClass;                                         // 0x1280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UWarModeCarePackage*                         CarePackege;                                              // 0x1288(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<int, class ATslPlayerStart*>                  PlatoonTeamPlayerStart;                                   // 0x1290(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWarGameMode"));

		return ptr;
	}


	void STATIC_OnRespawnStarted();
	void STATIC_OnRespawnEnded();
	void STATIC_OnRespawned();
};


// Class TslGame.TslConquestGameMode
// 0x0010 (0x12F0 - 0x12E0)
class ATslConquestGameMode : public ATslWarGameMode
{
public:
	float                                              CaptureRestorePointPerSecond;                             // 0x12E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseWarModeScore;                                         // 0x12E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x12E5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConquestGameMode"));

		return ptr;
	}

};


// Class TslGame.TslTDMGameMode
// 0x0190 (0x1470 - 0x12E0)
class ATslTDMGameMode : public ATslWarGameMode
{
public:
	unsigned char                                      bUseScoreOfEachTeamForCarePackage : 1;                    // 0x12E0(0x0001) (Edit)
	unsigned char                                      bUseScoreOfAllTeamsForCarePackage : 1;                    // 0x12E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x12E1(0x0007) MISSED OFFSET
	TArray<float>                                      ScoresPerTeamForCarePackage;                              // 0x12E8(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      ScoresTotalForCarePackage;                                // 0x12F8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x1308(0x0010) MISSED OFFSET
	TArray<struct FModeStringParameter>                LocalStringParameters;                                    // 0x1318(0x0010) (Edit, ZeroConstructor)
	int                                                PlatoonA_Count;                                           // 0x1328(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                PlatoonB_Count;                                           // 0x132C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x1330(0x0008) MISSED OFFSET
	class UClass*                                      AssistManagerClass;                                       // 0x1338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAssistManager*                              AssistManager;                                            // 0x1340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslTDMBoostGaugeSystem*                     BoostGaugeSystem;                                         // 0x1348(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class ATslBlueZoneCreateArea*>              AllBluezoneCreateArea;                                    // 0x1350(0x0010) (ZeroConstructor, Transient)
	struct FString                                     RandomBattleAreaString;                                   // 0x1360(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x50];                                      // 0x1370(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslTDMGameMode.LoggedInPlayerSet
	unsigned char                                      UnknownData04[0x50];                                      // 0x13C0(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslTDMGameMode.PreviewScenePlayingPlayerSet
	float                                              PreviewSceneDuration;                                     // 0x1410(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinTeamPlayerCount;                                       // 0x1414(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<class AController*, class AActor*>            StartSpotMap;                                             // 0x1418(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x8];                                       // 0x1468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTDMGameMode"));

		return ptr;
	}


	void STATIC_OnEndPreviewScene(class ATslTDMPlayerController* NewPlayer);
};


// Class TslGame.TslZombieGameMode
// 0x0090 (0x11E0 - 0x1150)
class ATslZombieGameMode : public ATslGameMode
{
public:
	class UClass*                                      ZombieDamageType;                                         // 0x1150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FZombieCustomizationData>            ZombieCustomizationData;                                  // 0x1158(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bNewZombieGameMode;                                       // 0x1168(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ZombieRevive;                                             // 0x1169(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x116A(0x0002) MISSED OFFSET
	float                                              ZombieReviveTime;                                         // 0x116C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZombieReviveBluezoneImmuneTime;                           // 0x1170(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bZombieRespawnEnable : 1;                                 // 0x1174(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      ZombieRespawnMaxNum;                                      // 0x1175(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x1176(0x0002) MISSED OFFSET
	float                                              ZombieRespawnTime;                                        // 0x1178(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MultiplierZombieDamage;                                   // 0x117C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZombieHealth;                                             // 0x1180(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bHumanSkipDBNO : 1;                                       // 0x1184(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	EZombieRuleType                                    ZombieRuleType;                                           // 0x1185(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bZombieSkipDBNO : 1;                                      // 0x1186(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x1];                                       // 0x1187(0x0001) MISSED OFFSET
	float                                              TimeLimitInSec;                                           // 0x1188(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HumanPlayerCount;                                         // 0x118C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EZombieVirusType                                   ApplyZombieVirusType;                                     // 0x1190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x1191(0x0003) MISSED OFFSET
	float                                              VirusDamagepersecond;                                     // 0x1194(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ZombieVirusBuff;                                          // 0x1198(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceMovementSpeedModifier;                               // 0x11A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZVelocityMultiplier;                                      // 0x11A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZombieAttackSpeedMultiplier;                              // 0x11A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZombieFallingDamageMultiplier;                            // 0x11AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FAutoRecoveryData                           RecoveryInfo;                                             // 0x11B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bZombieOpenDoor : 1;                                      // 0x11C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bZombieDrive : 1;                                         // 0x11C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x3];                                       // 0x11C9(0x0003) MISSED OFFSET
	float                                              HumanDetectionInterval;                                   // 0x11CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanDetectionDuration;                                   // 0x11D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanDetectionRange;                                      // 0x11D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHumanDetection;                                          // 0x11D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x11D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombieGameMode"));

		return ptr;
	}

};


// Class TslGame.TslGamemodeAIDataAsset
// 0x0070 (0x00A8 - 0x0038)
class UTslGamemodeAIDataAsset : public UDataAsset
{
public:
	TArray<struct FAIEquipSpawnGroupDataBase>          SpawnEquipDataBase;                                       // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIEquipSpawnGroupDataBase>          SpawnEquipDataBaseByGamePhase;                            // 0x0048(0x0010) (Edit, ZeroConstructor)
	float                                              RandomStartJumpTime;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomEndJumpTime;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpRadius;                                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpHeight;                                               // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAccelerateStart;                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAccelerateEnd;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OpenParachuteHeight;                                      // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckOpenParachuteFreq;                                   // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CloseParachuteHeight;                                     // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckCloseParachuteFreq;                                  // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WhiteCircleRaduisCanPrne;                                 // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WhiteCircleRaduisMedicine;                                // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StopdeliverTime;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoCirlceRadius;                                           // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceHeight;                                              // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RangeMin;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RangeMax;                                                 // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OriginCheckSquare;                                        // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DestCheckSquare;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamemodeAIDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionCloudDefines
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionCloudDefines : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionCloudDefines"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFunctionImplementation
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFunctionImplementation : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFunctionImplementation"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Master
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_Master : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Master"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MasterVolume
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_MasterVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MasterVolume"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Music
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_Music : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Music"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MusicVolume
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_MusicVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_MusicVolume"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Ui
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_Ui : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Ui"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_UiVolume
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_UiVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_UiVolume"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Effects
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_Effects : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_Effects"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_EffectsVolume
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_EffectsVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_EffectsVolume"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_Sound_HRTF
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_Sound_HRTF : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_Sound_HRTF"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceInputMode
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_VoiceChat_VoiceInputMode : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceInputMode"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatChannel
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatChannel : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatChannel"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_MicrophoneVolume
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_VoiceChat_MicrophoneVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_MicrophoneVolume"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatVolume
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatVolume : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Audio_VoiceChat_VoiceChatVolume"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_Preset
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_Preset : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_Preset"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_InvertX
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_InvertX : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_InvertX"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_InvertY
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_InvertY : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_InvertY"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_DeadzoneRight
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_DeadzoneRight : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_DeadzoneRight"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_DeadzoneLeft
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_DeadzoneLeft : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_DeadzoneLeft"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_Vibration
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_Vibration : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_Vibration"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_VibrationRate
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Gamepad_VibrationRate : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Gamepad_VibrationRate"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_Forward
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_GamepadSensitivity_Forward : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_Forward"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_Running
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_GamepadSensitivity_Running : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_Running"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_Vertical
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_GamepadSensitivity_Vertical : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_Vertical"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_NamedSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_GamepadSensitivity_NamedSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_NamedSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_ToggleAimAcceleration
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_GamepadSensitivity_ToggleAimAcceleration : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_ToggleAimAcceleration"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_AimAcceleration
// 0x0000 (0x0038 - 0x0038)
class UTslGameOptionFuncImpl_Controls_GamepadSensitivity_AimAcceleration : public UTslGameOptionFuncImpl_Controls_GamepadSensitivity_NamedSensitivity
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_GamepadSensitivity_AimAcceleration"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Crouch
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Crouch : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Crouch"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Prone
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Prone : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Prone"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Walk
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Walk : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Walk"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Sprint
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Sprint : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Sprint"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_FreeLook
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_FreeLook : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_FreeLook"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_HoldBreath
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_HoldBreath : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_HoldBreath"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_CantedSight
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_CantedSight : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_CantedSight"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Peek
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Peek : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Peek"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Map
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Map : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Map"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Aim
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_Aim : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_Aim"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_ADS
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_KeyInputMethod_ADS : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_KeyInputMethod_ADS"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_InvertMouse
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_InvertMouse : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_InvertMouse"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_GeneralSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_GeneralSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_GeneralSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_VerticalSensitivityMultiplier
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_VerticalSensitivityMultiplier : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_VerticalSensitivityMultiplier"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_AimSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_AimSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_AimSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_IronSightSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_IronSightSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_IronSightSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_ScopingSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_ScopingSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_ScopingSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_OverrideSensitivityForAllScopes
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_OverrideSensitivityForAllScopes : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_OverrideSensitivityForAllScopes"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_2xScopeSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_2xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_2xScopeSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_3xScopeSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_3xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_3xScopeSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_4xScopeSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_4xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_4xScopeSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_6xScopeSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_6xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_6xScopeSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_8xScopeSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_8xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_8xScopeSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_15xScopeSensitivity
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Controls_Mouse_15xScopeSensitivity : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Controls_Mouse_15xScopeSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_FreeLookInterpolation
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_FreeLookInterpolation : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_FreeLookInterpolation"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_TPPAimCameraPosition
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_TPPAimCameraPosition : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_TPPAimCameraPosition"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoReloading
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoReloading : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoReloading"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_HandGun
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_HandGun : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_HandGun"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_SMG
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_SMG : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_SMG"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_AR
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_AR : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_AR"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_DMR
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_DMR : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_DefaultFiringMode_DMR"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_SecondaryFiringMode_SMG
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_SecondaryFiringMode_SMG : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_SecondaryFiringMode_SMG"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_SecondaryFiringMode_AR
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_SecondaryFiringMode_AR : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_SecondaryFiringMode_AR"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_ClanName
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_ClanName : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_ClanName"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoWeaponSkinReplacement
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoWeaponSkinReplacement : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoWeaponSkinReplacement"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipment
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipment : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipment"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipAttachmentFromInventory
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipAttachmentFromInventory : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipAttachmentFromInventory"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipmentForScope
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipmentForScope : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoEquipmentForScope"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoReplaceAttachment
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_AutoReplaceAttachment : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_AutoReplaceAttachment"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_RadioMessage
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_RadioMessage : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_RadioMessage"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_RADIO_MESSAGE_PRESET
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_RADIO_MESSAGE_PRESET : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_RADIO_MESSAGE_PRESET"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_RADIO_MESSAGE_QUICKPING
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_RADIO_MESSAGE_QUICKPING : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_RADIO_MESSAGE_QUICKPING"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_ContinuousHealItemUse
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Functionalities_ContinuousHealItemUse : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Functionalities_ContinuousHealItemUse"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_General_CrossPlatformPlay
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_General_CrossPlatformPlay : public UTslGameOptionFunctionImplementation
{
public:
	class UTslGameOptionItemStepperWidget*             CachedStepperWidget;                                      // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_General_CrossPlatformPlay"));

		return ptr;
	}


	bool STATIC_IsInputValid(int Selection);
	void STATIC_HandleAppReactivated();
};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_General_DVR
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_General_DVR : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_General_DVR"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_Replay
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Replay_Replay : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_Replay"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_DeathCam
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_Replay_DeathCam : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_Replay_DeathCam"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InventoryCharacterRender
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_InventoryCharacterRender : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InventoryCharacterRender"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_ColorBlindMode
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_ColorBlindMode : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_ColorBlindMode"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColor
// 0x0010 (0x0040 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColor : public UTslGameOptionFunctionImplementation
{
public:
	struct FLinearColor                                PreviewColor;                                             // 0x0030(0x0010) (Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColor"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorRed
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorRed : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorRed"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorGreen
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorGreen : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorGreen"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorBlue
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorBlue : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorBlue"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorAlpha
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_CrosshairColorAlpha : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CrosshairColorAlpha"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WeaponSlotHUD
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_WeaponSlotHUD : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WeaponSlotHUD"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WorldMapZoomSensitivity
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_WorldMapZoomSensitivity : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_WorldMapZoomSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDesaturation
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_MinimapDesaturation : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDesaturation"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDynamicZoom
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_MinimapDynamicZoom : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_MinimapDynamicZoom"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedType
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_KillfeedType : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedType"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedLimit
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_KillfeedLimit : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_KillfeedLimit"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideNicknamesinKillfeed
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_HideNicknamesinKillfeed : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideNicknamesinKillfeed"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideWeaponMasteryinKillfeed
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_HideWeaponMasteryinKillfeed : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_HideWeaponMasteryinKillfeed"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InteractionTargetHighlight
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_InteractionTargetHighlight : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_InteractionTargetHighlight"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_DropItemFlashing
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_DropItemFlashing : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_DropItemFlashing"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_NetworkDebugStatistics
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_NetworkDebugStatistics : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_NetworkDebugStatistics"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_OnScreenKeyGuide
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_OnScreenKeyGuide : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_OnScreenKeyGuide"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CompassShade
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Gameplay_UI_CompassShade : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Gameplay_UI_CompassShade"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_RenderScale
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_RenderScale : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_RenderScale"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_FppCameraFov
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_FppCameraFov : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_FppCameraFov"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Sharpen
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Sharpen : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Sharpen"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_VSync
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_VSync : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_VSync"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_MotionBlur
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_MotionBlur : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_MotionBlur"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_OverallQuality
// 0x0020 (0x0050 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_OverallQuality : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_OverallQuality"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_AntiAliasing
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_AntiAliasing : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_AntiAliasing"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_PostProcessing
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_PostProcessing : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_PostProcessing"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Shadows
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Shadows : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Shadows"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Textures
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Textures : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Textures"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Effects
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Effects : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Effects"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Foliage
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_Foliage : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_Foliage"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_ViewDistance
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_AdvancedSettings_ViewDistance : public UTslGameOptionFuncImpl_Graphics_AdvancedSettings_CommonFucImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_AdvancedSettings_ViewDistance"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_DisplayMode
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_DisplayMode : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_DisplayMode"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Resolution
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_Resolution : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Resolution"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_LobbyFpsCap
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_LobbyFpsCap : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_LobbyFpsCap"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_InGameFpsCap
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_InGameFpsCap : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_InGameFpsCap"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_SmoothedFrameRate
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_SmoothedFrameRate : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_SmoothedFrameRate"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_MaxFps
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_MaxFps : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_MaxFps"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Brightness
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_Brightness : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_Brightness"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_UniversalBrightnessForAllMaps
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_UniversalBrightnessForAllMaps : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_UniversalBrightnessForAllMaps"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_BrightnessForMap
// 0x0010 (0x0040 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_BrightnessForMap : public UTslGameOptionFunctionImplementation
{
public:
	struct FString                                     RelatedMapName;                                           // 0x0030(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_BrightnessForMap"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_VolumetricFog
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_VolumetricFog : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_VolumetricFog"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_4K
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_DisplaySettings_4K : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_DisplaySettings_4K"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_Language_LanguageSetting
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_Language_LanguageSetting : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_Language_LanguageSetting"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionFuncImpl_Graphics_Nvidia_HighlightSetting
// 0x0008 (0x0038 - 0x0030)
class UTslGameOptionFuncImpl_Graphics_Nvidia_HighlightSetting : public UTslGameOptionFunctionImplementation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_Graphics_Nvidia_HighlightSetting"));

		return ptr;
	}

};


// Class TslGame.TslNaviWidgetComp
// 0x0070 (0x00A0 - 0x0030)
class UTslNaviWidgetComp : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnGamepadUp_Handler;                                      // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadDown_Handler;                                    // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadRight_Handler;                                   // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadLeft_Handler;                                    // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadEnter_Handler;                                   // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGamepadBack_Handler;                                    // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFocusReceived_Handler;                                  // 0x0090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNaviWidgetComp"));

		return ptr;
	}

};


// Class TslGame.TslNaviWidgetInterface
// 0x0000 (0x0030 - 0x0030)
class UTslNaviWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNaviWidgetInterface"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionNavigatableWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslGameOptionNavigatableWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class UTslNaviWidgetComp*                          NaviWidgetComp;                                           // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FTslStickInputHelper                        ModificationInputHelper;                                  // 0x0400(0x0014)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	struct FTslStickInputHelper                        NavigationInputHelper;                                    // 0x0418(0x0014)
	unsigned char                                      UnknownData02[0x4];                                       // 0x042C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionNavigatableWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionItemWidget
// 0x00D8 (0x0508 - 0x0430)
class UTslGameOptionItemWidget : public UTslGameOptionNavigatableWidget
{
public:
	struct FName                                       ParentTabName;                                            // 0x0430(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       ParentCategoryName;                                       // 0x0438(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       ItemName;                                                 // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ItemNumber;                                               // 0x0448(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	struct FText                                       DescriptionText;                                          // 0x0450(0x0018) (Transient)
	ETslGameOptionSupplementaryType                    SupplementaryType;                                        // 0x0468(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsCloudOption;                                           // 0x0469(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bShowTooltipIcon;                                         // 0x046A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIndented;                                                // 0x046B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHighlighted;                                             // 0x046C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	class UTslGameOptionFunctionImplementation*        OptFuncImpl;                                              // 0x0470(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGameOptionWidget*                        CachedGameOptionWidget;                                   // 0x0478(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  DisplayNameText_Binder;                                   // 0x0480(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class USizeBox*                                    IndentationSizeBox;                                       // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UButton*                                     HoverHighlightButton;                                     // 0x04A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      TooltipIconImage;                                         // 0x04B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   Highlit_Binder;                                           // 0x04B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                ColorNormal;                                              // 0x04D8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                ColorHighlighted;                                         // 0x04E8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                ColorTooltipIconHighlighted;                              // 0x04F8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemWidget"));

		return ptr;
	}


	void STATIC_UpdateWidgetOnDependentSlider(class UTslGameOptionItemWidget* InstigatorWidget, bool bIsChanged, bool bIsDefault, float SliderRawValue);
	void STATIC_UpdateWidgetByDependentStepper(class UTslGameOptionItemWidget* InstigatorWidget, bool bIsChanged, bool bIsDefault, int StepperIndex);
	void STATIC_OnCloudOptionTooltipDeactivated();
	void STATIC_OnCloudOptionTooltipActivated();
};


// Class TslGame.TslGameOptionItemKeyBinderWidget
// 0x0090 (0x0598 - 0x0508)
class UTslGameOptionItemKeyBinderWidget : public UTslGameOptionItemWidget
{
public:
	TArray<struct FTslInputKey>                        InitialInputKeySlotValues;                                // 0x0508(0x0010) (ZeroConstructor, Transient)
	struct FText                                       DetailedDescriptionText;                                  // 0x0518(0x0018) (Transient)
	struct FTslGameOptionKeyBindingDesc                KeyBindingDesc;                                           // 0x0530(0x0038) (Transient)
	TArray<class UTslGameOptionItemKeyBinderSlotWidget*> CachedKeySlotWidgets;                                     // 0x0568(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<struct FUmgWidgetBinder_Gerneral>           KeyBindingSlot_Binders;                                   // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnKeyBinderValueChangeEvent;                              // 0x0588(0x0010) (ZeroConstructor, Transient, InstancedReference)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemKeyBinderWidget"));

		return ptr;
	}


	void STATIC_OnKeyBinderSlotValueChanged(int SlotIndex, const struct FTslInputKey& InputKey);
};


// Class TslGame.TslGameOptionFuncImpl_KeyBindings
// 0x0000 (0x0030 - 0x0030)
class UTslGameOptionFuncImpl_KeyBindings : public UTslGameOptionFunctionImplementation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionFuncImpl_KeyBindings"));

		return ptr;
	}

};


// Class TslGame.TslGamepadInputComponent
// 0x00E0 (0x02E0 - 0x0200)
class UTslGamepadInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0200(0x0040) MISSED OFFSET
	TMap<struct FName, struct FTslGamepadInputKeySet>  GamepadInputKeysCached;                                   // 0x0240(0x0050) (ZeroConstructor)
	TMap<struct FKey, bool>                            BlockingInputKeyList;                                     // 0x0290(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadInputComponent"));

		return ptr;
	}

};


// Class TslGame.TslGamepadPawnInputComponent
// 0x3D80 (0x4060 - 0x02E0)
class UTslGamepadPawnInputComponent : public UTslGamepadInputComponent
{
public:
	unsigned char                                      UnknownData00[0x3D80];                                    // 0x02E0(0x3D80) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadPawnInputComponent"));

		return ptr;
	}

};


// Class TslGame.TslGamepadPCInputComponent
// 0x1680 (0x1960 - 0x02E0)
class UTslGamepadPCInputComponent : public UTslGamepadInputComponent
{
public:
	unsigned char                                      UnknownData00[0x1680];                                    // 0x02E0(0x1680) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadPCInputComponent"));

		return ptr;
	}

};


// Class TslGame.TslGameSession
// 0x0310 (0x0710 - 0x0400)
class ATslGameSession : public AGameSession
{
public:
	unsigned char                                      UnknownData00[0x310];                                     // 0x0400(0x0310) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameSession"));

		return ptr;
	}

};


// Class TslGame.TslGameState
// 0x0618 (0x0A60 - 0x0448)
class ATslGameState : public AGameState
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET
	bool                                               bCanKillerSpectate;                                       // 0x0450(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsingLeagueReplay;                                       // 0x0451(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0452(0x0006) MISSED OFFSET
	struct FString                                     ESportsManagerURL;                                        // 0x0458(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor, Transient)
	struct FVector2D                                   LastCirclePosition;                                       // 0x0468(0x0008) (BlueprintVisible, Net, Transient, IsPlainOldData)
	bool                                               bIsEventMode;                                             // 0x0470(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0471(0x0003) MISSED OFFSET
	struct FVector                                     SafetyZonePosition;                                       // 0x0474(0x000C) (BlueprintVisible, Net, Transient, IsPlainOldData)
	float                                              SafetyZoneBeginRadius;                                    // 0x0480(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bShowLastCircleMark;                                      // 0x0484(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsCustomGame;                                            // 0x0485(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0486(0x0002) MISSED OFFSET
	float                                              LerpSafetyZoneRadius;                                     // 0x0488(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LerpPoisonGasWarningZonePosition;                         // 0x048C(0x000C) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	float                                              LerpPoisonGasWarningZoneRadius;                           // 0x0498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ElapsedPoisonGasWarningDuration;                          // 0x049C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PoisonGasWarningZoneBeginPosition;                        // 0x04A0(0x000C) (BlueprintVisible, Net, Transient, IsPlainOldData)
	float                                              PoisonGasWarningZoneBeginRadius;                          // 0x04AC(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHideNicknameOnKillfeed;                                  // 0x04B0(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseXboxUnauthorizedDevice;                               // 0x04B1(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x04B2(0x0002) MISSED OFFSET
	float                                              ElapsedGasReleaseDuration;                                // 0x04B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ElapsedWarningDurationForClient;                          // 0x04B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ElapsedWarningDuration;                                   // 0x04BC(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanShowLastCircleMark;                                   // 0x04C0(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsedReplicatedCharacterDataActor;                        // 0x04C1(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x04C2(0x0002) MISSED OFFSET
	int                                                NumStartTeams;                                            // 0x04C4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MatchEndWaitingTime;                                      // 0x04C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LerpSafetyZonePosition;                                   // 0x04CC(0x000C) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	bool                                               bAllowGlobalVoiceChat;                                    // 0x04D8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	struct FString                                     MatchShortGuid;                                           // 0x04E0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	EGameEndState                                      GameEndState;                                             // 0x04F0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04F1(0x0003) MISSED OFFSET
	float                                              PoisonGasWarningRadius;                                   // 0x04F4(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SafetyZoneRadius;                                         // 0x04F8(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumTeams;                                                 // 0x04FC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumAlivePlayers;                                          // 0x0500(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TotalReleaseDuration;                                     // 0x0504(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PoisonGasWarningPosition;                                 // 0x0508(0x000C) (BlueprintVisible, Net, Transient, IsPlainOldData)
	int                                                NumStartPlayers;                                          // 0x0514(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<int>                                        WinningTeamId;                                            // 0x0518(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	unsigned char                                      TotalRoundCount;                                          // 0x0528(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      RoundCount;                                               // 0x0529(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x052A(0x0006) MISSED OFFSET
	TMap<int, int>                                     WinningTeamRound;                                         // 0x0530(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               bChangedStartingPointRound;                               // 0x0580(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0581(0x0003) MISSED OFFSET
	int                                                NextPoisonGasIndex;                                       // 0x0584(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFlareGun;                                                // 0x0588(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableBleedOut;                                          // 0x0589(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsingSelectableSpawnKit;                                 // 0x058A(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsingPlatoonSpawnKit;                                    // 0x058B(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x058C(0x0004) MISSED OFFSET
	struct FString                                     SelectableSpawnKit;                                       // 0x0590(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient)
	struct FString                                     PlatoonASpawnKit;                                         // 0x05A0(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient)
	struct FString                                     PlatoonBSpawnKit;                                         // 0x05B0(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient)
	TArray<struct FString>                             EventItemParameter;                                       // 0x05C0(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient)
	struct FString                                     EventItemTableName;                                       // 0x05D0(0x0010) (BlueprintVisible, Net, ZeroConstructor, Transient)
	bool                                               bIsRunningInnerBlueZone;                                  // 0x05E0(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x05E1(0x0003) MISSED OFFSET
	struct FVector2D                                   InnerBlueZonePosition;                                    // 0x05E4(0x0008) (BlueprintVisible, Net, Transient, IsPlainOldData)
	float                                              InnerBlueZoneRadius;                                      // 0x05EC(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	EBlueZoneShape                                     BlueZoneShape;                                            // 0x05F0(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x05F1(0x0003) MISSED OFFSET
	float                                              BlueZoneRectangleAspectRatio;                             // 0x05F4(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   OuterBlueZonePosition;                                    // 0x05F8(0x0008) (BlueprintVisible, Net, Transient, IsPlainOldData)
	float                                              OuterBlueZoneRadius;                                      // 0x0600(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bRunningOuterBlueZone;                                    // 0x0604(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIgnoreSafetyZone;                                        // 0x0605(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	EBlueZoneShape                                     OuterBlueZoneShape;                                       // 0x0606(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x1];                                       // 0x0607(0x0001) MISSED OFFSET
	class UCustomCarepackageRulesComponent*            CustomCarepackageRulesComponent;                          // 0x0608(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               bUsingSquadInTeam;                                        // 0x0610(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsingPlatoonCommander;                                   // 0x0611(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0612(0x0002) MISSED OFFSET
	struct FPlatoonSupportRequestManifest              PlatoonSupportRequestManifest;                            // 0x0614(0x0018) (Net, Transient, IsPlainOldData)
	int                                                SquadSize;                                                // 0x062C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                TeamSize;                                                 // 0x0630(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x1];                                       // 0x0634(0x0001) MISSED OFFSET
	bool                                               bUseTracerReplication;                                    // 0x0635(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x0636(0x0002) MISSED OFFSET
	float                                              ParachuteAutoDeployAltitudeMultiplier;                    // 0x0638(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ParachuteStartDeployAltitudeMultiplier;                   // 0x063C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AircraftAltitude;                                         // 0x0640(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0644(0x0004) MISSED OFFSET
	TArray<struct FTslPlayerMatchResultInfo>           TslPlayerMatchResultInfos;                                // 0x0648(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	bool                                               bUseFixedStepProjectile;                                  // 0x0658(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0659(0x0003) MISSED OFFSET
	int                                                PelletManagerAllowIndex;                                  // 0x065C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanParachuteFollow;                                      // 0x0660(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0661(0x0003) MISSED OFFSET
	float                                              MatchElapsedTimeSec;                                      // 0x0664(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	EMatchStartType                                    MatchStartType;                                           // 0x0668(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x0669(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNewBlackZone;                                           // 0x0670(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              ElapsedReleaseDuration;                                   // 0x0680(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RedZonePosition;                                          // 0x0684(0x000C) (BlueprintVisible, Net, Transient, IsPlainOldData)
	TArray<struct FMatchStateTimestamp>                MatchStateSetTimestamps;                                  // 0x0690(0x0010) (Net, ZeroConstructor, Transient)
	struct FVector                                     SafetyZoneBeginPosition;                                  // 0x06A0(0x000C) (BlueprintVisible, Net, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x4];                                       // 0x06AC(0x0004) MISSED OFFSET
	struct FString                                     MatchId;                                                  // 0x06B0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	bool                                               bIsTeamMatch;                                             // 0x06C0(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x06C1(0x0003) MISSED OFFSET
	int                                                NumAliveTeams;                                            // 0x06C4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                RemainingTime;                                            // 0x06C8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MatchElapsedMinutes;                                      // 0x06CC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TotalWarningDuration;                                     // 0x06D0(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bTimerPaused;                                             // 0x06D4(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x06D5(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBlackZoneTargetDestroyed;                               // 0x06D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsGasRelease;                                            // 0x06E8(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData24[0x3];                                       // 0x06E9(0x0003) MISSED OFFSET
	float                                              RedZoneRadius;                                            // 0x06EC(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumJoinPlayers;                                           // 0x06F0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWorkingBlueZone;                                       // 0x06F4(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0x7B];                                      // 0x06F5(0x007B) MISSED OFFSET
	class UTslRadioMessageManager*                     RadioMessageManager;                                      // 0x0770(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslSandboxManager*                          SandboxManager;                                           // 0x0778(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsSandboxMode;                                           // 0x0780(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData26[0x7];                                       // 0x0781(0x0007) MISSED OFFSET
	class ALevelAttribute*                             LevelAttribute;                                           // 0x0788(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslGameMode*                                TslGameMode;                                              // 0x0790(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0x18];                                      // 0x0798(0x0018) MISSED OFFSET
	class ATslAccuracyManager*                         AccuracyManager;                                          // 0x07B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData28[0x18];                                      // 0x07B8(0x0018) MISSED OFFSET
	TArray<int>                                        TeamIds;                                                  // 0x07D0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	TArray<int>                                        TeamIndices;                                              // 0x07E0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	TArray<int>                                        NumStartTeamMemberCounts;                                 // 0x07F0(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	TArray<struct FString>                             TeamLeaderNames;                                          // 0x0800(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	TArray<struct FString>                             TeamLeaderClanNames;                                      // 0x0810(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	TArray<EOutGamePlatformProvider>                   TeamLeaderPlatforms;                                      // 0x0820(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	class ATslNetDebugDraw*                            NetDebugDrawSystem;                                       // 0x0830(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData29[0x140];                                     // 0x0838(0x0140) MISSED OFFSET
	TArray<struct FRepItemLimits>                      ItemLimitsRep;                                            // 0x0978(0x0010) (Edit, BlueprintVisible, Net, ZeroConstructor)
	TMap<struct FName, int>                            ItemLimits;                                               // 0x0988(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	struct FCustomWidgetSetting                        CustomWidgetSetting;                                      // 0x09D8(0x0018) (Edit, BlueprintVisible, Net)
	struct FVector                                     BlackZonePosition;                                        // 0x09F0(0x000C) (BlueprintVisible, Net, Transient, IsPlainOldData)
	float                                              BlackZoneRadius;                                          // 0x09FC(0x0004) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	class AFootprintController*                        FootprintController;                                      // 0x0A00(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData30[0x10];                                      // 0x0A08(0x0010) MISSED OFFSET
	class UTslItemRequestManager*                      ItemRequestManager;                                       // 0x0A18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData31[0x8];                                       // 0x0A20(0x0008) MISSED OFFSET
	class UCraftRuleComponent*                         CraftRuleComponent;                                       // 0x0A28(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData32[0xC];                                       // 0x0A30(0x000C) MISSED OFFSET
	int                                                NumCurrentAliveAI;                                        // 0x0A3C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumCurrentAliveAITeams;                                   // 0x0A40(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData33[0x14];                                      // 0x0A44(0x0014) MISSED OFFSET
	unsigned char                                      bEnableClientPacketLossReport : 1;                        // 0x0A58(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	unsigned char                                      UnknownData34[0x7];                                       // 0x0A59(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameState"));

		return ptr;
	}


	void STATIC_UpdateWorldTimeSecondsDelta(float DeltaSeconds);
	void STATIC_ShowPlayerStateList();
	void STATIC_ShowDebugManagedActor();
	void STATIC_OnStartGasRelease(bool InbIsGasRelease);
	void STATIC_OnRep_WinningTeamId();
	void STATIC_OnRep_UseFixedStepProjectile();
	void STATIC_OnRep_TslPlayerMatchResultInfos(TArray<struct FTslPlayerMatchResultInfo> LastTslPlayerMatchResultInfos);
	void STATIC_OnRep_TotalRoundCount();
	void STATIC_OnRep_TeamProperties();
	void STATIC_OnRep_SelectableSpawnKit();
	void STATIC_OnRep_RunningOuterBlueZone(bool bLastRunningOuterBlueZone);
	void STATIC_OnRep_RemainingTime(int InLastRemainingTime);
	void STATIC_OnRep_PlatoonSupportRequestManifest();
	void STATIC_OnRep_NumJoinPlayers();
	void STATIC_OnRep_NumAlivePlayers();
	void STATIC_OnRep_MatchShortGuid();
	void STATIC_OnRep_MatchId();
	void STATIC_OnRep_ItemLimits();
	void STATIC_OnRep_GasRelease(bool bLastIsGasRelease);
	void STATIC_OnRep_GameEndState();
	void STATIC_OnRep_ElapsedWarningDuration();
	void STATIC_OnRep_CustomWidgetSetting();
	void STATIC_OnRep_BlackZoneLocation();
	void STATIC_OnRep_bIsTeamMatch();
	void STATIC_OnRep_bIsSandboxMode();
	void STATIC_OnRep_AllowGlobalVoiceChat(bool bOldAllowGlobalVoiceChat);
	void STATIC_Multicast_SetCanResetDestructible(bool bInCanResetDestructible);
	void STATIC_MatchEndWaitingTimerAtClient();
	void STATIC_MarkBlackZoneTargetDestroyed(const struct FVector& Location, float Size);
	bool STATIC_IsTeamMatch();
	bool STATIC_IsMatchInProgressBP();
	bool STATIC_IsHideNicknameOnKillfeed();
	bool STATIC_IsCraftEnabled();
	EReportUiType STATIC_GetReportUiType();
	float STATIC_GetParaStartDeployAltitudeMultiplier();
	float STATIC_GetParaForceDeployAltitudeMultiplier();
	class ALevelAttribute* STATIC_GetLevelAttribute();
	EGameModeType STATIC_GetGameModeType();
	class ATslDestructibleSurfaceManager* STATIC_GetDestructibleSurfaceManager();
	void STATIC_FluentAdapterInit();
	void STATIC_AllowPelletManager(int InIndex);
};


// Class TslGame.TslBattleRoyaleGameState
// 0x0070 (0x0AD0 - 0x0A60)
class ATslBattleRoyaleGameState : public ATslGameState
{
public:
	TArray<int>                                        NumLiveTeamMemberCounts;                                  // 0x0A60(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0A70(0x0010) MISSED OFFSET
	struct FString                                     RandomBRKeys;                                             // 0x0A80(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0A90(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyaleGameState"));

		return ptr;
	}


	void STATIC_OnRep_RandomBRKeys();
};


// Class TslGame.TslBattleRoyaleGameState_CPP
// 0x0000 (0x0AD0 - 0x0AD0)
class ATslBattleRoyaleGameState_CPP : public ATslBattleRoyaleGameState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyaleGameState_CPP"));

		return ptr;
	}


	void STATIC_OnRep_RandomBRKeys();
};


// Class TslGame.TslDestructionGameState
// 0x0000 (0x0AD0 - 0x0AD0)
class ATslDestructionGameState : public ATslBattleRoyaleGameState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDestructionGameState"));

		return ptr;
	}


	void STATIC_OnRep_RandomBRKeys();
};


// Class TslGame.TslEsportsGameState
// 0x0000 (0x0AD0 - 0x0AD0)
class ATslEsportsGameState : public ATslBattleRoyaleGameState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEsportsGameState"));

		return ptr;
	}


	void STATIC_OnRep_RandomBRKeys();
};


// Class TslGame.TslTrainingGameState
// 0x0020 (0x0A80 - 0x0A60)
class ATslTrainingGameState : public ATslGameState
{
public:
	struct FScriptMulticastDelegate                    OnTimeLimitReplicated;                                    // 0x0A60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              TimeLimitSeconds;                                         // 0x0A70(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0A74(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrainingGameState"));

		return ptr;
	}


	void STATIC_OnRep_TimeLimitSeconds();
};


// Class TslGame.TslWarPlayerState
// 0x0080 (0x0AF0 - 0x0A70)
class ATslWarPlayerState : public ATslPlayerState
{
public:
	float                                              MyGameScoreInTeam;                                        // 0x0A70(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A74(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMyGainedScoreChanged;                                   // 0x0A78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              NextRespawnTimeSeconds;                                   // 0x0A88(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0A8C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRespawnTimeUpdated;                                     // 0x0A90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       RespawnSpotName;                                          // 0x0AA0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnRespawnSpotChangedAtClient;                             // 0x0AA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FPersonalStat                               PersonalStat;                                             // 0x0AB8(0x0038) (Net)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWarPlayerState"));

		return ptr;
	}


	void STATIC_ServerSetRespawnSpot(const struct FName& InRespawnSpotName);
	void STATIC_OnRep_RespawnSpotName(const struct FName& OldRespawnSpotName);
	void STATIC_OnRep_PersonalStat();
	void STATIC_OnRep_NextRespawnTimeSeconds();
	void STATIC_OnRep_MyGameScoreInTeam(float OldMyGameScoreInTeam);
};


// Class TslGame.TslWarGameState
// 0x01B0 (0x0C10 - 0x0A60)
class ATslWarGameState : public ATslGameState
{
public:
	int                                                GoalScore;                                                // 0x0A60(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsTeamElimination;                                       // 0x0A64(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWarRoyaleBluezone;                                     // 0x0A65(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsingTeamXRay;                                           // 0x0A66(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIndividualRespawn;                                       // 0x0A67(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseInstantRespawn;                                       // 0x0A68(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	ERespawnType                                       RespawnType;                                              // 0x0A69(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0A6A(0x0002) MISSED OFFSET
	float                                              PersonalPoint_Kill;                                       // 0x0A6C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_ChainKill;                                  // 0x0A70(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_Death;                                      // 0x0A74(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_Assist;                                     // 0x0A78(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_RoundWin;                                   // 0x0A7C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_RoundLoss;                                  // 0x0A80(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_MatchWin;                                   // 0x0A84(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PersonalPoint_MatchLoss;                                  // 0x0A88(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0A8C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInitModePropertyReplicated;                             // 0x0A90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0AA0(0x0008) MISSED OFFSET
	struct FStartModeProperties                        StartModeProperties;                                      // 0x0AA8(0x0050) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	float                                              LastRespawnTimeSeconds;                                   // 0x0AF8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeLimitSeconds;                                         // 0x0AFC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnStartModePropertyRelicated;                             // 0x0B00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0B10(0x0008) MISSED OFFSET
	TArray<float>                                      TeamScores;                                               // 0x0B18(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnScoreChanged;                                           // 0x0B28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0B38(0x0010) MISSED OFFSET
	float                                              NextRespawnTimeSeconds;                                   // 0x0B48(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0B4C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRespawnTimeUpdated;                                     // 0x0B50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bRespawnOffed;                                            // 0x0B60(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x17];                                      // 0x0B61(0x0017) MISSED OFFSET
	TArray<struct FString>                             ActivatedPlayerStartNames;                                // 0x0B78(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData07[0x88];                                      // 0x0B88(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWarGameState"));

		return ptr;
	}


	void STATIC_OnRep_TeamScores();
	void STATIC_OnRep_StartModeProperties();
	void STATIC_OnRep_RespawnOffed();
	void STATIC_OnRep_NextRespawnTimeSeconds();
	void STATIC_OnRep_InitModeProperties();
	void STATIC_OnRep_ActivatedPlayerStartNames(TArray<struct FString> OldActivatedPlayerStartNames);
	bool STATIC_IsTimeUp();
	bool STATIC_IsReachedGoalScore();
};


// Class TslGame.TslConquestGameState
// 0x0030 (0x0C40 - 0x0C10)
class ATslConquestGameState : public ATslWarGameState
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0C10(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConquestGameState"));

		return ptr;
	}


	void STATIC_OnRep_ActivatedCaptureAreaNames(TArray<struct FString> OldActivatedCaptureAreaNames);
};


// Class TslGame.TslTDMGameState
// 0x0000 (0x0C10 - 0x0C10)
class ATslTDMGameState : public ATslWarGameState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTDMGameState"));

		return ptr;
	}


	void STATIC_OnRep_TeamScores();
	void STATIC_OnRep_StartModeProperties();
	void STATIC_OnRep_RespawnOffed();
	void STATIC_OnRep_NextRespawnTimeSeconds();
	void STATIC_OnRep_InitModeProperties();
	void STATIC_OnRep_ActivatedPlayerStartNames(TArray<struct FString> OldActivatedPlayerStartNames);
	bool STATIC_IsTimeUp();
	bool STATIC_IsReachedGoalScore();
};


// Class TslGame.TslZombieGameState
// 0x0030 (0x0A90 - 0x0A60)
class ATslZombieGameState : public ATslGameState
{
public:
	bool                                               bIsWinnerZombieTeam;                                      // 0x0A60(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ZombieRevive;                                             // 0x0A61(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0A62(0x0002) MISSED OFFSET
	int                                                NumAliveZombiePlayers;                                    // 0x0A64(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeLimitSeconds;                                         // 0x0A68(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EZombieRuleType                                    ZombieRuleType;                                           // 0x0A6C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bNewZombieGameMode;                                       // 0x0A6D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0A6E(0x0002) MISSED OFFSET
	float                                              ZombieMovementSpeedModifier;                              // 0x0A70(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ZombieJumpModifier;                                       // 0x0A74(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ZombieAttackSpeedModifier;                                // 0x0A78(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ZombieFallingDamageModifier;                              // 0x0A7C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bZombieOpenDoor;                                          // 0x0A80(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bZombieDrive;                                             // 0x0A81(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE];                                       // 0x0A82(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombieGameState"));

		return ptr;
	}


	void STATIC_OnRep_NumAliveZombiePlayers();
	bool STATIC_IsTimeUp();
	EZombieRuleType STATIC_GetZombieRuleType();
};


// Class TslGame.TslGameViewportClient
// 0x0060 (0x06E0 - 0x0680)
class UTslGameViewportClient : public UGameViewportClient
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0680(0x0030) MISSED OFFSET
	class UTslConfirmationDialogWidget*                DialogUMGWidget;                                          // 0x06B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslLoadingScreen*                           LoadingScreenWidget;                                      // 0x06B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x06C0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameViewportClient"));

		return ptr;
	}

};


// Class TslGame.TslGlobalWeatherSound
// 0x0030 (0x0418 - 0x03E8)
class ATslGlobalWeatherSound : public AActor
{
public:
	class UAkAudioEvent*                               AkEvent_Play;                                             // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UAkAudioEvent*                               AkEvent_Stop;                                             // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FString                                     ParamRTPCName;                                            // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0408(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGlobalWeatherSound"));

		return ptr;
	}

};


// Class TslGame.BlockInputUserWidget
// 0x0058 (0x0448 - 0x03F0)
class UBlockInputUserWidget : public UUmgBaseWidget
{
public:
	bool                                               bWhiteList;                                               // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	TArray<struct FBlockAction>                        BlockActions;                                             // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               BlockAxises;                                              // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bGenerateEventOnOpen;                                     // 0x0418(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLockMouseCursorInViewport;                               // 0x0419(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x041A(0x0006) MISSED OFFSET
	TArray<struct FBlockAction>                        BlockActionsOnDemand;                                     // 0x0420(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               BlockAxisesOnDemand;                                      // 0x0430(0x0010) (BlueprintVisible, ZeroConstructor)
	bool                                               bCancelDragDrop;                                          // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0441(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BlockInputUserWidget"));

		return ptr;
	}

};


// Class TslGame.TslGMCommandInGameHelperButtonProxy
// 0x0068 (0x0098 - 0x0030)
class UTslGMCommandInGameHelperButtonProxy : public UObject
{
public:
	struct FString                                     Command;                                                  // 0x0030(0x0010) (ZeroConstructor, Transient)
	struct FTimerHandle                                TimerHandle;                                              // 0x0040(0x0008) (Transient)
	class UTextBlock*                                  DrawLogText;                                              // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ButtonText;                                               // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UButton*                                     Widget;                                                   // 0x0058(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslPlayerController*                        PlayerController;                                         // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperButtonProxy*        LeftOne;                                                  // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperButtonProxy*        RightOne;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperButtonProxy*        UpOne;                                                    // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperButtonProxy*        DownOne;                                                  // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperButtonProxy*        Master;                                                   // 0x0088(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperButtonProxy*        Slave;                                                    // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGMCommandInGameHelperButtonProxy"));

		return ptr;
	}


	void STATIC_OnClickButton();
};


// Class TslGame.TslGMCommandInGameHelperPanelProxy
// 0x0098 (0x00C8 - 0x0030)
class UTslGMCommandInGameHelperPanelProxy : public UObject
{
public:
	class UCanvasPanel*                                Widget;                                                   // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UTslGMCommandInGameHelperButtonProxy*> Proxies;                                                  // 0x0038(0x0010) (ZeroConstructor, Transient)
	class UTslGMCommandInGameHelperButtonProxy*        LastProxy;                                                // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperWidget*             ParentProxy;                                              // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FString                                     CustomConfigFilePath;                                     // 0x0058(0x0010) (ZeroConstructor, Transient)
	struct FString                                     DefaultConfigFilePath;                                    // 0x0068(0x0010) (ZeroConstructor, Transient)
	int                                                ColSize;                                                  // 0x0078(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   ButtonSize;                                               // 0x007C(0x0008) (Transient, IsPlainOldData)
	int                                                FontSize;                                                 // 0x0084(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ButtonPadding;                                            // 0x0088(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   PanelPadding;                                             // 0x008C(0x0008) (Transient, IsPlainOldData)
	struct FVector2D                                   NextPosition;                                             // 0x0094(0x0008) (Transient, IsPlainOldData)
	int                                                Col;                                                      // 0x009C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UImage*                                      Background;                                               // 0x00A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<struct FTslGMCommandInGameHelperButtonData> ButtonData;                                               // 0x00A8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FString>                             Categories;                                               // 0x00B8(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGMCommandInGameHelperPanelProxy"));

		return ptr;
	}

};


// Class TslGame.TslGMCommandInGameHelperCounter
// 0x0030 (0x0478 - 0x0448)
class UTslGMCommandInGameHelperCounter : public UBlockInputUserWidget
{
public:
	class UTslGMCommandInGameHelperButtonProxy*        Proxy;                                                    // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ParamValue;                                               // 0x0450(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	class UCanvasPanel*                                Canvas;                                                   // 0x0458(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ParamValueText;                                           // 0x0460(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0468(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGMCommandInGameHelperCounter"));

		return ptr;
	}


	void STATIC_OnFaceB();
	void STATIC_OnFaceA();
	void STATIC_OnDPadUp();
	void STATIC_OnDPadRight();
	void STATIC_OnDPadLeft();
	void STATIC_OnDPadDown();
};


// Class TslGame.TslGMCommandInGameHelperWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslGMCommandInGameHelperWidget : public UUmgBaseWidget
{
public:
	class UCanvasPanel*                                Widget;                                                   // 0x03F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslPlayerController*                        PlayerController;                                         // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTimerHandle                                TimerHandle;                                              // 0x0400(0x0008) (Transient)
	class UTextBlock*                                  DrawLogText;                                              // 0x0408(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UImage*                                      CursorImage;                                              // 0x0410(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslGMCommandInGameHelperPanelProxy*         LeftPanel;                                                // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslGMCommandInGameHelperPanelProxy*         RightPanel;                                               // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UButton*                                     ReloadButton;                                             // 0x0428(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UButton*                                     CloseButton;                                              // 0x0430(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UImage*                                      SelectImage;                                              // 0x0438(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UTslGMCommandInGameHelperButtonProxy*> Proxies;                                                  // 0x0440(0x0010) (ZeroConstructor, Transient)
	class UTslGMCommandInGameHelperButtonProxy*        SelectedProxy;                                            // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGMCommandInGameHelperWidget"));

		return ptr;
	}


	void STATIC_Reload();
	void STATIC_OnRightShoulder();
	void STATIC_OnLeftShoulder();
	void STATIC_OnFaceB();
	void STATIC_OnFaceA();
	void STATIC_OnDPadUp();
	void STATIC_OnDPadRight();
	void STATIC_OnDPadLeft();
	void STATIC_OnDPadDown();
	void STATIC_OnCursorClick();
	void STATIC_Close();
};


// Class TslGame.TslGunAnimInstance
// 0x00D8 (0x0478 - 0x03A0)
class UTslGunAnimInstance : public UAnimInstance
{
public:
	struct FScriptMulticastDelegate                    WeaponFire;                                               // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponFireCycle;                                          // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerOn;                                                // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TriggerOff;                                               // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    Reload1;                                                  // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    Reload2;                                                  // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneStart;                                         // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneSingle;                                        // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReloadByOneEnd;                                           // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponCharge;                                             // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FireSelect;                                               // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CancelReload;                                             // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       Name_FireMode_Semi;                                       // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       Name_FireMode_Burst;                                      // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       Name_FireMode_Fullauto;                                   // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGunAnimInstance"));

		return ptr;
	}


	void STATIC_HandleFiremodeMontage(class UAnimMontage* FireModeMontage);
};


// Class TslGame.TslHealthGaugeData
// 0x0030 (0x0068 - 0x0038)
class UTslHealthGaugeData : public UDataAsset
{
public:
	TArray<struct FHealthColorData>                    HealthGaugeColors;                                        // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FFloatInterval                              WarningRage;                                              // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UCurveLinearColor*                           GroggyColorCurve;                                         // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ZombieVirusColor;                                         // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHealthGaugeData"));

		return ptr;
	}


	struct FLinearColor STATIC_GetGaugeColor(float HealthPercent);
};


// Class TslGame.TslHornComponent
// 0x0040 (0x0240 - 0x0200)
class UTslHornComponent : public UActorComponent
{
public:
	struct FTimerHandle                                TimerHandle_Horn;                                         // 0x0200(0x0008)
	float                                              LongHornStartingTime;                                     // 0x0208(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrHornKeyPressedTime;                                   // 0x020C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bHornKeyDown;                                             // 0x0210(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bPlayingLongHorn;                                         // 0x0211(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0212(0x0002) MISSED OFFSET
	struct FHornPlayInfo                               HornPlayInfo;                                             // 0x0214(0x0008) (Net)
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FHornSoundInfo                              HornSounds_Local;                                         // 0x0220(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FHornSoundInfo                              HornSounds_Remote;                                        // 0x0230(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHornComponent"));

		return ptr;
	}


	void STATIC_TickHorn(float DeltaSeconds);
	void STATIC_ServerSetHorn(const struct FHornPlayInfo& InHornPlayInfo);
	void STATIC_PlayInstantHorn();
	void STATIC_PlayHorn(bool bIsLocalPlay, EHornSoundType InHornSoundType);
	void STATIC_OnRep_SetHornPlayInfo();
	void STATIC_OnPostDriverLeave();
	bool STATIC_OnHornKeyUpPad();
	void STATIC_OnHornKeyUp();
	bool STATIC_OnHornKeyDownPad();
	void STATIC_OnHornKeyDown();
	void STATIC_OnHornEnd();
	void STATIC_MulticastSetInstantHorn(const struct FHornPlayInfo& InHornPlayInfo);
};


// Class TslGame.TslHouseActor
// 0x0040 (0x0428 - 0x03E8)
class ATslHouseActor : public AActor
{
public:
	TArray<struct FVector>                             itemSpotPosList;                                          // 0x03E8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FBuildingSearchPath>                 searchPathList;                                           // 0x03F8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FVector>                             cornerPointList;                                          // 0x0408(0x0010) (ZeroConstructor, Transient)
	struct FVector                                     centerPoint;                                              // 0x0418(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHouseActor"));

		return ptr;
	}

};


// Class TslGame.TslHouseStaticMeshActor
// 0x0040 (0x0438 - 0x03F8)
class ATslHouseStaticMeshActor : public AStaticMeshActor
{
public:
	TArray<struct FVector>                             itemSpotPosList;                                          // 0x03F8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FBuildingSearchPath>                 searchPathList;                                           // 0x0408(0x0010) (ZeroConstructor, Transient)
	TArray<struct FVector>                             cornerPointList;                                          // 0x0418(0x0010) (ZeroConstructor, Transient)
	struct FVector                                     centerPoint;                                              // 0x0428(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0434(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHouseStaticMeshActor"));

		return ptr;
	}

};


// Class TslGame.TslHUDSetting
// 0x0018 (0x0048 - 0x0030)
class UTslHUDSetting : public UObject
{
public:
	int                                                PingCautionThreshold;                                     // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PingWarningThreshold;                                     // 0x0034(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PingVariationThreshold;                                   // 0x0038(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           PacketLossCautionThreshold;                               // 0x003C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           PacketLossWarningThreshold;                               // 0x0040(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHUDSetting"));

		return ptr;
	}

};


// Class TslGame.TslInstancedDestructibleSurfaceComponent
// 0x0310 (0x1080 - 0x0D70)
class UTslInstancedDestructibleSurfaceComponent : public UGridInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0D70(0x0008) MISSED OFFSET
	struct FDestructibleSurfaceTemplate                DestructibleSurfaceTemplate;                              // 0x0D78(0x0110) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnDestructibleComponentDestroyed;                         // 0x0E88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x140];                                     // 0x0E98(0x0140) MISSED OFFSET
	TMap<int, struct FGuid>                            DestructibleIds;                                          // 0x0FD8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	int                                                InstancedComponentId;                                     // 0x1028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x54];                                      // 0x102C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInstancedDestructibleSurfaceComponent"));

		return ptr;
	}

};


// Class TslGame.TslInstancedGlassWindowComponent
// 0x0180 (0x0EF0 - 0x0D70)
class UTslInstancedGlassWindowComponent : public UGridInstancedStaticMeshComponent
{
public:
	class UDestructibleMesh*                           DestructibleMesh;                                         // 0x0D70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestroyDelayAfterDestructed;                              // 0x0D78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0D7C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               DestructSound;                                            // 0x0D80(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructSoundOcclusionRefreshInterval;                    // 0x0D88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bReplicatedOnClient : 1;                                  // 0x0D8C(0x0001) (Net)
	unsigned char                                      UnknownData01[0x13];                                      // 0x0D8D(0x0013) MISSED OFFSET
	TArray<int>                                        DestroyedInstances;                                       // 0x0DA0(0x0010) (Net, ZeroConstructor)
	TArray<int>                                        PendingDestroyInstances;                                  // 0x0DB0(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData02[0xD0];                                      // 0x0DC0(0x00D0) MISSED OFFSET
	bool                                               bShouldRestore;                                           // 0x0E90(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5F];                                      // 0x0E91(0x005F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInstancedGlassWindowComponent"));

		return ptr;
	}


	void STATIC_OnRep_ShouldRestore();
	void STATIC_OnRep_ReplicatedOnClient(bool bLastReplicatedOnClient);
	void STATIC_OnRep_PendingDestroy();
	void STATIC_OnRep_Destroyed();
	void STATIC_ClientNotifyHit(bool bBlockingHit, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantizeNormal& ImpactNormal, int InstanceIndex);
};


// Class TslGame.TslInstancedReactionComponent
// 0x01F0 (0x0F60 - 0x0D70)
class UTslInstancedReactionComponent : public UGridInstancedStaticMeshComponent
{
public:
	TArray<int>                                        PendingDestroyInstances;                                  // 0x0D70(0x0010) (Net, ZeroConstructor)
	class UTslReactionData*                            ReactionData;                                             // 0x0D80(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           ReactionDM;                                               // 0x0D88(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0D90(0x0080) MISSED OFFSET
	TMap<int, TWeakObjectPtr<class UDestructibleComponent>> ReactionDestructibles;                                    // 0x0E10(0x0050) (ExportObject, ZeroConstructor)
	TMap<int, TWeakObjectPtr<class UStaticMeshComponent>> ReactionStaticMeshComponents;                             // 0x0E60(0x0050) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0xA8];                                      // 0x0EB0(0x00A8) MISSED OFFSET
	bool                                               bShouldRestore;                                           // 0x0F58(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0F59(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInstancedReactionComponent"));

		return ptr;
	}


	void STATIC_OnRep_ShouldRestore();
	void STATIC_OnRep_PendingDestroy();
	void STATIC_Client_ReactByVehicle(int InstanceIndex, const struct FVector& Impact, const struct FVector& ImpulseDir, const struct FVector& Velocity);
	void STATIC_Client_ReactByRadialDamage(int InstanceIndex, float DamageAmount, const struct FVector& Origin, const struct FVector& Impact, const struct FVector& ImpulseDir, float OuterRadius);
	void STATIC_Client_ReactByPointDamage(int InstanceIndex, float DamageAmount, const struct FVector& Impact, const struct FVector& ImpulseDir);
};


// Class TslGame.TslInteractableActor
// 0x0008 (0x03F0 - 0x03E8)
class ATslInteractableActor : public AActor
{
public:
	class UInteractionComponent*                       InteractionComponent;                                     // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInteractableActor"));

		return ptr;
	}


	void STATIC_OnInteract(class ATslCharacter* OtherCharacter);
	struct FText STATIC_GetAdditionalMessage(class ATslCharacter* Character);
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.TeamOverallKillCountBaseWidget
// 0x0168 (0x0558 - 0x03F0)
class UTeamOverallKillCountBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TeamOverallKillCountTextBinder;                           // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  TotalKillTextBinder;                                      // 0x0410(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      TeamIconImageBinder;                                      // 0x0430(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Border                     TeamShortNameBorderBinder;                                // 0x0458(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_ScaleBox                   TeamIconScaleBoxBinder;                                   // 0x0488(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamIconWidgetSwitcher;                                   // 0x04B0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_WidgetSwitcher             PatternSwitcherBinder;                                    // 0x04D8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  TeamShortNameBinder;                                      // 0x0500(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                TotalKillTextIndex;                                       // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TeamIconImageIndex;                                       // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DesiredXStart;                                            // 0x0528(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DesiredXEnd;                                              // 0x052C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DesiredYStart;                                            // 0x0530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DesiredYEnd;                                              // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LastTeamOverallKillCount;                                 // 0x0538(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastTeamId;                                               // 0x053C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     LastTeamShortName;                                        // 0x0540(0x0010) (ZeroConstructor, Transient)
	bool                                               bLastWantShow;                                            // 0x0550(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0551(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TeamOverallKillCountBaseWidget"));

		return ptr;
	}


	int STATIC_GetLastTeamOverallKillCount();
};


// Class TslGame.TestParachuting
// 0x0100 (0x04F0 - 0x03F0)
class UTestParachuting : public UUmgBaseWidget
{
public:
	TArray<struct FVector2D>                           TestSpots;                                                // 0x03F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ATslCharacter*                               Character;                                                // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPlayerController*                        Controller;                                               // 0x0408(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      ParachuteItemClass;                                       // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ALevelAttribute*                             LevelAttribute;                                           // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MapMaterialInstance;                                      // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   MapImageContainerBinder;                                  // 0x0428(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MapImageBinder;                                           // 0x0448(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MessageBinder;                                            // 0x0470(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RunTestButton;                                            // 0x0490(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   StopTestButton;                                           // 0x04B0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CloseButton;                                              // 0x04D0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TestParachuting"));

		return ptr;
	}


	struct FVector2D STATIC_UiToRealCoord(const struct FVector2D& UiCoord);
	struct FVector2D STATIC_RealToUiCoord(const struct FVector2D& RealCoord);
	void STATIC_OnStopTestButtonClicked();
	void STATIC_OnRunTestButtonClicked();
	void STATIC_OnInitialized();
	void STATIC_OnCloseButtonClicked();
};


// Class TslGame.TslAdaptiveCrosshairWidget
// 0x0480 (0x0870 - 0x03F0)
class UTslAdaptiveCrosshairWidget : public UUmgBaseWidget
{
public:
	EWeaponClass                                       WeaponClass;                                              // 0x03F0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsShowWidget;                                            // 0x03F1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET
	struct FColorBlindColorSet                         ColorBlindColors;                                         // 0x03F8(0x0010) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      AdaptiveCrosshair_Binder;                                 // 0x0408(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CanvasBase_Binder;                                        // 0x0430(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterCenter_Binder;                                      // 0x0458(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterCrosshair_Binder;                                   // 0x0480(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterD_Binder;                                           // 0x04A8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CenterDOT_Binder;                                         // 0x04D0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterL_Binder;                                           // 0x04F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterR_Binder;                                           // 0x0520(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CenterU_Binder;                                           // 0x0548(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_C_Binder;                                          // 0x0570(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_C_Gradient_Binder;                                 // 0x0598(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_L_Binder;                                          // 0x05C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Pistol_R_Binder;                                          // 0x05E8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_D_Binder;                                           // 0x0610(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_D_Arrow_Binder;                                     // 0x0638(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_L_Binder;                                           // 0x0660(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_L_Arrow_Binder;                                     // 0x0688(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_R_Binder;                                           // 0x06B0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_R_Arrow_Binder;                                     // 0x06D8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_U_Binder;                                           // 0x0700(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Rifle_U_Arrow_Binder;                                     // 0x0728(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_D_Binder;                                         // 0x0750(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_L_Binder;                                         // 0x0778(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_R_Binder;                                         // 0x07A0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Shotgun_U_Binder;                                         // 0x07C8(0x0028) (Edit, DisableEditOnInstance)
	class UImage*                                      Flaregun_circle;                                          // 0x07F0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                GrenadeCrosshair;                                         // 0x07F8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UImage*                                      Grenade_Overhand;                                         // 0x0800(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UImage*                                      Grenade_Underhand;                                        // 0x0808(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  HoldAngledAnim_TurnToRight_Binder;                        // 0x0810(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HoldAngledAnim_BackFromRight_Binder;                      // 0x0830(0x0020) (Edit, DisableEditOnInstance)
	class UWidgetAnimation*                            Crosshair_Transition_Flaregun;                            // 0x0850(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              InactiveThrowableOpacityMultiplier;                       // 0x0858(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReadyThrowableOpacityMultiplier;                          // 0x085C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0860(0x0004) MISSED OFFSET
	float                                              SaveCrosshairImageColorAlpha;                             // 0x0864(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSaveCenterCrosshairVisibility;                           // 0x0868(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSaveAdaptiveCrosshairVisibility;                         // 0x0869(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSaveHoldAngled;                                          // 0x086A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bShowFlaregunCrosshair;                                   // 0x086B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x086C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAdaptiveCrosshairWidget"));

		return ptr;
	}


	void STATIC_UpdateFlaregunCrosshair(bool bShow);
	void STATIC_SetShowCrosshairWidget(bool bShow);
	void STATIC_SetCenterCrosshairVisibility(bool bVisible);
	void STATIC_SetCenterCrosshairHoldAngled(bool bHoldAngled);
	void STATIC_SetCenterCrosshairDeviation(float InDeviation);
	void STATIC_SetCenterCrosshairClass();
	void STATIC_SetAdaptiveCrosshairVisibility(bool bVisible);
	void STATIC_SetAdaptiveCrosshairPosition(const struct FVector2D& ScreenPosition, const struct FVector2D& ViewportPosition, const struct FVector2D& ViewportSize, float Distance, bool bIsWeaponObstructed);
	bool STATIC_IsFlareReady();
	void STATIC_HandleGameUserSettingApplied();
	void STATIC_DecideAdaptiveCrosshairColor();
};


// Class TslGame.TslAirSpeedWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslAirSpeedWidget : public UUmgBaseWidget
{
public:
	class UImage*                                      AirSpeedMeterImage;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SpeedText;                                                // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FName                                       SpeedParameterName;                                       // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FFloatInterval                              SpeedParameterValue;                                      // 0x0408(0x0008) (Edit, DisableEditOnInstance)
	float                                              SpeedMeterParamInterpSpeed;                               // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    AirSpeedMeterImageMI;                                     // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacter*                               ViewTargetCharacter;                                      // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastIntSpeed;                                             // 0x0428(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastSpeedMeterParam;                                      // 0x042C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bParentVisibility;                                        // 0x0430(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              Speed;                                                    // 0x0434(0x0004) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAirSpeedWidget"));

		return ptr;
	}


	void STATIC_UpdateViewTarget(class AActor* InViewTarget);
};


// Class TslGame.TslParachuteAirSpeedWidget
// 0x0008 (0x0440 - 0x0438)
class UTslParachuteAirSpeedWidget : public UTslAirSpeedWidget
{
public:
	ESkydiveState                                      SkydiveState;                                             // 0x0438(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0439(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParachuteAirSpeedWidget"));

		return ptr;
	}


	void STATIC_UpdateViewTarget(class AActor* InViewTarget);
	void STATIC_SetSkydiveState(ESkydiveState InState);
};


// Class TslGame.TslAlivePlayerInfoWidget
// 0x0108 (0x04F8 - 0x03F0)
class UTslAlivePlayerInfoWidget : public UUmgBaseWidget
{
public:
	class ATslGameState*                               CachedTslGS;                                              // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Border                     ColorOverlay_Binder;                                      // 0x03F8(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Warning_Binder;                                           // 0x0428(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Increasing_Binder;                                        // 0x0448(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Decreasing_Binder;                                        // 0x0468(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Default_Binder;                                           // 0x0488(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AdditionalInfo_Binder;                                    // 0x04A8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  SurvivorCount_Binder;                                     // 0x04C8(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bIsReplaying;                                             // 0x04E8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsHidden;                                                // 0x04E9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04EA(0x0002) MISSED OFFSET
	int                                                CurrentCount;                                             // 0x04EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LastCount;                                                // 0x04F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAlivePlayerInfoWidget"));

		return ptr;
	}


	void STATIC_OnMatchStarted(bool bIsReconnect);
	void STATIC_OnAliveCountChanged(int InKillCount);
};


// Class TslGame.AliveHumansInfoWidget
// 0x0000 (0x04F8 - 0x04F8)
class UAliveHumansInfoWidget : public UTslAlivePlayerInfoWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AliveHumansInfoWidget"));

		return ptr;
	}


	void STATIC_OnMatchStarted(bool bIsReconnect);
	void STATIC_OnAliveCountChanged(int InKillCount);
};


// Class TslGame.AliveZombiesInfoWidget
// 0x0000 (0x04F8 - 0x04F8)
class UAliveZombiesInfoWidget : public UTslAlivePlayerInfoWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.AliveZombiesInfoWidget"));

		return ptr;
	}


	void STATIC_OnMatchStarted(bool bIsReconnect);
	void STATIC_OnAliveCountChanged(int InKillCount);
};


// Class TslGame.TslAltitudeWidget
// 0x0030 (0x0420 - 0x03F0)
class UTslAltitudeWidget : public UUmgBaseWidget
{
public:
	struct FName                                       AltitudeParameterName;                                    // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UImage*                                      AltitudeMeterImage;                                       // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  AltitudeText;                                             // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    AltitudeMeterImageMI;                                     // 0x0408(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacter*                               ViewTargetCharacter;                                      // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAltitudeWidget"));

		return ptr;
	}


	void STATIC_UpdateViewTarget(class AActor* InViewTarget);
};


// Class TslGame.TslBaseNavigatorbleWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslBaseNavigatorbleWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseNavigatorbleWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslInventoryItemListWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslInventoryItemListWidget : public UTslBaseNavigatorbleWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryItemListWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslBaseOptionWidget
// 0x00D0 (0x04C0 - 0x03F0)
class UTslBaseOptionWidget : public UUmgBaseWidget
{
public:
	struct FName                                       OptionName;                                               // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC8];                                      // 0x03F8(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseOptionWidget"));

		return ptr;
	}


	void STATIC_OnReset();
	void STATIC_OnDefault();
	void STATIC_OnApply();
	bool STATIC_IsKeyUp();
	bool STATIC_IsEnableApply();
	bool STATIC_IsChanged();
};


// Class TslGame.TslBaseOptionButtonWidget
// 0x0070 (0x0530 - 0x04C0)
class UTslBaseOptionButtonWidget : public UTslBaseOptionWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04C0(0x0008) MISSED OFFSET
	struct FText                                       TitleText;                                                // 0x04C8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       DescText;                                                 // 0x04E0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTslGamepadOptionContentsWidget*             ParentContentsWidget;                                     // 0x04F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslNaviWidgetComp*                          NaviWidgetComp;                                           // 0x0500(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FTslStickInputHelper                        ModificationInputHelper;                                  // 0x0508(0x0014)
	struct FTslStickInputHelper                        NavigationInputHelper;                                    // 0x051C(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBaseOptionButtonWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
	void STATIC_UpdateDesign_Focused();
};


// Class TslGame.TslGamepadSliderWidget
// 0x0080 (0x05B0 - 0x0530)
class UTslGamepadSliderWidget : public UTslBaseOptionButtonWidget
{
public:
	float                                              MinValue;                                                 // 0x0530(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxValue;                                                 // 0x0534(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DefaultValue;                                             // 0x0538(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TimeStemp;                                                // 0x053C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              AccelerationMultiplier;                                   // 0x0540(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0544(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x0548(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ValueText_Binder;                                         // 0x0568(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Slider_Binder;                                            // 0x0588(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadSliderWidget"));

		return ptr;
	}

};


// Class TslGame.TslCrosshairColorSliderWidget
// 0x0000 (0x05B0 - 0x05B0)
class UTslCrosshairColorSliderWidget : public UTslGamepadSliderWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCrosshairColorSliderWidget"));

		return ptr;
	}

};


// Class TslGame.TslGamepadStepperWidget
// 0x00F0 (0x0620 - 0x0530)
class UTslGamepadStepperWidget : public UTslBaseOptionButtonWidget
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0530(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRotateLeft;                                             // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRotateRight;                                            // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FText>                               StepperOptions;                                           // 0x0590(0x0010) (Edit, ZeroConstructor)
	TArray<struct FString>                             StepperStrings;                                           // 0x05A0(0x0010) (ZeroConstructor)
	int                                                DefaultStepperIndex;                                      // 0x05B0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SelectedIndex;                                            // 0x05B4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x05B8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  StepperText_Binder;                                       // 0x05D8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 StepperCounter_Binder;                                    // 0x05F8(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0618(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadStepperWidget"));

		return ptr;
	}


	bool STATIC_OnInputValidation();
	int STATIC_GetSelectedOptionIndex();
};


// Class TslGame.TslKeyDisplayWidget
// 0x0060 (0x0520 - 0x04C0)
class UTslKeyDisplayWidget : public UTslBaseOptionWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyInputed;                                             // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UTslKeyReceiverWidget*>               KeyReceiverWidgets;                                       // 0x04D0(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_UserWidget>         KeyReceiverWidgetBinders;                                 // 0x04E0(0x0010) (Edit, ZeroConstructor)
	struct FName                                       InputName;                                                // 0x04F0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CategoryName;                                             // 0x04F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       DisplayText;                                              // 0x0500(0x0018) (BlueprintVisible)
	bool                                               bGamepad;                                                 // 0x0518(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAxisInput;                                               // 0x0519(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x051A(0x0002) MISSED OFFSET
	float                                              AxisScale;                                                // 0x051C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyDisplayWidget"));

		return ptr;
	}


	void STATIC_TransferInputEvent(const struct FTslInputKey& TslInputKey);
	void STATIC_SetupKeyDisplayWidget(const struct FName& InInputName, const struct FText& InDisplayName, const struct FName& InCategoryName, bool InbAxisInput, float InAxisScale, bool InbGamepad);
	void STATIC_InitializeKeyDisplayWidget(bool bDefault);
	void STATIC_ApplyKey();
};


// Class TslGame.TslKeyOptionWidget
// 0x0070 (0x0530 - 0x04C0)
class UTslKeyOptionWidget : public UTslBaseOptionWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   ScrollBox_Binder;                                         // 0x04C0(0x0020) (Edit)
	TArray<class UTslKeySettingWidget*>                KeySettingWidgets;                                        // 0x04E0(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	class UClass*                                      MouseSettingWidgetClass;                                  // 0x04F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslBaseOptionWidget*                        MouseSettingWidget;                                       // 0x04F8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      KeySettingWidgetClass;                                    // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GamePadSettingWidgetClass;                                // 0x0508(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslBaseOptionWidget*                        GamePadSettingWidget;                                     // 0x0510(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FName>                               CategoryOrder;                                            // 0x0518(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0528(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyOptionWidget"));

		return ptr;
	}


	void STATIC_OnKeyChanged(class UTslKeyDisplayWidget* InKeyDisplayWidget, const struct FTslInputKey& InInputedKey);
	void STATIC_InitializeKeyAndMouseSetting();
};


// Class TslGame.TslKeySettingWidget
// 0x0070 (0x0530 - 0x04C0)
class UTslKeySettingWidget : public UTslBaseOptionWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyChanged;                                             // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      KeyDisplayWidgetClass;                                    // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   KeyScrollBoxBinder;                                       // 0x04D8(0x0020) (Edit)
	TArray<class UTslKeyDisplayWidget*>                KeyDisplayWidgets;                                        // 0x04F8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	struct FText                                       DisplayText;                                              // 0x0508(0x0018) (BlueprintVisible)
	struct FName                                       CategoryName;                                             // 0x0520(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0528(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeySettingWidget"));

		return ptr;
	}


	void STATIC_TransferInputEvent(class UTslKeyDisplayWidget* KeyDisplayWidget, const struct FTslInputKey& TslInputKey);
	void STATIC_StartupKeySettingWidget(const struct FName& InCategoryName, const struct FText& InDisplayText);
	void STATIC_SetToDefault();
	void STATIC_InitializeKeySettingWidget();
};


// Class TslGame.TslBoostGaugeWidget
// 0x0110 (0x0500 - 0x03F0)
class UTslBoostGaugeWidget : public UUmgBaseWidget
{
public:
	class UMaterialInstanceDynamic*                    MID_Gauge0;                                               // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Gauge20;                                              // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Gauge60;                                              // 0x0400(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Gauge90;                                              // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  VanishingAnimBinder;                                      // 0x0410(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  WarningAnimBinder;                                        // 0x0430(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  EmergingAnimBinder;                                       // 0x0450(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost0_20ImageBinder;                                     // 0x0470(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost20_60ImageBinder;                                    // 0x0490(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost60_90ImageBinder;                                    // 0x04B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Boost90_100ImageBinder;                                   // 0x04D0(0x0020) (Edit, DisableEditOnInstance)
	float                                              DisplayingBoost;                                          // 0x04F0(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsWarning;                                               // 0x04F4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsVanished;                                              // 0x04F5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04F6(0x0002) MISSED OFFSET
	float                                              SaveBoostGauge;                                           // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              SaveBoostGaugeMax;                                        // 0x04FC(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBoostGaugeWidget"));

		return ptr;
	}

};


// Class TslGame.TslCastableItemIconHudWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslCastableItemIconHudWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCastableItemIconHudWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslCastableItemIconWidget
// 0x00E8 (0x04D8 - 0x03F0)
class UTslCastableItemIconWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03F0(0x0018) MISSED OFFSET
	ECastableItemType                                  CastableItemType;                                         // 0x0408(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	class UTexture*                                    ItemIcon;                                                 // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ItemIconRatio;                                            // 0x0418(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x041C(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                NoItemColor;                                              // 0x042C(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Icon_Binder;                                              // 0x0440(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ItemCountText_Binder;                                     // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     WidgetBorder_Binder;                                      // 0x0480(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    IconSizeBox_Binder;                                       // 0x04B0(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCastableItemIconWidget"));

		return ptr;
	}


	int STATIC_GetCastableItemCount(ECastableItemType InItemType);
};


// Class TslGame.TslCastingBarInfoTextWidget
// 0x0100 (0x04F0 - 0x03F0)
class UTslCastingBarInfoTextWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  CastingInfoTextBinder;                                    // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     CastingInfoCancelMsgLayerBinder;                          // 0x0410(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              CastingInfoCancelMsgBoxBinder;                            // 0x0440(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KeyTextBinder;                                            // 0x0468(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  BlinkingAnimationBinder;                                  // 0x0488(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             CancelKeySwitcherBinder;                                  // 0x04A8(0x0028) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsCancelable : 1;                                        // 0x04D0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x04D1(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCastingBarInfoTextWidget"));

		return ptr;
	}

};


// Class TslGame.TslCharacterCaptureWidget
// 0x0080 (0x0470 - 0x03F0)
class UTslCharacterCaptureWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     CharacterBorder_Binder;                                   // 0x03F0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      CharacterSceneCapturedImage_Binder;                       // 0x0420(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   CharacterCaptureCheckBox_Binder;                          // 0x0448(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UClass*                                      CharacterStudioClass;                                     // 0x0468(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterCaptureWidget"));

		return ptr;
	}


	void STATIC_SetHideCharacterLayer(bool bHide);
	void STATIC_PlayCharacterFadeInAnimation();
	void STATIC_OnSpawnedSceneCaptureWorld(class AActor* SpawnedActor);
	void STATIC_OnCheckStatChanged(bool bIsChecked);
	struct FSlateBrush STATIC_GetCharacterSceneCapturedImageBrush();
};


// Class TslGame.TslColorPaletteWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslColorPaletteWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslColorPaletteWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslCompassMarkerWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslCompassMarkerWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      CompassMarkerImageBinder;                                 // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	int                                                MarkerNumber;                                             // 0x0418(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              XViewSize;                                                // 0x041C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bShow;                                                    // 0x0420(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	float                                              CachedX;                                                  // 0x0424(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsTeamMatch;                                             // 0x0428(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	float                                              DistanceSquared;                                          // 0x042C(0x0004) (ZeroConstructor, IsPlainOldData)
	EMarkerType                                        MapMarkerType;                                            // 0x0430(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bPlatoonMarker;                                           // 0x0431(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0432(0x0002) MISSED OFFSET
	int                                                PlatoonId;                                                // 0x0434(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCompassMarkerWidget"));

		return ptr;
	}

};


// Class TslGame.TslCompassWidget
// 0x02C0 (0x06B0 - 0x03F0)
class UTslCompassWidget : public UUmgBaseWidget
{
public:
	class UMaterialInterface*                          MI_Compass;                                               // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_Compass;                                              // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      CompassImageBinder;                                       // 0x0400(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MarkerImageBinder;                                        // 0x0428(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    MarkerOverlayBinder;                                      // 0x0450(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    PingOverlayBinder;                                        // 0x0478(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DirectionTextBlockBinder;                                 // 0x04A0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     CompassBorderBinder;                                      // 0x04C0(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      CompassMarkerWidgetClass;                                 // 0x04F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CompassPingWidgetClass;                                   // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslCompassMarkerWidget*                     MyCompassMarkerWidget;                                    // 0x0500(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UTslCompassMarkerWidget*>             TeamMarkerWidgetsOfTeam;                                  // 0x0508(0x0010) (ExportObject, ZeroConstructor)
	float                                              DivisionLevel;                                            // 0x0518(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Offset;                                                   // 0x051C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bClockwise;                                               // 0x0520(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0521(0x0003) MISSED OFFSET
	float                                              PingShowingTimeSeconds;                                   // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<int, struct FDirectionTextData>               OverrideDirectionTextDatas;                               // 0x0528(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FLinearColor                                DefaultDirectionTextColor;                                // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                BearingUnit;                                              // 0x0588(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x058C(0x0004) MISSED OFFSET
	class UTslCompassMarkerWidget*                     MyCompassPingWidget;                                      // 0x0590(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UTslCompassMarkerWidget*>             PingWidgetsOfTeam;                                        // 0x0598(0x0010) (ExportObject, ZeroConstructor)
	TMap<int, struct FPlatoonCompassMarkerWidgetData>  PlatoonMarkerWidgets;                                     // 0x05A8(0x0050) (ZeroConstructor, Transient)
	TMap<int, struct FPlatoonCompassMarkerWidgetData>  PlatoonPingWidgets;                                       // 0x05F8(0x0050) (ZeroConstructor)
	float                                              Width;                                                    // 0x0648(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsInitilzed;                                             // 0x064C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x064D(0x0003) MISSED OFFSET
	float                                              CompassYaw;                                               // 0x0650(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LastCompassParam;                                         // 0x0654(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastCompassYaw;                                           // 0x0658(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastCharacterLocation;                                    // 0x065C(0x000C) (IsPlainOldData)
	TArray<struct FVector2D>                           LastMapMarkerPositions;                                   // 0x0668(0x0010) (ZeroConstructor)
	struct FVector2D                                   LastMyMapMarkerPosition;                                  // 0x0678(0x0008) (IsPlainOldData)
	TArray<struct FVector2D>                           LastPingPositions;                                        // 0x0680(0x0010) (ZeroConstructor)
	struct FVector2D                                   LastMyPingPosition;                                       // 0x0690(0x0008) (IsPlainOldData)
	class ATslCharacter*                               LastViewTargetCharacter;                                  // 0x0698(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslCharacter*                               CurrViewTargetCharacter;                                  // 0x06A0(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bCompassChanged;                                          // 0x06A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x06A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCompassWidget"));

		return ptr;
	}


	class UTslCompassMarkerWidget* STATIC_CreateCompassPingWidget(int Num);
	class UTslCompassMarkerWidget* STATIC_CreateCompassMarkerWidget(int Num);
};


// Class TslGame.TslConfirmationDialogWidget
// 0x00E0 (0x04D0 - 0x03F0)
class UTslConfirmationDialogWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0xE0];                                      // 0x03F0(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConfirmationDialogWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslConsoleGuideLineWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslConsoleGuideLineWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConsoleGuideLineWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslConsoleGuideWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslConsoleGuideWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConsoleGuideWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslDetailReportCauseCheckBox
// 0x0060 (0x0450 - 0x03F0)
class UTslDetailReportCauseCheckBox : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  DescriptionBinder;                                        // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CheckBoxBinder;                                           // 0x0410(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0430(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDetailReportCauseCheckBox"));

		return ptr;
	}


	void STATIC_SetDetailCauseData(const struct FReportDetailCauseTypeDescription& DetailCauseDes);
	bool STATIC_IsChecked();
	EReportDetailCauseType STATIC_GetDetailCauseType();
};


// Class TslGame.TslDetailReportCauseMgrWidget
// 0x0050 (0x0440 - 0x03F0)
class UTslDetailReportCauseMgrWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TextBlockBinder;                                          // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                ListBorderBinder;                                         // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	class UClass*                                      ReportCauseTemplate;                                      // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDetailReportCauseMgrWidget"));

		return ptr;
	}


	void STATIC_UpdateDetailCause(EReportCause CauseType);
	TArray<EReportDetailCauseType> STATIC_GetSelectedDetailReportCauseList();
};


// Class TslGame.TslEquipmentBaseWidget
// 0x00F8 (0x04E8 - 0x03F0)
class UTslEquipmentBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0xE0];                                      // 0x03F0(0x00E0) MISSED OFFSET
	class UCurveFloat*                                 MoveSlotCurve;                                            // 0x04D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UUserWidget*                                 FocusWidget;                                              // 0x04D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslItemDragDropOperation*                   TslItemDragDropOperation;                                 // 0x04E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipmentBaseWidget"));

		return ptr;
	}


	void STATIC_SaveFocusSlotId(EEquipSlotID InFocusSlotID);
	void STATIC_OnRefreshFocus_Timer();
	void STATIC_OnRefreshFocus();
	void STATIC_OnLeaveSlotEvent(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEnterSlotEvent(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnDoSlotActionEvent();
};


// Class TslGame.TslEquipmentWidget
// 0x0018 (0x0500 - 0x04E8)
class UTslEquipmentWidget : public UTslEquipmentBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x04E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipmentWidget"));

		return ptr;
	}


	void STATIC_SaveFocusSlotId(EEquipSlotID InFocusSlotID);
	void STATIC_OnRefreshFocus_Timer();
	void STATIC_OnRefreshFocus();
	void STATIC_OnLeaveSlotEvent(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEnterSlotEvent(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnDoSlotActionEvent();
};


// Class TslGame.TslEquipmentWidget_Gamepad
// 0x0010 (0x04F8 - 0x04E8)
class UTslEquipmentWidget_Gamepad : public UTslEquipmentBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x04E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipmentWidget_Gamepad"));

		return ptr;
	}


	void STATIC_SaveFocusSlotId(EEquipSlotID InFocusSlotID);
	void STATIC_OnRefreshFocus_Timer();
	void STATIC_OnRefreshFocus();
	void STATIC_OnLeaveSlotEvent(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEnterSlotEvent(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnDoSlotActionEvent();
};


// Class TslGame.TslEventDrivenBaseWidget
// 0x0018 (0x0408 - 0x03F0)
class UTslEventDrivenBaseWidget : public UUmgBaseWidget
{
public:
	class ATslCharacter*                               CacheCharacter;                                           // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEventDrivenBaseWidget"));

		return ptr;
	}


	void STATIC_OnUpdateViewTarget(class AActor* InViewTarget);
	void STATIC_OnSpectatingChanged(bool InIsSpectating);
	void STATIC_OnMatchStarted(bool InReconnect);
};


// Class TslGame.TslBoostGaugeOverhaulWidget
// 0x0028 (0x0430 - 0x0408)
class UTslBoostGaugeOverhaulWidget : public UTslEventDrivenBaseWidget
{
public:
	class UImage*                                      BoostGaugeImage;                                          // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    BoostGaugeSizeBox;                                        // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0418(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBoostGaugeOverhaulWidget"));

		return ptr;
	}


	void STATIC_UpdateGauge();
};


// Class TslGame.TslBreathBarBaseWidget
// 0x0030 (0x0438 - 0x0408)
class UTslBreathBarBaseWidget : public UTslEventDrivenBaseWidget
{
public:
	class UImage*                                      BreathGaugeBG;                                            // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	EBreathType                                        BreathType;                                               // 0x0410(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0411(0x001F) MISSED OFFSET
	float                                              BreathRatio;                                              // 0x0430(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsVanishing;                                             // 0x0434(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsCooldown;                                              // 0x0435(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0436(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBreathBarBaseWidget"));

		return ptr;
	}


	void STATIC_OnUpdateBreathGauge();
	void STATIC_OnStartBuff(const struct FName& BuffName, bool bStart);
};


// Class TslGame.TslBreathBarADSWidget
// 0x0008 (0x0440 - 0x0438)
class UTslBreathBarADSWidget : public UTslBreathBarBaseWidget
{
public:
	class UWidgetAnimation*                            OutOfBreath;                                              // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBreathBarADSWidget"));

		return ptr;
	}

};


// Class TslGame.TslBreathBarWidget
// 0x0058 (0x0490 - 0x0438)
class UTslBreathBarWidget : public UTslBreathBarBaseWidget
{
public:
	class UWidgetAnimation*                            Breathing;                                                // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Drowning;                                                 // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Vanishing;                                                // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Emerging;                                                 // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Cooldown;                                                 // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FLinearColor                                BreathImgColor_Less;                                      // 0x0460(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                BreathImgColor_Less02;                                    // 0x0470(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                BreathImgColor_Less03;                                    // 0x0480(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBreathBarWidget"));

		return ptr;
	}

};


// Class TslGame.TslBuffIconWidget
// 0x0020 (0x0428 - 0x0408)
class UTslBuffIconWidget : public UTslEventDrivenBaseWidget
{
public:
	class UMaterialInterface*                          BuffIconBrush;                                            // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    BuffIconDynamic;                                          // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UImage*                                      BuffIcon;                                                 // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              ThresholdForActive;                                       // 0x0420(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBuffIconWidget"));

		return ptr;
	}


	void STATIC_UpdateBuffIcon();
};


// Class TslGame.TslCharacterStateCanvasWidget
// 0x0020 (0x0428 - 0x0408)
class UTslCharacterStateCanvasWidget : public UTslEventDrivenBaseWidget
{
public:
	class UTslHpAndBoostGaugeHudWidget*                HpAndBoostGaugeHudWidget;                                 // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCharacterStanceBaseWidget*                  CharacterStanceWidget;                                    // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class URetainerBox*                                CharacterStanceRetainerBoxWidget;                         // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslInstantVolumeReducerIconWidget*          VolumeReducerIconWidget;                                  // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterStateCanvasWidget"));

		return ptr;
	}

};


// Class TslGame.TslCharacterStateCanvasWidget_CPP
// 0x0008 (0x0430 - 0x0428)
class UTslCharacterStateCanvasWidget_CPP : public UTslCharacterStateCanvasWidget
{
public:
	class UTslSignalGaugeWidget*                       SignalGaugeWidget;                                        // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCharacterStateCanvasWidget_CPP"));

		return ptr;
	}

};


// Class TslGame.TslEquipableItemIconBaseWidget
// 0x0068 (0x0470 - 0x0408)
class UTslEquipableItemIconBaseWidget : public UTslEventDrivenBaseWidget
{
public:
	EEquipSlotID                                       EquipSlotID;                                              // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	class UMaterial*                                   EquipableIconMaterial;                                    // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAlpha;                                                 // 0x0418(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAlpha;                                                 // 0x041C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UImage*                                      EquipableItemIconImage;                                   // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEquipableItem*                              CacheEquipableItem;                                       // 0x0428(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0430(0x0018) MISSED OFFSET
	class AInventoryFacade*                            InventoryFacade;                                          // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AEquipment*                                  Equipment;                                                // 0x0458(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0460(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipableItemIconBaseWidget"));

		return ptr;
	}


	void STATIC_OnUpdateIconGauge();
	void STATIC_OnUpdateIcon();
	void STATIC_OnUpdateEquipment();
};


// Class TslGame.TslBackpackIconWidget
// 0x0008 (0x0478 - 0x0470)
class UTslBackpackIconWidget : public UTslEquipableItemIconBaseWidget
{
public:
	class UWidgetAnimation*                            CapacityFullWarning;                                      // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBackpackIconWidget"));

		return ptr;
	}


	void STATIC_OnUpdateSpaceGague(const struct FName& ItemID, int InStackCount);
	void STATIC_OnNoBagSpaceEvent();
};


// Class TslGame.TslEquipableItemIconWidget
// 0x0000 (0x0470 - 0x0470)
class UTslEquipableItemIconWidget : public UTslEquipableItemIconBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipableItemIconWidget"));

		return ptr;
	}


	void STATIC_OnUpdateIconGauge();
	void STATIC_OnUpdateIcon();
	void STATIC_OnUpdateEquipment();
};


// Class TslGame.TslHpAndBoostGaugeHudWidget
// 0x0028 (0x0430 - 0x0408)
class UTslHpAndBoostGaugeHudWidget : public UTslEventDrivenBaseWidget
{
public:
	struct FSaveDataForLifegauge                       SaveLifegaugeData;                                        // 0x0408(0x0018) (Transient, IsPlainOldData)
	class UTslBoostGaugeOverhaulWidget*                BoostGaugeWidget;                                         // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslHpGaugeWidget*                           HpGaugeWidget;                                            // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHpAndBoostGaugeHudWidget"));

		return ptr;
	}


	void STATIC_OnReset();
};


// Class TslGame.TslHpGaugeWidget
// 0x00C8 (0x04D0 - 0x0408)
class UTslHpGaugeWidget : public UTslEventDrivenBaseWidget
{
public:
	class UTslHealthGaugeData*                         LifeGaugeColorData;                                       // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      HpBar;                                                    // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UOverlay*                                    EffectLayerBinder;                                        // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     InnerBg;                                                  // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             HpBgSwitcher;                                             // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  HpText;                                                   // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  MaxHpText;                                                // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Warning;                                                  // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            ZombieVirus;                                              // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            ZombieDBNO;                                               // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bUseEffect;                                               // 0x0458(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0459(0x0007) MISSED OFFSET
	class UClass*                                      DamageEffectClass;                                        // 0x0460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      HealEffectClass;                                          // 0x0468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      HealAmountEffectClass;                                    // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DamageEffectMax;                                          // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HealEffectMax;                                            // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHideHpBg;                                                // 0x0480(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x0481(0x0017) MISSED OFFSET
	class ULifeGaugeEffectBaseWidget*                  HealAmountEffect;                                         // 0x0498(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class ULifeGaugeEffectBaseWidget*>          DamageEffects;                                            // 0x04A0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class ULifeGaugeEffectBaseWidget*>          HealEffects;                                              // 0x04B0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x04C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHpGaugeWidget"));

		return ptr;
	}


	void STATIC_OnUsingCastObject(bool InIsUsing);
	void STATIC_OnUpdateHP();
	void STATIC_OnRiderReplicated();
	void STATIC_OnDestoryHealEffect(class ULifeGaugeEffectBaseWidget* HealEffect);
	void STATIC_OnDestoryDamageEffect(class ULifeGaugeEffectBaseWidget* DamageEffect);
};


// Class TslGame.TslInstantVolumeReducerIconWidget
// 0x0010 (0x0418 - 0x0408)
class UTslInstantVolumeReducerIconWidget : public UTslEventDrivenBaseWidget
{
public:
	class UImage*                                      VolumeDuckingImage;                                       // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UInvalidationBox*                            VolumeDuckingInvalidationBox;                             // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInstantVolumeReducerIconWidget"));

		return ptr;
	}


	void STATIC_UpdateDuckingState(bool InReconnect);
};


// Class TslGame.TslSignalCanvasWidget
// 0x0098 (0x04A0 - 0x0408)
class UTslSignalCanvasWidget : public UTslEventDrivenBaseWidget
{
public:
	class UWidgetAnimation*                            Timer_FadeIn;                                             // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Timer_FadeOut;                                            // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Notification_FadeIn;                                      // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Notification_FadeOut;                                     // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Message_FadeIn;                                           // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Message_FadeOut;                                          // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Message_Active;                                           // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Top5_FadeIn;                                              // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Top5_FadeOut;                                             // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUserWidget*                                 SignalNotificationWidget;                                 // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslTop5NotificationWidget*                  SignalTop5NotificationWidget;                             // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSignalTimerWidget*                       SignalTimerWidget;                                        // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      Top5GlowImage;                                            // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UOverlay*                                    SignalMessageParticleOverlay;                             // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SignalMessageText;                                        // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Top5MessageText;                                          // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                CPPResultShowTime;                                        // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFistMessageDisplay;                                      // 0x048C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x048D(0x0003) MISSED OFFSET
	float                                              StartDisplayTime;                                         // 0x0490(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0494(0x0004) MISSED OFFSET
	struct FTimerHandle                                CPPWinResultShowTimer;                                    // 0x0498(0x0008)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSignalCanvasWidget"));

		return ptr;
	}


	void STATIC_OnUpdateSignalZone();
	void STATIC_OnUpdateGroggy();
	void STATIC_OnPlayMessageActiveAnimation();
	void STATIC_OnNotifyCPPWinShow(bool bShow);
	void STATIC_OnNotifyCPPWinResult(bool bWinAndExit);
	void STATIC_HideCPPWinResultMessage();
};


// Class TslGame.TslSignalGaugeWidget
// 0x0068 (0x0470 - 0x0408)
class UTslSignalGaugeWidget : public UTslEventDrivenBaseWidget
{
public:
	class UImage*                                      SignalGaugeBarImage;                                      // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UOverlay*                                    EffectLayerBinder;                                        // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      DecreaseSignalEffectClass;                                // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      IncreaseSignalEffectClass;                                // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SignalAmountEffectClass;                                  // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DecreaseSignalEffectMax;                                  // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                IncreaseSignalEffectMax;                                  // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USignalGaugeEffectBaseWidget*                SignalAmountEffect;                                       // 0x0438(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class USignalGaugeEffectBaseWidget*>        DecreaseSignalEffects;                                    // 0x0440(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class USignalGaugeEffectBaseWidget*>        IncreaseSignalEffects;                                    // 0x0450(0x0010) (ExportObject, ZeroConstructor, Transient)
	float                                              SignalAmount;                                             // 0x0460(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Signal;                                                   // 0x0464(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OldSignal;                                                // 0x0468(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxSignal;                                                // 0x046C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSignalGaugeWidget"));

		return ptr;
	}


	void STATIC_UpdateWidget();
	void STATIC_UpdateSignal_Internal(float NewSignal, float NewMaxSignal, float nowSignalAmount);
	void STATIC_UpdateGauge();
	void STATIC_OnUsingCastObject(bool InIsUsing);
	void STATIC_OnUpdateSignal();
	void STATIC_OnIncreaseSignal();
	void STATIC_OnDestoryIncreaseEffect(class USignalGaugeEffectBaseWidget* IncreaseEffect);
	void STATIC_OnDestoryDecreaseEffect(class USignalGaugeEffectBaseWidget* DecreaseEffect);
	void STATIC_OnDecreaseSignal();
	float STATIC_GetSignalRatio();
};


// Class TslGame.TslSignalTimerWidget
// 0x0020 (0x0428 - 0x0408)
class UTslSignalTimerWidget : public UTslEventDrivenBaseWidget
{
public:
	class UImage*                                      SignalGaugeImage;                                         // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SignalCounterText;                                        // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                Countdown;                                                // 0x0418(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                CountDownMax;                                             // 0x041C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                EverySecondTimer;                                         // 0x0420(0x0008)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSignalTimerWidget"));

		return ptr;
	}


	void STATIC_UpdateWidget();
	void STATIC_LeavetSignalZone();
	void STATIC_GoInSignalZone();
	void STATIC_EverySecond();
};


// Class TslGame.TslWeaponHudCanvasWidget
// 0x0028 (0x0430 - 0x0408)
class UTslWeaponHudCanvasWidget : public UTslEventDrivenBaseWidget
{
public:
	class UTslWeaponHudWidget*                         WeaponHudWidget;                                          // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             WeaponIconSwitcherWidget;                                 // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              PositionYWithBoost;                                       // 0x0418(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PositionYWithoutBoost;                                    // 0x041C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetYWithoutSignal;                                     // 0x0420(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0424(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponHudCanvasWidget"));

		return ptr;
	}


	void STATIC_OnReset();
};


// Class TslGame.TslWeaponHudWidget
// 0x0020 (0x0428 - 0x0408)
class UTslWeaponHudWidget : public UTslEventDrivenBaseWidget
{
public:
	class UBackgroundBlur*                             WeaponHudBackgroundBlur;                                  // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     WeaponHudBorder;                                          // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    BreathIconSizeBox;                                        // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              CacheStrength;                                            // 0x0420(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CacheAlpha;                                               // 0x0424(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponHudWidget"));

		return ptr;
	}

};


// Class TslGame.WeaponSlotBaseWidget
// 0x01D8 (0x05C8 - 0x03F0)
class UWeaponSlotBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      bListInSlot : 1;                                          // 0x03F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	int                                                WeaponIndex;                                              // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ENoReloadGuideType                                 ListSlotNoReloadGuideType;                                // 0x03F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseWeaponIcon : 1;                                       // 0x03F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      WeaponIconImageBinder;                                    // 0x0400(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_SizeBox                    WeaponIconImageSizeBoxBinder;                             // 0x0428(0x0028) (Edit, BlueprintVisible)
	float                                              WeaponIconImageSizeBoxHeight;                             // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	struct FName                                       WeaponIconTextureParmName;                                // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       WeaponIconColorParmName;                                  // 0x0460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Armed;                                        // 0x0468(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Normal;                                       // 0x0478(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Unarmed;                                      // 0x0488(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  ScaleUpAnimBinder;                                        // 0x0498(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ScaleDownAnimBinder;                                      // 0x04B8(0x0020) (Edit, BlueprintVisible)
	struct FColorBlindColorSet                         WeaponColorSet_NoReload;                                  // 0x04D8(0x0010) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     WeaponIconBackground;                                     // 0x04E8(0x0030) (Edit, BlueprintVisible)
	float                                              SlotBackgroundAlpha_Armed;                                // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlotBackgroundAlpha_Unarmed;                              // 0x051C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlotBackgroundAlpha_Normal;                               // 0x0520(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0524(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  FadeInWeaponSlotAnimBinder;                               // 0x0528(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutWeaponSlotAnimBinder;                              // 0x0548(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeInUnarmedWeaponSlotAminBinder;                        // 0x0568(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutUnarmedWeaponSlotAminBinder;                       // 0x0588(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData04[0x20];                                      // 0x05A8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponSlotBaseWidget"));

		return ptr;
	}

};


// Class TslGame.TslWeaponSlotBaseWidget
// 0x0050 (0x0458 - 0x0408)
class UTslWeaponSlotBaseWidget : public UTslEventDrivenBaseWidget
{
public:
	struct FLinearColor                                WeaponColor_Armed;                                        // 0x0408(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Normal;                                       // 0x0418(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Unarmed;                                      // 0x0428(0x0010) (Edit, IsPlainOldData)
	float                                              AnimationSpeed;                                           // 0x0438(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x043C(0x0014) MISSED OFFSET
	class AEquipment*                                  CacheEquipment;                                           // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponSlotBaseWidget"));

		return ptr;
	}


	void STATIC_OnUpdateWeapon();
	void STATIC_OnChangedWeapon(int InWeaponIndex, float InDuration);
};


// Class TslGame.TslWeaponDoubleBarrelWidget
// 0x0020 (0x0478 - 0x0458)
class UTslWeaponDoubleBarrelWidget : public UTslWeaponSlotBaseWidget
{
public:
	class UImage*                                      DoubleBarrelLeft;                                         // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      DoubleBarrelRight;                                        // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTexture2D*                                  BarrelFullTexture;                                        // 0x0468(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  BarrelEmptyTexture;                                       // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponDoubleBarrelWidget"));

		return ptr;
	}

};


// Class TslGame.TslWeaponFiremodeWidget
// 0x00C8 (0x0520 - 0x0458)
class UTslWeaponFiremodeWidget : public UTslWeaponSlotBaseWidget
{
public:
	class UWidgetSwitcher*                             CurrentFiremodeSwitcher;                                  // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             NextFiremodeSwitcher;                                     // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     NextFiremodeBorder;                                       // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FiremodeIconChange;                                       // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FFiremodeImage                              FiremodeDefaultIcons;                                     // 0x0478(0x0050)
	TMap<struct FName, struct FFiremodeImage>          FiremodeIcons;                                            // 0x04C8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0518(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponFiremodeWidget"));

		return ptr;
	}

};


// Class TslGame.TslWeaponLoadedAmmoWidget
// 0x0038 (0x0490 - 0x0458)
class UTslWeaponLoadedAmmoWidget : public UTslWeaponSlotBaseWidget
{
public:
	class UTextBlock*                                  CurrentWeaponLoadedAmmoText;                              // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  NextWeaponLoadedAmmoText;                                 // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            LoadedAmmoDecreasing;                                     // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            LoadedAmmoIncreasing;                                     // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FColorBlindColorSet                         WeaponColorSet_NoReload;                                  // 0x0478(0x0010) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponLoadedAmmoWidget"));

		return ptr;
	}


	void STATIC_OnUpdatedInventory(const struct FName& InItemID, int InStackCount);
};


// Class TslGame.TslWeaponReserveAmmoWidget
// 0x0038 (0x0490 - 0x0458)
class UTslWeaponReserveAmmoWidget : public UTslWeaponSlotBaseWidget
{
public:
	class UTextBlock*                                  CurrentWeaponReserveAmmoText;                             // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  NextWeaponReserveAmmoText;                                // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            ReserveAmmoDecreasing;                                    // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            ReserveAmmoIncreasing;                                    // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FColorBlindColorSet                         WeaponColorSet_NoReload;                                  // 0x0478(0x0010) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponReserveAmmoWidget"));

		return ptr;
	}

};


// Class TslGame.TslEventItemSlotWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslEventItemSlotWidget : public UUmgBaseWidget
{
public:
	class UBorder*                                     FrameBorder;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      ItemImage;                                                // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemCountText;                                            // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UItem*                                       CachedItem;                                               // 0x0408(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItem*                                       DefaultObjectItem;                                        // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       IconTextureParamName;                                     // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BlinkFrameParamName;                                      // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 BlinkCurve;                                               // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0430(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEventItemSlotWidget"));

		return ptr;
	}


	class UItem* STATIC_GetCachedItem();
};


// Class TslGame.TslEventItemWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslEventItemWidget : public UUmgBaseWidget
{
public:
	TArray<struct FUmgWidgetBinder_Gerneral>           Slots;                                                    // 0x03F0(0x0010) (Edit, ZeroConstructor)
	TMap<struct FName, struct FItemPerSlot>            ItemPerSlots;                                             // 0x0400(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0450(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEventItemWidget"));

		return ptr;
	}


	void STATIC_OnInventoryUpdated();
};


// Class TslGame.TslFBRBuffIconBaseWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslFBRBuffIconBaseWidget : public UUmgBaseWidget
{
public:
	class UInvalidationBox*                            CachedInvalidationBox;                                    // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	int                                                IconIndex;                                                // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UMaterialInterface*                          MI_ProgressBar;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ProgressBarMaterialParam;                                 // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MID_ProgressBar;                                          // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	struct FName                                       ItemIDForIcon;                                            // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHideCountText;                                           // 0x0428(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0429(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRBuffIconBaseWidget"));

		return ptr;
	}

};


// Class TslGame.TslFBRSkillSlotWidget
// 0x0108 (0x0538 - 0x0430)
class UTslFBRSkillSlotWidget : public UTslFBRBuffIconBaseWidget
{
public:
	class UImage*                                      SkillIconImage;                                           // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      SkillProgressBar_Image;                                   // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SkillCountText;                                           // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SkillIndexText;                                           // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBorder*                                     SkillIcon_Border;                                         // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UGridPanel*                                  SkillCountGridPanel;                                      // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FLinearColor                                SkillIconImage_ActivatedColor;                            // 0x0460(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SkillIconImage_DeactivatedColor;                          // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SkillIconBorder_ActivatedColor;                           // 0x0480(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SkillIconBorder_DeactivatedColor;                         // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SkillIconBorder_ActivatedBrushColor;                      // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SkillIconBorder_DeactivatedBrushColor;                    // 0x04B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FSlateColor                                 SkillCountText_ActivatedColor;                            // 0x04C0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateColor                                 SkillCountText_DeactivatedColor;                          // 0x04E8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0510(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRSkillSlotWidget"));

		return ptr;
	}


	void STATIC_OnUpdateIconColor(int InCount, EBuffCountType InCountType, bool bInActive);
};


// Class TslGame.TslFBRBuffWidget
// 0x0080 (0x0470 - 0x03F0)
class UTslFBRBuffWidget : public UUmgBaseWidget
{
public:
	class UHorizontalBox*                              IconHorizontalBox;                                        // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USpacer*                                     IconSpacer;                                               // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslFBRBuffIconDataAsset*                    BuffIconDataAsset;                                        // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FStringClassReference                       SpawnKitClass;                                            // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class UTslFBRBuffIconBaseWidget*>           IconSlotList;                                             // 0x0418(0x0010) (ExportObject, ZeroConstructor, Transient)
	class USpawnKit*                                   SpawnKit;                                                 // 0x0428(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FSpawnKitInstance>                   SpawnKitInstance;                                         // 0x0430(0x0010) (ZeroConstructor, Transient)
	struct FBuffIconDisplaySetting                     IconDisplaySetting;                                       // 0x0440(0x0018) (Transient)
	EFBRClass                                          CachedClassType;                                          // 0x0458(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCollapseEmptyIconWidget;                                 // 0x0459(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x16];                                      // 0x045A(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRBuffWidget"));

		return ptr;
	}


	void STATIC_OnSelectableSpawnKit(const struct FString& InSelectableSpawnKit);
	void STATIC_OnMatchStateChanged(const struct FName& InMatchState);
	void STATIC_InitSpawnKit(int InSpawnKitIndex);
};


// Class TslGame.TslGameOptionCloudPopupWidget
// 0x0088 (0x0478 - 0x03F0)
class UTslGameOptionCloudPopupWidget : public UUmgBaseWidget
{
public:
	struct FLinearColor                                HoveredButtonColor;                                       // 0x03F0(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                UnhoveredButtonColor;                                     // 0x0400(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UButton*                                     UploadButton;                                             // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     DownloadButton;                                           // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     UploadBorder;                                             // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     DownloadBorder;                                           // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TitleText;                                                // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DescriptionText;                                          // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  UploadText;                                               // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DownloadText;                                             // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptDelegate                             OnSavePopupButtonPressEvent;                              // 0x0450(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptDelegate                             OnLoadPopupButtonPressEvent;                              // 0x0460(0x0010) (ZeroConstructor, Transient, InstancedReference)
	class UTslGameOptionWidget*                        CachedGameOptionWidget;                                   // 0x0470(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionCloudPopupWidget"));

		return ptr;
	}


	void STATIC_OnUploadButtonUnhovered();
	void STATIC_OnUploadButtonHovered();
	void STATIC_OnUploadButtonClicked();
	void STATIC_OnSavePopupButtonPressed(EPopupButtonID ButtonID);
	void STATIC_OnLoadPopupButtonPressed(EPopupButtonID ButtonID);
	void STATIC_OnDownloadButtonUnhovered();
	void STATIC_OnDownloadButtonHovered();
	void STATIC_OnDownloadButtonClicked();
};


// Class TslGame.TslGameOptionDetailWidget
// 0x0118 (0x0508 - 0x03F0)
class UTslGameOptionDetailWidget : public UUmgBaseWidget
{
public:
	struct FTslGameOptionSupplementaryData             RecentSupplementaryData;                                  // 0x03F0(0x0028) (Transient)
	struct FUmgWidgetBinder_TextBlock                  DisplayNameText_Binder;                                   // 0x0418(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DescriptionText_Binder;                                   // 0x0438(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DetailedDescriptionText_Binder;                           // 0x0458(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SupplementaryWidgetSizeBox_Binder;                        // 0x0478(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SupplementaryWidgetSwitcher_Binder;                       // 0x0498(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<ETslGameOptionSupplementaryType, class UClass*> SupplementaryWidgetClasses;                               // 0x04B8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionDetailWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionHoverWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslGameOptionHoverWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Animation                  EnterHover;                                               // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  LeaveHover;                                               // 0x0410(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionHoverWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionItemDropDownListSelectableWidget
// 0x0088 (0x0478 - 0x03F0)
class UTslGameOptionItemDropDownListSelectableWidget : public UUmgBaseWidget
{
public:
	bool                                               bTitle;                                                   // 0x03F0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSelected;                                                // 0x03F1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET
	class UTslGameOptionItemDropDownListWidget*        Owner;                                                    // 0x03F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  DisplayText_Binder;                                       // 0x0400(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CheckImage_Binder;                                        // 0x0420(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                NormalColor;                                              // 0x0448(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                HighlightColor;                                           // 0x0458(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                SelectedColor;                                            // 0x0468(0x0010) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemDropDownListSelectableWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionItemKeyBinderSlotWidget
// 0x0128 (0x0518 - 0x03F0)
class UTslGameOptionItemKeyBinderSlotWidget : public UUmgBaseWidget
{
public:
	TArray<struct FKey>                                AvailableMouseButtons;                                    // 0x03F0(0x0010) (ZeroConstructor)
	class UTslGameOptionItemKeyBinderWidget*           Owner;                                                    // 0x0400(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	int                                                SlotIndex;                                                // 0x0408(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bHighlighted;                                             // 0x040C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFocused;                                                 // 0x040D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDetectingInput;                                          // 0x040E(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bKeyDetected;                                             // 0x040F(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FKey>                                KeyStack;                                                 // 0x0410(0x0010) (ZeroConstructor, Transient)
	struct FTslInputKey                                BuildUp;                                                  // 0x0420(0x0020) (Transient)
	struct FTslInputKey                                InputKeyAssigned;                                         // 0x0440(0x0020) (Transient)
	bool                                               bForceToUseLeftModifierKeys;                              // 0x0460(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     InputKeyDisplayBorder_Binder;                             // 0x0468(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InputKeyIconizer_Binder;                                  // 0x0498(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Highlighter_Binder;                                       // 0x04B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                BackgroundColorNormal;                                    // 0x04D8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                BackgroundColorHighlighted;                               // 0x04E8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                BackgroundColorFocused;                                   // 0x04F8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnKeyBinderSlotValueChangeEvent;                          // 0x0508(0x0010) (ZeroConstructor, Transient, InstancedReference)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemKeyBinderSlotWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionItemStepperIndicatorWidget
// 0x00A8 (0x0498 - 0x03F0)
class UTslGameOptionItemStepperIndicatorWidget : public UUmgBaseWidget
{
public:
	class UTslGameOptionItemStepperWidget*             Owner;                                                    // 0x03F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	int                                                Index;                                                    // 0x03F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_SizeBox                    SizeBox_Binder;                                           // 0x0400(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Button_Binder;                                            // 0x0428(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     InnerBorder_Binder;                                       // 0x0448(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                ColorNormal;                                              // 0x0478(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                ColorHighlighted;                                         // 0x0488(0x0010) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemStepperIndicatorWidget"));

		return ptr;
	}


	void STATIC_OnClicked();
};


// Class TslGame.TslGameOptionItemDropDownListWidget
// 0x00B8 (0x05C0 - 0x0508)
class UTslGameOptionItemDropDownListWidget : public UTslGameOptionItemWidget
{
public:
	bool                                               bComboBoxOpened;                                          // 0x0508(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	int                                                InitialDropDownListIndex;                                 // 0x050C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrIndex;                                                // 0x0510(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	TArray<struct FTslGameOptionItemStepperData>       DropDownListData;                                         // 0x0518(0x0010) (ZeroConstructor, Transient)
	class UTslGameOptionItemDropDownListSelectableWidget* CachedContentWidget;                                      // 0x0528(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UTslGameOptionItemDropDownListSelectableWidget*> CachedSelectableWidgets;                                  // 0x0530(0x0010) (ExportObject, ZeroConstructor, Transient)
	int                                                LastGeneratedIndex;                                       // 0x0540(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0544(0x0004) MISSED OFFSET
	class UStringTable*                                DropDownListStringTable;                                  // 0x0548(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStringTable*                                DropDownListDetailedStringTable;                          // 0x0550(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   DropDownList_Binder;                                      // 0x0558(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DownArrowImage_Binder;                                    // 0x0578(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      DropDownListSelectableWidgetClass;                        // 0x05A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDropDownListSelectionChangeEvent;                       // 0x05A8(0x0010) (ZeroConstructor, Transient, InstancedReference)
	int                                                SelectedDropDownListIndex;                                // 0x05B8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x05BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemDropDownListWidget"));

		return ptr;
	}


	class UWidget* STATIC_OnGenerateWidget(const struct FString& KeyStr);
	void STATIC_OnComboBoxSelectionChanged(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void STATIC_OnComboBoxOpening();
	void STATIC_OnComboBoxClosing();
};


// Class TslGame.TslGameOptionItemSliderWidget
// 0x0090 (0x0598 - 0x0508)
class UTslGameOptionItemSliderWidget : public UTslGameOptionItemWidget
{
public:
	float                                              InitialSliderRawValue;                                    // 0x0508(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x050C(0x0004) MISSED OFFSET
	struct FText                                       DetailedDescriptionText;                                  // 0x0510(0x0018) (Transient)
	struct FVector2D                                   OptValueRange;                                            // 0x0528(0x0008) (Transient, IsPlainOldData)
	int                                                OptValueTextPrecision;                                    // 0x0530(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsAdjustingSlider;                                       // 0x0534(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsEditingText;                                           // 0x0535(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0536(0x0002) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Slider_Binder;                                            // 0x0538(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SliderEditableValueText_Binder;                           // 0x0558(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnSliderValueChangeEvent;                                 // 0x0578(0x0010) (ZeroConstructor, Transient, InstancedReference)
	float                                              SliderChangeTimestemp;                                    // 0x0588(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AccelerationPercent;                                      // 0x058C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinMaxDiff;                                               // 0x0590(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0594(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemSliderWidget"));

		return ptr;
	}


	void STATIC_ResetAcceleration();
	void STATIC_OnSliderValueTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void STATIC_OnSliderValueTextChanged(const struct FText& Text);
	void STATIC_OnSliderValueChanged(float MappedValue);
	void STATIC_OnSliderAdjustmentEnd();
	void STATIC_OnSliderAdjustmentBegin();
};


// Class TslGame.TslGameOptionItemVolumeSliderWidget
// 0x0048 (0x05E0 - 0x0598)
class UTslGameOptionItemVolumeSliderWidget : public UTslGameOptionItemSliderWidget
{
public:
	class UWidgetSwitcher*                             VolumePreviewButtonSwitcher;                              // 0x0598(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     VolumePreviewButtonPlay;                                  // 0x05A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     VolumePreviewButtonStop;                                  // 0x05A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                VolumeGuideAkComp;                                        // 0x05B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               VolumeGuideStartAk;                                       // 0x05B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               VolumeGuideStopAk;                                        // 0x05C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPlaying;                                               // 0x05C8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05C9(0x0003) MISSED OFFSET
	float                                              AkEventFinishCheckInterval;                               // 0x05CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RTPC_Name;                                                // 0x05D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemVolumeSliderWidget"));

		return ptr;
	}


	void STATIC_StopGuideAkEvent();
	void STATIC_StartGuideAkEvent();
	class UAkComponent* STATIC_GetVolumeGuideAkComp();
	void STATIC_CheckGuideAkEventFinish();
};


// Class TslGame.TslGameOptionItemStepperWidget
// 0x0128 (0x0630 - 0x0508)
class UTslGameOptionItemStepperWidget : public UTslGameOptionItemWidget
{
public:
	bool                                               bRotatable;                                               // 0x0508(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	int                                                InitialStepperIndex;                                      // 0x050C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrIndex;                                                // 0x0510(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	TArray<struct FTslGameOptionItemStepperData>       StepperData;                                              // 0x0518(0x0010) (ZeroConstructor, Transient)
	class UStringTable*                                StepperStringTable;                                       // 0x0528(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStringTable*                                StepperDetailedStringTable;                               // 0x0530(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  StepperText_Binder;                                       // 0x0538(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              StepperIndicatorHorizontalBox_Binder;                     // 0x0558(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      StepperIndicatorWidgetClass;                              // 0x0580(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   LeftArrowButton_Binder;                                   // 0x0588(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RightArrowButton_Binder;                                  // 0x05A8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              TotalStepperIndicatorWidthLengthLimit;                    // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StepperIndicatorWidth;                                    // 0x05CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StepperIndicatorHorizontalMargin;                         // 0x05D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x05D4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStepperValueChangeEvent;                                // 0x05D8(0x0010) (ZeroConstructor, Transient, InstancedReference)
	unsigned char                                      UnknownData03[0x48];                                      // 0x05E8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionItemStepperWidget"));

		return ptr;
	}


	void STATIC_OnRightArrowButtonClicked();
	void STATIC_OnLeftArrowButtonClicked();
};


// Class TslGame.TslGameOptionSupplementaryWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslGameOptionSupplementaryWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionSupplementaryWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslGameOptionSupplementaryPreviewImageWidget
// 0x0078 (0x0468 - 0x03F0)
class UTslGameOptionSupplementaryPreviewImageWidget : public UTslGameOptionSupplementaryWidget
{
public:
	TMap<struct FString, class UTexture2D*>            PreviewImageTextures;                                     // 0x03F0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Image_Binder;                                             // 0x0440(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionSupplementaryPreviewImageWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionSupplementaryPreviewCrosshairWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslGameOptionSupplementaryPreviewCrosshairWidget : public UTslGameOptionSupplementaryWidget
{
public:
	struct FUmgWidgetBinder_Image                      Crosshair_Binder;                                         // 0x03F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionSupplementaryPreviewCrosshairWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionSupplementaryMicrophoneVolumeUnitMeterWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslGameOptionSupplementaryMicrophoneVolumeUnitMeterWidget : public UTslGameOptionSupplementaryWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionSupplementaryMicrophoneVolumeUnitMeterWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslGameOptionTabLabelWidget
// 0x0090 (0x0480 - 0x03F0)
class UTslGameOptionTabLabelWidget : public UUmgBaseWidget
{
public:
	struct FName                                       BoundTabName;                                             // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   LabelButton_Binder;                                       // 0x03F8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  LabelText_Binder;                                         // 0x0418(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              HighlightDecoration_Binder;                               // 0x0438(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                LabelTextColor;                                           // 0x0460(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0470(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionTabLabelWidget"));

		return ptr;
	}


	void STATIC_OnLabelButtonClicked();
};


// Class TslGame.TslGameOptionTabSelectorWidget
// 0x0038 (0x0428 - 0x03F0)
class UTslGameOptionTabSelectorWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      TabLabelWidgetClass;                                      // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_HorizontalBox              TabLabelWidgetsBox_Binder;                                // 0x03F8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              LabelIntervalWidth;                                       // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionTabSelectorWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionTooltipWidget
// 0x0020 (0x0410 - 0x03F0)
class UTslGameOptionTooltipWidget : public UUmgBaseWidget
{
public:
	class UTextBlock*                                  OptionTooltipText;                                        // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   PositionOffset;                                           // 0x03F8(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UWidget*                                     CurrPosBaseWidget;                                        // 0x0400(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0408(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionTooltipWidget"));

		return ptr;
	}

};


// Class TslGame.TslGamepadHudWidget
// 0x00B8 (0x04A8 - 0x03F0)
class UTslGamepadHudWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   CharacterCanvasBinder;                                    // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            KeyHintIBBinder;                                          // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            ReloadingGuideIBBinder;                                   // 0x0438(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 KeyHintBinder;                                            // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 ReloadingGuideBinder;                                     // 0x0480(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadHudWidget"));

		return ptr;
	}


	void STATIC_RuntimeInit_Implementation();
	void STATIC_OnStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void STATIC_OnPossessPawnChanged();
	void STATIC_NotifyWeaponUnarmed(bool bIsUnarmed);
	void STATIC_NotifyReloadingNeed();
};


// Class TslGame.TslGamepadKeyGuideWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslGamepadKeyGuideWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             ContentsSwitcher_Binder;                                  // 0x03F0(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadKeyGuideWidget"));

		return ptr;
	}

};


// Class TslGame.TslGamepadKeyHintSet
// 0x0060 (0x0450 - 0x03F0)
class UTslGamepadKeyHintSet : public UUmgBaseWidget
{
public:
	TArray<struct FHintKeyInfo>                        HintInfos;                                                // 0x03F0(0x0010) (ZeroConstructor, Transient)
	EKeyHintType                                       KeyHintType;                                              // 0x0400(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0401(0x0007) MISSED OFFSET
	class UClass*                                      KeyHintContentClass;                                      // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HintVerticalBox_Binder;                                   // 0x0410(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HintAnimation_Binder;                                     // 0x0430(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadKeyHintSet"));

		return ptr;
	}

};


// Class TslGame.TslGamepadKeyHintContentWidget
// 0x00C0 (0x04B0 - 0x03F0)
class UTslGamepadKeyHintContentWidget : public UUmgBaseWidget
{
public:
	struct FKey                                        FirstKey;                                                 // 0x03F0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FKey                                        SecondKey;                                                // 0x0408(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FKey                                        ThirdKey;                                                 // 0x0420(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       DisplayName;                                              // 0x0438(0x0018) (BlueprintVisible, BlueprintReadOnly)
	EGamepadInputCombinationTypes                      FirstInputCobinationType;                                 // 0x0450(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EGamepadInputCombinationTypes                      SecondInputCobinationType;                                // 0x0451(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EGamepadInputResponseTypes                         ResponseType;                                             // 0x0452(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideInProneStance;                                       // 0x0453(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideInSeatStance;                                        // 0x0454(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5B];                                      // 0x0455(0x005B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadKeyHintContentWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
};


// Class TslGame.TslGamepadOptionDescWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslGamepadOptionDescWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DescText_Binder;                                          // 0x0410(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionDescWidget"));

		return ptr;
	}

};


// Class TslGame.TslGamepadOptionSeparator
// 0x0038 (0x0428 - 0x03F0)
class UTslGamepadOptionSeparator : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03F0(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x0408(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionSeparator"));

		return ptr;
	}

};


// Class TslGame.TslGroggyCircleWidget
// 0x0060 (0x0450 - 0x03F0)
class UTslGroggyCircleWidget : public UUmgBaseWidget
{
public:
	class UMaterialInstanceDynamic*                    MID_ProgressCircle;                                       // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          MI_ProgressCircle;                                        // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      CircleImageBinder;                                        // 0x0400(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CrossImageBinder;                                         // 0x0428(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGroggyCircleWidget"));

		return ptr;
	}

};


// Class TslGame.TslGroupItemListWidget
// 0x0058 (0x0448 - 0x03F0)
class UTslGroupItemListWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_VerticalBox                Vertical_Binder;                                          // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                SlotList_Binder;                                          // 0x0418(0x0028) (Edit, DisableEditOnInstance)
	bool                                               IsCategoryGroup;                                          // 0x0440(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0441(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGroupItemListWidget"));

		return ptr;
	}


	void STATIC_OnListPrepass(class UWidget* BoundWidget);
};


// Class TslGame.TslHealItemSelectorWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslHealItemSelectorWidget : public UUmgBaseWidget
{
public:
	class AInventory*                                  InventoryCached;                                          // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                HealItemSelectorTimer;                                    // 0x03F8(0x0008)
	struct FTimerHandle                                WidgetHideTimer;                                          // 0x0400(0x0008)
	ECastableItemType                                  LastSelectedHealItemType;                                 // 0x0408(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	TArray<struct FHealItemSelectorData>               HealItemDatas;                                            // 0x0410(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ItemIcon_Binder;                                          // 0x0420(0x0028) (Edit, DisableEditOnInstance)
	struct FVector2D                                   InitialPosition;                                          // 0x0448(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   OffsetWhenTpsWeaponIconEnabled;                           // 0x0450(0x0008) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHealItemSelectorWidget"));

		return ptr;
	}


	void STATIC_OnUseHealItem();
	void STATIC_OnSelectNextHealItem();
	void STATIC_OnHideWidget();
	void STATIC_NotifyHealItemSelectorInput();
};


// Class TslGame.TslHitDirectionIndicator
// 0x0068 (0x0458 - 0x03F0)
class UTslHitDirectionIndicator : public UUmgBaseWidget
{
public:
	class ATslCharacter*                               CachedCharacter;                                          // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  Anim_Front_Right;                                         // 0x03F8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Anim_Front_Left;                                          // 0x0418(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  Anim_Rear;                                                // 0x0438(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHitDirectionIndicator"));

		return ptr;
	}


	void STATIC_NotifyHit(const struct FTakeHitInfo& InTakeHitInfo);
};


// Class TslGame.TslHitNotifyWidget
// 0x00B8 (0x04A8 - 0x03F0)
class UTslHitNotifyWidget : public UUmgBaseWidget
{
public:
	int                                                BloodSpotWidgetCount;                                     // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class UClass*                                      SpotWidget;                                               // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UUserWidget*>                         BloodSpotWidgets;                                         // 0x0400(0x0010) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst)
	class AActor*                                      SaveViewTarget;                                           // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanelBinder;                                        // 0x0418(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UMaterialInterface*                          ScreenMaterial;                                           // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      ImageBinder;                                              // 0x0448(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimBinder;                                        // 0x0470(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0490(0x0008) MISSED OFFSET
	class UAkAudioEvent*                               HitNotifyManSound;                                        // 0x0498(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               HitNotifyWomanSound;                                      // 0x04A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHitNotifyWidget"));

		return ptr;
	}


	void STATIC_OnPlayBloodSpot(class UUserWidget* Widget);
	void STATIC_OnHitNotify(float DamagePercent, EDamageTypeCategory DamageType);
};


// Class TslGame.TslHoldButtonWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslHoldButtonWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHoldButtonWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslInGameMenuButton
// 0x0018 (0x0408 - 0x03F0)
class UTslInGameMenuButton : public UUmgBaseWidget
{
public:
	struct FTslStickInputHelper                        NaviInputHelper;                                          // 0x03F0(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInGameMenuButton"));

		return ptr;
	}


	void STATIC_NotifyOnGamepadUp();
	void STATIC_NotifyOnGamepadDown();
	void STATIC_NotifyOnGamepadB();
	void STATIC_NotifyOnGamepadA();
	void STATIC_NotifyOnFocusReceived();
};


// Class TslGame.TslInnerItemSlotWidget
// 0x0078 (0x0468 - 0x03F0)
class UTslInnerItemSlotWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03F0(0x0018) MISSED OFFSET
	TScriptInterface<class USlotContainerInterface>    SlotContainer;                                            // 0x0408(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                ItemList_Binder;                                          // 0x0420(0x0028) (Edit, DisableEditOnInstance)
	class UClass*                                      ItemSlotClass;                                            // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UTslItemSlotBaseWidget*>              ItemSlotArray;                                            // 0x0450(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0460(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInnerItemSlotWidget"));

		return ptr;
	}


	void STATIC_OnSlotFocus(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslInventoryCapacityWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslInventoryCapacityWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      CapacityImage_Binder;                                     // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      FeedbackImage_Binder;                                     // 0x0418(0x0028) (Edit, DisableEditOnInstance)
	float                                              GameMaxSpace;                                             // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0444(0x0004) MISSED OFFSET
	class AInventory*                                  InventoryCached;                                          // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0450(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryCapacityWidget"));

		return ptr;
	}


	void STATIC_OnStackCountChanged(const TScriptInterface<class USlotInterface>& ItemSlotInterface, const TScriptInterface<class USlotContainerInterface>& Container, int StackCount);
	void STATIC_OnInventoryUpdateEvent();
};


// Class TslGame.TslInventorySlotWidget
// 0x00F8 (0x04E8 - 0x03F0)
class UTslInventorySlotWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x03F0(0x0058) MISSED OFFSET
	EEquipSlotID                                       EquipSlotID;                                              // 0x0448(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	int                                                WeaponSlotIndex;                                          // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SlotBackground_NormalEmpty;                               // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SlotBackground_Normal;                                    // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SlotBackground_On;                                        // 0x0460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SlotBackGround_SubOn;                                     // 0x0468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SlotBackground_Over;                                      // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       TexParm;                                                  // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ItemDragWidgetClass;                                      // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IconSize;                                                 // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ToolTipShowDelaytime;                                     // 0x048C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      ItemIcon;                                                 // 0x0490(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               MouseOverSound;                                           // 0x0498(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UWeaponProcessorComponent*                   WeaponProcessor;                                          // 0x04A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    SlotDynamicMaterial;                                      // 0x04A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AEquipment*                                  Equipment;                                                // 0x04B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItem*                                       Item;                                                     // 0x04B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslItemDragDropOperation*                   TslItemDragDropOperation;                                 // 0x04C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslInventoryBaseWidget*                     InventoryWidget;                                          // 0x04C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UItemToolTipWidget*                          CachedToolTip;                                            // 0x04D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslCharacter*                               SaveCharacter;                                            // 0x04D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventorySlotWidget"));

		return ptr;
	}


	void STATIC_OnPressedWidgetInputX();
	void STATIC_OnPressedWidgetInputB();
	void STATIC_OnPressedUIWidgetInputY();
	void STATIC_OnEquipmentUpdated();
	bool STATIC_IsCharacterCasting();
};


// Class TslGame.TslEquipmentSlotBaseWidget
// 0x01C0 (0x06A8 - 0x04E8)
class UTslEquipmentSlotBaseWidget : public UTslInventorySlotWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x04E8(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanel_Binder;                                       // 0x0500(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Border                     BackgroundSlot_Binder;                                    // 0x0528(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_CanvasPanel                ItemIconLayer_Binder;                                     // 0x0558(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_VerticalBox                IconBlock_Binder;                                         // 0x0580(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      Icon_Bidner;                                              // 0x05A8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_VerticalBox                DurabilityGaugeBlock_Binder;                              // 0x05D0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Overlay                    DurabilityIconBlock_Binder;                               // 0x05F8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      DurabilityGauge_Binder;                                   // 0x0620(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      DurabilityIcon_Binder;                                    // 0x0648(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  DurabilityNumber_Binder;                                  // 0x0670(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMaterialInstanceDynamic*                    DurabilityMaterial;                                       // 0x0690(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              EquipableItem;                                            // 0x0698(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x06A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipmentSlotBaseWidget"));

		return ptr;
	}

};


// Class TslGame.TslEquipmentSlotWidget
// 0x0000 (0x06A8 - 0x06A8)
class UTslEquipmentSlotWidget : public UTslEquipmentSlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipmentSlotWidget"));

		return ptr;
	}

};


// Class TslGame.TslEquipmentSlotWidget_Gamepad
// 0x0000 (0x06A8 - 0x06A8)
class UTslEquipmentSlotWidget_Gamepad : public UTslEquipmentSlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEquipmentSlotWidget_Gamepad"));

		return ptr;
	}

};


// Class TslGame.TslWeaponAttachmentSlotBaseWidget
// 0x0198 (0x0680 - 0x04E8)
class UTslWeaponAttachmentSlotBaseWidget : public UTslInventorySlotWidget
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x04E8(0x0088) MISSED OFFSET
	class UTslWeaponSlotEquipmentBaseWidget*           OwnerWeaponEquipmentSlotWidget;                           // 0x0570(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UWeaponItem*                                 WeaponItem;                                               // 0x0578(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0580(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                VerticalBox_Binder;                                       // 0x0590(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanel_Binder;                                       // 0x05B8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Border                     AttachmentSlotBackground_Binder;                          // 0x05E0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_VerticalBox                AttachmentIconBlock_Binder;                               // 0x0610(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      AttachmentIcon_Binder;                                    // 0x0638(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	EWeaponAttachmentSlotID                            AttachmentSlotID;                                         // 0x0660(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0661(0x0007) MISSED OFFSET
	class AInventory*                                  Inventory;                                                // 0x0668(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslInventoryBaseWidget*                     SaveInventory;                                            // 0x0670(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0678(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponAttachmentSlotBaseWidget"));

		return ptr;
	}

};


// Class TslGame.TslWeaponAttachmentSlotWidget
// 0x0000 (0x0680 - 0x0680)
class UTslWeaponAttachmentSlotWidget : public UTslWeaponAttachmentSlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponAttachmentSlotWidget"));

		return ptr;
	}

};


// Class TslGame.TslWeaponAttachmentSlotWidget_Gamepad
// 0x0000 (0x0680 - 0x0680)
class UTslWeaponAttachmentSlotWidget_Gamepad : public UTslWeaponAttachmentSlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponAttachmentSlotWidget_Gamepad"));

		return ptr;
	}

};


// Class TslGame.ItemStudio
// 0x0000 (0x0450 - 0x0450)
class AItemStudio : public AViewModeStudio
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemStudio"));

		return ptr;
	}


	void STATIC_SetViewModeAbleActor(class AActor* Actor);
	void STATIC_SetTextureRenderTarget(class UTextureRenderTarget2D* NewTextureTarget);
	void STATIC_SetCameraSocketName(const struct FName& NewCameraSocketName);
	void STATIC_AddYaw(float Value);
	void STATIC_AddViewSlaveLocation(float Duration);
	void STATIC_AddViewDistance(float Value);
	void STATIC_AddRoll(float Value);
	void STATIC_AddPitch(float Value);
};


// Class TslGame.TslWeaponBodySlotBaseWidget
// 0x0200 (0x06E8 - 0x04E8)
class UTslWeaponBodySlotBaseWidget : public UTslInventorySlotWidget
{
public:
	class UTextureRenderTarget2D*                      RenderTargetTexture;                                      // 0x04E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ItemStudioClass;                                          // 0x04F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxWeaponNameLength;                                      // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     BackgroundBorder_Binder;                                  // 0x0500(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_CanvasPanel                Canvas_Binder;                                            // 0x0530(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_CanvasPanel                WeaponInfoTextCanvas_Bidner;                              // 0x0558(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_HorizontalBox              AmmoTextHorizontalBox_Binder;                             // 0x0580(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  WeaponHandsOnLoadedAmmoCount_Binder;                      // 0x05A8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      AmmoIcon_Binder;                                          // 0x05C8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  WeaponHandsOnUnloadedAmmoCount_Binder;                    // 0x05F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  WeaponName_Binder;                                        // 0x0610(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  KeyName_Binder;                                           // 0x0630(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  AmmoName_Bidner;                                          // 0x0650(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      WeaponCaptureImage_Binder;                                // 0x0670(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0698(0x0008) MISSED OFFSET
	class UEquipableItem*                              EquipableItem;                                            // 0x06A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UWeaponItem*                                 WeaponItem;                                               // 0x06A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UThrowableItem*                              ThrowableItem;                                            // 0x06B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslWeapon_Gun*                              Weapon_Gun;                                               // 0x06B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    WeaponCaptureMaterial;                                    // 0x06C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    BgMID;                                                    // 0x06C8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UUserWidget*                                 ChildFocusWidget;                                         // 0x06D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AInventory*                                  InventoryCached;                                          // 0x06D8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponBodySlotBaseWidget"));

		return ptr;
	}


	void STATIC_OnSpawnActorInSceneCaptureWorld(class AActor* SpawnedActor);
	void STATIC_InitBody();
	void STATIC_DestroyItemStudio();
};


// Class TslGame.TslWeaponBodySlotWidget
// 0x0000 (0x06E8 - 0x06E8)
class UTslWeaponBodySlotWidget : public UTslWeaponBodySlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponBodySlotWidget"));

		return ptr;
	}


	void STATIC_OnSpawnActorInSceneCaptureWorld(class AActor* SpawnedActor);
	void STATIC_InitBody();
	void STATIC_DestroyItemStudio();
};


// Class TslGame.TslWeaponBodySlotWidget_Gamepad
// 0x0000 (0x06E8 - 0x06E8)
class UTslWeaponBodySlotWidget_Gamepad : public UTslWeaponBodySlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponBodySlotWidget_Gamepad"));

		return ptr;
	}


	void STATIC_OnSpawnActorInSceneCaptureWorld(class AActor* SpawnedActor);
	void STATIC_InitBody();
	void STATIC_DestroyItemStudio();
};


// Class TslGame.TslWeaponSlotEquipmentBaseWidget
// 0x0218 (0x0700 - 0x04E8)
class UTslWeaponSlotEquipmentBaseWidget : public UTslInventorySlotWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xEC];                                      // 0x04F4(0x00EC) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                Vertical_Binder;                                          // 0x05E0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_HorizontalBox              AttachmentSlotHorizontalBox_Binder;                       // 0x0608(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Border                     BackgroundSlot_Binder;                                    // 0x0630(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTextureRenderTarget2D*                      RenderTargetTexture;                                      // 0x0660(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ItemStudioClass;                                          // 0x0668(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxWeaponNameLength;                                      // 0x0670(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0674(0x0004) MISSED OFFSET
	class UMaterialInterface*                          PrimaryMaterialInterface;                                 // 0x0678(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          SecondaryMaterialInterface;                               // 0x0680(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          ThrowableOrMeleeMaterialInterface;                        // 0x0688(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UTslWeaponAttachmentSlotBaseWidget*>  AttachmentSlotList;                                       // 0x0690(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UUserWidget*                                 ChildFocusWidget;                                         // 0x06A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x06A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AItemStudio*                                 WeaponStudio;                                             // 0x06B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    WeaponCaptureMaterial;                                    // 0x06B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              EquipableItem;                                            // 0x06C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWeaponItem*                                 WeaponItem;                                               // 0x06C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UThrowableItem*                              ThrowableItem;                                            // 0x06D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslWeapon_Gun*                              Weapon_Gun;                                               // 0x06D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              DragDroppingEquipableItem;                                // 0x06E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWeaponItem*                                 DragDroppingWeaponItem;                                   // 0x06E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UThrowableItem*                              DragDroppingThrowableItem;                                // 0x06F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x06F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponSlotEquipmentBaseWidget"));

		return ptr;
	}


	void STATIC_OnPressedUIWidgetInputY();
	void STATIC_OnLeaveSlotFunction(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEnterSlotFunction(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentFocusedEvent(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentChangedFunction(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslWeaponSlotEquipmentWidget
// 0x0000 (0x0700 - 0x0700)
class UTslWeaponSlotEquipmentWidget : public UTslWeaponSlotEquipmentBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponSlotEquipmentWidget"));

		return ptr;
	}


	void STATIC_OnPressedUIWidgetInputY();
	void STATIC_OnLeaveSlotFunction(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEnterSlotFunction(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentFocusedEvent(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentChangedFunction(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslWeaponSlotEquipmentWidget_Gamepad
// 0x0010 (0x0710 - 0x0700)
class UTslWeaponSlotEquipmentWidget_Gamepad : public UTslWeaponSlotEquipmentBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0700(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponSlotEquipmentWidget_Gamepad"));

		return ptr;
	}


	void STATIC_OnPressedUIWidgetInputY();
	void STATIC_OnLeaveSlotFunction(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEnterSlotFunction(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentFocusedEvent(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentChangedFunction(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslItemDragWidget
// 0x0128 (0x0518 - 0x03F0)
class UTslItemDragWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      Background_Binder;                                        // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ErrorIcon_Binder;                                         // 0x0418(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ItemIcon_Binder;                                          // 0x0440(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                StackCountBlock_Binder;                                   // 0x0468(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  StackCountText_Binder;                                    // 0x0490(0x0020) (Edit, DisableEditOnInstance)
	class UItem*                                       ItemInstance;                                             // 0x04B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotInterface>             ItemInterface;                                            // 0x04B8(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x04C8(0x0020) MISSED OFFSET
	class UTexture*                                    DragDropBgRef;                                            // 0x04E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    DragDropBgErrorRef;                                       // 0x04F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    DragDropDeleteRef;                                        // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslPlayerController*                        ShooterPlayerController;                                  // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x0508(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    BackgroundMaterial;                                       // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemDragWidget"));

		return ptr;
	}


	void STATIC_OnErrorIconPrepass(class UWidget* BoundWidget);
};


// Class TslGame.TslItemListBaseWidget
// 0x0310 (0x0700 - 0x03F0)
class UTslItemListBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x03F0(0x0030) MISSED OFFSET
	TArray<EItemCategory>                              ExceptSlots;                                              // 0x0420(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      CachedDeathDropItemClass;                                 // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bVicinity;                                                // 0x0438(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSort;                                                    // 0x0439(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x043A(0x0002) MISSED OFFSET
	int                                                BackgroundSlotWidgetCount;                                // 0x043C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x90];                                      // 0x0440(0x0090) MISSED OFFSET
	struct FUmgWidgetBinder_SizeBox                    Top_Binder;                                               // 0x04D0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    Bottom_Binder;                                            // 0x04F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    ListHeight_Binder;                                        // 0x0520(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_ScrollBox                  ItemList_Binder;                                          // 0x0548(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     FocusColorBG_Binder;                                      // 0x0570(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                SortVertical_Binder;                                      // 0x05A0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   TimeBtn_Binder;                                           // 0x05C8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   TypeBtn_Binder;                                           // 0x05E8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TimeText_Binder;                                          // 0x0608(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TypeText_Binder;                                          // 0x0628(0x0020) (Edit, DisableEditOnInstance)
	class UClass*                                      ItemSlotClass;                                            // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSlateColor                                 DefaultButtonColor;                                       // 0x0650(0x0028) (Edit, DisableEditOnInstance)
	struct FSlateColor                                 SelectButtonColor;                                        // 0x0678(0x0028) (Edit, DisableEditOnInstance)
	float                                              ItemPackageTitleHeight;                                   // 0x06A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GroundTitleHeight;                                        // 0x06A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ItemSlotHeight;                                           // 0x06A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxLoop;                                                  // 0x06AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UTslItemSlotBaseWidget*>              BackgroundSlotWidgets;                                    // 0x06B0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UTslItemSlotBaseWidget*>              AddList;                                                  // 0x06C0(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UTslItemSlotBaseWidget*                      TempSlotItem;                                             // 0x06D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ANearbyInteractiveItemExplorer*              ItemExplorer;                                             // 0x06D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    Container;                                                // 0x06E0(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<TScriptInterface<class USlotInterface>>     PendingSpawnList;                                         // 0x06F0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemListBaseWidget"));

		return ptr;
	}


	void STATIC_RefreshList();
	void STATIC_OnTopPrepass(class UWidget* BoundWidget);
	void STATIC_OnSlotFocus(const TScriptInterface<class USlotInterface>& NewSlot, const TScriptInterface<class USlotContainerInterface>& SlotContainer);
	void STATIC_OnRefreshList();
	void STATIC_OnRefreshFocus();
	void STATIC_OnFocusColorPrepass(class UWidget* BoundWidget);
	void STATIC_OnClickBtn_Type();
	void STATIC_OnClickBtn_Time();
	void STATIC_OnChangedStackCount();
	void STATIC_OnBottomPrepass(class UWidget* BoundWidget);
	bool STATIC_IsEmptyList();
	void STATIC_HandleOnLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_HandleOnEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_HandleOnDoSlotAction();
	void STATIC_DelayOnChildWidgetRefreshFocus();
};


// Class TslGame.TslItemListWidget
// 0x0000 (0x0700 - 0x0700)
class UTslItemListWidget : public UTslItemListBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemListWidget"));

		return ptr;
	}


	void STATIC_RefreshList();
	void STATIC_OnTopPrepass(class UWidget* BoundWidget);
	void STATIC_OnSlotFocus(const TScriptInterface<class USlotInterface>& NewSlot, const TScriptInterface<class USlotContainerInterface>& SlotContainer);
	void STATIC_OnRefreshList();
	void STATIC_OnRefreshFocus();
	void STATIC_OnFocusColorPrepass(class UWidget* BoundWidget);
	void STATIC_OnClickBtn_Type();
	void STATIC_OnClickBtn_Time();
	void STATIC_OnChangedStackCount();
	void STATIC_OnBottomPrepass(class UWidget* BoundWidget);
	bool STATIC_IsEmptyList();
	void STATIC_HandleOnLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_HandleOnEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_HandleOnDoSlotAction();
	void STATIC_DelayOnChildWidgetRefreshFocus();
};


// Class TslGame.TslItemListWidget_Gamepad
// 0x0010 (0x0710 - 0x0700)
class UTslItemListWidget_Gamepad : public UTslItemListBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0700(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemListWidget_Gamepad"));

		return ptr;
	}


	void STATIC_RefreshList();
	void STATIC_OnTopPrepass(class UWidget* BoundWidget);
	void STATIC_OnSlotFocus(const TScriptInterface<class USlotInterface>& NewSlot, const TScriptInterface<class USlotContainerInterface>& SlotContainer);
	void STATIC_OnRefreshList();
	void STATIC_OnRefreshFocus();
	void STATIC_OnFocusColorPrepass(class UWidget* BoundWidget);
	void STATIC_OnClickBtn_Type();
	void STATIC_OnClickBtn_Time();
	void STATIC_OnChangedStackCount();
	void STATIC_OnBottomPrepass(class UWidget* BoundWidget);
	bool STATIC_IsEmptyList();
	void STATIC_HandleOnLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_HandleOnEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_HandleOnDoSlotAction();
	void STATIC_DelayOnChildWidgetRefreshFocus();
};


// Class TslGame.TslItemSlotBaseWidget
// 0x04A0 (0x0890 - 0x03F0)
class UTslItemSlotBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03F0(0x0028) MISSED OFFSET
	TScriptInterface<class USlotInterface>             Item_SlotInterface;                                       // 0x0418(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    SlotContainer;                                            // 0x0428(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0438(0x0078) MISSED OFFSET
	struct FLinearColor                                DefaultSlotNameColor;                                     // 0x04B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x04C0(0x0050) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                ItemMainLayer_Binder;                                     // 0x0510(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CategoryLayer_Binder;                                     // 0x0538(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CastingBar_Binder;                                        // 0x0558(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     CastingBarLayer_Binder;                                   // 0x0580(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CategoryText_Binder;                                      // 0x05B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    ItemInfoBlock_Binder;                                     // 0x05D0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Background_Binder;                                        // 0x05F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      Icon_Binder;                                              // 0x0620(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     DurabilityBorder_Binder;                                  // 0x0648(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DurabilityGauge_Binder;                                   // 0x0678(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  SlotName_Binder;                                          // 0x06A0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    StackCountBlock_Binder;                                   // 0x06C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  StackCountText_Binder;                                    // 0x06E8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     UseLayer_Binder;                                          // 0x0708(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      UseInfo_bg_Binder;                                        // 0x0738(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UseInfo_Text_Binder;                                      // 0x0760(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                EquipableBlock_Binder;                                    // 0x0780(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                InnerItemSlotListBlock;                                   // 0x07A8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    IconSizeBox_Binder;                                       // 0x07D0(0x0028) (Edit, DisableEditOnInstance)
	class UClass*                                      ItemDragClass;                                            // 0x07F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  SelectTexture;                                            // 0x0800(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  FocusTexture;                                             // 0x0808(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  LinkTexture;                                              // 0x0810(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NormalTexture;                                            // 0x0818(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsBehaviorInfoVanishing;                                 // 0x0820(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCastingBarVanishing;                                   // 0x0821(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0822(0x0006) MISSED OFFSET
	class UEquipableItem*                              EquipableItem;                                            // 0x0828(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    BackgroundMaterial;                                       // 0x0830(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItem*                                       RefItem;                                                  // 0x0838(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ItemSlotCatingBar;                                        // 0x0840(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AInventory*                                  RefInventory;                                             // 0x0848(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCastComponent*                              RefCastComponent;                                         // 0x0850(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DurabilityGaugeMaterial;                                  // 0x0858(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ItemIconDynamicMaterial;                                  // 0x0860(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacter*                               TslCharacter;                                             // 0x0868(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTexture*                                    Tex;                                                      // 0x0870(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UImage*                                      ItemIcon;                                                 // 0x0878(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslInventoryBaseWidget*                     SaveInventory;                                            // 0x0880(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UItemToolTipWidget*                          CachedToolTip;                                            // 0x0888(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemSlotBaseWidget"));

		return ptr;
	}


	void STATIC_OnChangedStackCount();
	void STATIC_DispatchRefreshInnerList();
	void STATIC_BroadCastSlotFocus(const TScriptInterface<class USlotInterface>& InSlot);
};


// Class TslGame.TslItemSlotWidget
// 0x0000 (0x0890 - 0x0890)
class UTslItemSlotWidget : public UTslItemSlotBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemSlotWidget"));

		return ptr;
	}


	void STATIC_OnChangedStackCount();
	void STATIC_DispatchRefreshInnerList();
	void STATIC_BroadCastSlotFocus(const TScriptInterface<class USlotInterface>& InSlot);
};


// Class TslGame.TslItemSlotWidget_Gamepad
// 0x0020 (0x08B0 - 0x0890)
class UTslItemSlotWidget_Gamepad : public UTslItemSlotBaseWidget
{
public:
	float                                              DefaultTapTime;                                           // 0x0890(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultHoldTime;                                          // 0x0894(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              YHoldTime;                                                // 0x0898(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x089C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemSlotWidget_Gamepad"));

		return ptr;
	}


	void STATIC_OnInputYReleased();
	void STATIC_OnInputYPressed();
	void STATIC_OnInputXReleased();
	void STATIC_OnInputXPressed();
	void STATIC_OnInputX();
	void STATIC_OnInputBPressed();
	void STATIC_OnInputAReleased();
	void STATIC_OnInputAPressed();
};


// Class TslGame.TslKeyboardAndMouseHintSet
// 0x0060 (0x0450 - 0x03F0)
class UTslKeyboardAndMouseHintSet : public UUmgBaseWidget
{
public:
	EKeyHintType                                       KeyHintType;                                              // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	TArray<struct FKeyboardAndMouseActionAndAxisBindingHintInfo> HintActionAndAxisBindings;                                // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      KeyHintContentClass;                                      // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HintVerticalBox_Binder;                                   // 0x0410(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HintAnimation_Binder;                                     // 0x0430(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyboardAndMouseHintSet"));

		return ptr;
	}

};


// Class TslGame.TslKeyboardAndMouseHintContentWidget
// 0x0080 (0x0470 - 0x03F0)
class UTslKeyboardAndMouseHintContentWidget : public UUmgBaseWidget
{
public:
	struct FTslInputKey                                Key;                                                      // 0x03F0(0x0020) (BlueprintVisible, BlueprintReadOnly)
	struct FTslInputKey                                Key_InvertedAxis;                                         // 0x0410(0x0020) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bActionBinding;                                           // 0x0430(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAxisBinding;                                             // 0x0431(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDummyBinding;                                            // 0x0432(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0433(0x0005) MISSED OFFSET
	struct FName                                       BindingName;                                              // 0x0438(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       HintText;                                                 // 0x0440(0x0018) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bHold;                                                    // 0x0458(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRelease;                                                 // 0x0459(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideInProneStance;                                       // 0x045A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideInSeatStance;                                        // 0x045B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideWhenNoAppliableVehicleSkin;                          // 0x045C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowIfPossibleToSwitchToObserver;                        // 0x045D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x045E(0x0002) MISSED OFFSET
	TArray<struct FTslKeyIconData>                     KeyIconDatas;                                             // 0x0460(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyboardAndMouseHintContentWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
	bool STATIC_IsUsingFunctionKeys();
	bool STATIC_IsInvertedAxisKeyUsingFunctionKeys();
};


// Class TslGame.TslKeyboardAndMouseHintWidget
// 0x00A0 (0x0490 - 0x03F0)
class UTslKeyboardAndMouseHintWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03F0(0x0028) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   SizeBox_Binder;                                           // 0x0418(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            InvalidationBox_Binder;                                   // 0x0438(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   HintSetSwitcher_Binder;                                   // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FTslKeyHintData>                     KeyHintDatas;                                             // 0x0480(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyboardAndMouseHintWidget"));

		return ptr;
	}


	void STATIC_OnWidgetShowChanged(const struct FString& WidgetName, EWidgetShowType ShowType, class UObject* OptionalParam, class ATslBaseHUD* BaseHUD, bool bWidgetNewShow);
	void STATIC_OnVehicleSkinOverrided();
	void STATIC_OnStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void STATIC_OnPossessPawnChanged();
	void STATIC_OnMinimapExtentChanged();
	void STATIC_OnGameUserSettingApplied();
};


// Class TslGame.TslKeyboardWidget
// 0x0078 (0x0468 - 0x03F0)
class UTslKeyboardWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Panel                      KeysPanel_Binder;                                         // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKey                                        CtrlUnrealKey;                                            // 0x0410(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKey                                        AltUnrealKey;                                             // 0x0428(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKey                                        ShiftUnrealKey;                                           // 0x0440(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<class UTslKeyWidget*>                       KeysOnKeyboard;                                           // 0x0458(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyboardWidget"));

		return ptr;
	}

};


// Class TslGame.TslKeyGuideContentWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslKeyGuideContentWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  DescriptionTextBlock_Binder;                              // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              KeyImageHorizontalBox;                                    // 0x0410(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DebugTextBlock_Binder;                                    // 0x0438(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyGuideContentWidget"));

		return ptr;
	}

};


// Class TslGame.TslKeyImageWidget
// 0x00B8 (0x04A8 - 0x03F0)
class UTslKeyImageWidget : public UUmgBaseWidget
{
public:
	struct FTslInputKey                                DefaultInputKey;                                          // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Panel                      ModifierPanel_Binder;                                     // 0x0410(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ModifierKeyImage_Binder;                                  // 0x0430(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      KeyImage_Binder;                                          // 0x0458(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlusTextBlock_Binder;                                     // 0x0480(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              DesiredWidgetHeight;                                      // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DesiredPlusTextFontSize;                                  // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyImageWidget"));

		return ptr;
	}


	void STATIC_UpdateByInputKey(const struct FTslInputKey& TslInputKey);
};


// Class TslGame.TslKeyReceiverWidget
// 0x00A0 (0x0490 - 0x03F0)
class UTslKeyReceiverWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyReceived;                                            // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTslInputKey                                OriginKey;                                                // 0x0400(0x0020) (BlueprintVisible)
	struct FKey                                        FirstDownKey;                                             // 0x0420(0x0018) (BlueprintVisible)
	struct FTslInputKey                                CurrentDownKey;                                           // 0x0438(0x0020) (BlueprintVisible)
	struct FTslInputKey                                LastDownedKey;                                            // 0x0458(0x0020) (BlueprintVisible)
	bool                                               bFocused;                                                 // 0x0478(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableInput;                                             // 0x0479(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsKeyUp;                                                 // 0x047A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAxisInput;                                               // 0x047B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AxisScale;                                                // 0x047C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FKey>                                MouseButtons;                                             // 0x0480(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyReceiverWidget"));

		return ptr;
	}


	void STATIC_UpdateKeyUp(const struct FKey& InKey);
	void STATIC_UpdateKeyDown(const struct FKey& InKey);
	void STATIC_KeyUp(const struct FKey& InKey);
	void STATIC_KeyDown(const struct FKey& InKey);
	bool STATIC_IsInputKeyDown();
	struct FText STATIC_GetLastDownedKeyName();
};


// Class TslGame.TslKeyWidget
// 0x0138 (0x0528 - 0x03F0)
class UTslKeyWidget : public UUmgBaseWidget
{
public:
	struct FString                                     KeyName;                                                  // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FKey                                        MatchingUnrealKey;                                        // 0x0400(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FSlateFontInfo                              KeyNameFont;                                              // 0x0418(0x0068) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EVerticalAlignment>                    KeyNameVerticalAlignment;                                 // 0x0480(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHorizontalAlignment>                  KeyNameHorizontalAlignment;                               // 0x0481(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextJustify>                          KeyNameJustification;                                     // 0x0482(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0483(0x0001) MISSED OFFSET
	float                                              KeyNameWrapTextAt;                                        // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                NonSelectedBorderColor;                                   // 0x0488(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SelectedBorderColor;                                      // 0x0498(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                NonSelectedTextColor;                                     // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                SelectedTextColor;                                        // 0x04B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UTexture2D*                                  SelectedKeyBorderImage;                                   // 0x04C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NonSelectedKeyBorderImage;                                // 0x04D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSelected;                                                // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  KeyNameTextBlock_Binder;                                  // 0x04E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      BorderImage_Binder;                                       // 0x0500(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyWidget"));

		return ptr;
	}


	void STATIC_SetSelected(bool bInSelected);
	bool STATIC_IsSelected();
};


// Class TslGame.TslKickPopupWidget
// 0x0090 (0x0480 - 0x03F0)
class UTslKickPopupWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   YesButtonBinder;                                          // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   NoButtonBinder;                                           // 0x0410(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CancelTextBinder;                                         // 0x0430(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KickQuestionBinder;                                       // 0x0450(0x0020) (Edit, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    ButttonClick;                                             // 0x0470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKickPopupWidget"));

		return ptr;
	}


	void STATIC_SetPopupWidget(EPopupStyle PopupStyle, const struct FText& Title, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
	void STATIC_OnClickedYesButton();
	void STATIC_OnClickedNoButtion();
};


// Class TslGame.TslKillMessageHudWidget
// 0x0138 (0x0528 - 0x03F0)
class UTslKillMessageHudWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      KillMessageTemplate;                                      // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GamePlayMessageTemplate;                                  // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SystemMessageTemplate;                                    // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ObserverKillMessageWidget;                                // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_InvalidationBox            IconOtherKillMessage_InvalidationBoxBinder;               // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            OtherKillMessage_InvalidationBoxBinder;                   // 0x0438(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            MyKillMessageBox_InvalidationBoxBinder;                   // 0x0460(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 MyKillMessageBoxBinder;                                   // 0x0488(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 OtherKillMessageBinder;                                   // 0x04A8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 IconOtherKillMessageBinder;                               // 0x04C8(0x0020) (Edit, DisableEditOnInstance)
	TArray<class UUserWidget*>                         KillMessagePool;                                          // 0x04E8(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	float                                              MessageShowTimeMax;                                       // 0x04F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MessageDeleteAfterTime;                                   // 0x04FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class UTslKillMessageListWidget>    IconOtherKillMessage;                                     // 0x0500(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UTslNewMessageBorderWidget>   MyKillMessageBox;                                         // 0x0508(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UTslNewMessageBorderWidget>   OtherKillMessage;                                         // 0x0510(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<struct FKillQueueInfo>                      KillQueueInfo;                                            // 0x0518(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKillMessageHudWidget"));

		return ptr;
	}


	void STATIC_OnKillCountChanged(int KillCount);
	void STATIC_OnGameUserSettingApplied();
	void STATIC_OnDisplayKilledMessage(const struct FDeathMessage& DeathMessage);
	class UTslNewSystemMessageWidget* STATIC_CreateSystemMessage(const struct FText& Message, const struct FKillMessageSettings& MessageSettings, class UAkAudioEvent* AudioEvent);
	class UTslNewSystemMessageWidget* STATIC_CreateKillMessage(const struct FDeathMessage& DeathMessage, const struct FKillMessageSettings& KillSettings, bool bShowMyKillCount, bool bUseMessagePool);
	class UTslNewSystemMessageWidget* STATIC_CreateGamePlayMessage(const struct FText& Message, const struct FKillMessageSettings& MessageSettings, class UAkAudioEvent* AudioEvent);
};


// Class TslGame.TslKillMessageListWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslKillMessageListWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      KillMessageWidgetClass;                                   // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_VerticalBox                VerticalBox_Binder;                                       // 0x03F8(0x0028) (Edit, DisableEditOnInstance)
	TArray<class UTslKillMessageWidget*>               FreeMessageWidgets;                                       // 0x0420(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	float                                              FadeoutStartTime;                                         // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReverseOrder;                                            // 0x0434(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0435(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKillMessageListWidget"));

		return ptr;
	}


	void STATIC_TrimKillMessageWidgetArrayByNumLimit(int NewNumLimit);
	void STATIC_SetKillMessageWidgetClass(class UClass* NewKillMessageClass);
	void STATIC_ReserveMessageWidgetPool(int Count);
	void STATIC_OnVanishFinished(class UWidget* Widget);
	void STATIC_OnListSizeLimitChange();
	void STATIC_EnqueueDeathMessage(const struct FDeathMessage& DeathMessage);
};


// Class TslGame.TslLoadingScreenPage
// 0x0078 (0x0468 - 0x03F0)
class UTslLoadingScreenPage : public UUmgBaseWidget
{
public:
	TMap<ELoadingScreenType, TAssetPtr<class UTexture2D>> DefaultBackgroundsByType;                                 // 0x03F0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  LoadingScreenImageDataTable;                              // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UTexture2D>                        BackgroundTexturePtr;                                     // 0x0448(0x0020) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLoadingScreenPage"));

		return ptr;
	}


	void STATIC_OnUpdate(const struct FText& Title, const struct FText& Description, class UTexture2D* BackgroundTexture, const struct FLinearColor& BackgroundColor);
};


// Class TslGame.TslLoadingSpinnerWidget
// 0x0010 (0x0400 - 0x03F0)
class UTslLoadingSpinnerWidget : public UUmgBaseWidget
{
public:
	class USizeBox*                                    LoadingSpinnerSizeBox;                                    // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLoadingSpinnerWidget"));

		return ptr;
	}


	void STATIC_ShowSpinner();
};


// Class TslGame.TslLobbyNameTagHudWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslLobbyNameTagHudWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      LobbyNameNameTagWidgetClass;                              // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanel_Binder;                                       // 0x03F8(0x0028) (Edit, DisableEditOnInstance)
	bool                                               bUseNameTagOffsetTranslations;                            // 0x0420(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	TArray<struct FVector>                             NameTagOffsetTranslations;                                // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyNameTagHudWidget"));

		return ptr;
	}


	void STATIC_UpdateNameTagWidget_Internal(int SlotIndex);
	void STATIC_SetNameTagWidget_Internal(int SlotIndex);
	void STATIC_ResetNameTagWidget_Internal(int SlotIndex);
	class UTslLobbyNameTagWidget* STATIC_GetNameTagWidget_Internal(int SlotIndex);
};


// Class TslGame.TslLobbyNameTagWidget
// 0x0188 (0x0578 - 0x03F0)
class UTslLobbyNameTagWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  NickName_Binder;                                          // 0x03F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   PlatformIcon_Binder;                                      // 0x0410(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RankEmblem_Binder;                                        // 0x0430(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceSwitcher_Binder;                                     // 0x0450(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    VoiceSizeBox_Binder;                                      // 0x0478(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HostSizeBox_Binder;                                       // 0x04A0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    StateIconSizeBox_Binder;                                  // 0x04C8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             StateWidgetSwitcher_Binder;                               // 0x04F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BackgroundBlur_Binder;                                    // 0x0518(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bTestAlwaysShowIcons;                                     // 0x0538(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHideIfAlone;                                             // 0x0539(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideStateIconIfAlone;                                    // 0x053A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideIdleStateIcon;                                       // 0x053B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SlotIndex;                                                // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       NameTagSocketName;                                        // 0x0540(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NameTagOffsetTranslation;                                 // 0x0548(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bIsHost;                                                  // 0x0554(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReady;                                                 // 0x0555(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSpeaking;                                              // 0x0556(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLogout;                                                // 0x0557(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     Nickname;                                                 // 0x0558(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     ClanName;                                                 // 0x0568(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyNameTagWidget"));

		return ptr;
	}


	void STATIC_UpdateWidgetSwitchers();
	void STATIC_UpdateWidgetsVisibilities();
	void STATIC_UpdateNickNameAndClanName();
	void STATIC_SetSpeaking(bool InbSpeaking);
	void STATIC_SetReady(bool InbReady);
	void STATIC_SetRankEmblem(ERatingRankType RankType);
	void STATIC_SetPlatformIcon(EOutGamePlatformProvider CharacterPlatform);
	void STATIC_SetOffsetTranslation(const struct FVector& InOffsetTranslation);
	void STATIC_SetNickNameAndClanName(const struct FString& InNickName, const struct FString& InClanName);
	void STATIC_SetNameTagProps();
	void STATIC_SetHost(bool InbHost);
	void STATIC_SetBinding();
	void STATIC_OnVoiceChatUpdated(const struct FString& InUniqueId, bool InbTeamChannel, bool InbSpeaking, float InEnergy);
	bool STATIC_IsAlone();
	void STATIC_InitWidget(const struct FString& InNickName, ERatingRankType InRankEmblem, const struct FString& InClanName, EOutGamePlatformProvider CharacterPlatform);
};


// Class TslGame.TslMessageHudWidget
// 0x0138 (0x0528 - 0x03F0)
class UTslMessageHudWidget : public UUmgBaseWidget
{
public:
	TArray<struct FSystemMessageInfo>                  ImportMessages;                                           // 0x03F0(0x0010) (ZeroConstructor)
	struct FUmgWidgetBinder_Gerneral                   SystemMessageBoxBinder;                                   // 0x0400(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ImportantMessageBoxBinder;                                // 0x0420(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VoiceChannelLimmitBoxBinder;                              // 0x0440(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ObserverAssignMessageBorderWidgetBinder;                  // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SystemMessageBox_RetainerBoxBinder;                       // 0x0480(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VoiceChannelLimmitBox_RetainerBoxBinder;                  // 0x04A0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ImportantMessageBox_RetainerBoxBinder;                    // 0x04C0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ObserverAssingMessage_RetainerBoxBinder;                  // 0x04E0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SystemMessageCanvasBinder;                                // 0x0500(0x0020) (Edit, DisableEditOnInstance)
	class UStringTable*                                UIStringTable;                                            // 0x0520(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMessageHudWidget"));

		return ptr;
	}


	void STATIC_RemoveSameMessage(const struct FText& Message, TArray<struct FSystemMessageInfo>* Messages);
	void STATIC_Process_CheckRequestAndRequestRender(class UTslNewMessageBorderWidget* MessageBorder, class URetainerBox* RetainerBox);
	void STATIC_OnMainPrepass();
	void STATIC_OnDisplayVoiceChannelStateMessage();
	void STATIC_OnDisplayTeamEliminationMessage(int EliminatorTeamNum, int EliminatedTeamNum, bool bIsWipedOut, int EliminatedTeamRanking);
	void STATIC_OnDisplayMessage(ESystemMessageType MessageType, const struct FText& Message, float Duration, class UAkAudioEvent* Sound);
	void STATIC_InitializeMessageHUD();
	struct FText STATIC_GetTeamNameDecorated(int TeamNum);
	void STATIC_DisplayMessage(float InDeltaTime, TArray<struct FSystemMessageInfo>* Messages);
	void STATIC_DesignateTeamLogo(class UImage* LogoImage, int TeamNumber);
	class UTslNewSystemMessageWidget* STATIC_CreateVoiceChannelStateMessage();
	class UTslObserverTeamKilledMessageWidget* STATIC_CreateTeamKilledMessage(const struct FText& EliminatorTeamText, const struct FText& EliminatedTeamText, bool IsWipedOut, TEnumAsByte<ETextJustify> TextAlignment, const struct FSlateColor& TextColor, int TextSize, float Duration, bool bUseFade_In, class UAkAudioEvent* Sound);
	class UTslNewSystemMessageWidget* STATIC_CreateSystemMessage(const struct FText& Message, TEnumAsByte<ETextJustify> TextAlignment, const struct FSlateColor& TextColor, int TextSize, float Duration, bool bUseFade_In, class UAkAudioEvent* Sound);
	class UTslNewSystemMessageWidget* STATIC_CreateGamePlayMessage(const struct FText& Message, TEnumAsByte<ETextJustify> TextAlignment, int TextSize, float Duration, bool bUseFade_In, class UAkAudioEvent* Sound);
};


// Class TslGame.TslMiniPUBGIdWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslMiniPUBGIdWidget : public UUmgBaseWidget
{
public:
	struct FString                                     Name;                                                     // 0x03F0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                Level;                                                    // 0x0400(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	struct FString                                     EmblemId;                                                 // 0x0408(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     NameplateId;                                              // 0x0418(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	EOutGamePlatformProvider                           Platform;                                                 // 0x0428(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0429(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMiniPUBGIdWidget"));

		return ptr;
	}

};


// Class TslGame.TslMissionGroupBaseWidget
// 0x0198 (0x0588 - 0x03F0)
class UTslMissionGroupBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                MissionItemVerticalBox_Binder;                            // 0x03F8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MissionGroupText_Binder;                                  // 0x0420(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressImage_Binder;                                     // 0x0440(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ProgressText_Binder;                                      // 0x0468(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  LockWidgetAnimation_Binder;                               // 0x0488(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     LockBorder_Binder;                                        // 0x04A8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ButtonBorder_Binder;                                      // 0x04D8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ExpandImage_Binder;                                       // 0x0508(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    WidgetBody_Binder;                                        // 0x0530(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UTexture2D*                                  ExpandTexture;                                            // 0x0558(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  CollapsTexture;                                           // 0x0560(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0568(0x0008) MISSED OFFSET
	class UTslNaviWidgetComp*                          NaviWidgetProperties;                                     // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnExpanded;                                               // 0x0578(0x0010) (ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMissionGroupBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
	void STATIC_UpdateDesign_Focused();
	struct FEventReply STATIC_OnButtonDown(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent);
	void STATIC_NotifyWidgetInputA();
	TArray<class UTslMissionItemBaseWidget*> STATIC_GetMissionItems();
	class UPanelWidget* STATIC_GetMissionItemPanel();
};


// Class TslGame.TslMissionItemBaseWidget
// 0x01E8 (0x05D8 - 0x03F0)
class UTslMissionItemBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  DescriptionText_Binder;                                   // 0x0400(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ProgressText_Binder;                                      // 0x0420(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      IconImage_Binder;                                         // 0x0440(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      StateImage_Binder;                                        // 0x0468(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressBarImage_Binder;                                  // 0x0490(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ProgressBarBorder_Binder;                                 // 0x04B8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     MissionListBorder_Binder;                                 // 0x04E8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<struct FString, class UTexture2D*>            MissionIcons;                                             // 0x0518(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  DefaultMissionIcon;                                       // 0x0568(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  LockTexture;                                              // 0x0570(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  CompleteTexture;                                          // 0x0578(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InactiveIconAlpha;                                        // 0x0580(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InactiveTextAlpha;                                        // 0x0584(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InactiveProgressBarBorderAlpha;                           // 0x0588(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ActiveMissionBorderColor;                                 // 0x058C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                AchievedMissionBorderColor;                               // 0x059C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05AC(0x0004) MISSED OFFSET
	struct FName                                       ScalarParamNameFirstEnd;                                  // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScalarParamNameSecondEnd;                                 // 0x05B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     MissionId;                                                // 0x05C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTslNaviWidgetComp*                          NaviWidgetProperties;                                     // 0x05D0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMissionItemBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
	void STATIC_UpdateDesign_Focused();
};


// Class TslGame.TslMouseWidget
// 0x0058 (0x0448 - 0x03F0)
class UTslMouseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Panel                      KeysPanel_Binder;                                         // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MiddleMouseButton_Binder;                                 // 0x0410(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FString>                             MiddleMouseButtonActionsOrAxies;                          // 0x0438(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMouseWidget"));

		return ptr;
	}

};


// Class TslGame.TslNewCastingBarWidget
// 0x0078 (0x0468 - 0x03F0)
class UTslNewCastingBarWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      CircleProgressBinder;                                     // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextBinder;                                               // 0x0418(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CastingBarCanvasBinder;                                   // 0x0438(0x0028) (Edit, DisableEditOnInstance)
	class UMaterialInstanceDynamic*                    CircleProgressMaterial;                                   // 0x0460(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewCastingBarWidget"));

		return ptr;
	}


	void STATIC_OnInteract();
};


// Class TslGame.TslNewMessageBorderWidget
// 0x00E0 (0x04D0 - 0x03F0)
class UTslNewMessageBorderWidget : public UUmgBaseWidget
{
public:
	TEnumAsByte<EVerticalAlignment>                    MessageAlignment;                                         // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	int                                                NumofMaxMessge;                                           // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceAddMessage;                                         // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUniqueCheck;                                             // 0x03F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET
	class UCurveFloat*                                 MoveCurve;                                                // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   BorderSize;                                               // 0x0408(0x0008) (Edit, IsPlainOldData)
	bool                                               bOverrideCanvasInSize;                                    // 0x0410(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bMove;                                                    // 0x0411(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0412(0x0006) MISSED OFFSET
	TArray<class UTslNewSystemMessageWidget*>          CheckList;                                                // 0x0418(0x0010) (ExportObject, ZeroConstructor)
	class UTslNewSystemMessageWidget*                  LastMessageWidget;                                        // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   TopBinder;                                                // 0x0430(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BottomBinder;                                             // 0x0450(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   MessageCanvasBinder;                                      // 0x0470(0x0020) (Edit, DisableEditOnInstance)
	struct FVector2D                                   OverridedBorderSize;                                      // 0x0490(0x0008) (IsPlainOldData)
	TArray<struct FVector2D>                           WidgetPositionList;                                       // 0x0498(0x0010) (ZeroConstructor)
	float                                              MessageHeight;                                            // 0x04A8(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   MessageSize;                                              // 0x04AC(0x0008) (IsPlainOldData)
	struct FVector2D                                   BasePosition;                                             // 0x04B4(0x0008) (IsPlainOldData)
	struct FVector2D                                   MoveVector;                                               // 0x04BC(0x0008) (IsPlainOldData)
	float                                              TimeCheck;                                                // 0x04C4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Count;                                                    // 0x04C8(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bUpdateSizeRule;                                          // 0x04CC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04CD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewMessageBorderWidget"));

		return ptr;
	}


	void STATIC_UpdateSizeRule();
	void STATIC_UpdatePositionInfo();
	void STATIC_SetSizeRule(TEnumAsByte<ESlateSizeRule> TopSize, TEnumAsByte<ESlateSizeRule> BottomSize);
	void STATIC_OnRemoveMessage(class UTslNewSystemMessageWidget* SystemMessageWidget);
	void STATIC_MoveTick(float InDeltaTime);
	bool STATIC_IsFull();
	bool STATIC_HasMessage();
	class UTslNewSystemMessageWidget* STATIC_GetLastMessage();
	bool STATIC_CheckWantRequestRender();
};


// Class TslGame.TslObserverAssignMessageBorderWidget
// 0x0000 (0x04D0 - 0x04D0)
class UTslObserverAssignMessageBorderWidget : public UTslNewMessageBorderWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverAssignMessageBorderWidget"));

		return ptr;
	}


	void STATIC_UpdateSizeRule();
	void STATIC_UpdatePositionInfo();
	void STATIC_SetSizeRule(TEnumAsByte<ESlateSizeRule> TopSize, TEnumAsByte<ESlateSizeRule> BottomSize);
	void STATIC_OnRemoveMessage(class UTslNewSystemMessageWidget* SystemMessageWidget);
	void STATIC_MoveTick(float InDeltaTime);
	bool STATIC_IsFull();
	bool STATIC_HasMessage();
	class UTslNewSystemMessageWidget* STATIC_GetLastMessage();
	bool STATIC_CheckWantRequestRender();
};


// Class TslGame.TslNewSystemMessageWidget
// 0x0098 (0x0488 - 0x03F0)
class UTslNewSystemMessageWidget : public UUmgBaseWidget
{
public:
	struct FText                                       Message;                                                  // 0x03F0(0x0018) (Edit, BlueprintVisible)
	float                                              Duration;                                                 // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextJustify>                          TextAlignment;                                            // 0x040C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	struct FSlateColor                                 TextColor;                                                // 0x0410(0x0028) (Edit, BlueprintVisible)
	int                                                TextSize;                                                 // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFadeIn;                                               // 0x043C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x043D(0x0003) MISSED OFFSET
	class UAkAudioEvent*                               Sound;                                                    // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    EndMessage;                                               // 0x0448(0x0010) (ZeroConstructor, InstancedReference)
	bool                                               bUsed;                                                    // 0x0458(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0459(0x0007) MISSED OFFSET
	struct FTimerHandle                                SaveTimer;                                                // 0x0460(0x0008)
	struct FUmgWidgetBinder_TextBlock                  MessageTextBinder;                                        // 0x0468(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewSystemMessageWidget"));

		return ptr;
	}


	void STATIC_StartFadeOut();
	void STATIC_StartFadeIn(class UWidgetAnimation* Animation, float Time);
	void STATIC_SetTextSize(class UTextBlock* TextBlock);
	void STATIC_PlayFadeIn();
	void STATIC_OnFadeOutFinished();
	void STATIC_OnFadeInFinished();
	bool STATIC_IsUseable();
	void STATIC_InitializeMessage();
	class UWidgetAnimation* STATIC_GetFadeOutAnimation();
	class UWidgetAnimation* STATIC_GetFadeInAnimation();
	void STATIC_ClearAnimation(class UWidgetAnimation* WidgetAnimation);
	void STATIC_Clear();
};


// Class TslGame.TslKillNewMessageWidget
// 0x0428 (0x08B0 - 0x0488)
class UTslKillNewMessageWidget : public UTslNewSystemMessageWidget
{
public:
	struct FSlateColor                                 TeamColor;                                                // 0x0488(0x0028)
	struct FSlateColor                                 ImportantColor;                                           // 0x04B0(0x0028)
	struct FSlateColor                                 NormalColor;                                              // 0x04D8(0x0028)
	struct FSlateColor                                 TeamKillerColor;                                          // 0x0500(0x0028)
	struct FSlateColor                                 TeamKillerDBNOColor;                                      // 0x0528(0x0028)
	struct FSlateColor                                 TeamVictimColor;                                          // 0x0550(0x0028)
	struct FSlateColor                                 TeamVictimDBNOColor;                                      // 0x0578(0x0028)
	struct FSlateColor                                 MyMsgColor;                                               // 0x05A0(0x0028)
	struct FSlateColor                                 NormalDBNOColor;                                          // 0x05C8(0x0028)
	struct FSlateColor                                 MyKillLogColor;                                           // 0x05F0(0x0028)
	bool                                               bNotDisplayKiller;                                        // 0x0618(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsStealFriendlyFire;                                     // 0x0619(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x061A(0x0006) MISSED OFFSET
	struct FText                                       KillMsgText;                                              // 0x0620(0x0018)
	struct FUmgWidgetBinder_TextBlock                  AlivePlayerBinder;                                        // 0x0638(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KillMsgBlockBinder;                                       // 0x0658(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  SecondaryKillMsgBlockBinder;                              // 0x0678(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 PlatformImage_Binder;                                     // 0x0698(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 SecondaryPlatformImage_Binder;                            // 0x06B8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MyKillsBinder;                                            // 0x06D8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                VerticalBoxBinder;                                        // 0x06F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              HorizontalBoxBinder;                                      // 0x0720(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     BorderBinder;                                             // 0x0748(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   KillCountLayerBinder;                                     // 0x0778(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bDetailKillMessage;                                       // 0x0798(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0799(0x0007) MISSED OFFSET
	struct FDeathMessage                               DeathMessage;                                             // 0x07A0(0x00D8) (Edit, BlueprintVisible)
	class UStringTable*                                UIStringTable;                                            // 0x0878(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   KillFeedPlatformImageScale;                               // 0x0880(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FMargin                                     KillFeedPlatformImagePadding;                             // 0x0888(0x0010) (Edit, DisableEditOnInstance)
	struct FVector2D                                   MiddleKillMessagePlatformImageScale;                      // 0x0898(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FMargin                                     MiddleKillMessagePlatformImagePadding;                    // 0x08A0(0x0010) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKillNewMessageWidget"));

		return ptr;
	}


	bool STATIC_UpdateMyKills();
	void STATIC_SetKillMessageText();
	void STATIC_SetKillMessageFont();
	void STATIC_SetKillMessageColor(const struct FSlateColor& MyMsgColor);
	bool STATIC_IsVictimTeam();
	bool STATIC_IsKillerTeam();
	void STATIC_InitializeKillMessageText();
	int STATIC_GetTeamAlive();
	int STATIC_GetNumStartTeam();
	int STATIC_GetLocalPlayerKillNum();
	struct FLinearColor STATIC_GetBrushColor();
	int STATIC_GetAlivePlayerNum();
};


// Class TslGame.TslObserverTeamKilledMessageWidget
// 0x0050 (0x04D8 - 0x0488)
class UTslObserverTeamKilledMessageWidget : public UTslNewSystemMessageWidget
{
public:
	struct FUmgWidgetBinder_Image                      KillerLogoImageBinder;                                    // 0x0488(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      VictimLogoImageBinder;                                    // 0x04B0(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverTeamKilledMessageWidget"));

		return ptr;
	}


	class UImage* STATIC_GetVictimLogoImage();
	class UImage* STATIC_GetKillerLogoImage();
};


// Class TslGame.TslObserverPlayerInfoWidget
// 0x0490 (0x0880 - 0x03F0)
class UTslObserverPlayerInfoWidget : public UUmgBaseWidget
{
public:
	class UTexture*                                    UnArmedIcon;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UnArmedIconRatio;                                         // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class ATslCharacter*                               CachedCharacter;                                          // 0x0400(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                OldAmmoCount;                                             // 0x0408(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RecentWeaponIndex;                                        // 0x040C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                LastTotalKill;                                            // 0x0410(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  AmmoIncreasingAnimBinder;                                 // 0x0418(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AmmoDecreasingAnimBinder;                                 // 0x0438(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  UserNameText_Binder;                                      // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UserHealthText_Binder;                                    // 0x0478(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     PlayerNameBorder_Binder;                                  // 0x0498(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamNameText_Binder;                                      // 0x04C8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     TeamNameBorder_Binder;                                    // 0x04E8(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             PatternSwitcherBinder;                                    // 0x0518(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      TeamColorEndTriangleImage_Binder;                         // 0x0540(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              AmmoAndScopeBox_Binder;                                   // 0x0568(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AmmoCountText_Binder;                                     // 0x0590(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AmmoTotalCountText_Binder;                                // 0x05B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TotalKillText_Binder;                                     // 0x05D0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KillCountText_Binder;                                     // 0x05F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeTemplateWidget_Binder;                           // 0x0610(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 HelmetIconeWidget_Binder;                                 // 0x0630(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 VestIconWidget_Binder;                                    // 0x0650(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ScopeIconImage_Binder;                                    // 0x0670(0x0028) (Edit, DisableEditOnInstance)
	class UTexture*                                    DriverTexture;                                            // 0x0698(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      WeaponIconImageBinder;                                    // 0x06A0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_SizeBox                    WeaponIconImageSizeBoxBinder;                             // 0x06C8(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      SecondWeaponIconImageBinder;                              // 0x06F0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_SizeBox                    SecondWeaponIconImageSizeBoxBinder;                       // 0x0718(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  MainWeaponName_Binder;                                    // 0x0740(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  MainWeaponEmpty_Binder;                                   // 0x0760(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SecondWeaponEmpty_Binder;                                 // 0x0780(0x0020) (Edit, BlueprintVisible)
	struct FName                                       WeaponIconTextureParmName;                                // 0x07A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       WeaponIconColorParmName;                                  // 0x07A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Armed;                                        // 0x07B0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                WeaponColor_Normal;                                       // 0x07C0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                SecondWeaponColor_Normal;                                 // 0x07D0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FColorBlindColorSet                         WeaponColorSet_NoReload;                                  // 0x07E0(0x0010) (Edit, BlueprintVisible)
	struct FColorBlindColorSet                         SecondWeaponColorSet_NoReload;                            // 0x07F0(0x0010) (Edit, BlueprintVisible)
	TMap<struct FName, class UTexture2D*>              WeaponAttachableTextureMap;                               // 0x0800(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector2D                                   OVerrideVehicleIconSize;                                  // 0x0850(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   OVerrideThrowbleIconSize;                                 // 0x0858(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   OVerrideDefaultIconWidthSize;                             // 0x0860(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	TArray<class UTexture2D*>                          TeamBackgroundTextures;                                   // 0x0868(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UTslUserPlatformImageWidget*                 UserPlatformImageWidget;                                  // 0x0878(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverPlayerInfoWidget"));

		return ptr;
	}

};


// Class TslGame.TslObserverPlayerListTileInfoWidget
// 0x0298 (0x0688 - 0x03F0)
class UTslObserverPlayerListTileInfoWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03F0(0x0020) MISSED OFFSET
	class ATslCharacter*                               Character;                                                // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AReplicatedCharacterData*                    ReplicatedCharacterData;                                  // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ActivatedColor;                                           // 0x0420(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                DeactivatedColor;                                         // 0x0430(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  SelectedAnim;                                             // 0x0440(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  UnSelectedAnim;                                           // 0x0460(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  DisableAnim;                                              // 0x0480(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PlayerId;                                                 // 0x04A0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamName;                                                 // 0x04C0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PlayerKillCount;                                          // 0x04E0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x0500(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   BtnPlayer;                                                // 0x0520(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   KickButton_Binder;                                        // 0x0540(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   ReportButton_Binder;                                      // 0x0560(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             KickOrReportSwitcher_Binder;                              // 0x0580(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_SizeBox                    TeamTagSizeBox_Binder;                                    // 0x05A8(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamTagBG_Binder;                                         // 0x05D0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamTagColor_Binder;                                      // 0x05F8(0x0028) (Edit, BlueprintVisible)
	class ULifeGaugeTemplateBaseWidget*                LifeGauge;                                                // 0x0620(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UTexture2D*>                          TeamBackgroundTextures;                                   // 0x0628(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UTslUserPlatformImageWidget*                 UserPlatformImageWidget;                                  // 0x0638(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     PlayerUniqueId;                                           // 0x0640(0x0010) (ZeroConstructor, Transient)
	struct FString                                     PlayerName;                                               // 0x0650(0x0010) (ZeroConstructor, Transient)
	struct FString                                     ClanName;                                                 // 0x0660(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0670(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverPlayerListTileInfoWidget"));

		return ptr;
	}


	void STATIC_OnReportButtonClicked();
	void STATIC_OnMouseClicked();
	void STATIC_OnKickButtonClicked();
	void STATIC_KickPlayer(EPopupButtonID ButtonID);
};


// Class TslGame.TslObserverPlayerListTileWidget
// 0x01B8 (0x05A8 - 0x03F0)
class UTslObserverPlayerListTileWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Panel                      InforPanel;                                               // 0x03F8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   TeamRank;                                                 // 0x0418(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamRankText;                                             // 0x0438(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             SwitcherTeamLogo;                                         // 0x0458(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamImage;                                                // 0x0480(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamColor;                                                // 0x04A8(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamListColor;                                            // 0x04D0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamNum;                                                  // 0x04F8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             SwitcherTeamInfo;                                         // 0x0518(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamInfoKill;                                             // 0x0540(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  TeamInfoScore;                                            // 0x0560(0x0020) (Edit, BlueprintVisible)
	class UTexture2D*                                  CachedTeamTexture;                                        // 0x0580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0588(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverPlayerListTileWidget"));

		return ptr;
	}


	void STATIC_UpdateStripeTexture(int TeamNumber);
};


// Class TslGame.TslObserverPlayerListWidget
// 0x01E0 (0x05D0 - 0x03F0)
class UTslObserverPlayerListWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      TileWidgetTemplate;                                       // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      TileInfoWidgetTemplate;                                   // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FStringClassReference                       TileTemplateClass;                                        // 0x0400(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FStringClassReference                       TileInfoTemplateClass;                                    // 0x0410(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      TilePanel;                                                // 0x0420(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             TileSwitcher;                                             // 0x0440(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BtnSwitchLeft;                                            // 0x0468(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BtnSwitchRight;                                           // 0x0488(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionAnimationBinder;                                  // 0x04A8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionAnimationBinder;                                 // 0x04C8(0x0020) (Edit, DisableEditOnInstance)
	struct FTimerHandle                                TimerHandler;                                             // 0x04E8(0x0008) (Transient)
	struct FTimerHandle                                TimerHandler_SortRefreshByDistance;                       // 0x04F0(0x0008) (Transient)
	class ATslCharacter*                               CachedTargetCharacter;                                    // 0x04F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FString, struct FRegistedPlayer>       RegistedPlayers;                                          // 0x0500(0x0050) (ZeroConstructor, Transient)
	TMap<int, class UTslObserverTeamData*>             RegistedTeams;                                            // 0x0550(0x0050) (ZeroConstructor, Transient)
	TArray<EObserverPlayerListType>                    ObserverSteps;                                            // 0x05A0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x20];                                      // 0x05B0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverPlayerListWidget"));

		return ptr;
	}


	void STATIC_WidgetHideShowAndStartInMotion();
	void STATIC_WidgetHide();
	void STATIC_UpdateWidget();
	void STATIC_UpdateSortRefreshByDistance();
	void STATIC_SetUpTimerForUpdateReplicatedCharacters(float InRate);
	void STATIC_OnWidgetShowChanged(const struct FString& InWidgetName, EWidgetShowType InShowType, class UObject* InOptionalParam, class ATslBaseHUD* InBaseHUD, bool bInWidgetNewShow);
	void STATIC_OnSelectWidget(class UTslObserverPlayerListTileInfoWidget* SelectedWidget);
	void STATIC_OnNeedSort();
	void STATIC_OnMoveTileRight();
	void STATIC_OnMoveTileLeft();
	void STATIC_ClearTimerForUpdateReplicatedCharacter();
};


// Class TslGame.TslObsrvTeamEliDataQueueWidget
// 0x0010 (0x0400 - 0x03F0)
class UTslObsrvTeamEliDataQueueWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObsrvTeamEliDataQueueWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslParachuteCanvasWidget
// 0x0010 (0x0400 - 0x03F0)
class UTslParachuteCanvasWidget : public UUmgBaseWidget
{
public:
	class UTslParachuteGaugeWidget*                    ParachuteGaugeWidget;                                     // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslParachuteAirSpeedWidget*                 ParachuteAirSpeedWidget;                                  // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParachuteCanvasWidget"));

		return ptr;
	}

};


// Class TslGame.TslParachuteFollowConsoleGuideWidget
// 0x00B0 (0x04A0 - 0x03F0)
class UTslParachuteFollowConsoleGuideWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_SizeBox                    FollowGuideSizeBox_Binder;                                // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             FollowGuideSwitcher_Binder;                               // 0x0418(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      HoldTriangleImageX_Binder;                                // 0x0440(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressBar_Binder;                                       // 0x0468(0x0028) (Edit, DisableEditOnInstance)
	float                                              PressedPosition;                                          // 0x0490(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReleasedPosition;                                         // 0x0494(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParachuteFollowConsoleGuideWidget"));

		return ptr;
	}

};


// Class TslGame.TslParachuteGaugeWidget
// 0x0050 (0x0440 - 0x03F0)
class UTslParachuteGaugeWidget : public UUmgBaseWidget
{
public:
	class USizeBox*                                    FreeFallBar;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USizeBox*                                    ParachuteFallBar;                                         // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USizeBox*                                    GroundHeightBar;                                          // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  AltitudeText;                                             // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            PositionByPlayerAltitude;                                 // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              CheckHeightPeriod;                                        // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CheckHeightRemainedTime;                                  // 0x041C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacter*                               ViewTargetCharacter;                                      // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PositionByPlayerAltitudeTotPlayTime;                      // 0x0428(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AltitudeGauge;                                            // 0x042C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AircraftAltitude;                                         // 0x0430(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AudoDeployHeightFromFloor;                                // 0x0434(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FloorHeight;                                              // 0x0438(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	ESkydiveState                                      SkydiveState;                                             // 0x043C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bParentVisibility;                                        // 0x043D(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x043E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParachuteGaugeWidget"));

		return ptr;
	}


	void STATIC_UpdateViewTarget(class AActor* InViewTarget);
	void STATIC_SetSkydiveState(ESkydiveState InState);
};


// Class TslGame.TslPlatoonCarePackageDropIndicatorWidget
// 0x0008 (0x03F8 - 0x03F0)
class UTslPlatoonCarePackageDropIndicatorWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonCarePackageDropIndicatorWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslPlatoonCommandButtonWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslPlatoonCommandButtonWidget : public UUmgBaseWidget
{
public:
	class UButton*                                     CommandButton;                                            // 0x03F0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslPlatoonCommandWidget*                    Requestor;                                                // 0x03F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslGameState*                               CachedTslGameState;                                       // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	EPlatoonSupportRequestType                         TypeToHandle;                                             // 0x0408(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	float                                              CooldownTime;                                             // 0x040C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastCommandTime;                                          // 0x0410(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsCosmetic;                                              // 0x0414(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInstantReady;                                            // 0x0415(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLastMatchInProgress;                                     // 0x0416(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0417(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonCommandButtonWidget"));

		return ptr;
	}


	void STATIC_OnUpdatePlatoonFireSupportState(const struct FPlatoonFireSupportState& State);
	void STATIC_OnUpdatePlatoonCarePackageState(const struct FPlatoonCarePackageState& State);
	void STATIC_OnMatchStateChanged(const struct FName& InMatchState);
	void STATIC_OnButtonClicked();
	void STATIC_BP_UpdateProgress(float ElapsedTime, float WaitDuration);
	void STATIC_BP_UpdateHighlight(bool bHighlighted);
	void STATIC_BP_UpdateEnablity(bool bEnabled);
	void STATIC_BP_UpdateCommandType(EPlatoonSupportRequestType CommandType, const struct FText& ButtonText);
	void STATIC_BP_UpdateClickability(bool bClickable);
};


// Class TslGame.TslPlatoonCommandWidget
// 0x0078 (0x0468 - 0x03F0)
class UTslPlatoonCommandWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      PlatoonCommandButtonClass;                                // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslPlatoonSupportCommonDataAsset*           CommonData;                                               // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPanelWidget*                                ButtonPanel;                                              // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bCreateButtonsAlways;                                     // 0x0408(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	TMap<EPlatoonSupportRequestType, class UTslPlatoonCommandButtonWidget*> CommandButtons;                                           // 0x0410(0x0050) (ExportObject, ZeroConstructor, Transient)
	class UTslPlatoonCommandButtonWidget*              CommandButtonInContext;                                   // 0x0460(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonCommandWidget"));

		return ptr;
	}


	void STATIC_UpdateButtonsByManifest(const struct FPlatoonSupportRequestManifest& Manifest);
};


// Class TslGame.TslRadioMessageLogSubWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslRadioMessageLogSubWidget : public UUmgBaseWidget
{
public:
	class UTslUserPlatformImageWidget*                 UserPlatformImageWidget;                                  // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              HighlightBgHorizontalBox;                                 // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  PlayerIdText;                                             // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     HighlightBGBorder;                                        // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      HighlightBgImage;                                         // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  RadioMessageText;                                         // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ColonText;                                                // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FadeInAnim;                                               // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FadeOutAnim;                                              // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            HighlightAnim;                                            // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslRadioMessageLogWidget*                   ParentRadioMessageWidget;                                 // 0x0440(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0448(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRadioMessageLogSubWidget"));

		return ptr;
	}


	void STATIC_OnEndShowDurationTimer();
	void STATIC_OnEndFadeoutDurationTimer();
};


// Class TslGame.TslRadioMessageLogWidget
// 0x0080 (0x0470 - 0x03F0)
class UTslRadioMessageLogWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      SubWidgetBp;                                              // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UVerticalBox*                                RadioMessageLogVerticalBox;                               // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FLinearColor                                EnemySpottedHighlightColor;                               // 0x0400(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                WorldMapPingHighlightColor;                               // 0x0410(0x0010) (Edit, IsPlainOldData)
	TArray<class UTslRadioMessageLogSubWidget*>        SubWidgetPoolArray;                                       // 0x0420(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UTslRadioMessageTextWheelWidget*             CachedTextWheelWidget;                                    // 0x0430(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              LastMsgShowSeconds;                                       // 0x0438(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInitRadioMessageManager;                                 // 0x043C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x33];                                      // 0x043D(0x0033) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRadioMessageLogWidget"));

		return ptr;
	}


	void STATIC_OnShow();
	void STATIC_OnRecvRadioMessagePing(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InOtherServerLocation);
	void STATIC_OnRecvRadioMessageNeedAmmo(class ATslPlayerState* InSender, int InMessageIndex, const struct FName& ItemID);
	void STATIC_OnRecvRadioMessageInteraction(class ATslPlayerState* InSender, int InMessageIndex, const struct FText& InInteractionText, const struct FVector_NetQuantize& InOtherServerLocation, ERadioMessageInteractionType InIteractionType);
	void STATIC_OnRecvRadioMessageEnemySpotted(class ATslPlayerState* InSender, int InMessageIndex, const struct FVector_NetQuantize& InOtherServerLocation);
	void STATIC_OnRecvRadioMessage(class ATslPlayerState* InSender, int InMessageIndex);
	void STATIC_OnMatchStarted(bool bIsReconnect);
	void STATIC_OnHide();
	void STATIC_OnForbiddenRadioMessage(class ATslPlayerState* InSender, int InRemainSeconds);
};


// Class TslGame.TslRankEmblemWidget
// 0x00A0 (0x0490 - 0x03F0)
class UTslRankEmblemWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      EmblemImage_Binder;                                       // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    EmblemSizeBox_Binder;                                     // 0x0418(0x0028) (Edit, DisableEditOnInstance)
	TMap<ERatingRankType, class UTexture2D*>           RankEmblems;                                              // 0x0440(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRankEmblemWidget"));

		return ptr;
	}


	void STATIC_SetRankEmblemFromRankType(ERatingRankType InRankType);
};


// Class TslGame.TslReloadingGuideWidget
// 0x00E0 (0x04D0 - 0x03F0)
class UTslReloadingGuideWidget : public UUmgBaseWidget
{
public:
	struct FTimerHandle                                TimerHandle_HideWidget;                                   // 0x03F0(0x0008)
	struct FUmgWidgetBinder_Border                     TopBorder_Binder;                                         // 0x03F8(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      HoldTriangleImage_Binder;                                 // 0x0428(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ProgressBarImage_Binder;                                  // 0x0450(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  KeyGuideText_Binder;                                      // 0x0478(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HideAnimation_Binder;                                     // 0x0498(0x0020) (Edit, DisableEditOnInstance)
	struct FName                                       ActionName;                                               // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x04C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReloadingGuideWidget"));

		return ptr;
	}


	void STATIC_OnReloadPadInput(bool bPressed);
	void STATIC_OnNotifyGroggy();
	void STATIC_OnInteractionWidgetEnabled();
	void STATIC_OnCharacterVault();
	void STATIC_OnCharacterDeath();
};


// Class TslGame.TslRoundEndPointWidget
// 0x0038 (0x0428 - 0x03F0)
class UTslRoundEndPointWidget : public UUmgBaseWidget
{
public:
	class UWidgetSwitcher*                             SlotWidgetSwitcher;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      EmptySlot;                                                // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      WonPointSlot;                                             // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      LostPointSlot;                                            // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Won_Anim;                                                 // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Lost_Anim;                                                // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	ERoundEndPointType                                 LastPointType;                                            // 0x0420(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0421(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRoundEndPointWidget"));

		return ptr;
	}

};


// Class TslGame.TslRoundResultBaseWidget
// 0x0080 (0x0470 - 0x03F0)
class UTslRoundResultBaseWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      RoundEndPointClass;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PointWidgetAnimDelayTime;                                 // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	struct FString                                     TitleKeyString;                                           // 0x0400(0x0010) (Edit, ZeroConstructor)
	struct FString                                     WinKeyString;                                             // 0x0410(0x0010) (Edit, ZeroConstructor)
	struct FString                                     LoseKeyString;                                            // 0x0420(0x0010) (Edit, ZeroConstructor)
	struct FString                                     YourTeamKeyString;                                        // 0x0430(0x0010) (Edit, ZeroConstructor)
	struct FString                                     EnemyTeamKeyString;                                       // 0x0440(0x0010) (Edit, ZeroConstructor)
	class UStringTable*                                ST_RoundSystem;                                           // 0x0450(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0458(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRoundResultBaseWidget"));

		return ptr;
	}


	void STATIC_PlayPointWidgetAnim();
	void STATIC_OnWidgetShowChanged(const struct FString& InWidgetName, EWidgetShowType InShowType, class UObject* InOptionalParam, class ATslBaseHUD* InBaseHUD, bool bInWidgetNewShow);
};


// Class TslGame.TslMatchEndWidget
// 0x0038 (0x04A8 - 0x0470)
class UTslMatchEndWidget : public UTslRoundResultBaseWidget
{
public:
	class UTextBlock*                                  MatchEndText;                                             // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  MatchResultText;                                          // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ObserverTeamName;                                         // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  YourTeamScoreText;                                        // 0x0488(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  EnemyTeamScoreText;                                       // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Victory_Anim;                                             // 0x0498(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Defeat_Anim;                                              // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMatchEndWidget"));

		return ptr;
	}

};


// Class TslGame.TslRoundEndWidget
// 0x0060 (0x04D0 - 0x0470)
class UTslRoundEndWidget : public UTslRoundResultBaseWidget
{
public:
	class UTextBlock*                                  CurrentRoundText;                                         // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CurrentRoundResultText;                                   // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CurrentRoundScoreText;                                    // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  YourTeamText;                                             // 0x0488(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  EnemyTeamText;                                            // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  YourTeamScoreText;                                        // 0x0498(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  EnemyTeamScoreText;                                       // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              RoundPointHorizontalBox;                                  // 0x04A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TArray<class UTslRoundEndPointWidget*>             RoundPointList;                                           // 0x04B0(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UWidgetAnimation*                            WinEffectAnim;                                            // 0x04C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            LossEffectAnim;                                           // 0x04C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRoundEndWidget"));

		return ptr;
	}

};


// Class TslGame.TslRoundStartWidget
// 0x0018 (0x0408 - 0x03F0)
class UTslRoundStartWidget : public UUmgBaseWidget
{
public:
	class UTextBlock*                                  RoundNumberText;                                          // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            RoundStart_Anim;                                          // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0400(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRoundStartWidget"));

		return ptr;
	}


	void STATIC_OnWidgetShowChanged(const struct FString& InWidgetName, EWidgetShowType InShowType, class UObject* InOptionalParam, class ATslBaseHUD* InBaseHUD, bool bInWidgetNewShow);
};


// Class TslGame.TslRoundWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslRoundWidget : public UUmgBaseWidget
{
public:
	class UHorizontalBox*                              YourTeamPointBox;                                         // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              EnemyTeamPointBox;                                        // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UClass*                                      RoundEndPointClass;                                       // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UTslRoundEndPointWidget*>             YourTeamPointList;                                        // 0x0408(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UTslRoundEndPointWidget*>             EnemyTeamPointList;                                       // 0x0418(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRoundWidget"));

		return ptr;
	}


	void STATIC_UpdatePointList();
	void STATIC_OnWidgetShowChanged(const struct FString& InWidgetName, EWidgetShowType InShowType, class UObject* InOptionalParam, class ATslBaseHUD* InBaseHUD, bool bInWidgetNewShow);
	void STATIC_OnMatchStateChanged(const struct FName& InMatchState);
};


// Class TslGame.TslSandboxButtonWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslSandboxButtonWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxButtonWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslSandboxGroupBoxCategoryItemWidget
// 0x0020 (0x0410 - 0x03F0)
class UTslSandboxGroupBoxCategoryItemWidget : public UUmgBaseWidget
{
public:
	class UButton*                                     ItemButton;                                               // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemTextBlock;                                            // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       ItemID;                                                   // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      VehicleClass;                                             // 0x0408(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxGroupBoxCategoryItemWidget"));

		return ptr;
	}


	void STATIC_OnClicked_ItemButton();
};


// Class TslGame.TslSandboxGroupBoxCategoryWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslSandboxGroupBoxCategoryWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      SubWidgetBp;                                              // 0x03F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UButton*                                     CategoryButton;                                           // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CategoryTextBlock;                                        // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UVerticalBox*                                SubWidgetVerticalBox;                                     // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             ExpandSwitcher;                                           // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxGroupBoxCategoryWidget"));

		return ptr;
	}


	void STATIC_OnClicked_CategoryButton();
};


// Class TslGame.TslSandboxGroupBoxWidget
// 0x0018 (0x0408 - 0x03F0)
class UTslSandboxGroupBoxWidget : public UUmgBaseWidget
{
public:
	class UTextBlock*                                  TitleTextBlock;                                           // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UVerticalBox*                                SubWidgetVerticalBox;                                     // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      SubWidgetBp;                                              // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxGroupBoxWidget"));

		return ptr;
	}

};


// Class TslGame.TslSandboxPowerItemWidget
// 0x0020 (0x0410 - 0x03F0)
class UTslSandboxPowerItemWidget : public UUmgBaseWidget
{
public:
	class UButton*                                     ItemButton;                                               // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             ItemWidgetSwitcher;                                       // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemTextBlock;                                            // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	ESandboxPowerType                                  PowerType;                                                // 0x0408(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0408(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x040C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxPowerItemWidget"));

		return ptr;
	}


	void STATIC_OnGivePowerComplete(bool InbIsActivated);
	void STATIC_OnClicked_ItemButton();
};


// Class TslGame.TslSandboxQuantityWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslSandboxQuantityWidget : public UUmgBaseWidget
{
public:
	class UTextBlock*                                  TitleTextBlock;                                           // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CurNumberTextBlock;                                       // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  MaxNumberTextBlock;                                       // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SliderImage;                                              // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0410(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxQuantityWidget"));

		return ptr;
	}


	void STATIC_OnSetCurNumber(int InValue);
};


// Class TslGame.TslSandboxWaterMarkWidget
// 0x0000 (0x03F0 - 0x03F0)
class UTslSandboxWaterMarkWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxWaterMarkWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TslScreenIndicatorCanvasWidget
// 0x0050 (0x0440 - 0x03F0)
class UTslScreenIndicatorCanvasWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      IndicatorWidgetClass;                                     // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                CanvasLayerBinder;                                        // 0x03F8(0x0028) (Edit, DisableEditOnInstance)
	TArray<class UScreenIndicatorBaseWidget*>          IndicatorWidgets;                                         // 0x0420(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0430(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslScreenIndicatorCanvasWidget"));

		return ptr;
	}

};


// Class TslGame.CaptureObjIndicatorCanvasWidget
// 0x0060 (0x04A0 - 0x0440)
class UCaptureObjIndicatorCanvasWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	TMap<struct FString, class UCaptureObjectIndicatorWidget*> CaptureObjectIndicatorWidgets;                            // 0x0440(0x0050) (ExportObject, ZeroConstructor)
	TArray<class ACaptureAreaActor*>                   CaptureAreaActors;                                        // 0x0490(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CaptureObjIndicatorCanvasWidget"));

		return ptr;
	}


	void STATIC_OnActivatedCaptureAreaUpdated(TArray<struct FString> ActivatedCaptureAreaNames);
};


// Class TslGame.SmokeIndicatorCanvasWidget
// 0x0010 (0x0450 - 0x0440)
class USmokeIndicatorCanvasWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	TArray<class USmokeGrenadeIndicatorWidget*>        SmokeGrenadeIndicatorWidgets;                             // 0x0440(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SmokeIndicatorCanvasWidget"));

		return ptr;
	}


	void STATIC_SetSmokeIndicatorWidget(class UTslSmokePropagationComponent* TslSmokePropagationComponent);
};


// Class TslGame.TslHumanDetection
// 0x0020 (0x0460 - 0x0440)
class UTslHumanDetection : public UTslScreenIndicatorCanvasWidget
{
public:
	TArray<class UTslHumanDetectionMarkWidget*>        HumanMarkWidgets;                                         // 0x0440(0x0010) (ExportObject, ZeroConstructor)
	TArray<class ATslCharacter*>                       DetectionHumans;                                          // 0x0450(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHumanDetection"));

		return ptr;
	}


	void STATIC_AddDetectionHumans(TArray<class ATslCharacter*> Humans);
};


// Class TslGame.TslSignalEliminationWidget
// 0x0010 (0x0450 - 0x0440)
class UTslSignalEliminationWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	TArray<class UTslSignalEliminationMarkWidget*>     MarkWidgets;                                              // 0x0440(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSignalEliminationWidget"));

		return ptr;
	}


	void STATIC_CreateMarkWidget();
	void STATIC_AddEliminationCharacter(class ATslCharacter* Character);
};


// Class TslGame.TslTeamWidget
// 0x0018 (0x0458 - 0x0440)
class UTslTeamWidget : public UTslScreenIndicatorCanvasWidget
{
public:
	TArray<class UTeamMarkWidget*>                     TeamMarkWidgets;                                          // 0x0440(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0450(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTeamWidget"));

		return ptr;
	}

};


// Class TslGame.TslSectionTitleWidget
// 0x0098 (0x0488 - 0x03F0)
class UTslSectionTitleWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03F0(0x0020) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                VerticalBox_Binder;                                       // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TitleText_Binder;                                         // 0x0438(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      FocusImage_Binder;                                        // 0x0458(0x0028) (Edit, DisableEditOnInstance)
	class UMaterialInstanceDynamic*                    FocusMaterial;                                            // 0x0480(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSectionTitleWidget"));

		return ptr;
	}


	void STATIC_OnPrepass();
};


// Class TslGame.TslSpawnKitItemBaseWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslSpawnKitItemBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03F0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpawnKitItemBaseWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.TDMSpawnKitItemWidget
// 0x0048 (0x0460 - 0x0418)
class UTDMSpawnKitItemWidget : public UTslSpawnKitItemBaseWidget
{
public:
	class UTexture*                                    WeaponIconTexture;                                        // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	class UWidgetSwitcher*                             SpawnKitButtonSwitcher;                                   // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     SpawnKitButtonDefaultButton;                              // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     SpawnKitButtonSelectButton;                               // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      DefaultSpawnKitWeaponIcon;                                // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SelectSpawnKitWeaponIcon;                                 // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DefaultSpawnKitName;                                      // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SelectSpawnKitName;                                       // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TDMSpawnKitItemWidget"));

		return ptr;
	}


	void STATIC_OnSelected();
};


// Class TslGame.TslSpawnKitItemWidget
// 0x0070 (0x0488 - 0x0418)
class UTslSpawnKitItemWidget : public UTslSpawnKitItemBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0418(0x0020) MISSED OFFSET
	class UButton*                                     ButtonForSelector;                                        // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlockForTitle;                                        // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBorder*                                     ButtonBorder;                                             // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UWidget*                                     CheckMarkSizeBox;                                         // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FLinearColor                                ColorBorderOn;                                            // 0x0458(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ColorBorderOff;                                           // 0x0468(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ColorTextOff;                                             // 0x0478(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpawnKitItemWidget"));

		return ptr;
	}


	void STATIC_OnUnHovered();
	void STATIC_OnSelected();
	void STATIC_OnHovered();
};


// Class TslGame.TslStepperCounterContentWidget
// 0x0028 (0x0418 - 0x03F0)
class UTslStepperCounterContentWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             Switcher_Binder;                                          // 0x03F0(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStepperCounterContentWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Selected();
	void STATIC_UpdateDesign_Normal();
};


// Class TslGame.TslStepperCounterWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslStepperCounterWidget : public UUmgBaseWidget
{
public:
	float                                              SizePerContent;                                           // 0x03F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumToShrink;                                              // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SelectedIndex;                                            // 0x03F8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	TArray<class UTslStepperCounterContentWidget*>     CounterContents;                                          // 0x0400(0x0010) (ExportObject, ZeroConstructor)
	class UClass*                                      ContentWidgetClass;                                       // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HorizontalBox_Binder;                                     // 0x0418(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStepperCounterWidget"));

		return ptr;
	}

};


// Class TslGame.TslSystemMenuButton
// 0x00B8 (0x04A8 - 0x03F0)
class UTslSystemMenuButton : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class UTslNaviWidgetComp*                          NaviWidgetComp;                                           // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FTslStickInputHelper                        NavigationInputHelper;                                    // 0x0400(0x0014)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  NameTextBlock_Binder;                                     // 0x0418(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InternalButton_Binder;                                    // 0x0438(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       ButtonNameText;                                           // 0x0458(0x0018) (Edit, BlueprintVisible)
	ESystemMenuButtonType                              ButtonEnumType;                                           // 0x0470(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	struct FName                                       ButtonName;                                               // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                HighlightedColor;                                         // 0x0480(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x0490(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bIsShowInLobby;                                           // 0x04A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShowInMatch;                                           // 0x04A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x04A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSystemMenuButton"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
	void STATIC_UpdateDesign_Focused();
	void STATIC_UpdateButtonText(const struct FText& NewText);
	void STATIC_OnButtonUnhovered();
	void STATIC_OnButtonHovered();
	ESystemMenuButtonType STATIC_GetButtonType();
};


// Class TslGame.TslTabButtonWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslTabButtonWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnClickedTabButtonWidget;                                 // 0x03F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FString                                     TitleKeyString;                                           // 0x0400(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       TitleText;                                                // 0x0410(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTextBlock*                                  TitleNormal;                                              // 0x0428(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TitleSelected;                                            // 0x0430(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             StateSwitcher;                                            // 0x0438(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UButton*                                     OutsideButton;                                            // 0x0440(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      NotificationImage;                                        // 0x0448(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	bool                                               bTurnOffNotificationIfClicked;                            // 0x0450(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0451(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTabButtonWidget"));

		return ptr;
	}


	void STATIC_OnClicked();
};


// Class TslGame.TslCraftTabButtonWidget
// 0x0010 (0x0468 - 0x0458)
class UTslCraftTabButtonWidget : public UTslTabButtonWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0458(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslCraftTabButtonWidget"));

		return ptr;
	}


	void STATIC_OnClicked();
};


// Class TslGame.TslTabGroupWidget
// 0x0030 (0x0420 - 0x03F0)
class UTslTabGroupWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnTabGroupUpdated;                                        // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UTslTabButtonWidget*>                 TabWidgets;                                               // 0x0400(0x0010) (ExportObject, ZeroConstructor)
	class UWidget*                                     TabHorizontalBox;                                         // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTabGroupWidget"));

		return ptr;
	}


	void STATIC_UpdateIndexToBP(int NewIndex);
	void STATIC_UpdateIndexTo(int NewIndex);
	void STATIC_UpdateCurrentIndex();
	void STATIC_ResetTabGroup();
};


// Class TslGame.TslTabSelectorContentsWidget
// 0x00C8 (0x04B8 - 0x03F0)
class UTslTabSelectorContentsWidget : public UUmgBaseWidget
{
public:
	struct FScriptDelegate                             OnClickedContentsWidget;                                  // 0x03F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FText                                       TitleText;                                                // 0x0400(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FString                                     TitleKeyString;                                           // 0x0418(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FUmgWidgetBinder_TextBlock                  TitleTextNormal_Binder;                                   // 0x0428(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TitleTextSelected_Binder;                                 // 0x0448(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             Switcher_Binder;                                          // 0x0468(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   Button_Binder;                                            // 0x0490(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTabSelectorContentsWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Selected();
	void STATIC_OnClicked();
};


// Class TslGame.TslTabSelectorWidget
// 0x0058 (0x0448 - 0x03F0)
class UTslTabSelectorWidget : public UUmgBaseWidget
{
public:
	TArray<class UTslTabSelectorContentsWidget*>       TabWidgets;                                               // 0x03F0(0x0010) (ExportObject, ZeroConstructor)
	struct FUmgWidgetBinder_Gerneral                   TabHorizontalBox_Binder;                                  // 0x0400(0x0020) (Edit, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnTabRotated;                                             // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptDelegate                             OnTabSelectorUpdated;                                     // 0x0430(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0440(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTabSelectorWidget"));

		return ptr;
	}


	void STATIC_UpdateIndexTo(int NewIndex);
	void STATIC_RotateRight();
	void STATIC_RotateLeft();
	void STATIC_ResetSelector();
};


// Class TslGame.TslTeamInfoListWidget
// 0x0050 (0x0440 - 0x03F0)
class UTslTeamInfoListWidget : public UUmgBaseWidget
{
public:
	TArray<class UTslTeamInfoWidget*>                  TeamInfoWidgetList;                                       // 0x03F0(0x0010) (ExportObject, ZeroConstructor)
	class UClass*                                      TeamInfoWidgetClass;                                      // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UVerticalBox*                                TeamList;                                                 // 0x0408(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ATeam*                                       CurrentViewingTeamMember;                                 // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	TArray<struct FSaveTeamMemberData>                 SavedTeamMemberDatas;                                     // 0x0420(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0430(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTeamInfoListWidget"));

		return ptr;
	}


	void STATIC_SelectParachuteFollowPlayer();
	void STATIC_ParachuteFollowFocusMoveUp();
	void STATIC_ParachuteFollowFocusMoveDown();
	void STATIC_ParachuteFollowButtonReleased();
	void STATIC_ParachuteFollowButtonPressed();
	void STATIC_HideParachuteFollowButton();
};


// Class TslGame.TslTeamInfoWidget
// 0x0510 (0x0900 - 0x03F0)
class UTslTeamInfoWidget : public UUmgBaseWidget
{
public:
	bool                                               bBindVoiceChatEvent;                                      // 0x03F0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bSpeaking;                                                // 0x03F1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMute : 1;                                                // 0x03F2(0x0001)
	unsigned char                                      bIsRestricted : 1;                                        // 0x03F2(0x0001)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03F3(0x0005) MISSED OFFSET
	struct FUmgWidgetBinder_HorizontalBox              TeamHpAreaBinder;                                         // 0x03F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     TeamInfoAreaBinder;                                       // 0x0420(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     InfoIconBorderBinder;                                     // 0x0450(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             InfoIconSwitcherBinder;                                   // 0x0480(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             SpeakingIconSwitcherBinder;                               // 0x04A8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    MarkerIconSizeBoxBinder;                                  // 0x04D0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MarkerImageBinder;                                        // 0x04F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    WayPointIconSizeBoxBinder;                                // 0x0520(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      WayPointImageBinder;                                      // 0x0548(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      BoostImageBinder;                                         // 0x0570(0x0028) (Edit, DisableEditOnInstance)
	bool                                               bUdateTeamNameColor;                                      // 0x0598(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0599(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TeamNameBinder;                                           // 0x05A0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OnSpeakAnimBinder;                                        // 0x05C0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 HealthGaugeWidgetBinder;                                  // 0x05E0(0x0020) (Edit, DisableEditOnInstance)
	struct FColorBlindColorSet                         ColorBlindColorSet;                                       // 0x0600(0x0010) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamMemberColorBinder;                                    // 0x0610(0x0028) (Edit, DisableEditOnInstance)
	class UWidgetSwitcher*                             PlayerColorSwitcher;                                      // 0x0638(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             PlayerIconNumberSwitcher;                                 // 0x0640(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_Border                     PlayerIconBorderBinder;                                   // 0x0648(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerIconTextBinder;                                     // 0x0678(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             MarkerSwitcherBinder;                                     // 0x0698(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 PlatformImage_Binder;                                     // 0x06C0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    TeamFollowSizeBoxBinder;                                  // 0x06E0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamFollowSwitcher;                                       // 0x0708(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   TeamFollowBtnBinder;                                      // 0x0730(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamFollowNumTextBinder;                                  // 0x0750(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamFollowArrowImgBinder;                                 // 0x0770(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamFollowButtonSwitcher;                                 // 0x0798(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamFollowButtonSwitcher_Console;                         // 0x07C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   TeamFollowBtnSelectedBinder;                              // 0x07E8(0x0020) (Edit, DisableEditOnInstance)
	class ATeam*                                       Team;                                                     // 0x0808(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                QuitColor;                                                // 0x0810(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	TArray<class UTexture2D*>                          MarkerImages;                                             // 0x0820(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  WayPointImages;                                           // 0x0830(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      ItemRequestIconBinder;                                    // 0x0838(0x0028) (Edit, DisableEditOnInstance)
	class UTexture2D*                                  HealItemRequestTexture;                                   // 0x0860(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  AmmoItemRequestTexture;                                   // 0x0868(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0870(0x0018) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      SignalImageBinder;                                        // 0x0888(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             PlayerGaugeSwitcherBinder;                                // 0x08B0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 HealthGaugeWidgetCppBinder;                               // 0x08D8(0x0020) (Edit, DisableEditOnInstance)
	float                                              PrevVoiceUpdateTime;                                      // 0x08F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFollowButtonFocus;                                       // 0x08FC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x08FD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTeamInfoWidget"));

		return ptr;
	}


	void STATIC_UpdateVoiceStatusOnly(bool bIsMicActive, float FastMicEnergy, float CurrNoiseLevel);
	void STATIC_UpdateVoiceImage();
	void STATIC_UpdateVoiceChat(const struct FString& UniqueId, bool bIsTeamChannel, bool InbSpeaking, float InMeterEnergy);
	void STATIC_UpdateTeamWayPointBorder();
	void STATIC_UpdateTeamWayPoint();
	void STATIC_UpdateTeamPlatformImage();
	void STATIC_UpdateTeamMemberName();
	void STATIC_UpdateTeamMemberIcon();
	void STATIC_UpdateTeamMemberColor();
	void STATIC_UpdateTeamMarkerBorder();
	void STATIC_UpdateTeamInfoIcon();
	void STATIC_UpdateTeamInfoArea();
	void STATIC_UpdateSignalGauge();
	void STATIC_UpdatePlayerIcon();
	void STATIC_UpdateHealthGaugeAndVisibility();
	void STATIC_UpdateFollowParachute();
	void STATIC_UpdateBoostGauge();
	void STATIC_SetTeam(class ATeam* InTeam);
	void STATIC_OnVoiceChat(bool InbSpeaking, float InMeterEnergy);
	void STATIC_OnParticipantRestrictionChanged(class ATeam* Team, const struct FString& UniqueId, bool bIsRestricted);
	void STATIC_OnParticipantMuteChanged(class ATeam* Team, const struct FString& ParticipantId, const struct FString& ChannelId, bool bIsMuted);
	void STATIC_OnNativeParticipantRestrictionChanged(const struct FString& UniqueId, bool bIsRestricted);
	void STATIC_OnNativeParticipantMuteChanged(const struct FString& ParticipantId, const struct FString& ChannelId, bool bIsMuted);
	class ATeam* STATIC_GetFollowTeam(const struct FString& FollowName);
	void STATIC_FollowParachuteAction();
	void STATIC_DecideTeamNameColor();
	void STATIC_BindVoiceChatIfNeed();
};


// Class TslGame.TslFBRTeamInfoWidget
// 0x00C8 (0x09C8 - 0x0900)
class UTslFBRTeamInfoWidget : public UTslTeamInfoWidget
{
public:
	class UImage*                                      ClassIconImageWidget;                                     // 0x0900(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                TeamInfoGroup;                                            // 0x0908(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      IconBackgroundImageWidget;                                // 0x0910(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      MemberIndexBackgroundImageWidget;                         // 0x0918(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      FullBackgroundImageWidget;                                // 0x0920(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                LevelPanelWidget;                                         // 0x0928(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  PlayeLevelText;                                           // 0x0930(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<EFBRClass, TAssetPtr<class UTexture2D>>       ClassTextureData;                                         // 0x0938(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FFBRTeamInfoImageData>               ImageByMemberIndex;                                       // 0x0988(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FMargin                                     SlotPaddingOverride;                                      // 0x0998(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FName                                       MaterialParam_Texture;                                    // 0x09A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MaterialParam_IsGray;                                     // 0x09B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MaterialParam_IsBlink;                                    // 0x09B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x09C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRTeamInfoWidget"));

		return ptr;
	}


	void STATIC_OnToggleClassSelectWidget(bool bClassSelectWidgetVisible);
	void STATIC_OnTeamSpawnKitUpdated(class ATeam* UpdatedTeam);
};


// Class TslGame.TslTeamManageInfoBaseWidget
// 0x00D0 (0x04C0 - 0x03F0)
class UTslTeamManageInfoBaseWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnReportButtonClicked;                                    // 0x03F0(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0400(0x0040) MISSED OFFSET
	struct FTslReportUserInfo                          ReportInfo;                                               // 0x0440(0x0048)
	struct FUmgWidgetBinder_Image                      PlayerIconImage_Binder;                                   // 0x0488(0x0028) (Edit, DisableEditOnInstance)
	float                                              VisualVolumeModifier;                                     // 0x04B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ActualVolumeMin;                                          // 0x04B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ActualVolumeMax;                                          // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTeamManageInfoBaseWidget"));

		return ptr;
	}

};


// Class TslGame.TslPcTeamManageInfoWidget
// 0x0260 (0x0720 - 0x04C0)
class UTslPcTeamManageInfoWidget : public UTslTeamManageInfoBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x04C0(0x0040) MISSED OFFSET
	class UWidgetSwitcher*                             RadioButtonSwitcher;                                      // 0x0500(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     RadioOnButton;                                            // 0x0508(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     RadioOffButton;                                           // 0x0510(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             WaypointButtonSwitcher;                                   // 0x0518(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     WaypointOnButton;                                         // 0x0520(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     WaypointOffButton;                                        // 0x0528(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  UserNameTextBlock_Binder;                                 // 0x0530(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ReportBtnBorder_Binder;                                   // 0x0550(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ReportBtn_Binder;                                         // 0x0580(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceButtonWidgetSwitcher_Binder;                         // 0x05A0(0x0028) (Edit, DisableEditOnInstance)
	int                                                VoiceMuteButtonIndex;                                     // 0x05C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VoiceUnmuteButtonIndex;                                   // 0x05CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   VoiceMuteBtn_Binder;                                      // 0x05D0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VoiceUnmuteBtn_Binder;                                    // 0x05F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   VolumeSlider_Binder;                                      // 0x0610(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  VolumeTextBlock_Binder;                                   // 0x0630(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HighlightSizeBox_Binder;                                  // 0x0650(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    WaypointSizeBox_Binder;                                   // 0x0678(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     PlayerInfoBorder_Binder;                                  // 0x06A0(0x0030) (Edit, DisableEditOnInstance)
	struct FLinearColor                                DefaultColor;                                             // 0x06D0(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                HoverColor;                                               // 0x06E0(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                DisabledColor;                                            // 0x06F0(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       DuplicatedReportText;                                     // 0x0700(0x0018) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0718(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPcTeamManageInfoWidget"));

		return ptr;
	}


	void STATIC_OnClickedWaypointOnButton();
	void STATIC_OnClickedWaypointOffButton();
	void STATIC_OnClickedRadioOnButton();
	void STATIC_OnClickedRadioOffButton();
	void STATIC_NotifyVolumeSliderUpdated(float Val);
	void STATIC_NotifyToggleVoiceMuteButtonClicked();
	void STATIC_NotifyReportButtonClicked();
};


// Class TslGame.TslXboxTeamManageInfoWidget
// 0x0170 (0x0630 - 0x04C0)
class UTslXboxTeamManageInfoWidget : public UTslTeamManageInfoBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnNavigate;                                               // 0x04C0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnShowGamerCard;                                          // 0x04D0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnToggleVoiceMute;                                        // 0x04E0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnToggleBlock;                                            // 0x04F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnRequestClose;                                           // 0x0500(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0510(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     WidgetBorder_Binder;                                      // 0x0518(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UserNameTextBlock_Binder;                                 // 0x0548(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceIconSwitcher_Binder;                                 // 0x0568(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 PlatformImage_Binder;                                     // 0x0590(0x0020) (Edit, DisableEditOnInstance)
	int                                                VoiceChatIconIndex;                                       // 0x05B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VoiceMutedIconIndex;                                      // 0x05B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VoiceVolumeStage;                                         // 0x05B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05BC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_SizeBox                    FocusedSizeBox_Binder;                                    // 0x05C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      VolumeSlider_Binder;                                      // 0x05E8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  VolumeValueText_Binder;                                   // 0x0610(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslXboxTeamManageInfoWidget"));

		return ptr;
	}

};


// Class TslGame.TslThrowableItemIconWidget
// 0x00E8 (0x04D8 - 0x03F0)
class UTslThrowableItemIconWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03F0(0x0018) MISSED OFFSET
	class UClass*                                      WeaponType;                                               // 0x0408(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    ItemIcon;                                                 // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ItemIconRatio;                                            // 0x0418(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x041C(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                NoItemColor;                                              // 0x042C(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   Icon_Binder;                                              // 0x0440(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ItemCountText_Binder;                                     // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     WidgetBorder_Binder;                                      // 0x0480(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    IconSizeBox_Binder;                                       // 0x04B0(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslThrowableItemIconWidget"));

		return ptr;
	}


	int STATIC_GetThrowableItemCount(class UClass* InItemType);
};


// Class TslGame.TslVehicleStanceAndTeamListManageWidget
// 0x0018 (0x0408 - 0x03F0)
class UTslVehicleStanceAndTeamListManageWidget : public UUmgBaseWidget
{
public:
	class UTslRadioMessageLogWidget*                   RadioMessageLogWidget;                                    // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UVehicleStanceBaseWidget*                    VehicleStanceWidget;                                      // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslTeamInfoListWidget*                      TeamInfoListWidget;                                       // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleStanceAndTeamListManageWidget"));

		return ptr;
	}

};


// Class TslGame.FBRVehicleAndTeamManageWidget
// 0x0010 (0x0418 - 0x0408)
class UFBRVehicleAndTeamManageWidget : public UTslVehicleStanceAndTeamListManageWidget
{
public:
	class UPanelWidget*                                FBRClassSelectGuideOuterBox;                              // 0x0408(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUserWidget*                                 FBRClassSelectGuideWidget;                                // 0x0410(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FBRVehicleAndTeamManageWidget"));

		return ptr;
	}


	void STATIC_OnToggleClassSelectWidgetVisibility(bool bClassSelectWidgetVisible);
	void STATIC_OnMatchStateChanged(const struct FName& InMatchState);
};


// Class TslGame.TslWeaponEquipmentBaseWidget
// 0x0140 (0x0530 - 0x03F0)
class UTslWeaponEquipmentBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x128];                                     // 0x03F0(0x0128) MISSED OFFSET
	class UWeaponProcessorComponent*                   WeaponProcessor;                                          // 0x0518(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslItemDragDropOperation*                   TslItemDragDropOperation;                                 // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0528(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponEquipmentBaseWidget"));

		return ptr;
	}


	void STATIC_OnEquippedWeaponsReplicated();
	void STATIC_OnChildSlotRefreshFocus();
	void STATIC_CallOnWeaponEquipmentFocused(EEquipSlotID InEquipSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_CallOnAttachmentFocused(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_CallOnAttachmentChangedWeaponSlot(int InWeaponSlotId, EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslWeaponEquipmentWidget
// 0x0000 (0x0530 - 0x0530)
class UTslWeaponEquipmentWidget : public UTslWeaponEquipmentBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponEquipmentWidget"));

		return ptr;
	}


	void STATIC_OnEquippedWeaponsReplicated();
	void STATIC_OnChildSlotRefreshFocus();
	void STATIC_CallOnWeaponEquipmentFocused(EEquipSlotID InEquipSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_CallOnAttachmentFocused(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_CallOnAttachmentChangedWeaponSlot(int InWeaponSlotId, EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslWeaponEquipmentWidget_Gamepad
// 0x0000 (0x0530 - 0x0530)
class UTslWeaponEquipmentWidget_Gamepad : public UTslWeaponEquipmentBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponEquipmentWidget_Gamepad"));

		return ptr;
	}


	void STATIC_OnEquippedWeaponsReplicated();
	void STATIC_OnChildSlotRefreshFocus();
	void STATIC_CallOnWeaponEquipmentFocused(EEquipSlotID InEquipSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_CallOnAttachmentFocused(EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_CallOnAttachmentChangedWeaponSlot(int InWeaponSlotId, EWeaponAttachmentSlotID InAttachmentSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslWeaponSkinGuideWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslWeaponSkinGuideWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_HorizontalBox              WeaponSkinOn_Override_Binder;                             // 0x03F0(0x0028) (Edit)
	struct FUmgWidgetBinder_HorizontalBox              WeaponSkinOn_Delete_Binder;                               // 0x0418(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0440(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponSkinGuideWidget"));

		return ptr;
	}


	void STATIC_FadeIn();
};


// Class TslGame.TslWebPopupInterface
// 0x0000 (0x0030 - 0x0030)
class UTslWebPopupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWebPopupInterface"));

		return ptr;
	}

};


// Class TslGame.TslWebPopup
// 0x0048 (0x0438 - 0x03F0)
class UTslWebPopup : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x03F0(0x0040) MISSED OFFSET
	class UTslCoherentWidget*                          WebViewBinder;                                            // 0x0430(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWebPopup"));

		return ptr;
	}


	void STATIC_UpdateWebPopup(const struct FWebPopupParam& WebPopupParam, bool bLoadURI);
	void STATIC_SetWebPopupVisibility(bool bNewShow);
	void STATIC_SetReuse(bool bNewReuse);
	void STATIC_SetLayout(float X, float Y, float Width, float Height);
	void STATIC_OnUpdateWebPopup(const struct FWebPopupParam& WebPopupParam);
	void STATIC_OnCloseWebPopup();
	bool STATIC_IsWebPopupShow();
	bool STATIC_IsReuse();
	struct FWebPopupParam STATIC_GetSaveWebPopupParam();
	void STATIC_CloseWebPopup(bool bForceRemoveParent);
};


// Class TslGame.TslWheelBaseSubWidget
// 0x0110 (0x0500 - 0x03F0)
class UTslWheelBaseSubWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_CanvasPanel                OutsideCanvasWidget_Binder;                               // 0x03F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             FocusSwitcher_Binder;                                     // 0x0418(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    TargetImageOverlay_Binder;                                // 0x0440(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TargetImage_Binder;                                       // 0x0468(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InitAnimation_Binder;                                     // 0x0490(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForSelectedAnimation_Binder;                       // 0x04B0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForNonSelectedAnimation_Binder;                    // 0x04D0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                NonFocusedWidgetIndex;                                    // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FocusedWidgetIndex;                                       // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FocusedTargetImageScale;                                  // 0x04F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NonFocusedTargetImageScale;                               // 0x04FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheelBaseSubWidget"));

		return ptr;
	}


	void STATIC_SetFocus(bool bOnFocus);
	void STATIC_PlaySelectAnimation(bool bFocus);
	struct FText STATIC_GetNameText();
	struct FText STATIC_GetDescriptionText();
	bool STATIC_DoAction(class UTslWheelContext* WheelContext);
};


// Class TslGame.TslEmoteWheelSubWidget
// 0x00B0 (0x05B0 - 0x0500)
class UTslEmoteWheelSubWidget : public UTslWheelBaseSubWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ShortcutTextBlock_Binder;                                 // 0x0500(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             ShowShortcutWidgetSwitcherOnFocus_Binder;                 // 0x0520(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             ShowShortcutWidgetSwitcherOffFocus_Binder;                // 0x0548(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                ShowShortcutWidgetIndex;                                  // 0x0570(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HideShortcutWidgetIndex;                                  // 0x0574(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     ActionNamePrefix;                                         // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0588(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEmoteWheelSubWidget"));

		return ptr;
	}


	struct FText STATIC_GetNameText();
	bool STATIC_DoAction(class UTslWheelContext* WheelContext);
};


// Class TslGame.TslItemWheelSubWidget
// 0x0098 (0x0598 - 0x0500)
class UTslItemWheelSubWidget : public UTslWheelBaseSubWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ItemStackCountTextBlock_Binder;                           // 0x0500(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForNonSelectedUnsuableAnimation_Binder;            // 0x0520(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                UnusableItemImageColor;                                   // 0x0540(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                UsableItemImageColor;                                     // 0x0550(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                UnusableItemNameColor;                                    // 0x0560(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                UsableItemNameColor;                                      // 0x0570(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UItem*                                       DefaultItem;                                              // 0x0580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       ItemID;                                                   // 0x0588(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0590(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemWheelSubWidget"));

		return ptr;
	}


	void STATIC_UpdateItemImage();
	void STATIC_PlaySelectAnimation(bool bFocus);
	int STATIC_GetStackCount();
	struct FText STATIC_GetNameText();
	struct FText STATIC_GetDescriptionText();
	bool STATIC_DoAction(class UTslWheelContext* Context);
};


// Class TslGame.TslHealItemWheelSubWidget
// 0x0018 (0x05B0 - 0x0598)
class UTslHealItemWheelSubWidget : public UTslItemWheelSubWidget
{
public:
	struct FText                                       CannotUseItemText;                                        // 0x0598(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHealItemWheelSubWidget"));

		return ptr;
	}


	int STATIC_GetStackCount();
	bool STATIC_DoAction(class UTslWheelContext* Context);
};


// Class TslGame.TslItemRequestWheelSubWidget
// 0x0018 (0x05B0 - 0x0598)
class UTslItemRequestWheelSubWidget : public UTslItemWheelSubWidget
{
public:
	struct FText                                       CannotUseItemText;                                        // 0x0598(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemRequestWheelSubWidget"));

		return ptr;
	}


	bool STATIC_DoAction(class UTslWheelContext* Context);
};


// Class TslGame.TslThrowableItemWheelSubWidget
// 0x0018 (0x05B0 - 0x0598)
class UTslThrowableItemWheelSubWidget : public UTslItemWheelSubWidget
{
public:
	struct FText                                       CannotEquipItemText;                                      // 0x0598(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslThrowableItemWheelSubWidget"));

		return ptr;
	}


	int STATIC_GetStackCount();
	bool STATIC_DoAction(class UTslWheelContext* Context);
};


// Class TslGame.TslTacticalMapMarkerWheelSubWidget
// 0x0068 (0x0568 - 0x0500)
class UTslTacticalMapMarkerWheelSubWidget : public UTslWheelBaseSubWidget
{
public:
	float                                              Radius;                                                   // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RadiusOffsetWhenSelected;                                 // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RotationMaterialParameter;                                // 0x0508(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UImage*                                      FocusedImage;                                             // 0x0510(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      NonFocusedImage;                                          // 0x0518(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USizeBox*                                    FocusedSizeBox;                                           // 0x0520(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UOverlay*                                    TargetImageOverlay;                                       // 0x0528(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0530(0x0008) MISSED OFFSET
	struct FMarkerUIInfo                               MarkerInfo;                                               // 0x0538(0x0028)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0560(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTacticalMapMarkerWheelSubWidget"));

		return ptr;
	}


	struct FText STATIC_GetNameText();
	bool STATIC_DoAction(class UTslWheelContext* WheelContext);
};


// Class TslGame.TwoTeamScoreboardWidget
// 0x0160 (0x0550 - 0x03F0)
class UTwoTeamScoreboardWidget : public UUmgBaseWidget
{
public:
	class UTimerTextBlockUpdater*                      RespawnTimerUpdater;                                      // 0x03F0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTimerTextBlockUpdater*                      TimeLimitTimerUpdater;                                    // 0x03F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  RespawnTimeTextBinder;                                    // 0x0400(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TimeLimitTextBinder;                                      // 0x0420(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_Image>              TeamValueImageBinders;                                    // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamValueTextBinders;                                     // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamMemberCountTextBinders;                               // 0x0460(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     GameStatusMessageBorder_Binder;                           // 0x0470(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  VSFadeInAnimation_Binder;                                 // 0x04A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  VSFadeOutAnimation_Binder;                                // 0x04C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  UpperTargetScoreText_Binder;                              // 0x04E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FName                                       ColorParamName;                                           // 0x0500(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       GaugeParamName;                                           // 0x0508(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseRespawnTimer;                                         // 0x0510(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTimeLimitTimer;                                       // 0x0511(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAnimOnMatchStart;                                     // 0x0512(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPlayGaugeAnim;                                           // 0x0513(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GaugeAnimSpeed;                                           // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GaugeAnimTime;                                            // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x051C(0x0004) MISSED OFFSET
	TArray<struct FLinearColor>                        TeamColors;                                               // 0x0520(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0530(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TwoTeamScoreboardWidget"));

		return ptr;
	}


	void STATIC_OnTimeLimitUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnRespawnTimeUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnResetLevel();
	void STATIC_OnMyTeamScoreChanged(float TeamScore);
	void STATIC_OnMyTeamRankChanged(int Rank);
	void STATIC_OnMyGainScoreChanged(float ScoreGained);
	void STATIC_OnModeStarted(const struct FStartModeProperties& StartModeProperties);
	void STATIC_OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void STATIC_OnMatchStarted(bool bReconnect);
	void STATIC_OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.BRTwoTeamScoreboardWidget
// 0x0018 (0x0568 - 0x0550)
class UBRTwoTeamScoreboardWidget : public UTwoTeamScoreboardWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0550(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BRTwoTeamScoreboardWidget"));

		return ptr;
	}


	void STATIC_OnTimeLimitUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnRespawnTimeUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnResetLevel();
	void STATIC_OnMyTeamScoreChanged(float TeamScore);
	void STATIC_OnMyTeamRankChanged(int Rank);
	void STATIC_OnMyGainScoreChanged(float ScoreGained);
	void STATIC_OnModeStarted(const struct FStartModeProperties& StartModeProperties);
	void STATIC_OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void STATIC_OnMatchStarted(bool bReconnect);
	void STATIC_OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.CustomTwoTeamScoreboardWidget
// 0x0040 (0x0590 - 0x0550)
class UCustomTwoTeamScoreboardWidget : public UTwoTeamScoreboardWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TargetScoreTextBinder;                                    // 0x0550(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       TargetScoreText;                                          // 0x0570(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0588(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CustomTwoTeamScoreboardWidget"));

		return ptr;
	}


	void STATIC_ShowInstantRespawnMessage(const struct FString& TimeString, int Seconds);
	void STATIC_OnTimeLimitUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnRespawnTimeUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnResetLevel();
	void STATIC_OnMyTeamScoreChanged(float TeamScore);
	void STATIC_OnMyTeamRankChanged(int Rank);
	void STATIC_OnMyGainScoreChanged(float ScoreGained);
	void STATIC_OnModeStarted(const struct FStartModeProperties& StartModeProperties);
	void STATIC_OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void STATIC_OnMatchStarted(bool bReconnect);
	void STATIC_OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.ConquestModeWidget
// 0x0090 (0x0620 - 0x0590)
class UConquestModeWidget : public UCustomTwoTeamScoreboardWidget
{
public:
	class UClass*                                      CaptureAreaStatusWidgetClass;                             // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CurrentlyCapturingAreaStatusWidgetClass;                  // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_HorizontalBox              CaptureAreaStatusListBinder;                              // 0x05A0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              CurrentlyCapturingAreaStatusListBinder;                   // 0x05C8(0x0028) (Edit, DisableEditOnInstance)
	bool                                               bHiddenCurrentlyCapturingWidgetInList;                    // 0x05F0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05F1(0x0007) MISSED OFFSET
	struct FString                                     MapWidgetName;                                            // 0x05F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UCaptureAreaStatusWidget*>            CaptureAreaStatusWidgets;                                 // 0x0608(0x0010) (ExportObject, ZeroConstructor)
	class UCaptureAreaStatusWidget*                    CurrentlyCapturingAreaStatusWidget;                       // 0x0618(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ConquestModeWidget"));

		return ptr;
	}


	void STATIC_OnActivatedCaptureAreaUpdated(TArray<struct FString> ActivatedCaptureAreaNames);
};


// Class TslGame.TDMTwoTeamScoreboardWidget
// 0x0030 (0x05C0 - 0x0590)
class UTDMTwoTeamScoreboardWidget : public UCustomTwoTeamScoreboardWidget
{
public:
	struct FUmgWidgetBinder_SizeBox                    RespawnSizeBoxBinder;                                     // 0x0590(0x0028) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x05B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TDMTwoTeamScoreboardWidget"));

		return ptr;
	}


	void STATIC_OnMyTeamScoreChanged(float TeamScore);
	void STATIC_OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void STATIC_OnMatchStarted(bool bReconnect);
	void STATIC_OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.WarTwoTeamScoreboardWidget
// 0x0080 (0x0610 - 0x0590)
class UWarTwoTeamScoreboardWidget : public UCustomTwoTeamScoreboardWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TargetScoreMessageTextBinder;                             // 0x0590(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PointFeedbackTextBinder;                                  // 0x05B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  ScorePositiveAnimationBinder;                             // 0x05D0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  ScoreNegativeAnimationBinder;                             // 0x05F0(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WarTwoTeamScoreboardWidget"));

		return ptr;
	}


	void STATIC_OnMyTeamScoreChanged(float TeamScore);
	void STATIC_OnMyGainScoreChanged(float ScoreGained);
	void STATIC_OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void STATIC_OnMatchStarted(bool bIsReconnect);
	void STATIC_OnHighEnemyScoreChanged(float TeamScore);
};


// Class TslGame.TslZombieTwoTeamScoreboardWidget
// 0x0050 (0x05A0 - 0x0550)
class UTslZombieTwoTeamScoreboardWidget : public UTwoTeamScoreboardWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0550(0x0028) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   TimeLimitTimerSizeBoxBinder;                              // 0x0578(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UMaterialInterface*                          ZombieMat;                                                // 0x0598(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombieTwoTeamScoreboardWidget"));

		return ptr;
	}


	void STATIC_OnTimeLimitUpdated(const struct FString& TimeString, int Seconds);
};


// Class TslGame.VehicleFuelBaseWidget
// 0x00C8 (0x04B8 - 0x03F0)
class UVehicleFuelBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      OilGaugeImageBinder;                                      // 0x03F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      OilGaugeBgImageBinder;                                    // 0x0418(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      OilArrowImageBinder;                                      // 0x0440(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Overlay                    GaugeBodyBinder;                                          // 0x0468(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FLinearColor                                NormalColor;                                              // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                FuelEmptyColor;                                           // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FName                                       GaugePramName;                                            // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleFuelBaseWidget"));

		return ptr;
	}

};


// Class TslGame.VehicleRadioBaseWidget
// 0x0030 (0x0420 - 0x03F0)
class UVehicleRadioBaseWidget : public UUmgBaseWidget
{
public:
	class UCheckBox*                                   DriverCheckBox;                                           // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ChannelTextBlock;                                         // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UProgressBar*                                VolumeProgressBar;                                        // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USlider*                                     PlayTimeBar;                                              // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              LastRadioVolume;                                          // 0x0410(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastPlayTimeRatio;                                        // 0x0414(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      LastRadioChannel;                                         // 0x0418(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLastLocalDriver;                                         // 0x0419(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsShowRadioWidget;                                       // 0x041A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x041B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleRadioBaseWidget"));

		return ptr;
	}

};


// Class TslGame.VehicleSeatInfoBaseWidget
// 0x0048 (0x0438 - 0x03F0)
class UVehicleSeatInfoBaseWidget : public UUmgBaseWidget
{
public:
	int                                                SeatIndex;                                                // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	struct FName                                       StateParamName;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      SeatImageBinder;                                          // 0x0400(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	class APawn*                                       CachedVehiclePawn;                                        // 0x0428(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslVehicleSeatComponent*                    CachedSeatComponent;                                      // 0x0430(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleSeatInfoBaseWidget"));

		return ptr;
	}


	int STATIC_GetSeatState();
};


// Class TslGame.VehicleStanceBaseWidget
// 0x00E0 (0x04D0 - 0x03F0)
class UVehicleStanceBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_VerticalBox                VehicleIconAreaBinder;                                    // 0x03F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_CanvasPanel                VehicleDetailInfoBinder;                                  // 0x0418(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  SpeedTextBinder;                                          // 0x0440(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  SpeedKmHBinder;                                           // 0x0460(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x0480(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_UserWidget                 FuelGaugeWidgetBinder;                                    // 0x04A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class APawn*                                       CachedVehiclePawn;                                        // 0x04C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UUserWidget*                                 CachedVehicleIconWidget;                                  // 0x04C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleStanceBaseWidget"));

		return ptr;
	}

};


// Class TslGame.VehicleThrottleBaseWidget
// 0x0010 (0x0400 - 0x03F0)
class UVehicleThrottleBaseWidget : public UUmgBaseWidget
{
public:
	class UProgressBar*                                ThrottleUp;                                               // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UProgressBar*                                ThrottleDown;                                             // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleThrottleBaseWidget"));

		return ptr;
	}

};


// Class TslGame.VehicleWheelInfoBaseWidget
// 0x0068 (0x0458 - 0x03F0)
class UVehicleWheelInfoBaseWidget : public UUmgBaseWidget
{
public:
	int                                                WheelIndex;                                               // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      WheelImageBinder;                                         // 0x03F8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      PunctureImageBinder;                                      // 0x0420(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	class ATslWheeledVehicle*                          CachedVehiclePawn;                                        // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslWheeledVehicleMovement*                  CachedVehicleMovement;                                    // 0x0450(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleWheelInfoBaseWidget"));

		return ptr;
	}

};


// Class TslGame.VersionInfoBaseWidget
// 0x0030 (0x0420 - 0x03F0)
class UVersionInfoBaseWidget : public UUmgBaseWidget
{
public:
	bool                                               bReturnEmptyVersionTextIfNickNameInvalid;                 // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideRegionIfInvalid;                                     // 0x03F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  VersionInfoTextBinder;                                    // 0x03F8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bUpdated;                                                 // 0x0418(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0419(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VersionInfoBaseWidget"));

		return ptr;
	}


	void STATIC_ForceUpdate();
};


// Class TslGame.VersionInfoCanvasBaseWidget
// 0x0048 (0x0438 - 0x03F0)
class UVersionInfoCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 VersionInfoWidgetBinder;                                  // 0x03F0(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                VersionInfoRetainerBoxBinder;                             // 0x0410(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VersionInfoCanvasBaseWidget"));

		return ptr;
	}

};


// Class TslGame.WarModeRankingItemWidget
// 0x00A0 (0x0490 - 0x03F0)
class UWarModeRankingItemWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  TeamRankTextBinder;                                       // 0x03F0(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamLeaderNameTextBinder;                                 // 0x0410(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamScoreTextBinder;                                      // 0x0430(0x0020) (Edit)
	struct FLinearColor                                MyTeamColor;                                              // 0x0450(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                EnemyTeamColor;                                           // 0x0460(0x0010) (Edit, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   PlatformIcon_Binder;                                      // 0x0470(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WarModeRankingItemWidget"));

		return ptr;
	}

};


// Class TslGame.WarModeRankingWidget
// 0x0298 (0x0688 - 0x03F0)
class UWarModeRankingWidget : public UUmgBaseWidget
{
public:
	TMap<int, struct FRankingItemWidgets>              RankingItemWidgetsContainer;                              // 0x03F0(0x0050) (ZeroConstructor)
	TArray<struct FUmgWidgetBinder_VerticalBox>        TeamRankingWidgetBinders;                                 // 0x0440(0x0010) (Edit, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_SizeBox>            TeamRankingHeadWidgetBinders;                             // 0x0450(0x0010) (Edit, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamTextBlockBinders;                                     // 0x0460(0x0010) (Edit, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_Image>              TeamScoreImageBinders;                                    // 0x0470(0x0010) (Edit, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamScoreTextBlockBinders;                                // 0x0480(0x0010) (Edit, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_TextBlock>          TeamGoalScoreTextBlockBinders;                            // 0x0490(0x0010) (Edit, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_VerticalBox>        RankingWidgetVerticalBoxBinders;                          // 0x04A0(0x0010) (Edit, ZeroConstructor)
	struct FUmgWidgetBinder_UserWidget                 MyTeamRankingBinder;                                      // 0x04B0(0x0020) (Edit)
	class UClass*                                      RankingItemWidgetClass;                                   // 0x04D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RankTableMaxLen;                                          // 0x04D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	struct FName                                       GaugeParam;                                               // 0x04E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1A0];                                     // 0x04E8(0x01A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WarModeRankingWidget"));

		return ptr;
	}


	void STATIC_OnScoreChanged();
	void STATIC_OnRep_StartModeProperties(const struct FStartModeProperties& StartModeProperties);
	void STATIC_OnPlayerCountChanged(int PlayerCount);
};


// Class TslGame.WarModeScoreDelimiter
// 0x0130 (0x0520 - 0x03F0)
class UWarModeScoreDelimiter : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             RankWidgetSwitcher;                                       // 0x03F0(0x0028) (Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamUpAnimationBinder;                                  // 0x0418(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamDownAnimationBinder;                                // 0x0438(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamUpAnimationBinder;                               // 0x0458(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamDownAnimationBinder;                             // 0x0478(0x0020) (Edit)
	struct FUmgWidgetBinder_HorizontalBox              EnemyDownWidgetBinder;                                    // 0x0498(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      MyTeamGaugeBinder;                                        // 0x04C0(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      EnemyGaugeBinder;                                         // 0x04E8(0x0028) (Edit)
	int                                                LastMyTeamRank;                                           // 0x0510(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastMyTeamScore;                                          // 0x0514(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastEnemyHighScore;                                       // 0x0518(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bNeedDraw;                                                // 0x051C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x051D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WarModeScoreDelimiter"));

		return ptr;
	}

};


// Class TslGame.WarModeWidget
// 0x0328 (0x0718 - 0x03F0)
class UWarModeWidget : public UUmgBaseWidget
{
public:
	class UTimerTextBlockUpdater*                      RespawnTimerUpdater;                                      // 0x03F0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTimerTextBlockUpdater*                      TimeLimitTimerUpdater;                                    // 0x03F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  RespawnTimeTextBinder;                                    // 0x0400(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TimeLimitTextBinder;                                      // 0x0420(0x0020) (Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamModeSwitcherBinder;                                   // 0x0440(0x0028) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TeamCountTextBinder;                                      // 0x0468(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  MyTeamScoreTextBinder;                                    // 0x0488(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  GoalScoreTextBinder;                                      // 0x04A8(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  MyTeamRankTextBinder;                                     // 0x04C8(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  HighEnemyScoreTextBinder;                                 // 0x04E8(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  BigTeamMyTeamScoreTextBinder;                             // 0x0508(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  BigTeamGoalScoreTextBinder;                               // 0x0528(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  BigTeamHighEnemyScoreTextBinder;                          // 0x0548(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  SpectatingRespawnTimeTextBinder;                          // 0x0568(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  PointFeedbackTextBinder;                                  // 0x0588(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  ScorePositiveAnimationBinder;                             // 0x05A8(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  ScoreNegativeAnimationBinder;                             // 0x05C8(0x0020) (Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             RankWidgetSwitcher;                                       // 0x05E8(0x0028) (Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamUpAnimationBinder;                                  // 0x0610(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  MyTeamDownAnimationBinder;                                // 0x0630(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamUpAnimationBinder;                               // 0x0650(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  EnemyTeamDownAnimationBinder;                             // 0x0670(0x0020) (Edit)
	struct FUmgWidgetBinder_HorizontalBox              EnemyDownWidgetBinder;                                    // 0x0690(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      MyTeamGaugeBinder;                                        // 0x06B8(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      EnemyGaugeBinder;                                         // 0x06E0(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0708(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WarModeWidget"));

		return ptr;
	}


	void STATIC_ShowInstantRespawnMessage(const struct FString& TimeString, int Seconds);
	void STATIC_OnTimeLimitUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnRespawnTimeUpdated(const struct FString& TimeString, int Seconds);
	void STATIC_OnMyTeamScoreChanged(float TeamScore);
	void STATIC_OnMyTeamRankChanged(int Rank);
	void STATIC_OnMyGainScoreChanged(float ScoreGained);
	void STATIC_OnModeStrated(const struct FStartModeProperties& StartModeProperties);
	void STATIC_OnModeInitialized(const struct FInitModeProperties& InitModeProperties);
	void STATIC_OnHighEnemyScoreChanged(float TeamScore);
	void STATIC_CollapseKillcamButtonUI(class UTslUserWidget* Widget);
};


// Class TslGame.WeaponSlotHudBaseWidget
// 0x0190 (0x0580 - 0x03F0)
class UWeaponSlotHudBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 CurrentWeaponSlotWidgetBinder;                            // 0x03F0(0x0020) (Edit, BlueprintVisible)
	TArray<struct FUmgWidgetBinder_UserWidget>         WeaponSlotWidgetBinderList;                               // 0x0410(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FUmgWidgetBinder_Border                     WeaponSlotListBorderBinder;                               // 0x0420(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeInSlotListAminBinder;                                 // 0x0450(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutSlotListAminBinder;                                // 0x0470(0x0020) (Edit, BlueprintVisible)
	float                                              SlotOffsetMultiply;                                       // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlotPadding;                                              // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSequence_Float                             MovingSequence;                                           // 0x0498(0x00A0) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0538(0x0038) MISSED OFFSET
	struct FTimerHandle                                FinishTimer;                                              // 0x0570(0x0008) (Transient)
	class UWeaponProcessorComponent*                   CachedWeaponProcessor;                                    // 0x0578(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponSlotHudBaseWidget"));

		return ptr;
	}


	void STATIC_OnNotifyWeaponUnarm(bool bIsUnarmed);
	void STATIC_OnNotifyWeaponChange(int WeaponIndex, float Duration);
	void STATIC_OnNotifyWeaponArmed();
	void STATIC_OnMovingStarted();
	void STATIC_OnMovingFinished();
};


// Class TslGame.ZeroingDistanceBaseWidget
// 0x0080 (0x0470 - 0x03F0)
class UZeroingDistanceBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ZeroingdistanceTextBinder;                                // 0x03F0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ZeroDistIncreasingAnimBinder;                             // 0x0410(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ZeroDistDecreasingAnimBinder;                             // 0x0430(0x0020) (Edit, BlueprintVisible)
	struct FText                                       ZeroingTextFormat;                                        // 0x0450(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ZeroingDistanceBaseWidget"));

		return ptr;
	}

};


// Class TslGame.TslUtils
// 0x0000 (0x0030 - 0x0030)
class UTslUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslUtils"));

		return ptr;
	}

};


// Class TslGame.TslVaultingHelper
// 0x0010 (0x03F8 - 0x03E8)
class ATslVaultingHelper : public AActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             ActorAttachScene;                                         // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVaultingHelper"));

		return ptr;
	}


	struct FVector STATIC_GetActorAttachScene();
};


// Class TslGame.TslVehicleAnimInstance
// 0x03B0 (0x0CB0 - 0x0900)
class UTslVehicleAnimInstance : public UVehicleAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0900(0x0004) MISSED OFFSET
	struct FRotator                                    Rot_Steering_Right;                                       // 0x0904(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rot_Steering_Final;                                       // 0x0910(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Rot_Speed_Left;                                           // 0x091C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rot_Speed_Right;                                          // 0x0928(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMax;                                                 // 0x0934(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rot_Speed_Final;                                          // 0x0938(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Rot_RPM_Left;                                             // 0x0944(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rot_RPM_Right;                                            // 0x0950(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              RPMMax;                                                   // 0x095C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickIndicators;                                          // 0x0960(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAbsoluteSteeringRotation;                             // 0x0961(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickMotorbikeBody;                                       // 0x0962(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xD];                                       // 0x0963(0x000D) MISSED OFFSET
	struct FVector4                                    SpeedInMap;                                               // 0x0970(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector4                                    SpeedOutMap;                                              // 0x0980(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedInMapScalar;                                         // 0x0990(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0994(0x000C) MISSED OFFSET
	struct FVector4                                    DotVelocityMap;                                           // 0x09A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              DotVelocityPower;                                         // 0x09B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   LateralVelocityCompClamp;                                 // 0x09B4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              LateralVelocityScalar;                                    // 0x09BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector4                                    SteerLowSpeedMap;                                         // 0x09C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              SteerLowSpeedStaticOffset;                                // 0x09D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x09D4(0x000C) MISSED OFFSET
	struct FVector4                                    SteerHighSpeedMap;                                        // 0x09E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              SteerHighSpeedStaticOffset;                               // 0x09F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x09F4(0x000C) MISSED OFFSET
	struct FVector4                                    SteerLERPSpeedMap;                                        // 0x0A00(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    BodyLeanMap;                                              // 0x0A10(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   BodyLeanVelocityMap;                                      // 0x0A1C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0A24(0x000C) MISSED OFFSET
	struct FVector4                                    SteerRollMap;                                             // 0x0A30(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickMotorbikeKickstand;                                  // 0x0A40(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseInvertedKickstandAlpha;                               // 0x0A41(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0A42(0x0002) MISSED OFFSET
	struct FRotator                                    KickstandOffRotation;                                     // 0x0A44(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              KicstandInterpSpeed;                                      // 0x0A50(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSpeedRollMap;                                         // 0x0A54(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0A55(0x0003) MISSED OFFSET
	struct FVector2D                                   LowSpeedRollMapIn;                                        // 0x0A58(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   HighSpeedRollMapIn;                                       // 0x0A60(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rot_RPM_Final;                                            // 0x0A68(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0A74(0x0004) MISSED OFFSET
	class ATslWheeledVehicle*                          VehicleRef;                                               // 0x0A78(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTslWheeledVehicleMovement*                  VehicleMovementRef;                                       // 0x0A80(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FRotator                                    SteerRollFinal;                                           // 0x0A88(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SteerFL;                                                  // 0x0A94(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SteerFR;                                                  // 0x0AA0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    BodyLean;                                                 // 0x0AAC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bCalculateFrontAxisAngles;                                // 0x0AB8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0AB9(0x0003) MISSED OFFSET
	int                                                SteerFLindex;                                             // 0x0ABC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SteerFRindex;                                             // 0x0AC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DriveRLindex;                                             // 0x0AC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DriveRRindex;                                             // 0x0AC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DriveshaftRwheelIndex;                                    // 0x0ACC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SteerFLmask;                                              // 0x0AD0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SteerFRmask;                                              // 0x0ADC(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCalculateRearDriveShaftRot;                              // 0x0AE8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0AE9(0x0003) MISSED OFFSET
	struct FVector                                     RotationMaskForDriveShaft;                                // 0x0AEC(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    DriveshaftR_Rot;                                          // 0x0AF8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    DriveshaftR_Rot_Reversed;                                 // 0x0B04(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              KickstandAlpha;                                           // 0x0B10(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckWheelNormals;                                       // 0x0B14(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0B15(0x0003) MISSED OFFSET
	TArray<int>                                        WheelNormalIndexArray;                                    // 0x0B18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              AverageWheelNormalInterpSpeed;                            // 0x0B28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     AveragedWheelNormal;                                      // 0x0B2C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    AveragedWheelNormalRot;                                   // 0x0B38(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              SteerRollByWheelNormalScalar;                             // 0x0B44(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bTickWaterDrive;                                          // 0x0B48(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickFrontSplitterCollision;                              // 0x0B49(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x0B4A(0x0002) MISSED OFFSET
	struct FVector                                     FrontSplitterOffset;                                      // 0x0B4C(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     FrontSplitterExtent;                                      // 0x0B58(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              FrontSplitterCheckTime;                                   // 0x0B64(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FrontSpliterHysteresisScale;                              // 0x0B68(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FrontSplitterSpeed;                                       // 0x0B6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0xC];                                       // 0x0B70(0x000C) MISSED OFFSET
	float                                              WaterAlpha;                                               // 0x0B7C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FrontSplitterAlpha;                                       // 0x0B80(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCalculateAnimDynamics;                                   // 0x0B84(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCalculateAnimDynamicsDrag;                               // 0x0B85(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCalculateAnimDynamicsGravity;                            // 0x0B86(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAnimDynamicsCalcInComponentSpace;                        // 0x0B87(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAnimDynamicsVelocityMap;                              // 0x0B88(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0B89(0x0003) MISSED OFFSET
	float                                              ForceScale;                                               // 0x0B8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DragScale;                                                // 0x0B90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DragClamp;                                                // 0x0B94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GravityScale;                                             // 0x0B98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ExternalForceAD;                                          // 0x0B9C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     ExternalForceAD_World;                                    // 0x0BA8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     ExternalForceAD_NoDrag;                                   // 0x0BB4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   AnimDynSpeedMapIn;                                        // 0x0BC0(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    HighShake;                                                // 0x0BC8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    MidShake;                                                 // 0x0BD4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    LowShake;                                                 // 0x0BE0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    LowShakeReversed;                                         // 0x0BEC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              EngineRPM_Alpha;                                          // 0x0BF8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bTickCustomShakes;                                        // 0x0BFC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0BFD(0x0003) MISSED OFFSET
	struct FBox                                        HighShakeRange;                                           // 0x0C00(0x001C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FBox                                        MidShakeRange;                                            // 0x0C1C(0x001C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FBox                                        LowShakeRange;                                            // 0x0C38(0x001C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              LowShakeTPP_Scalar;                                       // 0x0C54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultEngineIdleClamp;                                   // 0x0C58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickAdditiveRotation;                                    // 0x0C5C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0C5D(0x0003) MISSED OFFSET
	struct FRotator                                    AdditiveRotatorMask;                                      // 0x0C60(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    AdditiveRotatorMask2;                                     // 0x0C6C(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AdditiveRot_Increase;                                     // 0x0C78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AdditiveRot_Decrease;                                     // 0x0C7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    AdditiveBoneRot;                                          // 0x0C80(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    AdditiveBoneRot2;                                         // 0x0C8C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData17[0x18];                                      // 0x0C98(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleAnimInstance"));

		return ptr;
	}

};


// Class TslGame.TslFlyingVehilce
// 0x00C0 (0x0A00 - 0x0940)
class ATslFlyingVehilce : public ATslWheeledVehicle
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0940(0x0018) MISSED OFFSET
	class UTslFlightComponent*                         FlightComponent;                                          // 0x0958(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      CockpitWidgetClass;                                       // 0x0960(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslFlyingVehicleCockpitWidget*              CockpitWidget;                                            // 0x0968(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FAirVehicleAudioConfig                      AirVehicleAudioConfig;                                    // 0x0970(0x0030) (Edit, DisableEditOnInstance)
	struct FRotorDamageConfig                          RotorDamageConfig;                                        // 0x09A0(0x0040) (Edit, DisableEditOnInstance)
	struct FVector2D                                   SteeringControlLimits;                                    // 0x09E0(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              WheelTurnLimit;                                           // 0x09E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMappedData                                 WheelToAltitudeUseMap;                                    // 0x09EC(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x4];                                       // 0x09FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFlyingVehilce"));

		return ptr;
	}


	void STATIC_OnToggleEngine();
	void STATIC_OnPostDriverRide();
	void STATIC_OnPostDriverLeave();
};


// Class TslGame.TslFlyingVehicleAnimInstance
// 0x0140 (0x0DF0 - 0x0CB0)
class UTslFlyingVehicleAnimInstance : public UTslVehicleAnimInstance
{
public:
	bool                                               bTickFlightInstruments;                                   // 0x0CB0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0CB1(0x0003) MISSED OFFSET
	struct FRotator                                    PropellerRotation;                                        // 0x0CB4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     PropellerRotationMask;                                    // 0x0CC0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              MaxFlightSpeedInKm;                                       // 0x0CCC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxRPM;                                                   // 0x0CD0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlightAltitudeInMeters;                                // 0x0CD4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    Instrument_MaxSpeedRot;                                   // 0x0CD8(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MaxRPMRot;                                     // 0x0CE4(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MaxAltRot;                                     // 0x0CF0(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MaxFuelRot;                                    // 0x0CFC(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MinSpeedRot;                                   // 0x0D08(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MinRPMRot;                                     // 0x0D14(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MinAltRot;                                     // 0x0D20(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_MinFuelRot;                                    // 0x0D2C(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    Instrument_SpeedRot;                                      // 0x0D38(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Instrument_RPMRot;                                        // 0x0D44(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Instrument_AltRot;                                        // 0x0D50(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Instrument_FuelRot;                                       // 0x0D5C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              FastRotorAlpha;                                           // 0x0D68(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    WingRollRot;                                              // 0x0D6C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     WingRollRotMask;                                          // 0x0D78(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    WingPitchRot;                                             // 0x0D84(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     WingPitchRotMask;                                         // 0x0D90(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    WheelYawRot;                                              // 0x0D9C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     WheelYawRotMask;                                          // 0x0DA8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0DB4(0x0004) MISSED OFFSET
	class UCurveVector*                                InputMapCurve;                                            // 0x0DB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SteeringInterpSpeed;                                      // 0x0DC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PedalBrakeAlpha;                                          // 0x0DC4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PedalThrottleAlpha;                                       // 0x0DC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PedalInterpSpeed;                                         // 0x0DCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0DD0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFlyingVehicleAnimInstance"));

		return ptr;
	}

};


// Class TslGame.VehicleSurfaceAudioData
// 0x0010 (0x0048 - 0x0038)
class UVehicleSurfaceAudioData : public UDataAsset
{
public:
	class UAkAudioEvent*                               EventIn;                                                  // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FadeOutTime;                                              // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ETslAudioInterpolation                             InterpolationCurve;                                       // 0x0044(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleSurfaceAudioData"));

		return ptr;
	}

};


// Class TslGame.TslVehicleEffectComponent
// 0x07B0 (0x09B0 - 0x0200)
class UTslVehicleEffectComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0200(0x0010) MISSED OFFSET
	class UMeshComponent*                              MeshComponent;                                            // 0x0210(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAkComponent*                                EngineSoundComponent;                                     // 0x0218(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FVehicleImpactSettings                      VehicleImpactSettings;                                    // 0x0220(0x0138) (Edit, DisableEditOnInstance)
	struct FVehicleEffectInfo                          VehicleEffectInfo;                                        // 0x0358(0x0138) (Edit, DisableEditOnInstance)
	class ATslParticle*                                MufflerEffect;                                            // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                Muffler2Effect;                                           // 0x0498(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                BoostEffect;                                              // 0x04A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                Boost2Effect;                                             // 0x04A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                DamagedEffect;                                            // 0x04B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                ExplosionEffect;                                          // 0x04B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                FrontTrailEffect;                                         // 0x04C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                RearTrailEffect;                                          // 0x04C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                ThrusterEffect;                                           // 0x04D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                Thruster2Effect;                                          // 0x04D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                FrontFoamLeftEffect;                                      // 0x04E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                FrontFoamRightEffect;                                     // 0x04E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UStaticMeshComponent*                        RotorEffect;                                              // 0x04F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslParticle*                                WingEffect;                                               // 0x04F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslParticle*                                GroundEffect;                                             // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0508(0x0048) MISSED OFFSET
	float                                              TrailSpeedThreshold;                                      // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FrontFoamSpawnThreshold;                                  // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickWingEffect;                                          // 0x0558(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0559(0x0003) MISSED OFFSET
	struct FMappedData                                 WingEffectMaterialSpeedMap;                               // 0x055C(0x0010) (Edit, DisableEditOnInstance)
	float                                              WingEffectMinSpeedKm;                                     // 0x056C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTickRotor;                                               // 0x0570(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRPMOverride;                                             // 0x0571(0x0001) (Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0572(0x0006) MISSED OFFSET
	class ATslWheeledVehicle*                          WheeledVehicleReference;                                  // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData)
	class ATslFloatingVehicle*                         FloatingVehicleReference;                                 // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bUseNewChassisAudio;                                      // 0x0588(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0589(0x0007) MISSED OFFSET
	class UCurveFloat*                                 Curve_EngineAudio;                                        // 0x0590(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseDopplerEffect;                                        // 0x0598(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0599(0x0007) MISSED OFFSET
	TMap<ESurfaceEffect, class UVehicleSurfaceAudioData*> SurfaceAudioMap;                                          // 0x05A0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bUseNewSurfaceAudio;                                      // 0x05F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreHandbrake;                                         // 0x05F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x05F2(0x0006) MISSED OFFSET
	TArray<int>                                        MeasuredWheelIndices;                                     // 0x05F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        MeasuredWheelIndicesSlip;                                 // 0x0608(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        MeasuredWheelIndicesSpin;                                 // 0x0618(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        MeasuredWheelIndicesBrake;                                // 0x0628(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              SurfaceActivationValue;                                   // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SurfaceDeactivationValue;                                 // 0x063C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SurfaceValueRiseRate;                                     // 0x0640(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SurfaceValueFallRate;                                     // 0x0644(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DT_Multiplier;                                            // 0x0648(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinVelocityForSurfaceCheck;                               // 0x064C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRotationSpeedForSurfaceCheck;                          // 0x0650(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSlip;                                                  // 0x0654(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSpin;                                                  // 0x0658(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinVelocityForBreak;                                      // 0x065C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BrakeNoDriverMultiplier;                                  // 0x0660(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VelocityInterpSpeed;                                      // 0x0664(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SlipInterpSpeed;                                          // 0x0668(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SpinInterpSpeed;                                          // 0x066C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BrakeInterpSpeed;                                         // 0x0670(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugVisualizedMeasuredWheels;                           // 0x0674(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0675(0x0003) MISSED OFFSET
	float                                              AngularVelocityCoefficient;                               // 0x0678(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LateralVelocityCoeffictient;                              // 0x067C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LateralVelocityClamp;                                     // 0x0680(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLatSlipMap;                                           // 0x0684(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0685(0x0003) MISSED OFFSET
	struct FVector2D                                   LatSlipInMap;                                             // 0x0688(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLongSlipMap;                                          // 0x0690(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0691(0x0003) MISSED OFFSET
	struct FVector2D                                   LongSlipInMap;                                            // 0x0694(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMaxSkid;                                              // 0x069C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMaxSpin;                                              // 0x069D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessShiftStart;                                       // 0x069E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessShiftEnd;                                         // 0x069F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessReverse;                                          // 0x06A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTargetGearForAudio;                                   // 0x06A1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessWaterPropeller;                                   // 0x06A2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x06A3(0x0001) MISSED OFFSET
	float                                              ReverseThrottleScalar;                                    // 0x06A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GearUpSound_Start;                                        // 0x06A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GearDownSound_Start;                                      // 0x06B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GearUpSound_End;                                          // 0x06B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GearDownSound_End;                                        // 0x06C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GearReverseSound;                                         // 0x06C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NonBoostedThrottleScalar;                                 // 0x06D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NonBoostedRPMScalar;                                      // 0x06D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoostRPMStaticOffset;                                     // 0x06D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoostAlphaInterpSpeed;                                    // 0x06DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0xD8];                                      // 0x06E0(0x00D8) MISSED OFFSET
	TMap<int, class UMaterialInterface*>               DestroyedMaterialMap;                                     // 0x07B8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              ApplyDestroyedMaterialDelay;                              // 0x0808(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsesBoosting;                                            // 0x080C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x080D(0x0003) MISSED OFFSET
	class UAkAudioEvent*                               BoostStartAk;                                             // 0x0810(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               BoostEndAk;                                               // 0x0818(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldTickLights;                                        // 0x0820(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0821(0x0007) MISSED OFFSET
	struct FVehicleLightSettings                       LightSettings;                                            // 0x0828(0x0078) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               bUseDynamicCamera;                                        // 0x08A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x08A1(0x0007) MISSED OFFSET
	struct FVehicleCameraEffectSettings                CameraEffectSettings;                                     // 0x08A8(0x0090) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData15[0x78];                                      // 0x0938(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleEffectComponent"));

		return ptr;
	}


	void STATIC_SetVehicleMaterialsToDestroyed();
	void STATIC_SetEngineSoundRTPC(const struct FString& RTPC, float Value);
	void STATIC_OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_OnHealthChange(float CurrentHealth, float LastHealth, float HealthMax, bool bIsDying);
	void STATIC_OnDestroyedImpactEffect(class AActor* DestroyedActor);
	void STATIC_OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	float STATIC_GetTailLightIntensity();
	float STATIC_GetHeadlightIntensity();
	class UAkComponent* STATIC_GetEngineSoundComponent();
	bool STATIC_GetEngineOn();
	void STATIC_ApplyDestoyedMaterialWithDelay();
};


// Class TslGame.TslVehicleFbrStaticMeshComponent
// 0x0060 (0x0BB0 - 0x0B50)
class UTslVehicleFbrStaticMeshComponent : public UStaticMeshComponent
{
public:
	TMap<int, class UMaterialInterface*>               DestroyedMaterialMap;                                     // 0x0B50(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0BA0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleFbrStaticMeshComponent"));

		return ptr;
	}

};


// Class TslGame.TslVehicleFbrSkeletalMeshComponent
// 0x0050 (0x11F0 - 0x11A0)
class UTslVehicleFbrSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x11A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleFbrSkeletalMeshComponent"));

		return ptr;
	}

};


// Class TslGame.TslVehicleHitComponent
// 0x0400 (0x0600 - 0x0200)
class UTslVehicleHitComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnCharacterHit;                                           // 0x0200(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0210(0x0018) MISSED OFFSET
	class UMeshComponent*                              MeshComponent;                                            // 0x0228(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              HitCharacterDuration;                                     // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x54];                                      // 0x0234(0x0054) MISSED OFFSET
	float                                              LeaveCharacterIgnoreDuration;                             // 0x0288(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterHitMinimumVehicleSpeed;                          // 0x028C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterDamageVelocityUnitMultiplier;                    // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterDamageMassUnitMultiplier;                        // 0x0294(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageSpeedCurve;                                // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageSpeedCurve_Console;                        // 0x02A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageMassCurve;                                 // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumCharacterDamage;                                   // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterLaunchSpeedMultiplier;                           // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumCharacterLaunchSpeed;                              // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpulseMultiplier;                                 // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPhysicalMaterial*                           VoidPhysicalMaterial;                                     // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactModifier;                                    // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactModifierUpsideDown;                          // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactAbsorption;                                  // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactAbsorption_Console;                          // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactAbsorptionUpsideDown;                        // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactAbsorptionRider;                             // 0x02DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactAbsorptionRider_Console;                     // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactAbsorptionRiderUpsideDown;                   // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactVehicleDamageMultiplier;                     // 0x02E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactVehicleDamageMultiplier_Console;             // 0x02EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactRiderDamageMultiplier;                       // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PhysicsImpactRiderDamageMultiplier_Console;               // 0x02F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      VehicleHitDamageType;                                     // 0x02F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      VehicleCrashDamageType;                                   // 0x0300(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   VehicleHitCharacterDotMapIn;                              // 0x0308(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   VehicleHitCharacterDotMapOut;                             // 0x0310(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionBaseDamage;                                      // 0x0318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionMinimumDamage;                                   // 0x031C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionRadiusInner;                                     // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionRadiusOuter;                                     // 0x0324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionDamageFalloff;                                   // 0x0328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	class UClass*                                      ExplosionDamageType;                                      // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ExplosionDamagePreventionChannel;                         // 0x0338(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x247];                                     // 0x0339(0x0247) MISSED OFFSET
	float                                              ImpulseLimitationSpeedThreshold;                          // 0x0580(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ImpulseLimitationSpeedThreshold_Console;                  // 0x0584(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CollectTime;                                              // 0x0588(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x058C(0x000C) MISSED OFFSET
	TArray<struct FVehicleDebugHit>                    DebugHitHistory;                                          // 0x0598(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData05[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET
	TArray<class UClass*>                              HitAbsorberTypes;                                         // 0x05B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x40];                                      // 0x05C0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleHitComponent"));

		return ptr;
	}


	void STATIC_OnSyncHit(const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_OnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	void STATIC_Multi_DrawDebugHit(const struct FVector& InVehLocation, const struct FVector& InVehVelocity, const struct FVector& InCharLocation, const struct FVector& InCharVelocity, float InDamage);
	float STATIC_GetPhysicsImpactVehicleDamageMultiplier();
	float STATIC_GetPhysicsImpactRiderDamageMultiplier();
	float STATIC_GetPhysicsImpactAbsorptionRider();
	float STATIC_GetPhysicsImpactAbsorption();
	float STATIC_GetImpulseLimitationSpeedThreshold();
	class UCurveFloat* STATIC_GetCharacterDamageSpeedCurve();
};


// Class TslGame.TslVehicleReactionInterface
// 0x0000 (0x0030 - 0x0030)
class UTslVehicleReactionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleReactionInterface"));

		return ptr;
	}

};


// Class TslGame.TslVehicleSeatComponent
// 0x0100 (0x0300 - 0x0200)
class UTslVehicleSeatComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnRide;                                                   // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeave;                                                  // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverRide;                                             // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverLeave;                                            // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostDriverRide;                                         // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostDriverLeave;                                        // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UVehicleSeatInteractionComponent*>    Seats;                                                    // 0x0260(0x0010) (ExportObject, ZeroConstructor, Transient)
	bool                                               bUseSeatCamera;                                           // 0x0270(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bKillRidersOnDestroy;                                     // 0x0271(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDoFlipCheck;                                             // 0x0272(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0273(0x0001) MISSED OFFSET
	float                                              FlipForce;                                                // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDoEntryAngleCheck;                                       // 0x0278(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0279(0x0003) MISSED OFFSET
	float                                              MinEntryAngle;                                            // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDampenPlayerVelocityOnLeave;                             // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	float                                              OnLeaveVelocityMultiplier;                                // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseActiveStabilize;                                      // 0x0288(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRiderChangeSeat;                                         // 0x0289(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLockEntryForEnemies;                                     // 0x028A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x028B(0x0001) MISSED OFFSET
	TWeakObjectPtr<class ATslCharacter>                LastDriver;                                               // 0x028C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6C];                                      // 0x0294(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleSeatComponent"));

		return ptr;
	}


	void STATIC_TryToStabilize();
	void STATIC_TryToRide(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_TryToLeave(class ATslCharacter* Rider, bool bForce);
	void STATIC_TryToFlip();
	void STATIC_Ride(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat);
	void STATIC_PostDriverRide();
	void STATIC_PostDriverLeave();
	void STATIC_OnFuelChange(float CurrentFuel, float LastFuel, float FuelMax);
	void STATIC_Leave(class ATslCharacter* Rider, class UVehicleSeatInteractionComponent* Seat, bool bForce);
	void STATIC_KillAllRiders(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
	int STATIC_GetVehicleSeatIndex(class UVehicleSeatInteractionComponent* Seat);
	TArray<class UVehicleSeatInteractionComponent*> STATIC_GetSeats();
	class UVehicleSeatInteractionComponent* STATIC_GetSeat(int SeatIndex);
	TArray<class ATslCharacter*> STATIC_GetRiders();
	class ATslCharacter* STATIC_GetLastDriver(float LastDuration);
	class ATslCharacter* STATIC_GetDriver();
};


// Class TslGame.TslVehicleSinkComponent
// 0x00B0 (0x02B0 - 0x0200)
class UTslVehicleSinkComponent : public UActorComponent
{
public:
	class UClass*                                      SurfaceRippleFx;                                          // 0x0200(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RippleEmissionScaleParam;                                 // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               RippleEmitSocketsNames;                                   // 0x0210(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                                 RippleEmissionScalePerDepthCurve;                         // 0x0220(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<float>                                      SinkingSpeedMul;                                          // 0x0228(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      FinalSplashFxTemplate;                                    // 0x0238(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 DensityChangeCurve;                                       // 0x0240(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSinkingTime;                                           // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRippleEmissionDepth;                                   // 0x024C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0250(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0258(0x0018) MISSED OFFSET
	class USkeletalMeshComponent*                      MeshComponent;                                            // 0x0270(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslVehicleEffectComponent*                  VehicleEffectComponent;                                   // 0x0278(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMovementComponent*                          MovementComponent;                                        // 0x0280(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class ATslParticle*>                        RippleEffects;                                            // 0x0288(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0298(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleSinkComponent"));

		return ptr;
	}

};


// Class TslGame.TslVehicleSyncComponent
// 0x0750 (0x0950 - 0x0200)
class UTslVehicleSyncComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	float                                              SweepToFloorMaxDistance;                                  // 0x0208(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x020C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSyncHit;                                                // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0220(0x000C) MISSED OFFSET
	float                                              MinReliableCorrectionInterval;                            // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0230(0x0004) MISSED OFFSET
	float                                              MinCorrectionInterval;                                    // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0238(0x0004) MISSED OFFSET
	float                                              SendingToServerIntervalAtClient;                          // 0x023C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0240(0x0008) MISSED OFFSET
	float                                              SendingReliableHitToServerIntervalAtClient;               // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	float                                              AllowedMaxDistanceSqAtServer;                             // 0x0250(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StationaryCorrectionIntervalAtClient;                     // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0258(0x0004) MISSED OFFSET
	float                                              StationaryCorrectionSpeedThresholdSq;                     // 0x025C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StationaryCorrectionThresholdDistanceSq;                  // 0x0260(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6EC];                                     // 0x0264(0x06EC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleSyncComponent"));

		return ptr;
	}


	void STATIC_ServerMoveUnreliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, uint32_t InPhysCallerCheckValue);
	void STATIC_ServerMoveReliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, uint32_t InPhysCallerCheckValue);
	void STATIC_ServerHitUnreliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit, uint32_t InPhysCallerCheckValue);
	void STATIC_ServerHitReliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit, uint32_t InPhysCallerCheckValue);
	void STATIC_OnTimerSweepToFloor();
	void STATIC_OnHitAtServer(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_OnHitAtClient(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_OnDriverRide();
	void STATIC_ClientOthervehicleMoveUnreliably(class UTslVehicleSyncComponent* TargetSyncComponent, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void STATIC_ClientOthervehicleMoveReliably(class UTslVehicleSyncComponent* TargetSyncComponent, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void STATIC_ClientMoveUnreliably(const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void STATIC_ClientMoveReliably(int InCorrectionId, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void STATIC_ClientDebugDrawFloorResult(const struct FVector& InStart, const struct FVector& InEnd, float InDistance);
};


// Class TslGame.TslVehicleTempComponent
// 0x0010 (0x0210 - 0x0200)
class UTslVehicleTempComponent : public UActorComponent
{
public:
	float                                              TickInterval;                                             // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0204(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleTempComponent"));

		return ptr;
	}

};


// Class TslGame.TslVehicleXRayComponent
// 0x0010 (0x0210 - 0x0200)
class UTslVehicleXRayComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0200(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVehicleXRayComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.TslVendingMachineSpot
// 0x0008 (0x03F0 - 0x03E8)
class ATslVendingMachineSpot : public AActor
{
public:
	class UTslVendingMachineSpotComponent*             SpotComponent;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVendingMachineSpot"));

		return ptr;
	}

};


// Class TslGame.TslVendingMachineSpotComponent
// 0x0010 (0x04C0 - 0x04B0)
class UTslVendingMachineSpotComponent : public USceneComponent
{
public:
	EVendingMachineType                                VendingMachineType;                                       // 0x04B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x04B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVendingMachineSpotComponent"));

		return ptr;
	}

};


// Class TslGame.TslViewTargetTempComponent
// 0x0020 (0x0220 - 0x0200)
class UTslViewTargetTempComponent : public UActorComponent
{
public:
	TArray<struct FTempComponentInfo>                  ComponentInfos;                                           // 0x0200(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0210(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslViewTargetTempComponent"));

		return ptr;
	}


	void STATIC_AddTempComponentWithDelegate(class USceneComponent* TempComponent, const struct FScriptDelegate& DelegateToCall);
	void STATIC_AddTempComponent(class USceneComponent* TempComponent);
};


// Class TslGame.TslNpcManager
// 0x0040 (0x0070 - 0x0030)
class UTslNpcManager : public UObject
{
public:
	float                                              DrawMovementDistance;                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DrawMovementDirThreshold;                                 // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UTslNpcSpawnSystem*                          SpawnSystem;                                              // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)
	class UTslWaveSystem*                              WaveSystem;                                               // 0x0040(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSpawnAroundPlayerSystem*                 SpawnAroundPlayerSystem;                                  // 0x0048(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class ATslPlayerController*>                DrawMovementPCList;                                       // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslPlayerController*>                DebugPCList;                                              // 0x0060(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcManager"));

		return ptr;
	}


	class UTslNpcManager* STATIC_CreateNpcManager(class UObject* WorldContextObject, class UClass* InNpcManagerBp);
};


// Class TslGame.TslWaveSystem
// 0x0098 (0x00C8 - 0x0030)
class UTslWaveSystem : public UObject
{
public:
	TArray<struct FNpcWaveInfo>                        WaveInfoArray;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)
	int                                                CurrentWaveIndex;                                         // 0x0040(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FNpcWaveInfo                                PendingWaveInfo;                                          // 0x0048(0x0018) (Transient)
	int                                                DesireSpawnCount;                                         // 0x0060(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                SpawnSuccessCount;                                        // 0x0064(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                SpawnFailCount;                                           // 0x0068(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                RetrySpawnCount;                                          // 0x006C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0070(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslWaveSystem.AliveSpawnedActorSet
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWaveSystem"));

		return ptr;
	}

};


// Class TslGame.TslWeapon_Gun_Launcher
// 0x0080 (0x0E00 - 0x0D80)
class ATslWeapon_Gun_Launcher : public ATslWeapon_Gun
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0D80(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Gun_Launcher"));

		return ptr;
	}


	void STATIC_Server_ThrowAway();
	void STATIC_Server_FireProjectile(const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& InBackBlastOrigin, int FakeIndex);
	void STATIC_Multi_ThrowAway();
	void STATIC_Multi_BackBlast(const struct FVector_NetQuantize& InBackBlastOrigin, const struct FVector_NetQuantizeNormal& InDirection);
	void STATIC_ConsumeItem();
	void STATIC_AnimCall_ThrowAwayWeapon();
};


// Class TslGame.TslWeapon_Gun_Projectile
// 0x0000 (0x0D80 - 0x0D80)
class ATslWeapon_Gun_Projectile : public ATslWeapon_Gun
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Gun_Projectile"));

		return ptr;
	}


	void STATIC_SimulateFire_BP();
	void STATIC_Server_FireProjectile(const struct FVector& InLocation, const struct FRotator& InRotation);
};


// Class TslGame.TslWeapon_FlareGun
// 0x0000 (0x0D80 - 0x0D80)
class ATslWeapon_FlareGun : public ATslWeapon_Gun_Projectile
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_FlareGun"));

		return ptr;
	}


	void STATIC_SimulateFire_BP();
	void STATIC_Server_FireProjectile(const struct FVector& InLocation, const struct FRotator& InRotation);
};


// Class TslGame.TslWeapon_Melee
// 0x01C0 (0x0A80 - 0x08C0)
class ATslWeapon_Melee : public ATslWeapon
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x08C0(0x0008) MISSED OFFSET
	EMeleeThrowState                                   ThrowState;                                               // 0x08C8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bShowEffectFromTeamShot;                                  // 0x08C9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x08CA(0x0006) MISSED OFFSET
	class UAkAudioEvent*                               AttackSoundAk;                                            // 0x08D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCapsuleComponent*                           HitCapsuleComponent;                                      // 0x08D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<struct FMeleeWeaponAnim>                    AttackAnims;                                              // 0x08E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UAnimMontage*                                ThrowAnim;                                                // 0x08F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowPrepareTime;                                         // 0x08F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowPrepareTimeAfterArming;                              // 0x08FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeThrown;                                             // 0x0900(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0901(0x0007) MISSED OFFSET
	TMap<TEnumAsByte<EStanceMode>, struct FVector>     ThrowSocketOffsets_TPP;                                   // 0x0908(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<TEnumAsByte<EStanceMode>, struct FVector>     ThrowSocketOffsets_FPP;                                   // 0x0958(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UThrowableItemDataAsset*                     ThrowConfig;                                              // 0x09A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Damage;                                                   // 0x09B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponImpact;                                             // 0x09B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x09B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EHitCheckType                                      HitCheckType;                                             // 0x09C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x09C1(0x0007) MISSED OFFSET
	class UClass*                                      ImpactTemplate;                                           // 0x09C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xA0];                                      // 0x09D0(0x00A0) MISSED OFFSET
	float                                              AllowHitDistanceScale;                                    // 0x0A70(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0A74(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Melee"));

		return ptr;
	}


	void STATIC_ServerNotifyHit(int checksum_CD, TArray<struct FHitResult> Impacts, uint32_t IntValue1, const struct FAttackId& AttackId, const struct FVector& Location, TArray<struct FVector> Locations, int Checksum);
	void STATIC_ServerChangeThrowState(EMeleeThrowState NewState);
	void STATIC_ServerAttack(int AnimIndex);
	void STATIC_Server_ThrowWeapon(const struct FItemThrowParams& Params);
	void STATIC_OnRep_ThrowState();
	void STATIC_OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void STATIC_OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	void STATIC_ClientHit_Confirmed(const struct FHitResult& Impact);
	void STATIC_ClientAttack(int AnimIndex);
	void STATIC_Client_CancelThrow();
};


// Class TslGame.TslWeapon_JerryCan
// 0x00B0 (0x0B30 - 0x0A80)
class ATslWeapon_JerryCan : public ATslWeapon_Melee
{
public:
	struct FVector                                     PuddleOffset;                                             // 0x0A80(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnTracePullback;                                       // 0x0A8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnTracePullup;                                         // 0x0A90(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSpillHeight;                                           // 0x0A94(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSpillDuration;                                         // 0x0A98(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DiscardDelay;                                             // 0x0A9C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpillActionCastTime;                                      // 0x0AA0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     DiscardRelativeLoc;                                       // 0x0AA4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    DiscardMeshRot;                                           // 0x0AB0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0ABC(0x0004) MISSED OFFSET
	class UClass*                                      PuddleContainerTemplate;                                  // 0x0AC0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UThrowableItemDataAsset*                     DiscardThrowConfig;                                       // 0x0AC8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                PourAnimMontage;                                          // 0x0AD0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                ArmAnimMontage;                                           // 0x0AD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                DiscardAnimMontage;                                       // 0x0AE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SpillSoundStart;                                          // 0x0AE8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SpillSoundStop;                                           // 0x0AF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0AF8(0x0008) MISSED OFFSET
	class ATslFuelPuddleContainer*                     CurrentContainer;                                         // 0x0B00(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsSpilling;                                              // 0x0B08(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x27];                                      // 0x0B09(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_JerryCan"));

		return ptr;
	}


	void STATIC_StopSpilling();
	void STATIC_Server_StopSpilling();
	void STATIC_Server_StartSpilling();
	void STATIC_Server_NotifySpillAnimState(bool bIsActive);
	void STATIC_OnRep_IsSpilling();
	void STATIC_OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void STATIC_Multi_AnimCallSpill(bool bIsActive);
};


// Class TslGame.TslWeapon_Melee_BuffOnly
// 0x0000 (0x0A80 - 0x0A80)
class ATslWeapon_Melee_BuffOnly : public ATslWeapon_Melee
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Melee_BuffOnly"));

		return ptr;
	}

};


// Class TslGame.TslWeapon_Shield
// 0x00F0 (0x0B70 - 0x0A80)
class ATslWeapon_Shield : public ATslWeapon_Melee
{
public:
	class UClass*                                      PushDamageType;                                           // 0x0A80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              SphereQueryObjects;                                       // 0x0A88(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              PushDamage;                                               // 0x0A98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PushDistance;                                             // 0x0A9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PushImpulseStrength;                                      // 0x0AA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinPushElevationAngleDeg;                                 // 0x0AA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PushDuration;                                             // 0x0AA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ServerPushAllowanceDist;                                  // 0x0AAC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0AB0(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslWeapon_Shield.AllowedVaultingTypes
	TMap<EVaultAnimType, class UVaultingData*>         VaultingDataOverrides;                                    // 0x0B00(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET
	class UFlashbangComponent*                         FlashbangComponent;                                       // 0x0B58(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bUseOwnerLocationOnPushAttack;                            // 0x0B60(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0B61(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_Shield"));

		return ptr;
	}


	void STATIC_ServerNotifyPush(const struct FAttackId& AttackId, const struct FHitResult& HitResult, const struct FVector& Direction);
	void STATIC_ServerActivateDebuff();
	void STATIC_OnRep_DebufChargesLeft();
	void STATIC_OnPushActivated();
	void STATIC_OnDebuffOutOfCharges();
	void STATIC_OnDebuffActivated();
	void STATIC_ClientSimulatePushAttack();
	void STATIC_ClientSimulateFlashActivation();
};


// Class TslGame.TslWeapon_FBRShield
// 0x0010 (0x0B80 - 0x0B70)
class ATslWeapon_FBRShield : public ATslWeapon_Shield
{
public:
	bool                                               bMeshVisibility;                                          // 0x0B70(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIgnoreArmAnimation;                                      // 0x0B71(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x0B72(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_FBRShield"));

		return ptr;
	}


	void STATIC_TryRearm();
	void STATIC_ServerBeginPushAttack(const struct FAttackId& AttackId, const struct FVector& InDirection);
	void STATIC_OnRep_MeshVisibility();
	void STATIC_OnCharacterCastAnim();
	void STATIC_ClientPlayAnimShieldPushAttack(float InDistanceRatio);
};


// Class TslGame.TslWeapon_SpikeTrap
// 0x0000 (0x0A00 - 0x0A00)
class ATslWeapon_SpikeTrap : public ATslWeapon_Throwable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeapon_SpikeTrap"));

		return ptr;
	}


	void STATIC_ServerStartPinOff();
	void STATIC_ServerStartCooking();
	void STATIC_ServerRequestCancelThrow();
	void STATIC_ServerFireProjectile(int checksum1, int checksum2, const struct FVector& RelativeLocation, const struct FVector& AimDirection, float ClientPitch, int FakeIndex);
	void STATIC_ServerBeginThrow();
	void STATIC_OnRep_ThrowableState(EThrowableState LastThrowableState);
	void STATIC_OnAnimationNotify(class USkeletalMeshComponent* MeshComp, const struct FName& NotifyName);
	EThrowableState STATIC_GetThrowableState();
	int STATIC_GetThrowableCountInInventory();
	int STATIC_GetThrowableCount();
	void STATIC_Delayed_ServerFireProjectile(const struct FVector& RelativeLocation, const struct FVector_NetQuantizeNormal& AimDirection, float ClientPitch, int FakeIndex);
	void STATIC_CustomTrigger_BP(bool bIsActive);
	void STATIC_ClientNotifyReset();
	struct FVector STATIC_CalculateFinalThrowVelocity(const struct FVector& AimDirection);
};


// Class TslGame.TslWeaponDisplay
// 0x01E0 (0x05C8 - 0x03E8)
class ATslWeaponDisplay : public AActor
{
public:
	bool                                               bActive;                                                  // 0x03E8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAnimating;                                               // 0x03E9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03EA(0x0006) MISSED OFFSET
	class ATslLobbyWeapon*                             SpawnedWeapon;                                            // 0x03F0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      DefaultWeaponLocationActor;                               // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      MaxZoomWeaponLocationActor;                               // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultWeaponLocation;                                    // 0x0408(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     MaxZoomWeaponLocation;                                    // 0x0414(0x000C) (BlueprintVisible, IsPlainOldData)
	TArray<class UAsyncStaticMeshComponent*>           AttachmentMeshes;                                         // 0x0420(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	class UPostProcessComponent*                       EffectPostProcessComponent;                               // 0x0430(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    VignetteEffectMID;                                        // 0x0438(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UWeaponMeshComponent*                        WeaponMesh;                                               // 0x0440(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                ComponentMeshPoolSize;                                    // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TransitionDuration;                                       // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TransitionDelay;                                          // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	TArray<class UMeshComponent*>                      WeaponEffectMeshes;                                       // 0x0458(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	class USkeletalMeshComponent*                      WeaponTexturedMeshComponent;                              // 0x0468(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      WeaponHiddenMeshComponent;                                // 0x0470(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      WeaponCutoutMeshComponent;                                // 0x0478(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMaterialInstance*                           Hide_MI;                                                  // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           Weapon_MI;                                                // 0x0488(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           Cutout_MI;                                                // 0x0490(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    Chromatic_MI;                                             // 0x0498(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    Vignette_MI;                                              // 0x04A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           Charm_MI;                                                 // 0x04A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           ChromaticMaterial;                                        // 0x04B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           VignetteMaterial;                                         // 0x04B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslLobbyWeapon*                             TslWeapon;                                                // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                                      // 0x04C8(0x0080) MISSED OFFSET
	float                                              CharmZoomFactor;                                          // 0x0548(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x054C(0x0018) MISSED OFFSET
	bool                                               bWaitForCharmPhysicsUpdate;                               // 0x0564(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0565(0x0003) MISSED OFFSET
	float                                              CharmPhysicsUpdateDelayTime;                              // 0x0568(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CharmPhysicsUpdateCheckTime;                              // 0x056C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             RotationParentRef;                                        // 0x0570(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0578(0x0008) MISSED OFFSET
	struct FRotator                                    SpawnedWeaponRotationStartOffset;                         // 0x0580(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    SpawnedWeaponRotationEndOffset;                           // 0x058C(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0598(0x0004) MISSED OFFSET
	struct FRotator                                    ToRotate;                                                 // 0x059C(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     ToOffset;                                                 // 0x05A8(0x000C) (Transient, IsPlainOldData)
	struct FVector                                     ToZoom;                                                   // 0x05B4(0x000C) (Transient, IsPlainOldData)
	float                                              ToVignetteAlpha;                                          // 0x05C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeaponDisplay"));

		return ptr;
	}


	void STATIC_ZoomWeapon(float ZoomFactor, bool Immediate);
	void STATIC_UpdateVignetteSize();
	void STATIC_UpdateEffect(float DeltaSeconds);
	void STATIC_SyncWFXVector(TArray<class UMeshComponent*> MeshRefs, const struct FVector& VectorValue, const struct FName& ParamName);
	void STATIC_SyncWFXScalar(TArray<class UMaterialInstanceDynamic*> MatInstanceDynamics, float ScalarValue, const struct FName& ParamName);
	class ATslLobbyWeapon* STATIC_SpawnWeapon(class ALobbyCharacter* LobbyOwner, const struct FString& ItemID, const struct FString& CharmId, const struct FString& SkinId, bool PlayAnimation);
	void STATIC_Show(bool visible);
	void STATIC_SetZoomStateProperties(float VignetteAlpha, float ZoomFactor, const struct FVector& CharmOffset, bool Immediate);
	void STATIC_SetZoomState(EWeaponDisplayZoomState ZoomState, bool Immediate, bool FromUserInput);
	void STATIC_SetComponentMeshVisibility(bool visible, int MaxLimit);
	void STATIC_SetAnimating(bool animating);
	void STATIC_SetAngle(float YawInDegree, bool bImmediately);
	void STATIC_SetActive(bool active);
	void STATIC_ResetWeapon(bool Immediate);
	void STATIC_OnPlayAnimation();
	bool STATIC_IsAnimating();
	bool STATIC_IsActive();
	class UMaterialInterface* STATIC_GetWeaponMaterial();
	struct FVector STATIC_GetTransitionOrigin();
	class UStaticMeshComponent* STATIC_GetStaticMesh();
	struct FShowWeaponParams STATIC_GetShowWeaponParams(class UClass* WeaponClass, class UClass* SkinClass);
	void STATIC_DespawnWeapon();
	TArray<class UMaterialInstanceDynamic*> STATIC_CopyWeaponMatParameters(class UMeshComponent* MeshRef, TArray<class UMaterialInterface*> MaterialsToCopy, class UMaterialInterface* TransitionInstanceToDupe, bool CopyAllParams, class UMaterialInterface* TransitionInstanceToDupeCharm);
	bool STATIC_AreComponentMaterialsLoaded();
	void STATIC_AddStaticMeshAsyncEvent(bool indexMatch);
	void STATIC_AddAngle(float YawInDegree);
};


// Class TslGame.TslWeatherManager
// 0x0188 (0x0570 - 0x03E8)
class ATslWeatherManager : public AActor
{
public:
	float                                              StartTimeMin;                                             // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              StartTimeMax;                                             // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              DurationTimeMin;                                          // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              DurationTimeMax;                                          // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class ATslWetEffect*                               WetEffect;                                                // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class ATslLightningController*                     LightningEffect;                                          // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class ATslWeatherPPController*                     PPEffect;                                                 // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<struct FDynamicWeatherSetting>              DynamicWeathers;                                          // 0x0418(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      bUseCustomOrder : 1;                                      // 0x0428(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0429(0x0007) MISSED OFFSET
	TArray<int>                                        CustomOrder;                                              // 0x0430(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      bShowDebugDynamicWeather : 1;                             // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              DebugMessageInterval;                                     // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0448(0x000C) MISSED OFFSET
	unsigned char                                      bWeatherChanging : 1;                                     // 0x0454(0x0001) (Net, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	struct FDynamicWeatherReplicationData              DynamicWeatherStateInitial;                               // 0x0458(0x0010) (Net, Transient)
	int                                                NewDynamicWeatherIndex;                                   // 0x0468(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                OldDynamicWeatherIndex;                                   // 0x046C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              NewWeatherElapsedTime;                                    // 0x0470(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0474(0x0014) MISSED OFFSET
	class ULightComponent*                             DirLightComponent;                                        // 0x0488(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class USkyLightComponent*                          SkyLightComponent;                                        // 0x0490(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0498(0x0008) MISSED OFFSET
	class UTslGameInstance*                            TGI;                                                      // 0x04A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x20];                                      // 0x04A8(0x0020) MISSED OFFSET
	TArray<struct FTslLocalWeatherVolume>              LocalWeatherVolumes;                                      // 0x04C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	class ATslParticle*                                LocalWeatherParticle;                                     // 0x04D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      bIgnoreGlobalSpawnScale : 1;                              // 0x04E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData07[0x7];                                       // 0x04E1(0x0007) MISSED OFFSET
	class AExponentialHeightFog*                       HeightFog;                                                // 0x04E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData08[0x70];                                      // 0x04F0(0x0070) MISSED OFFSET
	float                                              ServerTickInterval;                                       // 0x0560(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ClientTickInterval;                                       // 0x0564(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0568(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeatherManager"));

		return ptr;
	}


	void STATIC_OnReplayOvercastDone();
	void STATIC_OnReplayGotoTimelineDone();
	void STATIC_NetMulti_RecordReplayEvent(ETslWeatherAction inAction, int InNewWeatherIndex, int InOldWeatherIndex, float InElapsedTime, float InDurationTime, float inBlendInTime, float inBlendOutTime);
	void STATIC_EnumerateOvercastEvents();
};


// Class TslGame.TslWeatherPPController
// 0x0048 (0x0430 - 0x03E8)
class ATslWeatherPPController : public AActor
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x03E8(0x000C) MISSED OFFSET
	float                                              ElapsedTime;                                              // 0x03F4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bCameraWetTime : 1;                                       // 0x03F8(0x0001) (Net, Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	class UMaterialParameterCollection*                WeatherSystem_MPC;                                        // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class APostProcessVolume*                          PPVolume;                                                 // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UMaterialInstance*                           PPMaterial;                                               // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FadeInOutTime;                                            // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              CameraPitchThreshold;                                     // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0420(0x000C) MISSED OFFSET
	unsigned char                                      bShowDebug_PP : 1;                                        // 0x042C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData03[0x3];                                       // 0x042D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeatherPPController"));

		return ptr;
	}

};


// Class TslGame.TslWetEffect
// 0x0060 (0x0448 - 0x03E8)
class ATslWetEffect : public AActor
{
public:
	class UMaterialParameterCollection*                RainMPC;                                                  // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x03F0(0x000C) MISSED OFFSET
	unsigned char                                      bSetRRange : 1;                                           // 0x03FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03FD(0x0003) MISSED OFFSET
	float                                              RMin;                                                     // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              RMax;                                                     // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ElapsedTime;                                              // 0x0408(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x040C(0x0008) MISSED OFFSET
	float                                              WetGroundTime;                                            // 0x0414(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 WetGroundCurve;                                           // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0420(0x0004) MISSED OFFSET
	float                                              WetVehicleTime;                                           // 0x0424(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 WetVehicleCurve;                                          // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0430(0x0004) MISSED OFFSET
	float                                              WetNormalTime;                                            // 0x0434(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 WetNormalCurve;                                           // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0440(0x0004) MISSED OFFSET
	unsigned char                                      bShowDebug_Wet : 1;                                       // 0x0444(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0445(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWetEffect"));

		return ptr;
	}


	void STATIC_OnRep_ElapsedTime();
	void STATIC_NetMulti_InitTimeline(float inBlendInTime, float inBlendOutTime, float InSaturationTime);
	void STATIC_NetMulti_ExtendSaturationTime(float SaturationTimeAddd);
};


// Class TslGame.TslWheelContext
// 0x0000 (0x0030 - 0x0030)
class UTslWheelContext : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheelContext"));

		return ptr;
	}

};


// Class TslGame.TslItemRequestWheelContext
// 0x0020 (0x0050 - 0x0030)
class UTslItemRequestWheelContext : public UTslWheelContext
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemRequestWheelContext"));

		return ptr;
	}

};


// Class TslGame.TslTacticalMapMarkerWheelContext
// 0x0008 (0x0038 - 0x0030)
class UTslTacticalMapMarkerWheelContext : public UTslWheelContext
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTacticalMapMarkerWheelContext"));

		return ptr;
	}

};


// Class TslGame.TslMotorbikeVehicle
// 0x02D0 (0x0C10 - 0x0940)
class ATslMotorbikeVehicle : public ATslWheeledVehicle
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0940(0x000C) MISSED OFFSET
	bool                                               bUseConstraintStabilize;                                  // 0x094C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x094D(0x0003) MISSED OFFSET
	float                                              ConstraintSpringForce;                                    // 0x0950(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConstraintDamperForce;                                    // 0x0954(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PitchForceAlphaMapIn;                                     // 0x0958(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PitchForceAlphaMapOut;                                    // 0x0960(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseKickstandStabilize;                                   // 0x0968(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0969(0x0003) MISSED OFFSET
	float                                              KickstandSleepTimer;                                      // 0x096C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSuspensionOffsetForContact;                            // 0x0970(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeOnServer;                                       // 0x0974(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeOnRemoteClient;                                 // 0x0975(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0976(0x0002) MISSED OFFSET
	float                                              KickstandStabAngularDamp;                                 // 0x0978(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAngularDamping_Client;                             // 0x097C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAngularDamping_Server;                             // 0x0980(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoDriverAngularDamping_Client;                            // 0x0984(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoDriverAngularDamping_Server;                            // 0x0988(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabilizeTorqueScalar;                           // 0x098C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabilizeRollScalar;                             // 0x0990(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabilizeRollMinRange;                           // 0x0994(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinVelocityForStabilizeOverride;                          // 0x0998(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabLinearDamp;                                  // 0x099C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectStabilizeSpeedKickstand;                            // 0x09A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectStabilizeSpeedKickstand_LowRoll;                    // 0x09A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AddZPerSecOnStabilize;                                    // 0x09A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTeleportOnStabilize;                                  // 0x09AC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLinearStabilizeInterp;                                // 0x09AD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSleepForcingOnStabilize;                              // 0x09AE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x09AF(0x0001) MISSED OFFSET
	float                                              LinearStabilizeRollCutoff;                                // 0x09B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SleepForceRollLimit;                                      // 0x09B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectStabilizeSpeedDriver;                               // 0x09B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x09BC(0x0004) MISSED OFFSET
	struct FName                                       StabilizeBone_Low;                                        // 0x09C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       StabilizeBone_High;                                       // 0x09C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Roll;                                               // 0x09D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_RollReturn;                                         // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Steer;                                              // 0x09E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Yaw;                                                // 0x09E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Torque;                                             // 0x09F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     StabStaticVector;                                         // 0x09F8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     StabStaticVectorKickstand;                                // 0x0A04(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     StabNoDriverVector;                                       // 0x0A10(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Velocity_In;                                        // 0x0A1C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Velocity_Out;                                       // 0x0A24(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Pitch_In;                                           // 0x0A2C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Pitch_Out;                                          // 0x0A34(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Velocity_In;                                        // 0x0A3C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Velocity_Out;                                       // 0x0A44(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Roll_In;                                            // 0x0A4C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Roll_Out;                                           // 0x0A54(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Pitch_In;                                           // 0x0A5C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Pitch_Out;                                          // 0x0A64(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorquePitch_In;                                       // 0x0A6C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorquePitch_Out;                                      // 0x0A74(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              StabTorque_ForceScalar;                                   // 0x0A7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorque_AngVel_In;                                     // 0x0A80(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorque_AngVel_Out;                                    // 0x0A88(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFlipping;                                             // 0x0A90(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0A91(0x0003) MISSED OFFSET
	float                                              FlippingForce;                                            // 0x0A94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialFlipTimer;                                         // 0x0A98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMappedAngularDamping;                                    // 0x0A9C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0A9D(0x0003) MISSED OFFSET
	float                                              MinVelocityForFlipping;                                   // 0x0AA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DisableDamageAfterFlipSec;                                // 0x0AA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0AA8(0x000C) MISSED OFFSET
	float                                              DefaultLinearDamp;                                        // 0x0AB4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAngularDamp;                                       // 0x0AB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultMAV;                                               // 0x0ABC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_RiseRate;                                    // 0x0AC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_FallRate;                                    // 0x0AC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_LowerClamp;                                  // 0x0AC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapPitchIn;                                  // 0x0ACC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapRollIn;                                   // 0x0AD4(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlphaRemoteMultiplier;                             // 0x0ADC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeWithContactNormal;                              // 0x0AE0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0AE1(0x0003) MISSED OFFSET
	float                                              StabilizeWithContactNormalAlpha;                          // 0x0AE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactNormalInterpSpeed;                                 // 0x0AE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseForceFramceScale;                                     // 0x0AEC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLocalSpaceAngVel;                                     // 0x0AED(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMainBodyCOMNoDriver;                                  // 0x0AEE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x0AEF(0x0001) MISSED OFFSET
	struct FVector                                     MainBodyCOM_NoDriver;                                     // 0x0AF0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MainBodyCOM_Initial;                                      // 0x0AFC(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseCalculatedVelocityAdjustedUpVector;                   // 0x0B08(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0B09(0x0003) MISSED OFFSET
	struct FVector2D                                   AirControlF_VelMap;                                       // 0x0B0C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlB_VelMap;                                       // 0x0B14(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlL_VelMap;                                       // 0x0B1C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlR_VelMap;                                       // 0x0B24(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlQ_VelMap;                                       // 0x0B2C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlE_VelMap;                                       // 0x0B34(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_FB_Torque;                                     // 0x0B3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_LR_Torque;                                     // 0x0B40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_QE_Torque;                                     // 0x0B44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeInAir;                                          // 0x0B48(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseForceClamp;                                           // 0x0B49(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x0B4A(0x0002) MISSED OFFSET
	float                                              FC_PitchUp;                                               // 0x0B4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FC_PitchDown;                                             // 0x0B50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAnchoring;                                            // 0x0B54(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0B55(0x0003) MISSED OFFSET
	float                                              MinImpulseForAnchorRelease;                               // 0x0B58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   DriverVelocityAngularDampingInMap;                        // 0x0B5C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   DriverVelocityAngularDampingOutMap;                       // 0x0B64(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessCounterSteering;                                  // 0x0B6C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessCounterSteerNoInput;                              // 0x0B6D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessCounterSteerOnRemote;                             // 0x0B6E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x0B6F(0x0001) MISSED OFFSET
	float                                              CounterSteerAngularSpeedScalar;                           // 0x0B70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerNoInputSpeedScalar;                           // 0x0B74(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_Default;                               // 0x0B78(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_NoThrottle;                            // 0x0B7C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_Brake;                                 // 0x0B80(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_NoInput;                               // 0x0B84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   CounterSteer_VelocityOutMap;                              // 0x0B88(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerMinForwardSpeed;                              // 0x0B90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMotoRollDampSettings                       MotoRollDampSettings;                                     // 0x0B94(0x001C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData15[0x38];                                      // 0x0BB0(0x0038) MISSED OFFSET
	class ATslAnchorActor*                             AnchorActorRef;                                           // 0x0BE8(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bKickstandStabilizeActive;                                // 0x0BF0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0xF];                                       // 0x0BF1(0x000F) MISSED OFFSET
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x0C00(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData17[0x8];                                       // 0x0C08(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMotorbikeVehicle"));

		return ptr;
	}


	void STATIC_WakeAllBodies();
	bool STATIC_VehicleHasDriver();
	void STATIC_TryToSleep();
	void STATIC_SetAirControlR(float InFloat);
	void STATIC_SetAirControlQ(float InFloat);
	void STATIC_SetAirControlL(float InFloat);
	void STATIC_SetAirControlF(float InFloat);
	void STATIC_SetAirControlE(float InFloat);
	void STATIC_SetAirControlB(float InFloat);
	void STATIC_PutBodyToSleep();
	void STATIC_ProcessFlipAndStabilize();
	void STATIC_OnVehicleSleep(class UPrimitiveComponent* SleepingComponent, const struct FName& BoneName);
	void STATIC_OnVehicleEjected();
	void STATIC_OnRep_KickstandStabilize();
	void STATIC_OnPostDriverRide();
	void STATIC_OnPostDriverLeave();
	void STATIC_OnMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_Multi_VehicleSleep(const struct FQuat& InQuat, const struct FVector& InLocation);
	bool STATIC_IsUsingActiveStabilize();
	bool STATIC_IsKickstandActive();
	bool STATIC_IsFlippingEnabled();
	bool STATIC_IsBaseForAnyCharacter();
	bool STATIC_HasContact();
	float STATIC_GetCOMSteerOffset();
};


// Class TslGame.TslMotorbikeVehicle_Sidecar
// 0x0010 (0x0C20 - 0x0C10)
class ATslMotorbikeVehicle_Sidecar : public ATslMotorbikeVehicle
{
public:
	struct FVector                                     Sidecar_StabilizerHigh_StaticCOM;                         // 0x0C10(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C1C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMotorbikeVehicle_Sidecar"));

		return ptr;
	}

};


// Class TslGame.TslMotorbikeVehicle_Standalone
// 0x0000 (0x0C10 - 0x0C10)
class ATslMotorbikeVehicle_Standalone : public ATslMotorbikeVehicle
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMotorbikeVehicle_Standalone"));

		return ptr;
	}


	void STATIC_WakeAllBodies();
	bool STATIC_VehicleHasDriver();
	void STATIC_TryToSleep();
	void STATIC_SetAirControlR(float InFloat);
	void STATIC_SetAirControlQ(float InFloat);
	void STATIC_SetAirControlL(float InFloat);
	void STATIC_SetAirControlF(float InFloat);
	void STATIC_SetAirControlE(float InFloat);
	void STATIC_SetAirControlB(float InFloat);
	void STATIC_PutBodyToSleep();
	void STATIC_ProcessFlipAndStabilize();
	void STATIC_OnVehicleSleep(class UPrimitiveComponent* SleepingComponent, const struct FName& BoneName);
	void STATIC_OnVehicleEjected();
	void STATIC_OnRep_KickstandStabilize();
	void STATIC_OnPostDriverRide();
	void STATIC_OnPostDriverLeave();
	void STATIC_OnMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_Multi_VehicleSleep(const struct FQuat& InQuat, const struct FVector& InLocation);
	bool STATIC_IsUsingActiveStabilize();
	bool STATIC_IsKickstandActive();
	bool STATIC_IsFlippingEnabled();
	bool STATIC_IsBaseForAnyCharacter();
	bool STATIC_HasContact();
	float STATIC_GetCOMSteerOffset();
};


// Class TslGame.TslWheelEffectType
// 0x00B0 (0x00E8 - 0x0038)
class UTslWheelEffectType : public UDataAsset
{
public:
	class UAkAudioEvent*                               Sound;                                                    // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DefaultFxClass;                                           // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ConcreteFxClass;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DirtFxClass;                                              // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      WaterFxClass;                                             // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MetalFxClass;                                             // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      WoodFxClass;                                              // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GrassFxClass;                                             // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GlassFxClass;                                             // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RockFxClass;                                              // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SandFxClass;                                              // 0x0088(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SnowFxClass;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SnowRockFxClass;                                          // 0x0098(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      IceFxClass;                                               // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MudFxClass;                                               // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultMinSpeed;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConcreteMinSpeed;                                         // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirtMinSpeed;                                             // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterMinSpeed;                                            // 0x00BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MetalMinSpeed;                                            // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WoodMinSpeed;                                             // 0x00C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GrassMinSpeed;                                            // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GlassMinSpeed;                                            // 0x00CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RockMinSpeed;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SandMinSpeed;                                             // 0x00D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SnowMinSpeed;                                             // 0x00D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SnowRockMinSpeed;                                         // 0x00DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IceMinSpeed;                                              // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MudMinSpeed;                                              // 0x00E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheelEffectType"));

		return ptr;
	}

};


// Class TslGame.TslWorldOffsetComponent
// 0x0010 (0x0210 - 0x0200)
class UTslWorldOffsetComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnApplyWorldOffset;                                       // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWorldOffsetComponent"));

		return ptr;
	}


	void STATIC_CallToApplyWorldOffset(class USceneComponent* InComp, const struct FVector& InOffset, bool bWorldShift);
};


// Class TslGame.UpdateCameraComponent
// 0x0060 (0x0260 - 0x0200)
class UUpdateCameraComponent : public UActorComponent
{
public:
	struct FVector                                     InitCameraLocation;                                       // 0x0200(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CrouchedCameraMove;                                       // 0x020C(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PronedCameraMove;                                         // 0x0218(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     GroggyCameraMove;                                         // 0x0224(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchedCameraMoveSpeed;                                  // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PronedCameraMoveSpeed;                                    // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroggyCameraMoveSpeed;                                    // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x023C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.UpdateCameraComponent"));

		return ptr;
	}

};


// Class TslGame.VehicleRiderComponent
// 0x0080 (0x0280 - 0x0200)
class UVehicleRiderComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRide;                                                   // 0x0208(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnLeave;                                                  // 0x0218(0x0010) (ZeroConstructor, InstancedReference)
	int                                                SeatIndex;                                                // 0x0228(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x34];                                      // 0x022C(0x0034) MISSED OFFSET
	class APawn*                                       LastVehiclePawn;                                          // 0x0260(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEverRider;                                               // 0x0268(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x17];                                      // 0x0269(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VehicleRiderComponent"));

		return ptr;
	}


	void STATIC_DebugDrawSafeLocationOnClient(const struct FVector& Location, const struct FColor& Color);
	void STATIC_DebugDrawLeave(const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, bool bHit, const struct FHitResult& OutHit);
};


// Class TslGame.WeaponStudio
// 0x00B0 (0x0500 - 0x0450)
class AWeaponStudio : public AItemStudio
{
public:
	float                                              UpdateDelayTime;                                          // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AnimationUpdateDelayTime;                                 // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EquipedWeaponUpdateDelayTime;                             // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	class UBaseWeaponItem*                             CachedWeaponItem;                                         // 0x0460(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslWeapon*                                  CachedTslWeapon;                                          // 0x0468(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0470(0x0008) MISSED OFFSET
	TMap<struct FName, int>                            CachedResidentMips;                                       // 0x0478(0x0050) (ZeroConstructor, Transient)
	float                                              UpdateCheckTime;                                          // 0x04C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AnimationUpdateCheckTime;                                 // 0x04CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipedWeaponCheckTime;                                   // 0x04D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bNeedtoUpdate;                                            // 0x04D4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWaitForAnimationUpdate;                                  // 0x04D5(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWaitForEquipedWeapon;                                    // 0x04D6(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHasStatkTrak;                                            // 0x04D7(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EStatTrakState                                     SaveStatTrakState;                                        // 0x04D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	struct FStatTrakDataPair                           SaveStatTrakDataPair;                                     // 0x04E0(0x0018) (Transient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponStudio"));

		return ptr;
	}


	void STATIC_UpdateWeaponMesh();
	void STATIC_UpdateSkin();
	void STATIC_UpdateMasteryItems();
	void STATIC_UpdateAttachment();
	void STATIC_OnUpdateSkin();
	void STATIC_OnUpdateAttachment();
	void STATIC_OnLoadedAttachment();
	class UMeshComponent* STATIC_GetWeaonMesh();
	class ATslLobbyWeapon* STATIC_GetStudioWeapon();
	class UBaseWeaponItem* STATIC_GetCachedWeaponItem();
	class ATslWeapon* STATIC_GetCachedTslWeapon();
};


// Class TslGame.PlayerCardStudio
// 0x0070 (0x04C0 - 0x0450)
class APlayerCardStudio : public AViewModeStudio
{
public:
	class ALobbyHUD*                                   LobbyHUD;                                                 // 0x0450(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ALobbyCharacter*                             Character;                                                // 0x0458(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDisplayWeaponCustomizationOptions;                       // 0x0460(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	struct FString                                     SavedBannerId;                                            // 0x0468(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class USpringArmComponent*                         SpringArmComponent;                                       // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bUseDynamicResolution;                                    // 0x0480(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0481(0x0007) MISSED OFFSET
	class USceneComponent*                             CharacterPivot;                                           // 0x0488(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    SceneCaptureMaterial;                                     // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMasteryBannerController*                    MasteryBanner;                                            // 0x0498(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             MasteryBannerPivot;                                       // 0x04A0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UClass*                                      CharacterMaleClass;                                       // 0x04A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CharacterFemaleClass;                                     // 0x04B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerCardStudio"));

		return ptr;
	}


	void STATIC_Update();
	void STATIC_SpawnCharacter(const struct FWuCharacterCustomizationOptions& Options, bool IsGenderMale);
	void STATIC_SetSceneCaptureMaterial(class UMaterialInstanceDynamic* Mid);
	void STATIC_SetMasteryBanner(class AMasteryBannerController* Banner, const struct FString& BannerId, int SurvivalMasteryLevel);
	void STATIC_SetCharacterPose(const struct FString& BannerId, TArray<struct FString> ItemIds);
	bool STATIC_IsUsingDynamicResolution();
	class UMaterialInstanceDynamic* STATIC_GetSceneCaptureMaterial();
	class AMasteryBannerController* STATIC_GetMasteryBanner();
};


// Class TslGame.PlayerCardStudioV2
// 0x0010 (0x04D0 - 0x04C0)
class APlayerCardStudioV2 : public APlayerCardStudio
{
public:
	class UDataTable*                                  PoseData;                                                 // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerCardStudioV2"));

		return ptr;
	}


	void STATIC_SpawnCharacter(const struct FWuCharacterCustomizationOptions& Options, bool IsGenderMale);
};


// Class TslGame.VoiceComponent
// 0x0080 (0x0510 - 0x0490)
class UVoiceComponent : public UVoiceBaseComponent
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0490(0x002C) MISSED OFFSET
	float                                              SuddenMovementDistance;                                   // 0x04BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SuddenMovementModifier;                                   // 0x04C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SuddenMovementModifierDuration;                           // 0x04C4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SuddenMovementModifierRestoreDuration;                    // 0x04C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04CC(0x0008) MISSED OFFSET
	bool                                               bEnableObserverTeamChat;                                  // 0x04D4(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bChangeTeamChannel;                                       // 0x04D5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3A];                                      // 0x04D6(0x003A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VoiceComponent"));

		return ptr;
	}


	void STATIC_UpdateVoiceChatLog();
	void STATIC_ServerTestAccessToken();
	void STATIC_ServerSetObserverTeamNum(int NewTeamNum);
	void STATIC_ServerSetObserverSquadIndex(int NewSquadIndex);
	void STATIC_ServerRestTeamChannelUrl();
	void STATIC_ServerLogVoicechatOptionUseage(TArray<struct FWuStringFloatPair> VoiceChatUseageLog, float PushTime, float TimeSpent);
	void STATIC_ClientSetChangeTeamChannel();
	void STATIC_ApplyTimedVolumeModifier(EVoiceChannelType ChannelType, float NewModifier, float Duration, float RestoreDuration);
};


// Class TslGame.VoiceLobbyComponent
// 0x00C0 (0x0550 - 0x0490)
class UVoiceLobbyComponent : public UVoiceBaseComponent
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0490(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VoiceLobbyComponent"));

		return ptr;
	}


	void STATIC_UpdatePosition();
	void STATIC_StopAudioInputCapture();
	void STATIC_StartAudioInputCapture(bool bLoopback);
	void STATIC_SetVoiceChannelType(EVoiceChannelType ChannelType);
	void STATIC_SetParticipantVolume(const struct FString& TargetUniqueId, int Volume);
	bool STATIC_SetParticipantMute(const struct FString& TargetUniqueId, bool bIsMuted);
	void STATIC_SetLocalVoiceOutputVolume(int UserSettingVolume);
	void STATIC_SetLocalVoiceOutputMuted(bool bIsMuted);
	void STATIC_SetLocalVoiceInputVolume(int UserSettingVolume);
	void STATIC_SetLocalVoiceInputMuted(bool bIsMuted);
	void STATIC_ServerLogin();
	void STATIC_ServerJoinTeamChannel();
	void STATIC_ServerJoinGlobalChannel();
	void STATIC_ResetTeamChannelJoinState();
	void STATIC_ResetLoginState();
	void STATIC_ResetGlobalChannelJoinState();
	void STATIC_ResetConnectionState();
	void STATIC_RefreshDevices();
	bool STATIC_IsParticipantMuted(const struct FString& TargetUniqueId);
	bool STATIC_IsCapturingAudioInput();
	EVoiceChannelType STATIC_GetVoiceChannelType();
	int STATIC_GetParticipantVolume(const struct FString& TargetUniqueId);
	float STATIC_GetLocalVoiceOutputVolume();
	bool STATIC_GetLocalVoiceOutputMuted();
	float STATIC_GetLocalVoiceInputVolume();
	bool STATIC_GetLocalVoiceInputMuted();
	void STATIC_ClientLogin(const struct FString& AccessToken);
	void STATIC_ClientLeaveTeamChannel();
	void STATIC_ClientLeaveGlobalChannel();
	void STATIC_ClientJoinTeamChannel(const struct FString& AccessToken);
	void STATIC_ClientJoinGlobalChannel(const struct FString& AccessToken);
	float STATIC_CalculateOutputVolumeFromModifiers();
	float STATIC_CalculateInputVolumeFromModifiers();
};


// Class TslGame.VoiceManager
// 0x0138 (0x0168 - 0x0030)
class UVoiceManager : public UObject
{
public:
	class UWorld*                                      World;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FVoiceConnectionInfo                        ConnectionInfo;                                           // 0x0040(0x0068)
	bool                                               bUseEphmeralChannel;                                      // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	struct FString                                     AuthId;                                                   // 0x00B0(0x0010) (ZeroConstructor)
	struct FString                                     AuthPwd;                                                  // 0x00C0(0x0010) (ZeroConstructor)
	int64_t                                            AccessTokenExpirationTime;                                // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Issuer;                                                   // 0x00D8(0x0010) (ZeroConstructor)
	struct FString                                     Key;                                                      // 0x00E8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	class USignInResponse*                             SignIn;                                                   // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKeyAddResponse*                             KeyAdd;                                                   // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKeyRevokeResponse*                          KeyRevoke;                                                // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UChannelResponse*>                    Channels;                                                 // 0x0120(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0130(0x0010) MISSED OFFSET
	TArray<class ATslPlayerController*>                PlayerControllers;                                        // 0x0140(0x0010) (ZeroConstructor, Transient)
	int                                                ProximalMaxRange;                                         // 0x0150(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ProximalClampingDistance;                                 // 0x0154(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ProximalDistanceModel;                                    // 0x0158(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x015C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.VoiceManager"));

		return ptr;
	}


	void STATIC_OnRevokeKeySuccess(class UVivoxResponse* Response);
	void STATIC_OnRevokeKeyFail(class UVivoxResponse* Response);
	void STATIC_OnChannelSuccess(class UVivoxResponse* Response);
	void STATIC_OnChannelFail(class UVivoxResponse* Response);
	void STATIC_OnAddKeySuccess(class UVivoxResponse* Response);
	void STATIC_OnAddKeyFail(class UVivoxResponse* Response);
};


// Class TslGame.WeaponAnimInfoComponent
// 0x00F0 (0x02F0 - 0x0200)
class UWeaponAnimInfoComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0200(0x0070) MISSED OFFSET
	struct FName                                       WeaponAttachPointPistol;                                  // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointRifle;                                   // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointThrowable;                               // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointMelee;                                   // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointShield;                                  // 0x0290(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USkeletalMeshComponent*                      MeshComponent;                                            // 0x0298(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Primary;                               // 0x02A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Secondary;                             // 0x02A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Sidearm;                               // 0x02B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Melee;                                 // 0x02B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslAccessoryComponent*                      CharacterAccessory_Thrown;                                // 0x02C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FName                                       WeaponLeftHandIKAttachPoint;                              // 0x02C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTslWeaponAnimInfo                          WeaponAnimInfo;                                           // 0x02D0(0x0020) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponAnimInfoComponent"));

		return ptr;
	}


	void STATIC_SetAccessorySlot(class UTslAccessoryComponent* NewAccessoryComponent, EAccessorySlot Slot);
	bool STATIC_HasWeaponLeftHandIKSocket(class ATslWeapon* Weapon);
	struct FTransform STATIC_GetWeaponLeftHandIKTransform(class ATslWeapon* Weapon);
	struct FTransform STATIC_GetWeaponHandIK_Right(class ATslWeapon* Weapon);
	struct FTransform STATIC_GetWeaponHandIK_Left(class ATslWeapon* Weapon);
	struct FTslWeaponAnimInfo STATIC_GetCurrentWeaponAnimInfo();
	class UTslAccessoryComponent* STATIC_GetAccessorySlot(EAccessorySlot Slot);
};


// Class TslGame.CharacterWeaponAnimInfoComponent
// 0x0040 (0x0330 - 0x02F0)
class UCharacterWeaponAnimInfoComponent : public UWeaponAnimInfoComponent
{
public:
	struct FName                                       WeaponAttachPointPistolDriving;                           // 0x02F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointPistolSitting;                           // 0x02F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointRifleDriving;                            // 0x0300(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointRifleSitting;                            // 0x0308(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointRifleAim;                                // 0x0310(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointThrowableDriving;                        // 0x0318(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponAttachPointMeleeDriving;                            // 0x0320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0328(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CharacterWeaponAnimInfoComponent"));

		return ptr;
	}

};


// Class TslGame.WeaponAudioData
// 0x0018 (0x0050 - 0x0038)
class UWeaponAudioData : public UDataAsset
{
public:
	class UAkAudioEvent*                               AmmoLowEvent;                                             // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               AmmoEmptyEvent;                                           // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   BulletCountMapIn;                                         // 0x0048(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponAudioData"));

		return ptr;
	}

};


// Class TslGame.WeaponClone
// 0x0028 (0x0058 - 0x0030)
class UWeaponClone : public UObject
{
public:
	class UMeshComponent*                              CharmMesh;                                                // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
	class UWeaponMeshComponent*                        WeaponMeshComponent;                                      // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponClone"));

		return ptr;
	}


	void STATIC_UpdateStatTrak();
	void STATIC_UpdateSkinData();
	void STATIC_UpdateMasteryItems();
	void STATIC_UpdateAttachment();
	void STATIC_OnUpdateStatTrakCheck();
};


// Class TslGame.WeaponProcessorComponent
// 0x0120 (0x0320 - 0x0200)
class UWeaponProcessorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0200(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponProcessorArmed;                                   // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0218(0x0078) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquippedWeaponsReplicated;                              // 0x0290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x02A0(0x0018) MISSED OFFSET
	TArray<class ATslWeapon*>                          EquippedWeapons;                                          // 0x02B8(0x0010) (Net, ZeroConstructor, Transient)
	TArray<class ATslWeapon*>                          PrevEquippedWeaponsForBackup;                             // 0x02C8(0x0010) (ZeroConstructor, Transient)
	struct FWeaponArmInfo                              WeaponArmInfo;                                            // 0x02D8(0x0005) (Net, Transient)
	struct FWeaponArmInfo                              WeaponArmInfo_OwnerOnly;                                  // 0x02DD(0x0005) (Net, Transient)
	bool                                               bPressedActionFire;                                       // 0x02E2(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x02E3(0x0005) MISSED OFFSET
	TArray<class AActor*>                              FakeProjectiles;                                          // 0x02E8(0x0010) (ZeroConstructor, Transient)
	class ATslWeapon*                                  EquippedLHWeapon;                                         // 0x02F8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x20];                                      // 0x0300(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponProcessorComponent"));

		return ptr;
	}


	void STATIC_ServerUnarmCurrentWeapon(unsigned char CurServerUpdateSeqNum, bool bNeedAnimation, EWeaponHand Hand, int WeapIndex);
	void STATIC_ServerArmWeapon(unsigned char CurServerUpdateSeqNum, int WeaponIndex, bool bNeedAnimation, const struct FVector& L, int A, int B);
	void STATIC_Server_ResyncWeaponArmInfo(const struct FWeaponArmInfo& OwnerArmInfo);
	void STATIC_OwnerClient_ResyncWeaponArmInfo(unsigned char ServerUpdateSeqNum);
	void STATIC_OnRep_WeaponArmInfo_OwnerOnly(const struct FWeaponArmInfo& OldArmInfo);
	void STATIC_OnRep_WeaponArmInfo(const struct FWeaponArmInfo& OldArmInfo);
	void STATIC_OnRep_EquippedWeapons(TArray<class ATslWeapon*> LastEquippedWeapons);
	void STATIC_OnCharacterRideVehicle(class ATslCharacter* Character);
	void STATIC_NotifyWeaponUpdate();
	bool STATIC_IsUnarmedWeapon(int WeaponIndex);
	bool STATIC_HasWeaponByIndex(int Index);
	bool STATIC_HasUnarmedWeapon();
	class ATslWeapon_Trajectory* STATIC_GetWeaponTrajectory();
	class ATslWeapon_Throwable* STATIC_GetWeaponThrowable();
	class ATslWeapon_Gun_Projectile* STATIC_GetWeaponProjectile();
	class ATslWeapon_Melee* STATIC_GetWeaponMelee();
	int STATIC_GetWeaponIndex();
	class ATslWeapon_Gun* STATIC_GetWeaponGun();
	class ATslWeapon* STATIC_GetWeaponByIndex(int Index, bool bSelectByShortcut);
	class ATslWeapon* STATIC_GetWeapon();
	int STATIC_GetUnarmedWeaponIndex();
	class ATslWeapon* STATIC_GetLeftHandWeapon();
	class ATslWeapon* STATIC_GetCurrentWeapon();
	class ATslWeapon* STATIC_FindWeapon(class UClass* WeaponClass);
	void STATIC_ClientSetLocalSpawnKitInitNumber(int InNum);
	void STATIC_Client_DestroyFakeProjectile(int FakeProjectileIndex);
};


// Class TslGame.WeaponsPenetrationConfig
// 0x02F8 (0x0330 - 0x0038)
class UWeaponsPenetrationConfig : public UDataAsset
{
public:
	TMap<TEnumAsByte<EPhysicalSurface>, struct FPhysicalMaterialPenetrationConfig> DefaultMaterialConfigs;                                   // 0x0038(0x0050) (Edit, ZeroConstructor)
	TMap<class UPhysicalMaterial*, struct FPhysicalMaterialPenetrationConfig> MaterialConfigOverrides;                                  // 0x0088(0x0050) (Edit, ZeroConstructor)
	TArray<class UPhysicalMaterial*>                   IgnoredMaterials;                                         // 0x00D8(0x0010) (Edit, ZeroConstructor)
	TMap<EWeaponClass, struct FWeaponPenetrationConfig> WeaponClassConfigs;                                       // 0x00E8(0x0050) (Edit, ZeroConstructor)
	TMap<TAssetPtr<class UClass>, struct FWeaponPenetrationConfig> WeaponConfigOverridesMap;                                 // 0x0138(0x0050) (Edit, ZeroConstructor)
	TMap<TEnumAsByte<EPhysicalSurface>, class UCurveFloat*> PenetrationPowerCurves;                                   // 0x0188(0x0050) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x01D8(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.BodyPenetratableZones
	unsigned char                                      UnknownData01[0x50];                                      // 0x0228(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.BodyPenetrationReceiveDamageZones
	unsigned char                                      UnknownData02[0x50];                                      // 0x0278(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.BodyPenetrationDisabledWeapons
	unsigned char                                      UnknownData03[0x50];                                      // 0x02C8(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.WeaponsPenetrationConfig.VehiclePenetrationDisabledWeapons
	float                                              DeflectionRange;                                          // 0x0318(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxSurfacesNum;                                           // 0x031C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinImpactAngleDeg;                                        // 0x0320(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDetectableHollowSize;                                  // 0x0324(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOutSpeed;                                              // 0x0328(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinWaterSpeed;                                            // 0x032C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WeaponsPenetrationConfig"));

		return ptr;
	}

};


// Class TslGame.WheelTrackManager
// 0x0088 (0x0470 - 0x03E8)
class AWheelTrackManager : public AActor
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      TexAtlasIndexCount;                                       // 0x03F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      TexAtlasRandomCount;                                      // 0x03F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03F2(0x0006) MISSED OFFSET
	TArray<class UPhysicalMaterial*>                   MaterialsToApply;                                         // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bUsePool;                                                 // 0x0408(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	float                                              DecalLifeSpan;                                            // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   DecalSize;                                                // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ProjectionSweepMin;                                       // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ProjectionSweepMax;                                       // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ProjectionSweepMargin;                                    // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class AInstancedDeferredDecalActor*                DecalActor;                                               // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              PatchLength;                                              // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PatchLengthMargin;                                        // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WheelToTerrainTraceMargin;                                // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	struct FVector4                                    BorderOpacityBiases;                                      // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              speedThreshold;                                           // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	TArray<struct FWheelTypeInfo>                      WheelTypeInfos;                                           // 0x0458(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                NumErrorCreatingDecalActor;                               // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                RenderPriority;                                           // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.WheelTrackManager"));

		return ptr;
	}

};


// Class TslGame.XBoxRichPresenceObserver
// 0x0090 (0x00C0 - 0x0030)
class UXBoxRichPresenceObserver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0030(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.XBoxRichPresenceObserver"));

		return ptr;
	}

};


// Class TslGame.ParachuteExperienceActor
// 0x0018 (0x0408 - 0x03F0)
class AParachuteExperienceActor : public ATslInteractableActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              TeleportMaxXYRadius;                                      // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TeleportZDistance;                                        // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParachuteItemID;                                          // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ParachuteExperienceActor"));

		return ptr;
	}


	void STATIC_StartTrainingFor(class ATslCharacter* TargetCharacter);
	void STATIC_OnInteract(class ATslCharacter* OtherCharacter);
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.TslVendingMachineActor
// 0x0138 (0x0528 - 0x03F0)
class ATslVendingMachineActor : public ATslInteractableActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class UDataTable*                                  SpawnRateDataTable;                                       // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EVendingMachineType                                VendingMachineType;                                       // 0x0400(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealth;                                                // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     DropRelativeLocation;                                     // 0x040C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              DropRangeRadius;                                          // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPickCount;                                             // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitTimeByPick;                                           // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitTimeByDamage;                                         // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitTimeByJackpot;                                        // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinVehicleSpeedToDeactivate;                              // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SoundOffset;                                              // 0x0430(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               DeactivatedByExceededMaxPickCountAudioEvent;              // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               DeactivatedByDamageAudioEvent;                            // 0x0448(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<EVendingMachineState, struct FText>           DeactivatedReasonTextMap;                                 // 0x0450(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<EDamageTypeCategory, float>                   DamageMultiplierByCategoryMap;                            // 0x04A0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UAkComponent*                                AkAudioComponent;                                         // 0x04F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	EVendingMachineState                               VendingMachineState;                                      // 0x04F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x17];                                      // 0x04F9(0x0017) MISSED OFFSET
	float                                              SpawnWeightTotal;                                         // 0x0510(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_Wait;                                         // 0x0518(0x0008) (Edit, BlueprintVisible, Transient, EditConst)
	int                                                PickCount;                                                // 0x0520(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0524(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslVendingMachineActor"));

		return ptr;
	}


	void STATIC_Reactivate();
	void STATIC_PlayAkAudioEvent(class UAkAudioEvent* InAkAudioEvent);
	void STATIC_OnVendingMachineStateChanged_BP(EVendingMachineState InVendingMachineState);
	void STATIC_OnRep_VendingMachineState();
	void STATIC_OnInteract(class ATslCharacter* OtherCharacter);
	bool STATIC_AllowInteract(class ATslCharacter* OtherCharacter);
};


// Class TslGame.TslInventoryAnimInstance
// 0x01C0 (0x0560 - 0x03A0)
class UTslInventoryAnimInstance : public UAnimInstance
{
public:
	struct FTransform                                  DefaultSlotPrimary_Male_CP;                               // 0x03A0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Male_CP;                             // 0x03D0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotPrimary_Female_CP;                             // 0x0400(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  DefaultSlotSecondary_Female_CP;                           // 0x0430(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SlotPrimary_Location_CP;                                  // 0x0460(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotSecondary_Location_CP;                                // 0x046C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotPrimary_Offset_CP;                                    // 0x0478(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     SlotSecondary_Offset_CP;                                  // 0x0484(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SlotPrimary_Rotation_CP;                                  // 0x0490(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    SlotSecondary_Rotation_CP;                                // 0x049C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class APawn*                                       OwnerPawn;                                                // 0x04A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ALobbyCharacter*                             LobbyCharacterRerefence;                                  // 0x04B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacterProxy*                          InventoryCharacter;                                       // 0x04B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UWeaponAnimInfoComponent*                    WeaponAnimInfoComponent;                                  // 0x04C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FTslWeaponAnimInfo                          WeaponAnimInfo;                                           // 0x04C8(0x0020) (BlueprintVisible, BlueprintReadOnly, Transient)
	int                                                LobbyCharacterPosition;                                   // 0x04E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04EC(0x0004) MISSED OFFSET
	TAssetPtr<class UDataTable>                        CharacterAnimationDataTable;                              // 0x04F0(0x0020) (Edit)
	class UDataTable*                                  LoadedCharacterAnimationDataTable;                        // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0518(0x0020) MISSED OFFSET
	float                                              LobbyCharacterBlendTime;                                  // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x053C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLobbyEmotePlay;                                         // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EOutGameMontageState                               OutGameMontageState;                                      // 0x0550(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	EWeaponClass                                       LobbyAnimationClass;                                      // 0x0551(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bShowLobbyAnimation;                                      // 0x0552(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xD];                                       // 0x0553(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryAnimInstance"));

		return ptr;
	}

};


// Class TslGame.TslInventoryUIDelegates
// 0x0000 (0x0030 - 0x0030)
class UTslInventoryUIDelegates : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryUIDelegates"));

		return ptr;
	}

};


// Class TslGame.TslItemDestructionBehavior
// 0x0008 (0x0040 - 0x0038)
class UTslItemDestructionBehavior : public UDataAsset
{
public:
	float                                              HealthMax;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DestructionDelay;                                         // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemDestructionBehavior"));

		return ptr;
	}

};


// Class TslGame.TslItemDestruction_Explosion
// 0x0030 (0x0070 - 0x0040)
class UTslItemDestruction_Explosion : public UTslItemDestructionBehavior
{
public:
	float                                              ExplosionDamage;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionRadius;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 ExplosionDamageCurve;                                     // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ExplosionDamageType;                                      // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ExplosionTemplate;                                        // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ExplosionTemplateInAir;                                   // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionLifeSpan;                                        // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemDestruction_Explosion"));

		return ptr;
	}

};


// Class TslGame.TslItemDestruction_Molotov
// 0x0010 (0x0080 - 0x0070)
class UTslItemDestruction_Molotov : public UTslItemDestruction_Explosion
{
public:
	class UClass*                                      EffectControllerClass;                                    // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FireSound;                                                // 0x0078(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemDestruction_Molotov"));

		return ptr;
	}

};


// Class TslGame.TslSlotWidgetBaseInterface
// 0x0000 (0x0030 - 0x0030)
class UTslSlotWidgetBaseInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSlotWidgetBaseInterface"));

		return ptr;
	}

};


// Class TslGame.TslItemDragDropOperation
// 0x0078 (0x0108 - 0x0090)
class UTslItemDragDropOperation : public UDragDropOperation
{
public:
	class UItem*                                       DragDroppingItem;                                         // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              DragDroppingEquipableItem;                                // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWeaponItem*                                 DragDroppingWeaponItem;                                   // 0x00A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UThrowableItem*                              DragDroppingThrowableItem;                                // 0x00A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAttachableItem*                             DragDroppingAttachableItem;                               // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    Container;                                                // 0x00B8(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotInterface>             Slot;                                                     // 0x00C8(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D8(0x0018) MISSED OFFSET
	TArray<TScriptInterface<class USlotContainerInterface>> OtherContainerStack;                                      // 0x00F0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemDragDropOperation"));

		return ptr;
	}

};


// Class TslGame.TslItemOffsetDataAsset
// 0x0010 (0x0048 - 0x0038)
class UTslItemOffsetDataAsset : public UDataAsset
{
public:
	TArray<struct FItemOffsetPerWeaponData>            ItemOffsetPerWeaponConfig;                                // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemOffsetDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslItemRequestManager
// 0x04D0 (0x0500 - 0x0030)
class UTslItemRequestManager : public UObject
{
public:
	class UThrowableItemDataAsset*                     ProjectileConfig;                                         // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAimDistance;                                           // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxThrowDistance;                                         // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTargetDistance;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RequestDuration;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CompletedRequestDuration;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowDelay;                                               // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowCooldownTime;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerCapsuleInflation;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTargetAngle;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLocationPrediction;                                   // 0x005C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTraceForCollision;                                       // 0x005D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005E(0x0002) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, int>                            ItemIdStackCountMap;                                      // 0x0070(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<ERadioMessageCategory, struct FName>          RadioMessageToItemIdMap;                                  // 0x00C0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               HealItemIdPriority;                                       // 0x0110(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     ItemSelectionWidgetName;                                  // 0x0120(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FText                                       TargetIsTooFarAwayText;                                   // 0x0130(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       NoItemText;                                               // 0x0148(0x0018) (Edit, DisableEditOnInstance)
	struct FName                                       ThrowSocketName;                                          // 0x0160(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x398];                                     // 0x0168(0x0398) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemRequestManager"));

		return ptr;
	}


	void STATIC_OnRecvMsgNeedAmmo(class ATslPlayerState* PlayerState, int MsgIndex, const struct FName& AmmoItemID);
	void STATIC_OnRecvMsg(class ATslPlayerState* PlayerState, int MsgIndex);
	void STATIC_OnInputReleased();
	void STATIC_OnInputPressed();
	void STATIC_OnHealItemSelectionChangedPad(const struct FName& ItemID);
};


// Class TslGame.TslJukeBox
// 0x0060 (0x0448 - 0x03E8)
class ATslJukeBox : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	class USkeletalMesh*                               BrokenJukeBoxClosed;                                      // 0x03F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USkeletalMesh*                               BrokenJukeBoxOpened;                                      // 0x03F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      JukeBoxAnimClass;                                         // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Health;                                                   // 0x0408(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HealthMax;                                                // 0x040C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinSpeed;                                                 // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BrokenDelay;                                              // 0x0414(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0418(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UJukeBoxInteractionComponent*                InteractionComponent;                                     // 0x0420(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslJukeBoxRadioComponent*                   RadioComponent;                                           // 0x0428(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTslJukeBoxEffectComponent*                  EffectComponent;                                          // 0x0430(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FJukeBoxState                               CurrentState;                                             // 0x0438(0x0003) (Net, IsPlainOldData)
	bool                                               bPowerOn;                                                 // 0x043B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsBroken;                                                // 0x043C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x043D(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslJukeBox"));

		return ptr;
	}


	void STATIC_ToggleRadioPower();
	void STATIC_OnRep_JukeBoxState();
};


// Class TslGame.TslJukeBoxAnimInstance
// 0x0010 (0x03B0 - 0x03A0)
class UTslJukeBoxAnimInstance : public UAnimInstance
{
public:
	EJukeBoxAnimState                                  CurrentState;                                             // 0x03A0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	class ATslJukeBox*                                 JukeBox;                                                  // 0x03A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslJukeBoxAnimInstance"));

		return ptr;
	}

};


// Class TslGame.TslJukeBoxEffectComponent
// 0x0020 (0x0220 - 0x0200)
class UTslJukeBoxEffectComponent : public UActorComponent
{
public:
	class UMeshComponent*                              MeshComponent;                                            // 0x0200(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslParticle*                                ExplosionEffect;                                          // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      Explosion;                                                // 0x0210(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslJukeBoxEffectComponent"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker
// 0x0008 (0x0038 - 0x0030)
class UTslKeyHintChecker : public UObject
{
public:
	bool                                               bCurrState;                                               // 0x0030(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsChanged;                                               // 0x0031(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0032(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Menu
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Menu : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Menu"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Parachuting
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Parachuting : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Parachuting"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Character
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Character : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Character"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Driver
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Driver : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Driver"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Motorglider
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Motorglider : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Motorglider"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Rider
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Rider : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Rider"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_WeaponUse
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_WeaponUse : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_WeaponUse"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_WeaponChange
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_WeaponChange : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_WeaponChange"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ADS : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ADS"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Aim
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Aim : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Aim"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_8x15x
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ADS_8x15x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ADS_8x15x"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_6x
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ADS_6x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ADS_6x"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_1x2x3x
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ADS_1x2x3x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ADS_1x2x3x"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_CantedSight
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ADS_CantedSight : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ADS_CantedSight"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ADS_IronSight
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ADS_IronSight : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ADS_IronSight"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Throwing
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Throwing : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Throwing"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Spiketrap
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Spiketrap : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Spiketrap"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_JerryCan
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_JerryCan : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_JerryCan"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Melee
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Melee : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Melee"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_MeleeThrow
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_MeleeThrow : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_MeleeThrow"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Heal
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Heal : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Heal"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_Swimming
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_Swimming : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_Swimming"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_TeamSpectating
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_TeamSpectating : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_TeamSpectating"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_KillerSpectating
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_KillerSpectating : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_KillerSpectating"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_WorldMap
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_WorldMap : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_WorldMap"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_FreefallNew
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_FreefallNew : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_FreefallNew"));

		return ptr;
	}

};


// Class TslGame.TslKeyHintChecker_ParachuteNew
// 0x0000 (0x0038 - 0x0038)
class UTslKeyHintChecker_ParachuteNew : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKeyHintChecker_ParachuteNew"));

		return ptr;
	}

};


// Class TslGame.TslGamepadKeyHintWidget
// 0x0088 (0x0478 - 0x03F0)
class UTslGamepadKeyHintWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	TArray<class UTslGamepadKeyHintSet*>               KeyHintSetCache;                                          // 0x03F8(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FUmgWidgetBinder_Gerneral                   HintSizeBox_Binder;                                       // 0x0408(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   HintSetSwitcher_Binder;                                   // 0x0428(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FTslKeyHintData>                     KeyHintDatas;                                             // 0x0448(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	EGamepadPresets                                    PreviewPresetTypeInEditor;                                // 0x0458(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	EPreviewPlatformIconType                           PreviewPlatformIconType;                                  // 0x0459(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x045A(0x0006) MISSED OFFSET
	class UDataTable*                                  KeyHintSetTable_PresetA;                                  // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  KeyHintSetTable_PresetB;                                  // 0x0468(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  KeyHintSetTable_PresetC;                                  // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadKeyHintWidget"));

		return ptr;
	}


	void STATIC_UpdateHintSizeBoxPosition();
	void STATIC_OnWidgetShowChangedPad(const struct FString& WidgetName, EWidgetShowType ShowType, class UObject* OptionalParam, class ATslBaseHUD* BaseHUD, bool bWidgetNewShow);
	void STATIC_OnStanceChanged(TEnumAsByte<EStanceMode> OldStance, TEnumAsByte<EStanceMode> NewStance);
	void STATIC_OnGameUserSettingApplied();
};


// Class TslGame.TslLevelScriptActor
// 0x00B0 (0x04A0 - 0x03F0)
class ATslLevelScriptActor : public ALevelScriptActor
{
public:
	TArray<struct FWeatherLevelInfo>                   WeatherLevelInfos;                                        // 0x03F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UMaterialParameterCollection*                GlobalMPC;                                                // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SelectedWeatherLevelIndex;                                // 0x0408(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                PrevWeatherLevelIndex;                                    // 0x040C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RepDistanceModifier;                                      // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8C];                                      // 0x0414(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLevelScriptActor"));

		return ptr;
	}


	void STATIC_RequestReplayALevelWeatherEvent(const struct FString& EventID);
	void STATIC_RecordWeatherAsCustomEvent();
	void STATIC_OnRep_SelectedWeatherIndex();
	void STATIC_OnRep_PrevWeatherLevelIndex();
	void STATIC_EnumerateReplayLevelEvents();
};


// Class TslGame.TslLightningController
// 0x0040 (0x0428 - 0x03E8)
class ATslLightningController : public AActor
{
public:
	float                                              DistanceMin;                                              // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              DistanceMax;                                              // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              IntervalMin;                                              // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              IntervalMid;                                              // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              IntervalMax;                                              // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UClass*                                      EffectClass;                                              // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ThunderZ;                                                 // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               AkThunderSound;                                           // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      bDebugMessage : 1;                                        // 0x0418(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0419(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLightningController"));

		return ptr;
	}


	void STATIC_NetMulti_CreateThunder(float InAngle, float InDistance);
};


// Class TslGame.TslLivingThing
// 0x0078 (0x0460 - 0x03E8)
class ATslLivingThing : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	bool                                               bIsEditorOnlyActor;                                       // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedsServerSpawning;                                     // 0x03F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03FA(0x0002) MISSED OFFSET
	float                                              EscapeTime;                                               // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ELivingThingThreatLevel                            ThreatLevel;                                              // 0x0400(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	int                                                NetGUID;                                                  // 0x0404(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpawnTimeSeconds;                                         // 0x0408(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestroyTimeSeconds;                                       // 0x040C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  SpawnTransform;                                           // 0x0410(0x0030) (BlueprintVisible, IsPlainOldData)
	struct FVector4                                    LastDistanceBasedEventParams;                             // 0x0440(0x0010) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    ReceiveDistanceBasedEventDelgate;                         // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThing"));

		return ptr;
	}


	void STATIC_ReceivedThreatLevel(ELivingThingThreatLevel InThreatLevel, float InServerTimeSeconds);
	void STATIC_ReceivedEvent(float ServerTimeSeconds, unsigned char InEventID, TArray<unsigned char> Params);
	void STATIC_ReceivedDistanceBasedEventFromServer(float ServerTimeSeconds, EDistanceBasedEvent EventType, const struct FVector4& EventCenterAndRadius);
	void STATIC_ProcessThreatLevel(unsigned char InEventID, float InServerTimeSeconds, ELivingThingThreatLevel* OutThreatLevel);
	bool STATIC_IsAlive();
	void STATIC_GotOutOfBounds();
	float STATIC_GetServerTimeSeconds();
	float STATIC_GetElapsedServerTimeSeconds(float InServerTimeSeconds);
	void STATIC_EnableDistanceBasedEvent(class USceneComponent* InSceneComp, const struct FName& InSocketName);
	void STATIC_DisableDistanceBasedEvent();
	void STATIC_BeSpawned(float ServerSpawnTime);
	void STATIC_BeKilled(float ServerDestroyTime);
};


// Class TslGame.TslLivingThingBaseBP
// 0x00B0 (0x0510 - 0x0460)
class ATslLivingThingBaseBP : public ATslLivingThing
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0460(0x0008) MISSED OFFSET
	class UArrowComponent*                             MeshFront;                                                // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bNeedsToSnapGround;                                       // 0x0478(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEscapeToAir;                                             // 0x0479(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEscapeSequence;                                          // 0x047A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x047B(0x0001) MISSED OFFSET
	struct FVector                                     EscapeDirection;                                          // 0x047C(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     EscapeStartLocation;                                      // 0x0488(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0494(0x0004) MISSED OFFSET
	TArray<struct FVector>                             EscapePaths;                                              // 0x0498(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<float>                                      EscapeDists;                                              // 0x04A8(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              EscapeStartTime;                                          // 0x04B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapeEndTime;                                            // 0x04BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04C0(0x0004) MISSED OFFSET
	struct FVector                                     ImpactImpulse;                                            // 0x04C4(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              EscapeAverageSpeed;                                       // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapeRotationSpeed;                                      // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapeBoundsRadius_Ground;                                // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapePathFindingStepSize_Ground;                         // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapeBoundsRadius_Air;                                   // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapeStepHeight;                                         // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EscapeRandomDirectionHalfAngle;                           // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   EscapeRandomSpeedRange;                                   // 0x04EC(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              EscapeRandomSpeedModifier;                                // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x04F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThingBaseBP"));

		return ptr;
	}

};


// Class TslGame.TslLivingThingCluster
// 0x0248 (0x0630 - 0x03E8)
class ATslLivingThingCluster : public AActor
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x03E8(0x00C0) MISSED OFFSET
	TArray<struct FLivingThingStaticRepInfo>           LivingThingStaticRepInfos;                                // 0x04A8(0x0010) (Net, ZeroConstructor)
	TArray<struct FLivingThingVolumeInfo>              LivingThingVolumeInfos;                                   // 0x04B8(0x0010) (Net, ZeroConstructor)
	TArray<struct FLivingThingInfo>                    LivingThingStaticInfos;                                   // 0x04C8(0x0010) (ZeroConstructor)
	TArray<struct FLivingThingInfo>                    LivingThingDynamicInfos;                                  // 0x04D8(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData01[0x148];                                     // 0x04E8(0x0148) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThingCluster"));

		return ptr;
	}


	void STATIC_OnRep_LivingThingVolumeInfos();
	void STATIC_OnRep_LivingThingStaticRepInfos();
	void STATIC_OnRep_LivingThingDynamicInfos();
	void STATIC_MulticastSpawn(int InNetGUID, float InSpawnTimeSeconds, const struct FVector& InSpawnLocation, const struct FRotator& InSpawnRotator, class UClass* InLivingActorClass);
	void STATIC_MulticastReceiveEventWithParams(TArray<int> InNetGUIDArray, float ServerTimeSeconds, unsigned char InEventID, TArray<unsigned char> Params);
	void STATIC_MulticastReceiveEvent(TArray<int> InNetGUIDArray, float ServerTimeSeconds, unsigned char InEventID);
	void STATIC_MulticastMassivlySpawnFromVolume(class ATslLivingThingVolume* InLivingThingVolume, int InStartNetGUID, float InSpawnTimeSeconds, int InGeneratedSpawnInfoIndex);
	void STATIC_MulticastMassivlySpawn(const struct FLivingThingMassiveSpawnInfo& MassiveSpawnInfo);
	void STATIC_MulticastKill(int InNetGUID, float DestroyTimeSeconds);
	bool STATIC_IsAlive(int InNetGUID);
	void STATIC_FillTestSpawnData(int Num, float Radius, class UClass* ActorClass);
};


// Class TslGame.TslLivingThingManager
// 0x00C8 (0x04B0 - 0x03E8)
class ATslLivingThingManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0xC8];                                      // 0x03E8(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThingManager"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslLivingThingVolume
// 0x0010 (0x0430 - 0x0420)
class ATslLivingThingVolume : public AVolume
{
public:
	TArray<struct FLivingThingMassiveSpawnInfo>        GeneratedSpawnInfos;                                      // 0x0420(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThingVolume"));

		return ptr;
	}

};


// Class TslGame.TslLivingThingPlacingVolume
// 0x0008 (0x0438 - 0x0430)
class ATslLivingThingPlacingVolume : public ATslLivingThingVolume
{
public:
	int                                                MassiveSpawnCallCount;                                    // 0x0430(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                GeneratedSpawnInfoCount;                                  // 0x0434(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThingPlacingVolume"));

		return ptr;
	}


	void STATIC_CollectPlaceableActors();
};


// Class TslGame.TslLivingThingSpawningVolume
// 0x0070 (0x04A0 - 0x0430)
class ATslLivingThingSpawningVolume : public ATslLivingThingVolume
{
public:
	int                                                MassiveSpawnCallCount;                                    // 0x0430(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                GeneratedSpawnInfoCount;                                  // 0x0434(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bGlobalBounds;                                            // 0x0438(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	struct FBox                                        GlobalBounds;                                             // 0x043C(0x001C) (Edit, IsPlainOldData)
	bool                                               bForceUseGridCluster;                                     // 0x0458(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              KillZ;                                                    // 0x045C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              KillNormalZThreshold;                                     // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBox                                        GeneratedBounds;                                          // 0x0464(0x001C) (IsPlainOldData)
	TArray<struct FLivingThingSpawnRatio>              SpawnRatioInfos;                                          // 0x0480(0x0010) (Edit, ZeroConstructor)
	float                                              PopulationPerTenSquareMeters;                             // 0x0490(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RandomSeed;                                               // 0x0494(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RepSpanDistance;                                          // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseDynamicSpawning;                                      // 0x049C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x049D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLivingThingSpawningVolume"));

		return ptr;
	}


	void STATIC_Respawn();
	void STATIC_GenerateSpawnInfos();
	void STATIC_DumpSpawnInfos();
};


// Class TslGame.TslLobbyCharacterAnimationDataTable
// 0x0000 (0x0088 - 0x0088)
class UTslLobbyCharacterAnimationDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyCharacterAnimationDataTable"));

		return ptr;
	}

};


// Class TslGame.TslLobbyWeapon
// 0x0030 (0x0418 - 0x03E8)
class ATslLobbyWeapon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	class UWeaponMeshComponent*                        Mesh3P;                                                   // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	EWeaponClass                                       WeaponClassEnum;                                          // 0x0400(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	float                                              WeaponIconRatio;                                          // 0x0404(0x0004) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      WeaponClass;                                              // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMeshComponent*                              CharmMesh;                                                // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLobbyWeapon"));

		return ptr;
	}


	class UWeaponMeshComponent* STATIC_GetWeaponMeshComponent();
	class UClass* STATIC_GetWeaponClass();
};


// Class TslGame.TslPersistentUser
// 0x01C0 (0x01F0 - 0x0030)
class UTslPersistentUser : public USaveGame
{
public:
	struct FTslPersistantData                          PersistantData;                                           // 0x0030(0x01A0) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x20];                                      // 0x01D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPersistentUser"));

		return ptr;
	}

};


// Class TslGame.TslLocalPlayer
// 0x0008 (0x0298 - 0x0290)
class UTslLocalPlayer : public ULocalPlayer
{
public:
	class UTslPersistentUser*                          PersistentUser;                                           // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslLocalPlayer"));

		return ptr;
	}

};


// Class TslGame.TslMenuItemWidgetStyle
// 0x01B8 (0x01F0 - 0x0038)
class UTslMenuItemWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslMenuItemStyle                           MenuItemStyle;                                            // 0x0038(0x01B8) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMenuItemWidgetStyle"));

		return ptr;
	}

};


// Class TslGame.TslMenuSoundsWidgetStyle
// 0x0038 (0x0070 - 0x0038)
class UTslMenuSoundsWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslMenuSoundsStyle                         SoundsStyle;                                              // 0x0038(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMenuSoundsWidgetStyle"));

		return ptr;
	}

};


// Class TslGame.TslMenuWidgetStyle
// 0x0218 (0x0250 - 0x0038)
class UTslMenuWidgetStyle : public USlateWidgetStyleContainerBase
{
public:
	struct FTslMenuStyle                               MenuStyle;                                                // 0x0038(0x0218) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMenuWidgetStyle"));

		return ptr;
	}

};


// Class TslGame.TslModifyDamageDataAsset
// 0x00F0 (0x0128 - 0x0038)
class UTslModifyDamageDataAsset : public UDataAsset
{
public:
	TMap<EDamageTypeCategory, float>                   PreDamageRatio;                                           // 0x0038(0x0050) (Edit, ZeroConstructor)
	TMap<EDamageTypeCategory, float>                   PostDamageRatio;                                          // 0x0088(0x0050) (Edit, ZeroConstructor)
	TMap<EDamageTypeCategory, float>                   DamageReflectanceToVehicle;                               // 0x00D8(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslModifyDamageDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslModularBuilding
// 0x0100 (0x04E8 - 0x03E8)
class ATslModularBuilding : public AActor
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x03E8(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslModularBuilding"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslNetDebugDraw
// 0x0050 (0x0438 - 0x03E8)
class ATslNetDebugDraw : public AActor
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x03E8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNetDebugDraw"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslNewPathFollowingComponent
// 0x0020 (0x04E0 - 0x04C0)
class UTslNewPathFollowingComponent : public UPathFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x04C0(0x0004) MISSED OFFSET
	float                                              maxCheckDis;                                              // 0x04C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              maxCheckDisTime;                                          // 0x04C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04CC(0x0004) MISSED OFFSET
	bool                                               isUseFixedPos;                                            // 0x04D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04D1(0x0003) MISSED OFFSET
	float                                              PlayerHalfHeight;                                         // 0x04D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerNewHalfHeight;                                      // 0x04D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTransferDis;                                           // 0x04DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewPathFollowingComponent"));

		return ptr;
	}

};


// Class TslGame.TslNpcAnimDataAsset
// 0x0000 (0x0038 - 0x0038)
class UTslNpcAnimDataAsset : public UDataAsset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcAnimDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterAnimDataAsset
// 0x02B8 (0x02F0 - 0x0038)
class UTslNpcCharacterAnimDataAsset : public UTslNpcAnimDataAsset
{
public:
	struct FCustomAnimData                             Respawn;                                                  // 0x0038(0x0088) (Edit)
	struct FCustomAnimData                             Fire1;                                                    // 0x00C0(0x0088) (Edit)
	struct FCustomAnimData                             Fire2;                                                    // 0x0148(0x0088) (Edit)
	struct FCustomAnimData                             Fire3;                                                    // 0x01D0(0x0088) (Edit)
	class UAnimSequenceBase*                           Idle1;                                                    // 0x0258(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           Idle2;                                                    // 0x0260(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SprintF1;                                                 // 0x0268(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SprintF2;                                                 // 0x0270(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SprintF3;                                                 // 0x0278(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             WalkBlendSpace;                                           // 0x0280(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             RunBlendSpace;                                            // 0x0288(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             SprintBlendSpace;                                         // 0x0290(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPreBlendSpace;                                   // 0x0298(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackBlendSpace;                                      // 0x02A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPostBlendSpace;                                  // 0x02A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownFront;                                           // 0x02B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownBack;                                            // 0x02B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownLeft;                                            // 0x02C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           KnockdownRight;                                           // 0x02C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           GetupFront;                                               // 0x02D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           GetupBack;                                                // 0x02D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           GetupLeft;                                                // 0x02E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           GetupRight;                                               // 0x02E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterAnimDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterDamageAnimDataAsset
// 0x0430 (0x0468 - 0x0038)
class UTslNpcCharacterDamageAnimDataAsset : public UTslNpcAnimDataAsset
{
public:
	TArray<struct FCustomAnimData>                     HitBody_Forward;                                          // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_Backward;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_Left;                                             // 0x0058(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_Right;                                            // 0x0068(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_ForwardRight;                                     // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_BackwardRight;                                    // 0x0088(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_BackwardLeft;                                     // 0x0098(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitBody_ForwardLeft;                                      // 0x00A8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Forward;                                          // 0x00B8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Backward;                                         // 0x00C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Left;                                             // 0x00D8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_Right;                                            // 0x00E8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_ForwardRight;                                     // 0x00F8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_BackwardRight;                                    // 0x0108(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_BackwardLeft;                                     // 0x0118(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomAnimData>                     HitHead_ForwardLeft;                                      // 0x0128(0x0010) (Edit, ZeroConstructor)
	struct FCustomAnimData                             Death_Forward;                                            // 0x0138(0x0088) (Edit)
	struct FCustomAnimData                             DeathHead_Forward;                                        // 0x01C0(0x0088) (Edit)
	struct FCustomAnimData                             DeathLegs_Forward;                                        // 0x0248(0x0088) (Edit)
	struct FCustomAnimData                             Death_Backward;                                           // 0x02D0(0x0088) (Edit)
	struct FCustomAnimData                             DeathHead_Backward;                                       // 0x0358(0x0088) (Edit)
	struct FCustomAnimData                             DeathLegs_Backward;                                       // 0x03E0(0x0088) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterDamageAnimDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslNpcAnimInstance
// 0x0038 (0x03D8 - 0x03A0)
class UTslNpcAnimInstance : public UAnimInstance
{
public:
	class USkeletalMeshComponent*                      OwnerMesh;                                                // 0x03A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UAnimMontage*>                        AnimMontageList;                                          // 0x03A8(0x0010) (ZeroConstructor, Transient)
	class UAnimMontage*                                DefaultMontage[0x2];                                      // 0x03B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                DefaultMontageIndex;                                      // 0x03C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	class UTslNpcAnimDataAsset*                        AnimDataAsset;                                            // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcAnimInstance"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterAnimInstance
// 0x0230 (0x0608 - 0x03D8)
class UTslNpcCharacterAnimInstance : public UTslNpcAnimInstance
{
public:
	class UTslNpcCharacterAnimDataAsset*               CharacterAnimDataAsset;                                   // 0x03D8(0x0008) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	class ATslNpcCharacter*                            OwnerCharacter;                                           // 0x03E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimMontage*                                UpperBodyMontageList[0x2];                                // 0x03E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimMontage*                                FullBodyInstanceMontage;                                  // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimMontage*                                UpperBodyInstanceMontage;                                 // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimMontage*                                LowerBodyInstanceMontage;                                 // 0x0408(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBlendSpaceBase*                             WalkBlendSpace;                                           // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UBlendSpaceBase*                             RunBlendSpace;                                            // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UBlendSpaceBase*                             SprintBlendSpace;                                         // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPreBlendSpace;                                   // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackBlendSpace;                                      // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UBlendSpaceBase*                             KnockbackPostBlendSpace;                                  // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              WalkSpeedRatio;                                           // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              WalkSpeedRatioLowerRange;                                 // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WalkSpeedRatioUpperRange;                                 // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RunSpeedRatio;                                            // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              RunSpeedRatioLowerRange;                                  // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RunSpeedRatioUpperRange;                                  // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxRunSpeed;                                              // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintSpeedRatio;                                         // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              SprintSpeedRatioLowerRange;                               // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintSpeedRatioUpperRange;                               // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxSprintSpeed;                                           // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FPoseSnapshot                               SavedPoseSnapshot;                                        // 0x0470(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FAlphaBlend                                 PoseSnapshotBlendOut;                                     // 0x04A8(0x0038) (Transient)
	float                                              PoseSnapshotWeight;                                       // 0x04E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                UpperBodyMontageIndex;                                    // 0x04E4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              UpperBodyWeight;                                          // 0x04E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LowerBodyWeight;                                          // 0x04EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FAlphaBlend                                 UpperBodyBlendIn;                                         // 0x04F0(0x0038) (Transient)
	struct FAlphaBlend                                 UpperBodyBlendOut;                                        // 0x0528(0x0038) (Transient)
	struct FAlphaBlend                                 LowerBodyBlendIn;                                         // 0x0560(0x0038) (Edit)
	struct FAlphaBlend                                 LowerBodyBlendOut;                                        // 0x0598(0x0038) (Edit)
	float                                              MovingThreshold;                                          // 0x05D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MoveVelocity;                                             // 0x05D4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	float                                              Speed2D;                                                  // 0x05E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              Direction;                                                // 0x05E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              LocalDamageDirYaw;                                        // 0x05E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DamageDirYaw;                                             // 0x05EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FVector                                     FloorNormal;                                              // 0x05F0(0x000C) (Transient, IsPlainOldData)
	float                                              FloorSlopeAngle;                                          // 0x05FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ENpcCharacterStateType                             CharacterAnimType;                                        // 0x0600(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	ENpcWalkingSpeedType                               WalkingSpeedType;                                         // 0x0601(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ENpcDirection                                      PelvisBoneDirection;                                      // 0x0602(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsMoving;                                                // 0x0603(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bIsValidUpperBody;                                        // 0x0604(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bIsKnockback;                                             // 0x0605(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsKnockdown;                                             // 0x0606(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsGetup;                                                 // 0x0607(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterAnimInstance"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacter
// 0x01C0 (0x09F0 - 0x0830)
class ATslNpcCharacter : public ACharacter
{
public:
	class UTslNpcCharacterState_Base*                  StateList[0x8];                                           // 0x0830(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslNpcCharacterState_Base*                  CurrentState;                                             // 0x0870(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UPhysicsAsset*                               DyingPhysicsAsset;                                        // 0x0878(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTslNpcDamageConfig*                         DamageConfig;                                             // 0x0880(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FNpcMeleeAttackInfo                         MeleeAttackInfo[0x3];                                     // 0x0888(0x0040) (Edit)
	int                                                MaxFireMode;                                              // 0x0948(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x094C(0x0004) MISSED OFFSET
	class UTslNpcCharacterMovement*                    NpcCharacterMovement;                                     // 0x0950(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              CorpseLifeSpan;                                           // 0x0958(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x095C(0x0004) MISSED OFFSET
	class UTslNpcCharacterAnimDataAsset*               CharacterAnimDataAsset;                                   // 0x0960(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTslNpcCharacterDamageAnimDataAsset*         DamageAnimDataAsset;                                      // 0x0968(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FireModeIndex;                                            // 0x0970(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	ENpcCharacterStateType                             StateType;                                                // 0x0974(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	ERetriggerCounter                                  StateTypeCounter;                                         // 0x0975(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0976(0x0002) MISSED OFFSET
	TArray<struct FNpcCustomAnimInfo>                  SavedCustomAnimList;                                      // 0x0978(0x0010) (ZeroConstructor, Transient)
	TArray<struct FNPCDrawMovingInfo>                  DrawMovingInfo;                                           // 0x0988(0x0010) (ZeroConstructor, Transient)
	int                                                DrawMovingInfoMaxCounter;                                 // 0x0998(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x099C(0x0004) MISSED OFFSET
	class AActor*                                      FocusActor;                                               // 0x09A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RagdollLinearVelocity;                                    // 0x09A8(0x000C) (Transient, IsPlainOldData)
	float                                              HitImpulseRemainedTime;                                   // 0x09B4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              HitImpulseDuration;                                       // 0x09B8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              HitImpulseWeight;                                         // 0x09BC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       HitImpulseBoneName;                                       // 0x09C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NextStateRemainedTime;                                    // 0x09C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x09CC(0x0014) MISSED OFFSET
	struct FName                                       HitBoneName;                                              // 0x09E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	uint16_t                                           HitBoneIndex;                                             // 0x09E8(0x0002) (Net, ZeroConstructor, Transient, IsPlainOldData)
	uint16_t                                           Health;                                                   // 0x09EA(0x0002) (Edit, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      DamageDirYaw;                                             // 0x09EC(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EWeaponClass                                       AttackerWeaponClass;                                      // 0x09ED(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsDead;                                                  // 0x09EE(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsRagdoll;                                               // 0x09EF(0x0001) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacter"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterMovement
// 0x0070 (0x0990 - 0x0920)
class UTslNpcCharacterMovement : public UCharacterMovementComponent
{
public:
	float                                              MaxRunSpeed;                                              // 0x0920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSprintSpeed;                                           // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocusActorMinDistanceForRotation;                         // 0x0928(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FocusActorMinDistanceSqrForRotation;                      // 0x092C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovingThreshold;                                          // 0x0930(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0934(0x0004) MISSED OFFSET
	class UCurveFloat*                                 AvoidanceSpeedScaleCurve;                                 // 0x0938(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 TurnSpeedScaleCurve;                                      // 0x0940(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ChangeSpeedRatioOnMoveBlocked;                            // 0x0948(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SavedMaxSpeed;                                            // 0x094C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              Speed2D;                                                  // 0x0950(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              VelocityDirection;                                        // 0x0954(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslNpcCharacter*                            OwnerCharacter;                                           // 0x0958(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     OverrideVelocity;                                         // 0x0960(0x000C) (Transient, IsPlainOldData)
	float                                              OverrideMovingSpeedDuration;                              // 0x096C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              OverrideMovingSpeedPassedTime;                            // 0x0970(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0974(0x0004) MISSED OFFSET
	class UCurveFloat*                                 OverrideMovingSpeedScaleCurve;                            // 0x0978(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	ENetworkSmoothingMode                              SavedNetworkSmoothingMode;                                // 0x0980(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bOrientRotationToMovementOnRun;                           // 0x0981(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOrientRotationToMovementOnSprint;                        // 0x0982(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x0983(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterMovement"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Base
// 0x0028 (0x0058 - 0x0030)
class UTslNpcCharacterState_Base : public UObject
{
public:
	float                                              StateDuration;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	struct FPoseSnapshotInfo                           BlendSnapshotInfo;                                        // 0x0038(0x0010) (Edit)
	ENpcWalkingSpeedType                               MaxWalkingSpeed;                                          // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	ENpcCharacterStateType                             StateType;                                                // 0x0049(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	ENpcCharacterStateType                             NextStateType;                                            // 0x004A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFiringState;                                           // 0x004B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDamageDirectionState;                                    // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanFire;                                                 // 0x004D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanKnockback;                                            // 0x004E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSkipPhysicsRotation;                                  // 0x004F(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreDamageAnim;                                        // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSetRecentlyRenderedFlag;                                 // 0x0051(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRestoreRagdoll;                                          // 0x0052(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLastEnableUpdateRateOptimizations;                       // 0x0053(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterState_Base"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Default
// 0x0000 (0x0058 - 0x0058)
class UTslNpcCharacterState_Default : public UTslNpcCharacterState_Base
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterState_Default"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_DownBase
// 0x0000 (0x0058 - 0x0058)
class UTslNpcCharacterState_DownBase : public UTslNpcCharacterState_Base
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterState_DownBase"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Knockback
// 0x0000 (0x0058 - 0x0058)
class UTslNpcCharacterState_Knockback : public UTslNpcCharacterState_DownBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterState_Knockback"));

		return ptr;
	}

};


// Class TslGame.TslNpcCharacterState_Fire
// 0x0008 (0x0060 - 0x0058)
class UTslNpcCharacterState_Fire : public UTslNpcCharacterState_Base
{
public:
	int                                                FireStateIndex;                                           // 0x0058(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DamageDelay;                                              // 0x005C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcCharacterState_Fire"));

		return ptr;
	}

};


// Class TslGame.TslNpcAIController
// 0x0008 (0x0528 - 0x0520)
class ATslNpcAIController : public ATslNpcControllerBase
{
public:
	class ATslNpcCharacter*                            NpcCharacter;                                             // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcAIController"));

		return ptr;
	}

};


// Class TslGame.TslNpcDamageConfig
// 0x0050 (0x0088 - 0x0038)
class UTslNpcDamageConfig : public UDataAsset
{
public:
	TMap<EDamageZoneType, struct FNpcDamageZoneDesc>   DamageZones;                                              // 0x0038(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcDamageConfig"));

		return ptr;
	}

};


// Class TslGame.TslNpcPathFollowingComponent
// 0x0020 (0x04E0 - 0x04C0)
class UTslNpcPathFollowingComponent : public UPathFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x04C0(0x0004) MISSED OFFSET
	struct FVector                                     LastMovingDirection;                                      // 0x04C4(0x000C) (Transient, IsPlainOldData)
	bool                                               bIsNoFinish;                                              // 0x04D0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x04D1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcPathFollowingComponent"));

		return ptr;
	}

};


// Class TslGame.TslNpcSpawnPoint
// 0x0058 (0x0440 - 0x03E8)
class ATslNpcSpawnPoint : public AActor
{
public:
	TMap<int, int>                                     WaveNpcTypeMap;                                           // 0x03E8(0x0050) (Edit, ZeroConstructor)
	int                                                DefaultNpcType;                                           // 0x0438(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x043C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcSpawnPoint"));

		return ptr;
	}

};


// Class TslGame.TslNpcSpawnSystem
// 0x0040 (0x0070 - 0x0030)
class UTslNpcSpawnSystem : public UObject
{
public:
	TArray<struct FNpcInfo>                            NpcInfoArray;                                             // 0x0030(0x0010) (Edit, ZeroConstructor)
	float                                              SpawnInterval;                                            // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<class APawn*>                               SpawnedPawnArray;                                         // 0x0048(0x0010) (ZeroConstructor, Transient)
	TArray<struct FAISpawnParameterInfo>               PendingSpawnArray;                                        // 0x0058(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNpcSpawnSystem"));

		return ptr;
	}

};


// Class TslGame.TslUserPlatformImageWidget
// 0x0050 (0x0440 - 0x03F0)
class UTslUserPlatformImageWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             PlatformImageSwitcher_Binder;                             // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    PlatformImageSizebox_Binder;                              // 0x0418(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslUserPlatformImageWidget"));

		return ptr;
	}


	void STATIC_SetPlatFormImageSize(const struct FVector2D& Size);
	void STATIC_SetPlatFormImageFromPlayerState(class ATslPlayerState* TargetPlayer);
	void STATIC_SetPlatFormImageFromPlatform(EOutGamePlatformProvider TargetPlatform);
};


// Class TslGame.TslObserverHudAnimWidget
// 0x0010 (0x0260 - 0x0250)
class UTslObserverHudAnimWidget : public UUserWidget
{
public:
	class UTslObserverHudAnimManageWidget*             Manager;                                                  // 0x0250(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslUserPlatformImageWidget*                 PlatformImage;                                            // 0x0258(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverHudAnimWidget"));

		return ptr;
	}


	void STATIC_InitAndPlay(const struct FObserverHudAnimData& Data);
};


// Class TslGame.TslObserverHudAnimManageWidget
// 0x0068 (0x0458 - 0x03F0)
class UTslObserverHudAnimManageWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     HudAnimBorder_Binder;                                     // 0x0400(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      TeamWipeOutNumLogoWidgetClass;                            // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TeamWipeOutImageLogoWidgetClass;                          // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PersonalKillingSpreeWidgetClass;                          // 0x0440(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TeamTotalKillingSpreeWidgetClass;                         // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslObserverHudAnimWidget*                   CurrAnimWidget;                                           // 0x0450(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverHudAnimManageWidget"));

		return ptr;
	}


	bool STATIC_ProcData();
	bool STATIC_Peek(struct FObserverHudAnimData* OutPeekedMessage);
	void STATIC_OnCurrAnimFinish();
	int STATIC_NumElems();
	bool STATIC_IsEmpty();
	bool STATIC_IsBusy();
	bool STATIC_Enqueue(EObserverHudAnimType AnimType, int EliminatorTeamNum, int EliminatedTeamNum, const struct FString& KillingSpreePlayerName, const struct FString& KillingSpreeClanName, int KillingSpreeTeamNum, int KillingSpreeKillCount, EOutGamePlatformProvider KillingSpreePlayerPlatform);
	bool STATIC_Dequeue();
	void STATIC_Clear();
};


// Class TslGame.TslObserverPlayerData
// 0x0048 (0x0078 - 0x0030)
class UTslObserverPlayerData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET
	class ATslPlayerState*                             PlayerState;                                              // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacter*                               Character;                                                // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AReplicatedCharacterData*                    ReplicatedCharacterData;                                  // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslObserverPlayerListTileInfoWidget*        Widget;                                                   // 0x0070(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverPlayerData"));

		return ptr;
	}

};


// Class TslGame.TslObserverTeamData
// 0x0090 (0x00C0 - 0x0030)
class UTslObserverTeamData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	TMap<struct FString, class UTslObserverPlayerData*> Players;                                                  // 0x0040(0x0050) (ZeroConstructor, Transient)
	class UTslObserverPlayerListTileWidget*            Widget;                                                   // 0x0090(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0098(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslObserverTeamData"));

		return ptr;
	}

};


// Class TslGame.TslGamepadOptionContentsWidget
// 0x0070 (0x0530 - 0x04C0)
class UTslGamepadOptionContentsWidget : public UTslBaseOptionWidget
{
public:
	TArray<class UTslOptionImpl*>                      OptionImplObjects;                                        // 0x04C0(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnContentButtonFocused;                                   // 0x04D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FUmgWidgetBinder_Gerneral                   ContentsScrollBox_Binder;                                 // 0x04E0(0x0020) (Edit, DisableEditOnInstance)
	class UClass*                                      StepperWidgetClass;                                       // 0x0500(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SliderWidgetClass;                                        // 0x0508(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SeparatorWidgetClass;                                     // 0x0510(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      CrosshairColorSliderClass;                                // 0x0518(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FOptionContentDesc>                  OptionList;                                               // 0x0520(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionContentsWidget"));

		return ptr;
	}


	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl"));

		return ptr;
	}

};


// Class TslGame.TslGamepadOptionGameplay
// 0x0000 (0x0530 - 0x0530)
class UTslGamepadOptionGameplay : public UTslGamepadOptionContentsWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionGameplay"));

		return ptr;
	}


	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl_LANGUAGE
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_LANGUAGE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_LANGUAGE"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DVR
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_DVR : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_DVR"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_HUD_WEAPON
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_HUD_WEAPON : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_HUD_WEAPON"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_HUD_EQUIPMENT
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_HUD_EQUIPMENT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_HUD_EQUIPMENT"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_KILLFEED
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_KILLFEED : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_KILLFEED"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_COLOR_BLIND
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_COLOR_BLIND : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_COLOR_BLIND"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_COLOR_CROSSHAIR
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_COLOR_CROSSHAIR : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_COLOR_CROSSHAIR"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_CUSTOM_CROSSHAIR
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_CUSTOM_CROSSHAIR : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_CUSTOM_CROSSHAIR"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_KEY_HINT
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_KEY_HINT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_KEY_HINT"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_NETWORKINFO
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_NETWORKINFO : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_NETWORKINFO"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ITEMXRAY
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_ITEMXRAY : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_ITEMXRAY"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_TPP_AIM_POSITION
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_TPP_AIM_POSITION : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_TPP_AIM_POSITION"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_AUTO_RELOADING
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_AUTO_RELOADING : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_AUTO_RELOADING"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_COMPASS_SHADE
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_COMPASS_SHADE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_COMPASS_SHADE"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_AUTO_WEAPON_SKIN_REPLACEMENT
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_AUTO_WEAPON_SKIN_REPLACEMENT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_AUTO_WEAPON_SKIN_REPLACEMENT"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DEFALUT_FIREMODE
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_DEFALUT_FIREMODE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_DEFALUT_FIREMODE"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_AUTO_EQUIPATTACHMENT
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_AUTO_EQUIPATTACHMENT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_AUTO_EQUIPATTACHMENT"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_AUTO_EQUIPATTACHMENTFORSCOPE
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_AUTO_EQUIPATTACHMENTFORSCOPE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_AUTO_EQUIPATTACHMENTFORSCOPE"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_AUTO_REPLACEATTACHMENT
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_AUTO_REPLACEATTACHMENT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_AUTO_REPLACEATTACHMENT"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_RADIO_MESSAGE
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_RADIO_MESSAGE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_RADIO_MESSAGE"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_RADIO_MESSAGE_PRESET
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_RADIO_MESSAGE_PRESET : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_RADIO_MESSAGE_PRESET"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_RADIO_MESSAGE_QUICKPING
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_RADIO_MESSAGE_QUICKPING : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_RADIO_MESSAGE_QUICKPING"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_CROSS_NETWORK_PLAY
// 0x0010 (0x0040 - 0x0030)
class UTslOptionImpl_CROSS_NETWORK_PLAY : public UTslOptionImpl
{
public:
	class UTslGamepadStepperWidget*                    CachedStepperWidget;                                      // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_CROSS_NETWORK_PLAY"));

		return ptr;
	}


	void STATIC_OpenCrossPlayOption();
	bool STATIC_OnInputValidation(class UTslBaseOptionWidget* Widget);
	void STATIC_OnDefault(class UTslBaseOptionWidget* Widget);
	void STATIC_OnApply(class UTslBaseOptionWidget* Widget);
	bool STATIC_IsChanged(class UTslBaseOptionWidget* Widget);
	void STATIC_Init(class UTslBaseOptionWidget* Widget);
	void STATIC_HandleAppReactivated();
};


// Class TslGame.TslGamepadOptionSound
// 0x0000 (0x0530 - 0x0530)
class UTslGamepadOptionSound : public UTslGamepadOptionContentsWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionSound"));

		return ptr;
	}


	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl_BGMMute
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_BGMMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_BGMMute"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_MasterMute
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_MasterMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_MasterMute"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_UIMute
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_UIMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_UIMute"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_EffectMute
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_EffectMute : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_EffectMute"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_HRTF
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_HRTF : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_HRTF"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeMaster
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_VolumeMaster : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_VolumeMaster"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeBGM
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_VolumeBGM : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_VolumeBGM"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeUI
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_VolumeUI : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_VolumeUI"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VolumeEffect
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_VolumeEffect : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_VolumeEffect"));

		return ptr;
	}

};


// Class TslGame.TslGamepadOptionGraphic
// 0x0010 (0x0540 - 0x0530)
class UTslGamepadOptionGraphic : public UTslGamepadOptionContentsWidget
{
public:
	TArray<class UTslGamepadStepperWidget*>            QualitySteppers;                                          // 0x0530(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionGraphic"));

		return ptr;
	}


	void STATIC_OnStepperChanged(class UTslGamepadStepperWidget* Widget);
};


// Class TslGame.TslOptionImpl_FOV
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_FOV : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_FOV"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_BRIGHTNESS
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_BRIGHTNESS : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_BRIGHTNESS"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_QualitySettings
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_QualitySettings : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_QualitySettings"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_Res4K
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_Res4K : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_Res4K"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_UniversalBrightnessForAllMap
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_UniversalBrightnessForAllMap : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_UniversalBrightnessForAllMap"));

		return ptr;
	}

};


// Class TslGame.TslGamepadOptionControl
// 0x0000 (0x0530 - 0x0530)
class UTslGamepadOptionControl : public UTslGamepadOptionContentsWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionControl"));

		return ptr;
	}


	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslOptionImpl_INVERTX
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_INVERTX : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_INVERTX"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_INVERTY
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_INVERTY : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_INVERTY"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VIBRATION
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_VIBRATION : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_VIBRATION"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DEADZONE
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_DEADZONE : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_DEADZONE"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_DEADZONE_LEFT
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_DEADZONE_LEFT : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_DEADZONE_LEFT"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_StartRunningSensitivity
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_StartRunningSensitivity : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_StartRunningSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_PRESET
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_PRESET : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_PRESET"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ToggleAimAcceleration
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_ToggleAimAcceleration : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_ToggleAimAcceleration"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_SensBase
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_SensBase : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_SensBase"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ForceFeedbackMultiplier
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_ForceFeedbackMultiplier : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_ForceFeedbackMultiplier"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_VerticalSensMultiplier
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_VerticalSensMultiplier : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_VerticalSensMultiplier"));

		return ptr;
	}

};


// Class TslGame.TslOptionImpl_ForwardRunningSensitivity
// 0x0000 (0x0030 - 0x0030)
class UTslOptionImpl_ForwardRunningSensitivity : public UTslOptionImpl
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslOptionImpl_ForwardRunningSensitivity"));

		return ptr;
	}

};


// Class TslGame.TslPainCausingVolume
// 0x0010 (0x0470 - 0x0460)
class ATslPainCausingVolume : public APainCausingVolume
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPainCausingVolume"));

		return ptr;
	}

};


// Class TslGame.TslParachuteAnimInstance
// 0x0260 (0x0600 - 0x03A0)
class UTslParachuteAnimInstance : public UAnimInstance
{
public:
	class ATslCharacter*                               CharacterRef_CP;                                          // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET
	struct FRotator                                    ParachuteRotation_CP;                                     // 0x03B0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              ParaTurn_CP;                                              // 0x03BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ParaPitch_CP;                                             // 0x03C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReleased_CP;                                           // 0x03C4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReplayJumping_CP;                                      // 0x03C5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA];                                       // 0x03C6(0x000A) MISSED OFFSET
	struct FTransform                                  IK_L_CP;                                                  // 0x03D0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  IK_R_CP;                                                  // 0x0400(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     IK_L_Location_CP;                                         // 0x0430(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    IK_L_Rotation_CP;                                         // 0x043C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     IK_R_Location_CP;                                         // 0x0448(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    IK_R_Rotation_CP;                                         // 0x0454(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              EnableIKAlpha_CP;                                         // 0x0460(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RigidbodyAlpha;                                           // 0x0464(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PhysicsBlendAlpha;                                        // 0x0468(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x046C(0x0004) MISSED OFFSET
	struct FTransform                                  IK_L_Handle_CP;                                           // 0x0470(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  IK_R_Handle_CP;                                           // 0x04A0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  IK_L_Strap_CP;                                            // 0x04D0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  IK_R_Strap_CP;                                            // 0x0500(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              IK_L_Handle_Alpha_CP;                                     // 0x0530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IK_R_Handle_Alpha_CP;                                     // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RollTendency;                                             // 0x0538(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchTendency;                                            // 0x053C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TendencyFrame;                                            // 0x0540(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLanding_CP;                                            // 0x0544(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0545(0x0003) MISSED OFFSET
	float                                              LandingAlpha_CP;                                          // 0x0548(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMoving_CP;                                             // 0x054C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCollapsed_CP;                                          // 0x054D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsManualCutoff_CP;                                       // 0x054E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAutoCutoff_CP;                                         // 0x054F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ParaAnimTimeFromStart_CP;                                 // 0x0550(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ClientRotYawScale;                                        // 0x0554(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseNewParachuteAnims;                                    // 0x0558(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0559(0x0007) MISSED OFFSET
	struct FName                                       LeftItemBoneName;                                         // 0x0560(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightItemBoneName;                                        // 0x0568(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftHandleBoneName;                                       // 0x0570(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightHandleBoneName;                                      // 0x0578(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftStrapBoneName;                                        // 0x0580(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightStrapBoneName;                                       // 0x0588(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingCheckVelocityScalar;                               // 0x0590(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingCheckStartAltitude;                                // 0x0594(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingCheckTickTime;                                     // 0x0598(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     TerminalVelocity_CP;                                      // 0x059C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              TermianlVelocityInterpSpeed;                              // 0x05A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TerminalVelocityOrientationScalar;                        // 0x05AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     TerminalVelocityStaticGravity;                            // 0x05B0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              TermianlVelocityMax;                                      // 0x05BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               ForceApplyBodyNames;                                      // 0x05C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bPhysicsForceToAllBodies;                                 // 0x05D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05D1(0x0003) MISSED OFFSET
	struct FVector                                     ParachuteOrientationMultiplier;                           // 0x05D4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	int                                                ParachutePhysicsMaxLOD;                                   // 0x05E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1C];                                      // 0x05E4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParachuteAnimInstance"));

		return ptr;
	}


	void STATIC_DetachParachuteFromCharacter();
	void STATIC_DetachPara_BP();
	void STATIC_CutoffFinishedNotify();
	void STATIC_ActivateParachuteIK();
};


// Class TslGame.TslParticleBulletTrail
// 0x0020 (0x04B8 - 0x0498)
class ATslParticleBulletTrail : public ATslParticle
{
public:
	struct FVector                                     TargetDestanation;                                        // 0x0498(0x000C) (Edit, IsPlainOldData)
	float                                              BulletSpeed;                                              // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          UnderWaterMaterialOverride;                               // 0x04A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticleBulletTrail"));

		return ptr;
	}

};


// Class TslGame.TslRainDynamic
// 0x00E8 (0x0580 - 0x0498)
class ATslRainDynamic : public ATslParticle
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0498(0x0004) MISSED OFFSET
	float                                              SplashSpawnDistance;                                      // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              SplashSpawnRate;                                          // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              RainScale;                                                // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       SplashEmitterName;                                        // 0x04A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFanShape;                                             // 0x04B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	float                                              ViewAngleInDegree;                                        // 0x04B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              BackwardOffset;                                           // 0x04B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bAutoSpawnRange;                                          // 0x04BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET
	float                                              CameraPitch;                                              // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              AdjustedSplashSpawnDistance;                              // 0x04C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              AdjustedSplashAngle;                                      // 0x04C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bAsyncLineTrace;                                          // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bDebugAsyncTraceHandles;                                  // 0x04CD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04CE(0x0002) MISSED OFFSET
	int                                                AsyncLineTraceHandles;                                    // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bAutoLimitSpashSpawnRate;                                 // 0x04D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	float                                              TargetFPS;                                                // 0x04D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              MinAutoLimiter;                                           // 0x04DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AutoLimiterStepPerFrame;                                  // 0x04E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AutoLimiter;                                              // 0x04E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              CameraAltituteToRemoveSplash;                             // 0x04E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              CameraDistanceToTerrainToRemoveSplash;                    // 0x04EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData05[0x90];                                      // 0x04F0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRainDynamic"));

		return ptr;
	}

};


// Class TslGame.TslWeatherParticle
// 0x00F8 (0x0590 - 0x0498)
class ATslWeatherParticle : public ATslParticle
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0498(0x0004) MISSED OFFSET
	unsigned char                                      bMakeSplash : 1;                                          // 0x049C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0x3];                                       // 0x049D(0x0003) MISSED OFFSET
	float                                              SplashSpawnDistance;                                      // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              SplashSpawnRate;                                          // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ParticleSpawnScale;                                       // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET
	struct FName                                       SplashEmitterName;                                        // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFanShape;                                             // 0x04B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04B9(0x0003) MISSED OFFSET
	float                                              ViewAngleInDegree;                                        // 0x04BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              BackwardOffset;                                           // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bAutoSpawnRange;                                          // 0x04C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	float                                              CameraPitch;                                              // 0x04C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              AdjustedSplashSpawnDistance;                              // 0x04CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              AdjustedSplashAngle;                                      // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bAsyncLineTrace;                                          // 0x04D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bDebugAsyncTraceHandles;                                  // 0x04D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x04D6(0x0002) MISSED OFFSET
	int                                                AsyncLineTraceHandles;                                    // 0x04D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bAutoLimitSpashSpawnRate;                                 // 0x04DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	float                                              TargetFPS;                                                // 0x04E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              MinAutoLimiter;                                           // 0x04E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AutoLimiterStepPerFrame;                                  // 0x04E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AutoLimiter;                                              // 0x04EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              CameraAltituteToRemoveSplash;                             // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              CameraDistanceToTerrainToRemoveSplash;                    // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x98];                                      // 0x04F8(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWeatherParticle"));

		return ptr;
	}

};


// Class TslGame.TslParticleEmitter
// 0x0010 (0x03F8 - 0x03E8)
class ATslParticleEmitter : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticleEmitter"));

		return ptr;
	}


	bool STATIC_WasRecentlyRendered(float Tolerance);
	void STATIC_UserConstructionScript();
	void STATIC_TearOff();
	void STATIC_SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetReplicates(bool bInReplicates);
	void STATIC_SetReplicateMovement(bool bInReplicateMovement);
	void STATIC_SetOwner(class AActor* NewOwner);
	void STATIC_SetLifeSpan(float InLifespan);
	void STATIC_SetActorTickInterval(float TickInterval);
	void STATIC_SetActorTickEnabled(bool bEnabled);
	void STATIC_SetActorScale3D(const struct FVector& NewScale3D);
	void STATIC_SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void STATIC_SetActorHiddenInGame(bool bNewHidden);
	void STATIC_SetActorEnableCollision(bool bNewActorEnableCollision);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void STATIC_ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveDestroyed();
	void STATIC_ReceiveBeginPlay();
	void STATIC_ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void STATIC_ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void STATIC_ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void STATIC_ReceiveActorEndOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorEndCursorOver();
	void STATIC_ReceiveActorBeginOverlap(class AActor* OtherActor);
	void STATIC_ReceiveActorBeginCursorOver();
	void STATIC_OnRep_Role();
	void STATIC_OnRep_ReplicateMovement();
	void STATIC_OnRep_ReplicatedMovement();
	void STATIC_OnRep_Owner();
	void STATIC_OnRep_Instigator();
	void STATIC_OnRep_AttachmentReplication();
	void STATIC_MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* STATIC_MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool STATIC_K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool STATIC_K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void STATIC_K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_OnReset();
	void STATIC_K2_OnEndViewTarget(class APlayerController* PC);
	void STATIC_K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* STATIC_K2_GetRootComponent();
	struct FRotator STATIC_K2_GetActorRotation();
	struct FVector STATIC_K2_GetActorLocation();
	void STATIC_K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void STATIC_K2_DestroyComponent(class UActorComponent* Component);
	void STATIC_K2_DestroyActor();
	void STATIC_K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void STATIC_K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void STATIC_K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool STATIC_IsOverlappingActor(class AActor* Other);
	bool STATIC_IsChildActor();
	bool STATIC_IsActorTickEnabled();
	bool STATIC_IsActorBeingDestroyed();
	bool STATIC_HasAuthority();
	float STATIC_GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector STATIC_GetVelocity();
	struct FTransform STATIC_GetTransform();
	bool STATIC_GetTickableWhenPaused();
	float STATIC_GetSquaredDistanceTo(class AActor* OtherActor);
	TEnumAsByte<ENetRole> STATIC_GetRemoteRole();
	class UChildActorComponent* STATIC_GetParentComponent();
	class AActor* STATIC_GetParentActor();
	class AActor* STATIC_GetOwner();
	void STATIC_GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void STATIC_GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float STATIC_GetLifeSpan();
	class AController* STATIC_GetInstigatorController();
	class APawn* STATIC_GetInstigator();
	struct FVector STATIC_GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float STATIC_GetInputAxisValue(const struct FName& InputAxisName);
	float STATIC_GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float STATIC_GetHorizontalDotProductTo(class AActor* OtherActor);
	float STATIC_GetHorizontalDistanceTo(class AActor* OtherActor);
	float STATIC_GetGameTimeSinceCreation();
	float STATIC_GetDotProductTo(class AActor* OtherActor);
	float STATIC_GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> STATIC_GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> STATIC_GetComponentsByClass(class UClass* ComponentClass);
	class UActorComponent* STATIC_GetComponentByClass(class UClass* ComponentClass);
	struct FName STATIC_GetAttachParentSocketName();
	class AActor* STATIC_GetAttachParentActor();
	void STATIC_GetAttachedActors(TArray<class AActor*>* OutActors);
	void STATIC_GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);
	struct FVector STATIC_GetActorUpVector();
	float STATIC_GetActorTimeDilation();
	float STATIC_GetActorTickInterval();
	struct FVector STATIC_GetActorScale3D();
	struct FVector STATIC_GetActorRightVector();
	struct FVector STATIC_GetActorRelativeScale3D();
	struct FVector STATIC_GetActorForwardVector();
	void STATIC_GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool STATIC_GetActorEnableCollision();
	void STATIC_GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceNetUpdate();
	void STATIC_FlushNetDormancy();
	void STATIC_EnableInput(class APlayerController* PlayerController);
	void STATIC_DisableInput(class APlayerController* PlayerController);
	void STATIC_DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* STATIC_AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool STATIC_ActorHasTag(const struct FName& Tag);
};


// Class TslGame.TslParticleManager
// 0x0128 (0x0510 - 0x03E8)
class ATslParticleManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03E8(0x0060) MISSED OFFSET
	bool                                               bUseActorPool;                                            // 0x0448(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	TMap<struct FString, struct FTslActorPool>         ObjectPoolMap;                                            // 0x0450(0x0050) (ZeroConstructor)
	TArray<struct FTslParticleGroupInfo>               GroupList;                                                // 0x04A0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x60];                                      // 0x04B0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticleManager"));

		return ptr;
	}

};


// Class TslGame.TslParticleModuleEventSendToGame
// 0x0050 (0x0080 - 0x0030)
class UTslParticleModuleEventSendToGame : public UParticleModuleEventSendToGame
{
public:
	TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> AkEventSurfaceMap;                                        // 0x0030(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslParticleModuleEventSendToGame"));

		return ptr;
	}


	void STATIC_RunEvent(const struct FVector& InCollideDirection, const struct FVector& InHitLocation, const struct FVector& InHitNormal, const struct FName& InBoneName, class UWorld* InWorld, class AActor* InActor);
	int STATIC_PostAkEventAtLocation(class UObject* InObject, const struct FVector& InLocation, const struct FRotator& InRotation, class UAkAudioEvent* in_pAkEvent);
};


// Class TslGame.TslPassArea
// 0x0010 (0x03F8 - 0x03E8)
class ATslPassArea : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              Radius;                                                   // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPassArea"));

		return ptr;
	}

};


// Class TslGame.TslPassBluezoneArea
// 0x0000 (0x03F8 - 0x03F8)
class ATslPassBluezoneArea : public ATslPassArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPassBluezoneArea"));

		return ptr;
	}

};


// Class TslGame.TslPassCarePackageArea
// 0x0000 (0x03F8 - 0x03F8)
class ATslPassCarePackageArea : public ATslPassArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPassCarePackageArea"));

		return ptr;
	}

};


// Class TslGame.TslPassAreaRectangle
// 0x0030 (0x0418 - 0x03E8)
class ATslPassAreaRectangle : public AActor
{
public:
	class UBoxComponent*                               BoxComponent;                                             // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              Width;                                                    // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              Height;                                                   // 0x03F4(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FBox                                        PassAreaBox;                                              // 0x03F8(0x001C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0414(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPassAreaRectangle"));

		return ptr;
	}

};


// Class TslGame.TslPassBlueZoneAreaRectangle
// 0x0000 (0x0418 - 0x0418)
class ATslPassBlueZoneAreaRectangle : public ATslPassAreaRectangle
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPassBlueZoneAreaRectangle"));

		return ptr;
	}

};


// Class TslGame.TslPassCarePackageAreaRectangle
// 0x0000 (0x0418 - 0x0418)
class ATslPassCarePackageAreaRectangle : public ATslPassAreaRectangle
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPassCarePackageAreaRectangle"));

		return ptr;
	}

};


// Class TslGame.TslPawnInputBindingComponent
// 0x0040 (0x0240 - 0x0200)
class UTslPawnInputBindingComponent : public UActorComponent
{
public:
	struct FTimerHandle                                MoveVehicleSeatTimer_Gamepad;                             // 0x0200(0x0008)
	struct FScriptMulticastDelegate                    OnOwnerPossessed;                                         // 0x0208(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnOwnerUnPossessed;                                       // 0x0218(0x0010) (ZeroConstructor, InstancedReference)
	float                                              PingCoolTimeSeconds;                                      // 0x0228(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x022C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPawnInputBindingComponent"));

		return ptr;
	}


	bool STATIC_OnUseHealItemPad();
	bool STATIC_OnSprintReleasedPad();
	bool STATIC_OnSprintPressedPad();
	bool STATIC_OnSetPingAtViewingTargetPad_Impl();
	bool STATIC_OnSetPingAtViewingTargetPad();
	bool STATIC_OnSelectNextHealItemPad();
	bool STATIC_OnMoveVehicleSeatPad();
	bool STATIC_OnMoveToSubSeatPad();
	bool STATIC_OnMoveToDriverSeatPad();
	bool STATIC_OnInteractInVehiclePad();
	void STATIC_NotifyOwnerUnPossessed(class ATslPlayerController* InController);
	void STATIC_NotifyOwnerPossessed(class ATslPlayerController* InController);
	void STATIC_MoveVehicleNextSubSeat_Gamepad();
	void STATIC_MoveVehicleNextSeat_Gamepad(bool bCurrentSeat);
	void STATIC_MoveVehicleDriverSeat_Gamepad();
};


// Class TslGame.TslPerformanceTestComponent
// 0x0000 (0x0200 - 0x0200)
class UTslPerformanceTestComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPerformanceTestComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.TslPlatoonCarePackageRequestHandler
// 0x0088 (0x00B8 - 0x0030)
class UTslPlatoonCarePackageRequestHandler : public UObject
{
public:
	class UClass*                                      CarePackageClass;                                         // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EPlatoonCarePackageType                            PlatoonCarePackageType;                                   // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              FlyingHeight;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNotifyToAllPlayers;                                      // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	class UTslPlatoonCommanderSystem*                  OwnerSystem;                                              // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWorld*                                      CachedWorldContext;                                       // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0058(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonCarePackageRequestHandler"));

		return ptr;
	}


	void STATIC_OnCarePackageFinish(class ACarePackageItem* FinishedItem);
	void STATIC_OnCarePackageDrop(class AAircraftCarePackage* SpawnerAircraft, class ACarePackageItem* SpawnedItem);
	void STATIC_OnCarePackageArrival(class ACarePackageItem* ArrivedItem);
};


// Class TslGame.TslPlatoonCommanderSystem
// 0x0078 (0x00A8 - 0x0030)
class UTslPlatoonCommanderSystem : public UObject
{
public:
	class UTslPlatoonSupportCommonDataAsset*           CommonData;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslGameMode*                                AuthGameMode;                                             // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FPlatoonSupportRequestManifest              Manifest;                                                 // 0x0040(0x0018) (Transient, IsPlainOldData)
	TMap<int, struct FPlatoonInfo>                     PlatoonInfos;                                             // 0x0058(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonCommanderSystem"));

		return ptr;
	}

};


// Class TslGame.TslPlatoonSupportCommonDataAsset
// 0x0060 (0x0098 - 0x0038)
class UTslPlatoonSupportCommonDataAsset : public UDataAsset
{
public:
	struct FTslPlatoonSupportCommonData                FireSupportData;                                          // 0x0038(0x0020) (Edit, DisableEditOnInstance)
	struct FTslPlatoonSupportCommonData                WeaponPackageData;                                        // 0x0058(0x0020) (Edit, DisableEditOnInstance)
	struct FTslPlatoonSupportCommonData                HealingPackageData;                                       // 0x0078(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonSupportCommonDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslPlatoonSupportDataTable
// 0x0000 (0x0088 - 0x0088)
class UTslPlatoonSupportDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlatoonSupportDataTable"));

		return ptr;
	}

};


// Class TslGame.TslPlayerCameraManager
// 0x05A0 (0x2250 - 0x1CB0)
class ATslPlayerCameraManager : public APlayerCameraManager
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x1CB0(0x0020) MISSED OFFSET
	class UScopeGlintManager*                          ScopeGlintManager;                                        // 0x1CD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x578];                                     // 0x1CD8(0x0578) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerCameraManager"));

		return ptr;
	}

};


// Class TslGame.PlayerCardWidget
// 0x00A8 (0x0498 - 0x03F0)
class UPlayerCardWidget : public UUmgBaseWidget
{
public:
	class UCanvasPanelSlot*                            PositionSlot;                                             // 0x03F0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      RenderImage;                                              // 0x03F8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ALobbyHUD*                                   LobbyHUD;                                                 // 0x0400(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ALobbyCharacter*                             LobbyCharacter;                                           // 0x0408(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FWuCharacterCustomizationOptions            LobbyCharacterOptions;                                    // 0x0410(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	bool                                               IsLobbyCharacterMale;                                     // 0x0470(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               LobbyCharacterNeedsUpdate;                                // 0x0471(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0472(0x0006) MISSED OFFSET
	class APlayerCardStudio*                           PlayerCardStudio;                                         // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AMasteryBannerController*                    MasteryBanner;                                            // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0488(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerCardWidget"));

		return ptr;
	}


	void STATIC_SetLobbyCharacter(class ALobbyCharacter* InCharacter);
	void STATIC_OnShow();
	void STATIC_OnHide();
	void STATIC_AnchorAsEditCard();
};


// Class TslGame.TslPlayerCardController
// 0x0078 (0x0460 - 0x03E8)
class ATslPlayerCardController : public AActor
{
public:
	class ALobbyCharacter*                             TempLobbyCharacter;                                       // 0x03E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPUBGIdOpen;                                            // 0x03F0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	class UPlayerCardWidget*                           PlayerCardWidget;                                         // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class APlayerCardStudio*                           PlayerCardStudio;                                         // 0x0400(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	struct FTransform                                  TempCharacterSpawnTransform;                              // 0x0410(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsInLobby;                                               // 0x0440(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1F];                                      // 0x0441(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerCardController"));

		return ptr;
	}


	void STATIC_ShowPlayerCard(bool IsEditing, bool IsGenderMale, const struct FString& BannerId, int SurvivalMasteryLevel, struct FWuCharacterCustomizationOptions* InOptions);
	void STATIC_HideTempCharacter();
	void STATIC_HidePlayerCard();
	bool STATIC_Destroy(bool bNetForce, bool bShouldModifyLevel);
};


// Class TslGame.TslPlayerCardControllerV2
// 0x0040 (0x04A0 - 0x0460)
class ATslPlayerCardControllerV2 : public ATslPlayerCardController
{
public:
	class UTslSceneCaptureWorld*                       CaptureWorld;                                             // 0x0460(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     CaptureSceneName;                                         // 0x0468(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class ATslCharacter*                               InGameCharacter;                                          // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0480(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerCardControllerV2"));

		return ptr;
	}


	void STATIC_TestSetNextPose(const struct FString& PoseId, TArray<struct FString> ItemIds);
	void STATIC_SetInGameCharacter(class ATslCharacter* InCharacter);
};


// Class TslGame.TslPlayerDamageConfig
// 0x0080 (0x00B8 - 0x0038)
class UTslPlayerDamageConfig : public UDataAsset
{
public:
	TMap<EDamageZoneType, struct FPlayerDamageZoneDesc> DamageZones;                                              // 0x0038(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0088(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerDamageConfig"));

		return ptr;
	}

};


// Class TslGame.TslPlayerPostProcessEffectComponent
// 0x0070 (0x0270 - 0x0200)
class UTslPlayerPostProcessEffectComponent : public UActorComponent
{
public:
	struct FStringAssetReference                       MaterialParameterCollection;                              // 0x0200(0x0010) (Config)
	class UClass*                                      OutlineEffectClass;                                       // 0x0210(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      OutSidePlayerAreaEffectClass;                             // 0x0218(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      DBNOEffectClass;                                          // 0x0220(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	class ATslPlayerController*                        PlayerController;                                         // 0x0228(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPostProcessEffect*                       OutlineEffect;                                            // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPostProcessEffect*                       ItemInteractionOutlineEffect;                             // 0x0238(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPostProcessEffect*                       OutSidePlayerAreaEffect;                                  // 0x0240(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslPostProcessEffect*                       DBNOEffect;                                               // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTimelineComponent*                          DBNOReviveTimeLine;                                       // 0x0250(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMaterialParameterCollection*                LoadedMaterialParameterCollection;                        // 0x0258(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0260(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerPostProcessEffectComponent"));

		return ptr;
	}


	void STATIC_HandleReviveProgress(float Value);
	void STATIC_HandleReviveFinish();
};


// Class TslGame.TslPlayerStartAndRespawn
// 0x0018 (0x0460 - 0x0448)
class ATslPlayerStartAndRespawn : public ATslPlayerStart
{
public:
	EPlatoonTeam                                       BaseTeam;                                                 // 0x0448(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	struct FString                                     BattleAreaType;                                           // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPlayerStartAndRespawn"));

		return ptr;
	}

};


// Class TslGame.TslRandomRespawnPoint
// 0x0010 (0x0458 - 0x0448)
class ATslRandomRespawnPoint : public ATslPlayerStart
{
public:
	struct FString                                     BattleAreaType;                                           // 0x0448(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRandomRespawnPoint"));

		return ptr;
	}

};


// Class TslGame.TslBattleRoyalePlayerState
// 0x0000 (0x0A70 - 0x0A70)
class ATslBattleRoyalePlayerState : public ATslPlayerState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyalePlayerState"));

		return ptr;
	}


	void STATIC_UpdateMissionProgress(const struct FWuMissionProgressUpdateData& MissionProgress);
	void STATIC_SPing(TArray<unsigned char> Data);
	void STATIC_SetServerCommunicationPrivilege(int InCommunicationPrivilege_Multiplay, int InCommunicationPrivilege_CrossPlay);
	void STATIC_SetPlayerClanName(const struct FString& InClanName);
	void STATIC_SetPingPosition(const struct FVector2D& InPingPosition);
	void STATIC_SetEmoteBitArray(const struct FEmoteBitArray& InBitArray);
	void STATIC_SetClientUnknownNumber(int NewUnknownNumber);
	void STATIC_ServerTournamentData(TArray<uint32_t> Data);
	void STATIC_ServerSetOverrideEqupiableItemsFromPreparedUser(bool InbOverrideEquipableItemsFromPreparedUser);
	void STATIC_ServerMatchRating(int InMatchRating);
	void STATIC_OnRep_StreamerMode();
	void STATIC_OnRep_StatTrakManager();
	void STATIC_OnRep_ReportToken(const struct FString& OldReportToken);
	void STATIC_OnRep_ReplicatedThrowableItems();
	void STATIC_OnRep_ReplicatedEquipableItems();
	void STATIC_OnRep_Ranking(int OldRanking);
	void STATIC_OnRep_ProvidedSpawnKitIndex();
	void STATIC_OnRep_PlayerStatisticsForOwner();
	void STATIC_OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void STATIC_OnRep_PartnerLevel();
	void STATIC_OnRep_LastHitTime();
	void STATIC_OnRep_CommnunicationPrivilege();
	void STATIC_OnRep_bQuitter();
	void STATIC_OnRep_bIsPlatoonCommander(bool bOld);
	void STATIC_OnNewBlackZone();
	bool STATIC_IsShowWayPoint();
	bool STATIC_IsShowMapMarker();
	bool STATIC_IsQuitter();
	bool STATIC_IsOutGamePlatformProvider(EOutGamePlatformProvider InOutGamePlatformType);
	bool STATIC_IsObserver();
	bool STATIC_IsMaxLevel();
	bool STATIC_IsInAircraft();
	bool STATIC_IsCharacterInBlackZone(bool CheckInBuilding);
	void STATIC_IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackage);
	void STATIC_InformAboutKill(EDamageReason DamageReason, class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float STATIC_GetXpRewardByTeamSpectatingTime();
	float STATIC_GetXpRewardBySurvivalTime();
	float STATIC_GetXpBoostingAmount();
	float STATIC_GetXpBoost();
	struct FVector2D STATIC_GetWayPointPos_PS(int PointIndex);
	int STATIC_GetUnknownNumber();
	float STATIC_GetTotalXpRewardRaw();
	float STATIC_GetTotalXpRewardBoostedAndCapped();
	float STATIC_GetTotalXpRewardBoosted();
	float STATIC_GetTotalBpRewardRaw();
	float STATIC_GetTotalBpRewardBoosted();
	float STATIC_GetTeamSpectatingTimeInSeconds();
	int STATIC_GetTeamNum();
	class ATeam* STATIC_GetTeam();
	float STATIC_GetSurvivalTimeInSeconds();
	int STATIC_GetSquadMemberIndex();
	int STATIC_GetSquadIndex();
	struct FString STATIC_GetPlayerClanName();
	float STATIC_GetPiningTimeSeconds();
	struct FVector2D STATIC_GetPingPosition();
	float STATIC_GetPing();
	class ATslPlayerController* STATIC_GetOwningTslPlayerController();
	EOutGamePlatformProvider STATIC_GetOutGamePlatformProvider();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	EMarkerType STATIC_GetMapMarkerType();
	struct FVector2D STATIC_GetMapMarkerPosition();
	int STATIC_GetKills();
	struct FEmoteBitArray STATIC_GetEmoteBitArray();
	struct FString STATIC_GetDisplayNameFromLocal(bool bWithClanName);
	float STATIC_GetDailyXpMax();
	float STATIC_GetCurrentDailyXp();
	float STATIC_GetBpRewardByRanking();
	float STATIC_GetBpRewardByPlayTime();
	float STATIC_GetBpRewardByKills();
	float STATIC_GetBpRewardByDamageDealt();
	float STATIC_GetBpBoostingAmount();
	float STATIC_GetBpBoost();
	void STATIC_CPing(TArray<unsigned char> Data);
	void STATIC_ClientUpdateRankingOnlineEvent(int InRanking);
	void STATIC_ClientTournamentData(TArray<uint32_t> Data);
	void STATIC_ClientSetReconnectAddId();
	void STATIC_ClientInformFirstKill();
	void STATIC_ClientInformAssist();
	void STATIC_ClearWayPointsPos_PS();
	void STATIC_CheckCharacterInBlackZone();
	void STATIC_BroadcastMidGameBan(class ATslPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void STATIC_BroadcastDeath(class ATslPlayerState* KillerPlayerState, class ATslPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled, float InDistanceFromKillerToVictim);
};


// Class TslGame.TslBattleRoyalePlayerState_CPP
// 0x0008 (0x0A78 - 0x0A70)
class ATslBattleRoyalePlayerState_CPP : public ATslBattleRoyalePlayerState
{
public:
	bool                                               bIsCPPWin;                                                // 0x0A70(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAcceptCPPwin;                                          // 0x0A71(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0A72(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslBattleRoyalePlayerState_CPP"));

		return ptr;
	}


	bool STATIC_GetCPPWin();
	bool STATIC_GetAcceptCPPwin();
};


// Class TslGame.TslNewBotPlayerState
// 0x0008 (0x0A78 - 0x0A70)
class ATslNewBotPlayerState : public ATslPlayerState
{
public:
	ExtraPlayerLiveState                               LiveState;                                                // 0x0A70(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0A71(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewBotPlayerState"));

		return ptr;
	}


	void STATIC_OnRep_PlayerLiveState();
};


// Class TslGame.TslTrainingPlayerState
// 0x0000 (0x0A70 - 0x0A70)
class ATslTrainingPlayerState : public ATslPlayerState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrainingPlayerState"));

		return ptr;
	}


	void STATIC_UpdateMissionProgress(const struct FWuMissionProgressUpdateData& MissionProgress);
	void STATIC_SPing(TArray<unsigned char> Data);
	void STATIC_SetServerCommunicationPrivilege(int InCommunicationPrivilege_Multiplay, int InCommunicationPrivilege_CrossPlay);
	void STATIC_SetPlayerClanName(const struct FString& InClanName);
	void STATIC_SetPingPosition(const struct FVector2D& InPingPosition);
	void STATIC_SetEmoteBitArray(const struct FEmoteBitArray& InBitArray);
	void STATIC_SetClientUnknownNumber(int NewUnknownNumber);
	void STATIC_ServerTournamentData(TArray<uint32_t> Data);
	void STATIC_ServerSetOverrideEqupiableItemsFromPreparedUser(bool InbOverrideEquipableItemsFromPreparedUser);
	void STATIC_ServerMatchRating(int InMatchRating);
	void STATIC_OnRep_StreamerMode();
	void STATIC_OnRep_StatTrakManager();
	void STATIC_OnRep_ReportToken(const struct FString& OldReportToken);
	void STATIC_OnRep_ReplicatedThrowableItems();
	void STATIC_OnRep_ReplicatedEquipableItems();
	void STATIC_OnRep_Ranking(int OldRanking);
	void STATIC_OnRep_ProvidedSpawnKitIndex();
	void STATIC_OnRep_PlayerStatisticsForOwner();
	void STATIC_OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void STATIC_OnRep_PartnerLevel();
	void STATIC_OnRep_LastHitTime();
	void STATIC_OnRep_CommnunicationPrivilege();
	void STATIC_OnRep_bQuitter();
	void STATIC_OnRep_bIsPlatoonCommander(bool bOld);
	void STATIC_OnNewBlackZone();
	bool STATIC_IsShowWayPoint();
	bool STATIC_IsShowMapMarker();
	bool STATIC_IsQuitter();
	bool STATIC_IsOutGamePlatformProvider(EOutGamePlatformProvider InOutGamePlatformType);
	bool STATIC_IsObserver();
	bool STATIC_IsMaxLevel();
	bool STATIC_IsInAircraft();
	bool STATIC_IsCharacterInBlackZone(bool CheckInBuilding);
	void STATIC_IsCarePackageCommingForMe(bool* bCarePackage, bool* bCustomPackage);
	void STATIC_InformAboutKill(EDamageReason DamageReason, class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float STATIC_GetXpRewardByTeamSpectatingTime();
	float STATIC_GetXpRewardBySurvivalTime();
	float STATIC_GetXpBoostingAmount();
	float STATIC_GetXpBoost();
	struct FVector2D STATIC_GetWayPointPos_PS(int PointIndex);
	int STATIC_GetUnknownNumber();
	float STATIC_GetTotalXpRewardRaw();
	float STATIC_GetTotalXpRewardBoostedAndCapped();
	float STATIC_GetTotalXpRewardBoosted();
	float STATIC_GetTotalBpRewardRaw();
	float STATIC_GetTotalBpRewardBoosted();
	float STATIC_GetTeamSpectatingTimeInSeconds();
	int STATIC_GetTeamNum();
	class ATeam* STATIC_GetTeam();
	float STATIC_GetSurvivalTimeInSeconds();
	int STATIC_GetSquadMemberIndex();
	int STATIC_GetSquadIndex();
	struct FString STATIC_GetPlayerClanName();
	float STATIC_GetPiningTimeSeconds();
	struct FVector2D STATIC_GetPingPosition();
	float STATIC_GetPing();
	class ATslPlayerController* STATIC_GetOwningTslPlayerController();
	EOutGamePlatformProvider STATIC_GetOutGamePlatformProvider();
	EObserverAuthorityType STATIC_GetObserverAuthorityType();
	EMarkerType STATIC_GetMapMarkerType();
	struct FVector2D STATIC_GetMapMarkerPosition();
	int STATIC_GetKills();
	struct FEmoteBitArray STATIC_GetEmoteBitArray();
	struct FString STATIC_GetDisplayNameFromLocal(bool bWithClanName);
	float STATIC_GetDailyXpMax();
	float STATIC_GetCurrentDailyXp();
	float STATIC_GetBpRewardByRanking();
	float STATIC_GetBpRewardByPlayTime();
	float STATIC_GetBpRewardByKills();
	float STATIC_GetBpRewardByDamageDealt();
	float STATIC_GetBpBoostingAmount();
	float STATIC_GetBpBoost();
	void STATIC_CPing(TArray<unsigned char> Data);
	void STATIC_ClientUpdateRankingOnlineEvent(int InRanking);
	void STATIC_ClientTournamentData(TArray<uint32_t> Data);
	void STATIC_ClientSetReconnectAddId();
	void STATIC_ClientInformFirstKill();
	void STATIC_ClientInformAssist();
	void STATIC_ClearWayPointsPos_PS();
	void STATIC_CheckCharacterInBlackZone();
	void STATIC_BroadcastMidGameBan(class ATslPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void STATIC_BroadcastDeath(class ATslPlayerState* KillerPlayerState, class ATslPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int DamageCauserLevel, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled, float InDistanceFromKillerToVictim);
};


// Class TslGame.TslConquestPlayerState
// 0x0000 (0x0AF0 - 0x0AF0)
class ATslConquestPlayerState : public ATslWarPlayerState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslConquestPlayerState"));

		return ptr;
	}


	void STATIC_ServerSetRespawnSpot(const struct FName& InRespawnSpotName);
	void STATIC_OnRep_RespawnSpotName(const struct FName& OldRespawnSpotName);
	void STATIC_OnRep_PersonalStat();
	void STATIC_OnRep_NextRespawnTimeSeconds();
	void STATIC_OnRep_MyGameScoreInTeam(float OldMyGameScoreInTeam);
};


// Class TslGame.TslZombiePlayerState
// 0x0020 (0x0A90 - 0x0A70)
class ATslZombiePlayerState : public ATslPlayerState
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x0A70(0x0001) MISSED OFFSET
	EZombieModePlayerState                             ZombieModePlayerState;                                    // 0x0A71(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1E];                                      // 0x0A72(0x001E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslZombiePlayerState"));

		return ptr;
	}


	void STATIC_SetZombieModePlayerState(EZombieModePlayerState InZombieModePlayerState);
	bool STATIC_IsZombieRespawn();
	bool STATIC_IsZombie();
	EZombieModePlayerState STATIC_GetZombieModePlayerState();
};


// Class TslGame.TslPrivateSettings
// 0x01E8 (0x0218 - 0x0030)
class UTslPrivateSettings : public UObject
{
public:
	TArray<struct FHudUiConfig>                        HudMainConfigs;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FHudUiConfig>                        MainLobbyHUDConfigs;                                      // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FModeUIConfig>                       ModeUIConfigs;                                            // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	float                                              ViewModeZoomMultiplier;                                   // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterDragDeadzone;                                    // 0x0064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	struct FVector2D                                   ViewModeRotationDeadzone;                                 // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Config, IsPlainOldData)
	TMap<EViewModeCategory, struct FVector2D>          ViewModeRotationMultiplierMap;                            // 0x0070(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	struct FVector2D                                   DefaultViewModeRotationMultiplier;                        // 0x00C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Config, IsPlainOldData)
	TMap<struct FName, struct FTslLobbySceneTravelData> LobbySceneTravelData;                                     // 0x00C8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FTslLobbySceneData>                  LobbySceneDatas;                                          // 0x0118(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FTslLobbyViewModeSceneData>          LobbyViewModeSceneDatas;                                  // 0x0128(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	float                                              WeaponDefaultRatio;                                       // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              ViewModeScaleMinMultiplier;                               // 0x013C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              ViewModeScaleMaxMultiplier;                               // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	TArray<struct FTslGameOptionTabDesc>               GameOptionTabs;                                           // 0x0148(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FTslGameOptionCategoryDesc>          GameOptionCategories;                                     // 0x0158(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	TArray<struct FTslGameOptionItemDesc>              GameOptionItems;                                          // 0x0168(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	struct FTslGameOptionHierarchy                     GameOptionHierarchy;                                      // 0x0178(0x0010) (Transient)
	bool                                               bIsGameOptionHierarchyCreated;                            // 0x0188(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0189(0x0007) MISSED OFFSET
	TArray<struct FScreenResolution>                   TestScreenResolutions;                                    // 0x0190(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config)
	float                                              LobbyCameraAspectRatio;                                   // 0x01A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DyingIconShowTime_Normal;                                 // 0x01A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              DyingIconShowTime_Observer;                               // 0x01A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	class UClass*                                      RadioMessageManagerClass;                                 // 0x01B0(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      SandboxManagerClass;                                      // 0x01B8(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      ItemRequestManagerClass;                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TMap<EItemCategory, struct FLinearColor>           UIOverrideColorByItemCategory;                            // 0x01C8(0x0050) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPrivateSettings"));

		return ptr;
	}

};


// Class TslGame.TslFBRProjectile_SmokeBomb_Ranger
// 0x0048 (0x0778 - 0x0730)
class ATslFBRProjectile_SmokeBomb_Ranger : public ATslProjectile
{
public:
	class UClass*                                      SmokeFxClass;                                             // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmokeRemainTime;                                          // 0x0738(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x073C(0x0004) MISSED OFFSET
	class UClass*                                      BombComponentClass;                                       // 0x0740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Damage;                                                   // 0x0748(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageRadius;                                             // 0x074C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayOfCallBomb;                                          // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0754(0x001C) MISSED OFFSET
	class ATslParticle*                                SmokeFx;                                                  // 0x0770(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslFBRProjectile_SmokeBomb_Ranger"));

		return ptr;
	}


	bool STATIC_IsParticleActivated();
};


// Class TslGame.TslProjectileBlackZone
// 0x0020 (0x0750 - 0x0730)
class ATslProjectileBlackZone : public ATslProjectile
{
public:
	class UAkAudioEvent*                               CreateSound;                                              // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x0738(0x0018) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectileBlackZone"));

		return ptr;
	}

};


// Class TslGame.TslProjectileMolotov
// 0x0098 (0x07C8 - 0x0730)
class ATslProjectileMolotov : public ATslProjectile
{
public:
	EMolotovSimulationType                             MolotovSimulation;                                        // 0x0730(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0731(0x0007) MISSED OFFSET
	class UParticleSystemComponent*                    FireParticleComp;                                         // 0x0738(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      FireTrailEffectClass;                                     // 0x0740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FireTrailSocketName;                                      // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimulationTickTime;                                       // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0754(0x0004) MISSED OFFSET
	class UClass*                                      EffectControllerClass;                                    // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageFieldContainerTemplate;                             // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageFieldContainerInWallTemplate;                       // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageFieldTemplate;                                      // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageFieldTemplateInWall;                                // 0x0778(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleDamageRadius;                                      // 0x0780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0784(0x0004) MISSED OFFSET
	class UClass*                                      FragmentProjectileClass;                                  // 0x0788(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DirectDebuff;                                             // 0x0790(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslParticle*                                FireTrailEffect;                                          // 0x0798(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ImpactMaxCount;                                           // 0x07A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x07A4(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectileMolotov"));

		return ptr;
	}


	void STATIC_SimulationVolumetricSpreadTick_BP();
	void STATIC_SimulationVolumetricSpreadTick();
};


// Class TslGame.TslProjectileRedZone
// 0x0020 (0x0750 - 0x0730)
class ATslProjectileRedZone : public ATslProjectile
{
public:
	class UAkAudioEvent*                               CreateSound;                                              // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x0738(0x0018) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectileRedZone"));

		return ptr;
	}

};


// Class TslGame.TslSpikeTrapActor
// 0x0108 (0x04F0 - 0x03E8)
class ATslSpikeTrapActor : public AActor
{
public:
	class UInstancedStaticMeshComponent*               InstancedMesh;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USplineComponent*                            MySpline;                                                 // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslSimpleCollisionReceiver*                 MineSimpleCollision;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              CheckRadius;                                              // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CheckLenght;                                              // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkComponent*                                AkComp;                                                   // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               DestructionSound;                                         // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               DeploySound;                                              // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 TimingCurve;                                              // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0428(0x0010) MISSED OFFSET
	ESpikeDeploymentState                              DeploymentState;                                          // 0x0438(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	struct FVector                                     OgVelocity;                                               // 0x0440(0x000C) (Net, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	TArray<class USplineMeshComponent*>                SplineMeshes;                                             // 0x0450(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData03[0x20];                                      // 0x0460(0x0020) MISSED OFFSET
	TArray<struct FSegmentPoint>                       PointSegments;                                            // 0x0480(0x0010) (Edit, Net, ZeroConstructor)
	float                                              PhysicsDelay;                                             // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SpikeMeshScale;                                           // 0x0494(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              MaxDeployHeightDifferential;                              // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeploymentSpeed;                                          // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SegmentCurve_MaxEndHeight;                                // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SegmentCurve_Power;                                       // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SegmentCurve_HeightCap;                                   // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OriginOffset_VerticalTimeMultiplier;                      // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OriginOffset_VerticalPower;                               // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OriginOffset_HorizontalTimeMultiplier;                    // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OriginOffset_HorizontalPower;                             // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04C4(0x0004) MISSED OFFSET
	class UCurveVector*                                OriginOffsetCurve;                                        // 0x04C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Segmentcurve_Start;                                       // 0x04D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Segmentcurve_End;                                         // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SegmentCurve_Interpolation;                               // 0x04E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPopped : 1;                                              // 0x04E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x7];                                       // 0x04E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpikeTrapActor"));

		return ptr;
	}


	void STATIC_TriggerVehicleTracers();
	void STATIC_SplitSplineSegments(class USplineComponent* Spline, int SegmentCount, float SegmentMinLenght, float SegmentMaxLenght, TArray<struct FTransform>* outTransforms);
	void STATIC_OnRep_Segments();
	void STATIC_OnRep_DeployState();
	void STATIC_OnPopped(const struct FVector& LaunchDirection);
	void STATIC_OnCollision(const struct FSimpleCollisionEvent& Event);
	void STATIC_MulticastPop(const struct FVector& LaunchDirection);
	bool STATIC_IsFullLenght();
	void STATIC_Disable();
	void STATIC_BuildSplinePoints(class USplineComponent* Spline, TArray<struct FVector> PointLocations, TArray<struct FRotator> PointRotations);
	void STATIC_BuildSplineMesh(class USplineComponent* Spline, TArray<struct FVector> PointLocations, TArray<struct FRotator> PointRotations);
	void STATIC_BPUpdateMeshFromRagdoll();
	void STATIC_BpUpdateMesh(TArray<struct FVector> Locations, TArray<struct FRotator> Rotations);
	class USplineMeshComponent* STATIC_BPCreateSplineMesh(const struct FTransform& MeshTransform);
	void STATIC_BPCopySegmentsToAnimation(TArray<struct FVector> Locations, TArray<struct FRotator> Rotations);
	void STATIC_AddMeshSpikeSegments(class UInstancedStaticMeshComponent* SpikeMeshes, class USplineComponent* Spline);
	void STATIC_AddHandle(const struct FTransform& Transform);
};


// Class TslGame.TslProjectileSpikeTrap
// 0x0020 (0x0750 - 0x0730)
class ATslProjectileSpikeTrap : public ATslProjectile
{
public:
	class UClass*                                      SpikeTrapActor;                                           // 0x0730(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       SpikeTrapItemID;                                          // 0x0738(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0740(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectileSpikeTrap"));

		return ptr;
	}

};


// Class TslGame.TslProjectile_Flare
// 0x0148 (0x0530 - 0x03E8)
class ATslProjectile_Flare : public AActor
{
public:
	class UProjectileMovementComponent*                ProjectileMovementComp;                                   // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              DamageRadius;                                             // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UClass*                                      DebuffTemplate;                                           // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     HighAltTargetVelocity;                                    // 0x0408(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              GroundTraceDinstance;                                     // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttenuationScalingCheckDelay;                             // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttenuationScalingInterpSpeed;                            // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttenuationScalingInterpSpeedInWater;                     // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AttenuationScalingInMap;                                  // 0x0424(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AttenuationScalingOutMap;                                 // 0x042C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AttenuationScalingUnderWater;                             // 0x0434(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0438(0x0001) MISSED OFFSET
	bool                                               bIsUnderwater;                                            // 0x0439(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1E];                                      // 0x043A(0x001E) MISSED OFFSET
	class ATslPlayerState*                             TslPlayerState;                                           // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsCalledSuccessfully;                                    // 0x0460(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLogCreatedAlready;                                     // 0x0461(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHighAltReached_CP;                                       // 0x0462(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xCD];                                      // 0x0463(0x00CD) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectile_Flare"));

		return ptr;
	}


	void STATIC_SetAkAttenuationScaling_BP(float InAttScale);
	void STATIC_Server_SpawnCarePackageCustom(const struct FVector& InLocation);
	void STATIC_OnUnderwaterChanged_BP();
	void STATIC_OnParticleTouchedWater_BP();
	void STATIC_CheckUnderWaterLast(const struct FHitResult& InHitResult);
	void STATIC_ApplyBurn(const struct FVector& InLocation);
	void STATIC_ActivateFlare_BP();
};


// Class TslGame.TslProjectile_Warhead
// 0x0188 (0x0570 - 0x03E8)
class ATslProjectile_Warhead : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	class UTslProjectileMovementComponent*             ProjectileMovementComp;                                   // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x0408(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	int                                                FakeProjectileIndex;                                      // 0x0410(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	class UFakeProjectileComponent*                    FakeProjectileComponent;                                  // 0x0418(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	struct FProjectileConfig                           ProjectileConfig;                                         // 0x0428(0x00F0) (Edit, DisableEditOnInstance)
	EWarheadExplodedState                              ExplodeState;                                             // 0x0518(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0519(0x0003) MISSED OFFSET
	struct FVector                                     LastTickLocation;                                         // 0x051C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UAkComponent*                                AkComp;                                                   // 0x0528(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USphereComponent*                            InterpolationTargetComp;                                  // 0x0530(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0538(0x0010) MISSED OFFSET
	class ATslParticle*                                TrailEffect;                                              // 0x0548(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      TrailEffectClass;                                         // 0x0550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TrailSocketName;                                          // 0x0558(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0560(0x0008) MISSED OFFSET
	class ATslProjectile_Warhead*                      FakeProjectile;                                           // 0x0568(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslProjectile_Warhead"));

		return ptr;
	}


	void STATIC_TakeDamageImp(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void STATIC_OnProjectileStopSim(const struct FHitResult& ImpactResult);
	void STATIC_OnImpact(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void STATIC_Multi_ExplodeFromWater(const struct FVector& Location, const struct FRotator& Rotation, bool bExplodeFromDamage);
	void STATIC_Multi_DamageTaken(const struct FVector& Location, class AActor* DamageCauser);
};


// Class TslGame.TslRadioDataAsset
// 0x0038 (0x0070 - 0x0038)
class UTslRadioDataAsset : public UDataAsset
{
public:
	class UAkAudioEvent*                               TurnOff;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FString                                     VolumeRTPC;                                               // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<struct FTslRadioChannelInfo>                ChannelData;                                              // 0x0050(0x0010) (Edit, ZeroConstructor)
	int                                                MaxVolume;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinVolume;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                DefaultVolume;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDefaultPowerOn;                                          // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRandomChannel;                                        // 0x006D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoRepeatPlay;                                          // 0x006E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRadioDataAsset"));

		return ptr;
	}

};


// Class TslGame.TslRadioMessageManager
// 0x03E0 (0x0410 - 0x0030)
class UTslRadioMessageManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x2E0];                                     // 0x0030(0x02E0) MISSED OFFSET
	bool                                               bIsDisabled;                                              // 0x0310(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	class UStringTable*                                RadioMessageStringTable;                                  // 0x0318(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  RadioMessageCategoryDataTable;                            // 0x0320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWorkDistance;                                          // 0x0328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MsgLogShowDuration;                                       // 0x032C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MsgLogLineNumber;                                         // 0x0330(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MsgLogBanCond_TimeLimit;                                  // 0x0334(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MsgLogBanCond_Number;                                     // 0x0338(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MsgLogBan_Duarion;                                        // 0x033C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MsgLogNearDistance;                                       // 0x0340(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MsgLogMediumDistance;                                     // 0x0344(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DestForbbidenSeconds;                                     // 0x0348(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	TArray<float>                                      RadioMessageSendHistory;                                  // 0x0350(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x48];                                      // 0x0360(0x0048) MISSED OFFSET
	unsigned char                                      UnknownData04[0x50];                                      // 0x0360(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslRadioMessageManager.MutedPlayerUniqueIdSet
	unsigned char                                      UnknownData05[0x18];                                      // 0x03F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRadioMessageManager"));

		return ptr;
	}

};


// Class TslGame.TslRailComponent
// 0x0010 (0x0210 - 0x0200)
class UTslRailComponent : public UActorComponent
{
public:
	TArray<struct FTslRailNode>                        RailNodes;                                                // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRailComponent"));

		return ptr;
	}

};


// Class TslGame.TslReactionDoorComponent
// 0x0080 (0x0BD0 - 0x0B50)
class UTslReactionDoorComponent : public UStaticMeshComponent
{
public:
	class UTslReactionDoorData*                        ReactionDoorData;                                         // 0x0B50(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDestructibleMesh*                           DoorDestructibleMesh;                                     // 0x0B58(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                HLODChildIndex;                                           // 0x0B60(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B64(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDoorReplacedToDestructible;                             // 0x0B68(0x0010) (ZeroConstructor, InstancedReference)
	struct FDoorBreakingState                          DoorBreakingState;                                        // 0x0B78(0x0001) (Net)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0B79(0x000F) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_DestroyDM;                                    // 0x0B88(0x0008) (Transient)
	class UTslReactionBoxComponent*                    DoorTopBoxComponent;                                      // 0x0B90(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslReactionBoxComponent*                    DoorCenterBoxComponent;                                   // 0x0B98(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UTslReactionBoxComponent*                    DoorBottomBoxComponent;                                   // 0x0BA0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UDestructibleComponent*                      DoorDestructibleComponent;                                // 0x0BA8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslPlayerController*                        LocalPC;                                                  // 0x0BB0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTimerHandle                                TimerHandle_CheckValidDM;                                 // 0x0BB8(0x0008) (Transient)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0BC0(0x0001) MISSED OFFSET
	bool                                               bShouldRestore;                                           // 0x0BC1(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE];                                       // 0x0BC2(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReactionDoorComponent"));

		return ptr;
	}


	void STATIC_OnRep_ShouldRestore();
	void STATIC_OnRep_DoorBreakingState();
	void STATIC_ClientTakeDamage(float Damage, const struct FVector_NetQuantize& HitLocation, bool bIsPointDamage, class APlayerController* InAttackerPC);
	void STATIC_CheckValidDestructibleMesh();
};


// Class TslGame.TslReactionBoxComponent
// 0x0000 (0x09F0 - 0x09F0)
class UTslReactionBoxComponent : public UBoxComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReactionBoxComponent"));

		return ptr;
	}


	void STATIC_SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector STATIC_GetUnscaledBoxExtent();
	struct FVector STATIC_GetScaledBoxExtent();
};


// Class TslGame.TslReactionClientComponent
// 0x0000 (0x0B50 - 0x0B50)
class UTslReactionClientComponent : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReactionClientComponent"));

		return ptr;
	}


	bool STATIC_SetStaticMesh(class UStaticMesh* NewMesh);
	void STATIC_SetForcedLodModel(int NewForcedLodModel);
	void STATIC_OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void STATIC_GetLocalBounds(struct FVector* Min, struct FVector* Max);
};


// Class TslGame.TslRecastNavMesh
// 0x0040 (0x06E0 - 0x06A0)
class ATslRecastNavMesh : public ARecastNavMesh
{
public:
	struct FString                                     NavDataPath;                                              // 0x06A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FString>                             PVENavDataPath;                                           // 0x06B0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FString>                             PVENavLinkPath;                                           // 0x06C0(0x0010) (Edit, ZeroConstructor)
	bool                                               LoadInPIE;                                                // 0x06D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LoadInDS;                                                 // 0x06D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LoadInClient;                                             // 0x06D2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LoadInEditor;                                             // 0x06D3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x06D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRecastNavMesh"));

		return ptr;
	}

};


// Class TslGame.TslReferenceObjManager
// 0x0168 (0x0198 - 0x0030)
class UTslReferenceObjManager : public UObject
{
public:
	int                                                AsyncLoadPriority;                                        // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePIEPreload;                                        // 0x0034(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<class UObject*>                             GameModeObjectList;                                       // 0x0038(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             CharacterObjectList;                                      // 0x0048(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PreloadingObjectList;                                     // 0x0058(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x110];                                     // 0x0068(0x0110) MISSED OFFSET
	TArray<struct FStringAssetReference>               PreloadPendingList;                                       // 0x0178(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PreloadObjList;                                           // 0x0188(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReferenceObjManager"));

		return ptr;
	}


	void STATIC_RequestPreloadAsyncLoad();
	void STATIC_RequestAsyncLoad(class UObject* WorldContextObject, ETslReferenceObjType InType, float InDelayTime);
	void STATIC_OnFinishPreloadList();
	void STATIC_AddRefObject(class UObject* WorldContextObject, ETslReferenceObjType InType, class UObject* InObject);
	void STATIC_AddPendingAyncLoadList(class UObject* WorldContextObject, ETslReferenceObjType InType, TArray<struct FStringAssetReference> InAssetList);
};


// Class TslGame.TslReloadMagazineAnimState
// 0x0008 (0x0040 - 0x0038)
class UTslReloadMagazineAnimState : public UAnimNotifyState
{
public:
	unsigned char                                      bReloadAmmoAtTheStateEnd : 1;                             // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReloadMagazineAnimState"));

		return ptr;
	}

};


// Class TslGame.TslReplayData
// 0x0000 (0x0030 - 0x0030)
class UTslReplayData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReplayData"));

		return ptr;
	}

};


// Class TslGame.TslSandboxManager
// 0x0370 (0x03A0 - 0x0030)
class UTslSandboxManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x0030(0x0100) MISSED OFFSET
	float                                              MaxFlySpeed;                                              // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlyAcceleration;                                       // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlyDeceleration;                                       // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxSpawnItem;                                             // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxSpawnVehicle;                                          // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxSpawnAirCraft;                                         // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     VehicleSpawnOffset;                                       // 0x0148(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	class UStringTable*                                SandboxStringTable;                                       // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  SandboxL10NDataTable;                                     // 0x0160(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  WeaponDataTable;                                          // 0x0168(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  ItemDataTable;                                            // 0x0170(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  VehicleDataTable;                                         // 0x0178(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0180(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslSandboxManager.DroppedItemSet
	unsigned char                                      UnknownData03[0x50];                                      // 0x01D0(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslSandboxManager.SpawnedVehicleSet
	unsigned char                                      UnknownData04[0x50];                                      // 0x0220(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslSandboxManager.ReserveDestoryVehicleSet
	int                                                CurAirCraftCount;                                         // 0x0270(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData06[0x50];                                      // 0x0274(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslSandboxManager.MasterPlayerControllerSet
	struct FStringClassReference                       PostProcessStringClassRef;                                // 0x02C8(0x0010) (Edit)
	class AActor*                                      PostProcessActor;                                         // 0x02D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxItemNameCount;                                         // 0x02E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
	TArray<struct FName>                               Lv3ItemIdDataArray;                                       // 0x02E8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FSandboxMasterEffectGroup>           SandboxMasterEffectGroupArray;                            // 0x02F8(0x0010) (Edit, ZeroConstructor)
	float                                              RelVelMaxDegree;                                          // 0x0308(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RelVelMaxSpeed;                                           // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RelVelIncInterpSpeed;                                     // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RelVelDecInterpSpeed;                                     // 0x0314(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 RelVelCurveFloat;                                         // 0x0318(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               Lv3ItemIdArray;                                           // 0x0320(0x0010) (ZeroConstructor, Transient)
	TMap<class ATslCharacter*, float>                  RelVelWeightMap;                                          // 0x0330(0x0050) (ZeroConstructor, Transient)
	class ATslPlayerController*                        CachedLocalPlayerController;                              // 0x0380(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0388(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxManager"));

		return ptr;
	}


	void STATIC_Timer_ShowWaterMarkWidget();
	void STATIC_Timer_PreloadSandbox();
	void STATIC_OnVehicleDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class ATslPlayerState* PlayerInstigator, class AActor* DamageCauser);
};


// Class TslGame.TslSceneCaptureComponent2D
// 0x0010 (0x0B50 - 0x0B40)
class UTslSceneCaptureComponent2D : public USceneCaptureComponent2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B40(0x0008) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0B48(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSceneCaptureComponent2D"));

		return ptr;
	}


	void STATIC_CaptureScene();
};


// Class TslGame.TslSceneCaptureWorld
// 0x0090 (0x00C0 - 0x0030)
class UTslSceneCaptureWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0060(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSceneCaptureWorld"));

		return ptr;
	}


	void STATIC_InitWorld(class UGameInstance* GameInstance, const struct FString& SceneCapturePackageName);
	void STATIC_DestroyWorld();
};


// Class TslGame.TslSelfPutHelper
// 0x0050 (0x0080 - 0x0030)
class UTslSelfPutHelper : public UObject
{
public:
	TScriptInterface<class USlotInterface>             SlotInterface;                                            // 0x0030(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    SlotContainer;                                            // 0x0040(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0050(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSelfPutHelper"));

		return ptr;
	}

};


// Class TslGame.TslSelfPutHelperWidget
// 0x0000 (0x0250 - 0x0250)
class UTslSelfPutHelperWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSelfPutHelperWidget"));

		return ptr;
	}


	void STATIC_UnregisterInputComponent();
	void STATIC_Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void STATIC_StopListeningForInputAction(const struct FName& ActionName, TEnumAsByte<EInputEvent> EventType);
	void STATIC_StopListeningForAllInputActions();
	void STATIC_StopAnimation(class UWidgetAnimation* InAnimation);
	void STATIC_StopAllAnimations();
	void STATIC_SetPositionInViewport(const struct FVector2D& Position, bool bRemoveDPIScale);
	void STATIC_SetPlaybackSpeed(class UWidgetAnimation* InAnimation, float PlaybackSpeed);
	void STATIC_SetPadding(const struct FMargin& InPadding);
	void STATIC_SetOwningPlayer(class APlayerController* LocalPlayerController);
	void STATIC_SetOwningLocalPlayer(class ULocalPlayer* LocalPlayer);
	void STATIC_SetNumLoopsToPlay(class UWidgetAnimation* InAnimation, int NumLoopsToPlay);
	void STATIC_SetInputActionPriority(int NewPriority);
	void STATIC_SetInputActionBlocking(bool bShouldBlock);
	void STATIC_SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void STATIC_SetDesiredSizeInViewport(const struct FVector2D& Size);
	void STATIC_SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void STATIC_SetAnchorsInViewport(const struct FAnchors& Anchors);
	void STATIC_SetAlignmentInViewport(const struct FVector2D& Alignment);
	void STATIC_ReverseAnimation(class UWidgetAnimation* InAnimation);
	void STATIC_RemoveFromViewport();
	void STATIC_RegisterInputComponent();
	void STATIC_PreConstruct(bool IsDesignTime);
	void STATIC_PlaySound(class USoundBase* SoundToPlay);
	void STATIC_PlayAnimationTo(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed);
	void STATIC_PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed);
	float STATIC_PauseAnimation(class UWidgetAnimation* InAnimation);
	struct FEventReply STATIC_OnTouchStarted(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply STATIC_OnTouchMoved(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply STATIC_OnTouchGesture(const struct FGeometry& MyGeometry, const struct FPointerEvent& GestureEvent);
	struct FEventReply STATIC_OnTouchEnded(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply STATIC_OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void STATIC_OnPaint(struct FPaintContext* Context);
	struct FEventReply STATIC_OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void STATIC_OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void STATIC_OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply STATIC_OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply STATIC_OnMotionDetected(const struct FGeometry& MyGeometry, const struct FMotionEvent& InMotionEvent);
	struct FEventReply STATIC_OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply STATIC_OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply STATIC_OnKeyChar(const struct FGeometry& MyGeometry, const struct FCharacterEvent& InCharacterEvent);
	struct FEventReply STATIC_OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void STATIC_OnFocusLost(const struct FFocusEvent& InFocusEvent);
	bool STATIC_OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool STATIC_OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void STATIC_OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void STATIC_OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void STATIC_OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void STATIC_OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply STATIC_OnControllerButtonReleased(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply STATIC_OnControllerButtonPressed(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply STATIC_OnControllerAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	void STATIC_OnAnimationStarted(class UWidgetAnimation* Animation);
	void STATIC_OnAnimationFinished(class UWidgetAnimation* Animation);
	struct FEventReply STATIC_OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void STATIC_ListenForInputAction(const struct FName& ActionName, TEnumAsByte<EInputEvent> EventType, bool bConsume, const struct FScriptDelegate& Callback);
	bool STATIC_IsPlayingAnimation();
	bool STATIC_IsListeningForInputAction(const struct FName& ActionName);
	bool STATIC_IsInViewport();
	bool STATIC_IsInteractable();
	bool STATIC_IsAnyAnimationPlaying();
	bool STATIC_IsAnimationPlaying(class UWidgetAnimation* InAnimation);
	class APawn* STATIC_GetOwningPlayerPawn();
	class APlayerController* STATIC_GetOwningPlayer();
	class ULocalPlayer* STATIC_GetOwningLocalPlayer();
	bool STATIC_GetIsVisible();
	float STATIC_GetAnimationCurrentTime(class UWidgetAnimation* InAnimation);
	struct FAnchors STATIC_GetAnchorsInViewport();
	struct FVector2D STATIC_GetAlignmentInViewport();
	void STATIC_FinishStoppedSequencePlayers();
	void STATIC_Destruct();
	void STATIC_Construct();
	void STATIC_AddToViewport(int ZOrder);
	bool STATIC_AddToPlayerScreen(int ZOrder);
};


// Class TslGame.TslServerParticle
// 0x0028 (0x0410 - 0x03E8)
class ATslServerParticle : public AActor
{
public:
	bool                                               bAutoDestroyOnParticleFinish;                             // 0x03E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoPlaySound;                                           // 0x03E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03EA(0x0006) MISSED OFFSET
	class UParticleSystemComponent*                    ParticleSystem;                                           // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AkSound;                                                  // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0400(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslServerParticle"));

		return ptr;
	}


	void STATIC_StopParticleMulticast();
	void STATIC_OnParticleFinish(class UParticleSystemComponent* PSystem);
};


// Class TslGame.TslSightTestComponent
// 0x0030 (0x0A00 - 0x09D0)
class UTslSightTestComponent : public UArrowComponent
{
public:
	float                                              TestHalfAngle;                                            // 0x09D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngleDelta;                                               // 0x09D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TestDistance;                                             // 0x09D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                HitColor;                                                 // 0x09DC(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                NoneHitColor;                                             // 0x09EC(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x09FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSightTestComponent"));

		return ptr;
	}


	void STATIC_DrawSightTestResult();
};


// Class TslGame.TslSimpleCollisionReceiver
// 0x00A0 (0x0550 - 0x04B0)
class UTslSimpleCollisionReceiver : public USceneComponent
{
public:
	EScmCollisionGroup                                 CollisionGroup;                                           // 0x04B0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x9F];                                      // 0x04B1(0x009F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSimpleCollisionReceiver"));

		return ptr;
	}

};


// Class TslGame.TslSingleton
// 0x0170 (0x01A0 - 0x0030)
class UTslSingleton : public UObject
{
public:
	unsigned char                                      UnknownData00[0x110];                                     // 0x0030(0x0110) MISSED OFFSET
	class UWeaponsPenetrationConfig*                   WeaponsPenetrationConfig;                                 // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	class UDataTable*                                  EmoteDataTable;                                           // 0x0148(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      TslAchievementClass;                                      // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CharmAnimInstance;                                        // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FStringAssetReference                       AnimationDataTableRefForCheat;                            // 0x0160(0x0010) (Edit)
	class UDataTable*                                  AnimationDataTableForCheat;                               // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  GamepadKeyIconTable;                                      // 0x0178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FStringClassReference                       TDMInvinciblePP;                                          // 0x0180(0x0010) (Edit)
	class UClass*                                      ItemDataTableManagerClass;                                // 0x0190(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTslItemDataTableManager*                    ItemDataTableManager;                                     // 0x0198(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSingleton"));

		return ptr;
	}


	class UClass* STATIC_GetCharmAnimInstance();
};


// Class TslGame.TslSkydiveComponent
// 0x0F00 (0x1100 - 0x0200)
class UTslSkydiveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0200(0x0040) MISSED OFFSET
	class ATslCharacter*                               CharacterRef;                                             // 0x0240(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslCharacterMovement*                       CharacterMovementRef;                                     // 0x0248(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              LastRelativeAltitude;                                     // 0x0250(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8A4];                                     // 0x0254(0x08A4) MISSED OFFSET
	struct FSimulationStep                             RemoteSimulationStep;                                     // 0x0AF8(0x0048) (Net, Transient)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0B40(0x000C) MISSED OFFSET
	float                                              TargetInputForward;                                       // 0x0B4C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TartgetInputRight;                                        // 0x0B50(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TargetHeading;                                            // 0x0B54(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FReplicatedSkinParam                        ParachuteSkinData;                                        // 0x0B58(0x0020) (Net, Transient)
	ESkydiveState                                      SkydiveState;                                             // 0x0B78(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EParachuteCutoffState                              ParachuteCutoffState;                                     // 0x0B79(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsManualCutoffAllowed : 1;                               // 0x0B7A(0x0001) (Net, Transient)
	unsigned char                                      bLimitHorzMoves : 1;                                      // 0x0B7A(0x0001) (Net, Transient)
	unsigned char                                      UnknownData03[0x29];                                      // 0x0B7B(0x0029) MISSED OFFSET
	struct FSkydiveRotationSettings                    RotationSettings;                                         // 0x0BA4(0x0018) (Edit, DisableEditOnInstance)
	struct FSkydiveDragSettings                        DragSettings;                                             // 0x0BBC(0x0014) (Edit, DisableEditOnInstance)
	struct FSkydiveLateralSettings                     LateralSettings;                                          // 0x0BD0(0x0020) (Edit, DisableEditOnInstance)
	struct FFreefallVelocitySettings                   FreefallVelocitySettings;                                 // 0x0BF0(0x000C) (Edit, DisableEditOnInstance)
	struct FSkydiveVelocitySettings                    VelocityMergeSettings;                                    // 0x0BFC(0x0030) (Edit, DisableEditOnInstance)
	struct FSkydiveInputSettings                       InputSettings;                                            // 0x0C2C(0x0028) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0C54(0x0004) MISSED OFFSET
	struct FParachuteGeneralSettings                   ParachuteGeneralSettings;                                 // 0x0C58(0x00C0) (Edit, DisableEditOnInstance)
	struct FParachuteControlSettings                   ParachuteControlSettings;                                 // 0x0D18(0x0030) (Edit, DisableEditOnInstance)
	struct FParachuteVelocitySettings                  ParachuteVelocitySettings;                                // 0x0D48(0x007C) (Edit, DisableEditOnInstance)
	struct FParachuteDeploySettings                    ParachuteDeploySettings;                                  // 0x0DC4(0x0010) (Edit, DisableEditOnInstance)
	struct FParachuteCutoffSettings                    ParachuteCutoffSettings;                                  // 0x0DD4(0x0050) (Edit, DisableEditOnInstance)
	struct FParachuteOverlapSettings                   ParachuteOverlapSettings;                                 // 0x0E24(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0E44(0x0004) MISSED OFFSET
	struct FAnimUpdateRateSettings                     ParachuteUpdateRateSettings;                              // 0x0E48(0x0078) (Edit, DisableEditOnInstance)
	struct FParachuteLandSettings                      LandSettings;                                             // 0x0EC0(0x0018) (Edit, DisableEditOnInstance)
	struct FSkydiveNetInterpSettings                   SkydiveNetInterpSettings;                                 // 0x0ED8(0x0028) (Edit, DisableEditOnInstance)
	struct FSkydiveEffects                             SkydiveEffects;                                           // 0x0F00(0x0058) (Edit, DisableEditOnInstance)
	struct FSkydiveAudioSettings                       SkydiveAudioSettings;                                     // 0x0F58(0x0078) (Edit, DisableEditOnInstance)
	struct FSkydiveDamageSettings                      DamageSettings;                                           // 0x0FD0(0x0048) (Edit, DisableEditOnInstance)
	int                                                MaxWindowSize;                                            // 0x1018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxAheadWindowSize;                                       // 0x101C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UncorrectedSmoothingSpeed;                                // 0x1020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClientCorrectionThreshold;                                // 0x1024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinStateBroadcastRate;                                    // 0x1028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ServerSimulationStartOffsetSec;                           // 0x102C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FF_Grav_Scalar;                                           // 0x1030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FF_Grav_MinRangeScalar;                                   // 0x1034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USkinnableSkeletalMeshComponent*             ParachuteSKReference;                                     // 0x1038(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    FreefallParticleRef;                                      // 0x1040(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ParachuteTrailParticleRef;                                // 0x1048(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AkComponentRef;                                           // 0x1050(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x1058(0x0004) MISSED OFFSET
	struct FRotator                                    FollowControllRotation;                                   // 0x105C(0x000C) (Net, IsPlainOldData)
	float                                              FollowTargetInputForward;                                 // 0x1068(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              FollowTargetRight;                                        // 0x106C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              FollowTargetHeading;                                      // 0x1070(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              CalculatedRate;                                           // 0x1074(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     GroundLocation;                                           // 0x1078(0x000C) (IsPlainOldData)
	bool                                               bTryingToRun;                                             // 0x1084(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x1085(0x0003) MISSED OFFSET
	float                                              ParachuteOpenHeight;                                      // 0x1088(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x74];                                      // 0x108C(0x0074) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSkydiveComponent"));

		return ptr;
	}


	void STATIC_UpdateInputWithFollow();
	void STATIC_Server_UpdateView(const struct FRotator& ControlRotation);
	void STATIC_Server_StopParachuting(bool bToFall, int ClientSimStep, float InStepAlpha);
	void STATIC_Server_SetSkydiveState(ESkydiveState InSkydiveState);
	void STATIC_Server_SetRightInput(float InNewRight);
	void STATIC_Server_SetPlayerHeading(float InNewHeading);
	void STATIC_Server_SetForwardInput(float InNewForward);
	void STATIC_Server_SetCutoffState(EParachuteCutoffState InState);
	void STATIC_Server_RequestParachuteOpen();
	void STATIC_Server_ProcessInput(const struct FSimulationStep& InputStep);
	void STATIC_Server_ManualCutoffComplete();
	void STATIC_Server_LimitHorzMoves(bool bInLimitHorzMoves);
	void STATIC_OnSpectatingChanged(bool bIsSpectating);
	void STATIC_OnRep_SkydiveStateChanged();
	void STATIC_OnRep_RemoteSimStepChanged();
	void STATIC_OnRep_ParachuteSkinChanged();
	void STATIC_OnRep_ParachuteReleased();
	void STATIC_OnRep_FollowTargetRight();
	void STATIC_OnRep_FollowTargetInputForward();
	void STATIC_OnRep_FollowTargetHeading();
	void STATIC_OnRep_CutoffChanged();
	void STATIC_OnManualCutOffComplete();
	void STATIC_Multi_PlayLanding(const struct FParachuteLandingData& InLandingData);
	void STATIC_Multi_DetachParachute();
	bool STATIC_IsTryingToRun(class ATslCharacter* Character);
	void STATIC_ForceMeshRotationResetStep();
	void STATIC_Demo_SetRightInput(float InNewRight);
	void STATIC_Demo_SetRemoteState(const struct FSimulationStep& SimStep);
	void STATIC_Demo_SetPlayerHeading(float InNewHeading);
	void STATIC_Demo_SetForwardInput(float InNewForward);
	void STATIC_DelayedStopParachuting();
	void STATIC_Client_ReceiveServerCorrection(const struct FSimulationStep& CorrectionStep, int ActualServerStep);
	void STATIC_Client_ReceiveHardCorrection(const struct FSimulationStep& CorrectionStep);
	void STATIC_Client_DrawLandingLocation(const struct FVector& InLocation, const struct FVector& InPrevLocation, int InStep);
	void STATIC_Client_DrawDebugString(const struct FVector& InPosition, const struct FString& inString, const struct FColor& InColor, float InTime, float InSize);
	void STATIC_Client_DrawDebugPosition(const struct FVector& InPosition, const struct FRotator& InRotation);
	void STATIC_Client_DrawDebugLine(const struct FVector& InStart, const struct FVector& InEnd, const struct FColor& InColor, float InDuration);
};


// Class TslGame.TslSmokeParticleSystemComponent
// 0x0000 (0x0C40 - 0x0C40)
class UTslSmokeParticleSystemComponent : public UParticleSystemComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSmokeParticleSystemComponent"));

		return ptr;
	}


	void STATIC_SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void STATIC_SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void STATIC_SetTemplate(class UParticleSystem* NewTemplate);
	void STATIC_SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void STATIC_SetFloatParameter(const struct FName& ParameterName, float Param);
	void STATIC_SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void STATIC_SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void STATIC_SetBeamTargetTangent(int emitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void STATIC_SetBeamTargetStrength(int emitterIndex, float NewTargetStrength, int TargetIndex);
	void STATIC_SetBeamTargetPoint(int emitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void STATIC_SetBeamSourceTangent(int emitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void STATIC_SetBeamSourceStrength(int emitterIndex, float NewSourceStrength, int SourceIndex);
	void STATIC_SetBeamSourcePoint(int emitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void STATIC_SetBeamEndPoint(int emitterIndex, const struct FVector& NewEndPoint);
	void STATIC_SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType);
	void STATIC_SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule);
	void STATIC_SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	int STATIC_GetNumActiveParticles();
	class UMaterialInterface* STATIC_GetNamedMaterial(const struct FName& InName);
	bool STATIC_GetBeamTargetTangent(int emitterIndex, int TargetIndex, struct FVector* OutTangentPoint);
	bool STATIC_GetBeamTargetStrength(int emitterIndex, int TargetIndex, float* OutTargetStrength);
	bool STATIC_GetBeamTargetPoint(int emitterIndex, int TargetIndex, struct FVector* OutTargetPoint);
	bool STATIC_GetBeamSourceTangent(int emitterIndex, int SourceIndex, struct FVector* OutTangentPoint);
	bool STATIC_GetBeamSourceStrength(int emitterIndex, int SourceIndex, float* OutSourceStrength);
	bool STATIC_GetBeamSourcePoint(int emitterIndex, int SourceIndex, struct FVector* OutSourcePoint);
	bool STATIC_GetBeamEndPoint(int emitterIndex, struct FVector* OutEndPoint);
	void STATIC_GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void STATIC_EndTrails();
	class UMaterialInstanceDynamic* STATIC_CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void STATIC_BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
};


// Class TslGame.TslSmokePropagationComponent
// 0x0100 (0x05B0 - 0x04B0)
class UTslSmokePropagationComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET
	class UTslSmokeParticleSystemComponent*            SmokeParticle;                                            // 0x04B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x19];                                      // 0x04C0(0x0019) MISSED OFFSET
	bool                                               bSystemActivated;                                         // 0x04D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x04DA(0x0006) MISSED OFFSET
	class UClass*                                      BlockingActorTemplate;                                    // 0x04E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HalfHeightGlobal;                                         // 0x04E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HalfHeightLocalScalar;                                    // 0x04EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GlobalRadius;                                             // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GlobalAngle;                                              // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                RadialTryCount;                                           // 0x04F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                LoopCount;                                                // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                LastWorkerIndex;                                          // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistanceFromHost;                                      // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CeilingTraceDistance;                                     // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MainParticleVelocityScale_First;                          // 0x050C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MainParticleVelocityScale_Second;                         // 0x0518(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MainParticleVelocityScale_Third;                          // 0x0524(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalRayTraceOffset;                                 // 0x0530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalRayRadiusScalar;                                // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalRayPropagateOffset;                             // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlockerGroundTraceOffset;                                 // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LowChildVelocityStaticVector;                             // 0x0540(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     HighChildVelocityStaticVector;                            // 0x054C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   LowChildVelocityInMap;                                    // 0x0558(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   LowChildVelocityOutMap;                                   // 0x0560(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   HighChildVelocityInMap;                                   // 0x0568(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   HighChildVelocityOutMap;                                  // 0x0570(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentRadialRay;                                         // 0x0578(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CurrentSpawnedChildCount;                                 // 0x057C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxTicksAllowed;                                          // 0x0580(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxChildrenAllowed;                                       // 0x0584(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CustomTickInterval;                                       // 0x0588(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StartDelay;                                               // 0x058C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugPropagation;                                        // 0x0590(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugTick;                                               // 0x0591(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0592(0x0002) MISSED OFFSET
	float                                              ParticleLifetime;                                         // 0x0594(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ParticleLifetimeRandomOffset;                             // 0x0598(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              ParticleToObjectLifeScale;                                // 0x05A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ParticleAllocationCount;                                  // 0x05A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSmokePropagationComponent"));

		return ptr;
	}


	void STATIC_InitScan();
};


// Class TslGame.TslSpawnAroundPlayerSystem
// 0x0070 (0x00A0 - 0x0030)
class UTslSpawnAroundPlayerSystem : public UObject
{
public:
	int                                                CalcSpawnPointNumPerTick;                                 // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CalcSpawnPointGroupInterval;                              // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FNpcTimeSpawnParam>                  NpcTimeSpawnParamArray;                                   // 0x0038(0x0010) (Edit, ZeroConstructor)
	class UNavigationSystem*                           NavgationSystem;                                          // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FNpcTimeSpawnParam                          CurTimeSpawn;                                             // 0x0050(0x0020) (Transient)
	int                                                CurTimeSpawnIndex;                                        // 0x0070(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurCalcPlayerLocationIndex;                               // 0x0074(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FVector>                             PlayerLocationArray;                                      // 0x0078(0x0010) (ZeroConstructor, Transient)
	int                                                RemainSpawnCount;                                         // 0x0088(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x008C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpawnAroundPlayerSystem"));

		return ptr;
	}

};


// Class TslGame.TslSpecificLocationMarker
// 0x0020 (0x0408 - 0x03E8)
class ATslSpecificLocationMarker : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     LocationName;                                             // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              Radius;                                                   // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpecificLocationMarker"));

		return ptr;
	}

};


// Class TslGame.TslSpectatorActorChannel
// 0x0290 (0x0580 - 0x02F0)
class UTslSpectatorActorChannel : public UActorChannel
{
public:
	unsigned char                                      UnknownData00[0x290];                                     // 0x02F0(0x0290) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpectatorActorChannel"));

		return ptr;
	}

};


// Class TslGame.TslSpectatorPawn
// 0x0408 (0x0878 - 0x0470)
class ATslSpectatorPawn : public ASpectatorPawn
{
public:
	class UClass*                                      MyShake;                                                  // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptDelegate                             OnGoToLobby;                                              // 0x0478(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET
	TMap<struct FString, struct FStringClassReference> LevelAttributeClasses;                                    // 0x0490(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FStringClassReference                       ReplayHUD;                                                // 0x04E0(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              PlayerInfoDefaultDistance;                                // 0x04F0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerInfoMinDistance;                                    // 0x04F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerInfoMaxDistance;                                    // 0x04F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsShowHeaderGun;                                          // 0x04FC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04FD(0x0003) MISSED OFFSET
	class USpringArmComponent*                         FreeCameraSpringArmComponent;                             // 0x0500(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            FreeCameraComponent;                                      // 0x0508(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslFollowCameraSpringArmComponent*          FollowCameraSpringArmComponent;                           // 0x0510(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslFollowCameraComponent*                   FollowCameraComponent;                                    // 0x0518(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslFilmCameraSpringArmComponent*            FilmCameraSpringArmComponent;                             // 0x0520(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            FilmCameraComponent;                                      // 0x0528(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UUpdateCameraComponent*                      UpdateCameraComponent;                                    // 0x0530(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	EObserverCameraMode                                CameraMode;                                               // 0x0538(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EReplayTimelineMode                                ReplayTimelineMode;                                       // 0x0539(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x053A(0x0006) MISSED OFFSET
	class UArrowComponent*                             AudioListener;                                            // 0x0540(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTslDeathCameraComponent*                    DeathCameraComponent;                                     // 0x0548(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              LocationUpdateIntervalSeconds;                            // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	float                                              LimitMinFreeCamFov;                                       // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LimitMaxFreeCamFov;                                       // 0x055C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0560(0x0008) MISSED OFFSET
	float                                              SlowInterpSpeed;                                          // 0x0568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NormalInterpSpeed;                                        // 0x056C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              QuickInterpSpeed;                                         // 0x0570(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentInterpSpeed;                                       // 0x0574(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0578(0x0008) MISSED OFFSET
	float                                              LimitTargetArmLength;                                     // 0x0580(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpectatableCheckLength;                                   // 0x0584(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpectatableCheckScreenRatio;                              // 0x0588(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3C];                                      // 0x058C(0x003C) MISSED OFFSET
	bool                                               bQuckZoomMode;                                            // 0x05C8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSlowZoomMode;                                            // 0x05C9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReplayShowTracer;                                        // 0x05CA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReplayShowTracerTeamColor;                               // 0x05CB(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ReplayBullteModeTypeCurrentIndex;                         // 0x05CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslTracerManager*                           CachedReplayTracerManager;                                // 0x05D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET
	struct FString                                     SpectatedCharacterUniqueId;                               // 0x05E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     SpectatedCharacterPlayerName;                             // 0x05F0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData08[0xF8];                                      // 0x0600(0x00F8) MISSED OFFSET
	bool                                               bEnableReplayEditor;                                      // 0x06F8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               IsReplayClip;                                             // 0x06F9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x06FA(0x0002) MISSED OFFSET
	int                                                ReplayClipStartTime;                                      // 0x06FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ReplayClipEndTime;                                        // 0x0700(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0704(0x0004) MISSED OFFSET
	struct FDateTime                                   ReplayRecordedTime;                                       // 0x0708(0x0008) (BlueprintVisible, BlueprintReadOnly)
	struct FStringClassReference                       ReplayZoneEffectClass;                                    // 0x0710(0x0010) (Edit, DisableEditOnInstance)
	struct FStringClassReference                       ReplayZoneAreaClass;                                      // 0x0720(0x0010) (Edit, DisableEditOnInstance)
	class ATslPostProcessEffect*                       ReplayZoneEffect;                                         // 0x0730(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      ReplayZoneArea;                                           // 0x0738(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<int, struct FSavedObPos>                      SavedObPoses;                                             // 0x0740(0x0050) (ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnPlayerInfoDistanceDelegate;                             // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReplayClipInfoDelegate;                                 // 0x07A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReplayInfoDelegate;                                     // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x8];                                       // 0x07C0(0x0008) MISSED OFFSET
	class ATslCharacter*                               KillcamKiller;                                            // 0x07C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ATslCharacter*                               KillcamVictim;                                            // 0x07D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x40];                                      // 0x07D8(0x0040) MISSED OFFSET
	class UTslGamepadPawnInputComponent*               TslGamepadInputComponent;                                 // 0x0818(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              PivotYawScaleConstant;                                    // 0x0820(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PivotPitchScaleConstant;                                  // 0x0824(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PivotHeightSpeedConstant;                                 // 0x0828(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PivotMaximumAngle;                                        // 0x082C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ObserverLastHitLocation;                                  // 0x0830(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x10];                                      // 0x083C(0x0010) MISSED OFFSET
	float                                              LockOnYawScaleConstant;                                   // 0x084C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LockOnPitchScaleConstant;                                 // 0x0850(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LockOnHeightSpeedConstant;                                // 0x0854(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LockOnMaximumAngle;                                       // 0x0858(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LockOnZOffset;                                            // 0x085C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslCharacter*                               ObserverLockOnTarget;                                     // 0x0860(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0868(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpectatorPawn"));

		return ptr;
	}


	bool STATIC_TryLeaveMatchPopupPad();
	void STATIC_TickMonitoring();
	void STATIC_switchedSpectatorCamera();
	void STATIC_SetShowPlayerInfoDistance(float Distance);
	void STATIC_SetPlayerCamera(class AActor* NewViewTarget);
	void STATIC_SetObserverCameraMode(EObserverCameraMode NewCameraMode, class AActor* NewViewTarget);
	bool STATIC_SetKillerOrVictimCamera(const struct FString& strKillerID, const struct FString& strKillerName, const struct FString& strVictimID, const struct FString& strVictimName);
	void STATIC_SetFreeCameraPosRot(const struct FVector& Pos, const struct FRotator& Rot);
	void STATIC_SetFreeCamera();
	void STATIC_SetFreeCamBattleLocation(const struct FVector& HitterLoc, const struct FVector& AttackedLoc);
	void STATIC_SetFollowCamera(class AActor* NewViewTarget);
	bool STATIC_RestoreTargetCharacter();
	bool STATIC_ReportSpectatorPad();
	bool STATIC_PrevSpectatorCameraPad();
	void STATIC_OnViewTargetUpdate(class AActor* NewViewTarget);
	void STATIC_OnToggleShowObseverTagWeapon();
	void STATIC_OnToggleObseverTagWidget();
	bool STATIC_OnToggleFreeCameraLagPad();
	void STATIC_OnSwitchCameraSpectatorBegin();
	void STATIC_OnSwitchCameraSpectator();
	void STATIC_OnSwitchCameraFollowBegin();
	void STATIC_OnSwitchCameraFollow();
	void STATIC_OnStopSlowMove();
	void STATIC_OnStopFastMove();
	void STATIC_OnStartSlowMove();
	void STATIC_OnStartFastMove();
	void STATIC_OnSetLocation(unsigned char Idx);
	void STATIC_OnSetFree();
	void STATIC_OnSetCharacterSpec(unsigned char Idx);
	void STATIC_OnSetCharacter(unsigned char Idx);
	void STATIC_OnSaveLocation(unsigned char Idx);
	void STATIC_OnSaveCharacter(unsigned char Idx);
	void STATIC_OnPlayerInfoDistanceUpHold();
	void STATIC_OnPlayerInfoDistanceUp();
	void STATIC_OnPlayerInfoDistanceDownHold();
	void STATIC_OnPlayerInfoDistanceDown();
	void STATIC_OnObserverLagCorrectionUp();
	void STATIC_OnObserverLagCorrectionReset();
	void STATIC_OnObserverLagCorrectionDown();
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnGoToTheLobby(EPopupButtonID ButtonID);
	bool STATIC_NextSpectatorCameraPad();
	void STATIC_LookAtTargetPos(const struct FVector& targetPos);
	bool STATIC_IsValidSwitchCameraFreeToOtherMode();
	bool STATIC_IsPlayerCameraMode();
	bool STATIC_IsObserverTagWeaponShow();
	bool STATIC_IsFreeCameraMode();
	bool STATIC_IsFollowCameraMode();
	void STATIC_HandleClipboard();
	class ATslCharacter* STATIC_GetSpectatableCharacter();
	class AItemPackage* STATIC_GetSpectableItemPackage();
	float STATIC_GetShowPlayerInfoDistance();
	bool STATIC_GetObserverTagShow();
	class ATslCharacter* STATIC_GetLastSpectatedCharacter();
	EObserverCameraMode STATIC_GetCameraMode();
	class ATslCharacter* STATIC_FindCharacterByUniqueID(const struct FString& UniqueId);
	class ATslCharacter* STATIC_FindCharacterByNickName(const struct FString& Nickname);
	void STATIC_CameraRollUp();
	void STATIC_CameraRollDown();
	void STATIC_CameraAttachToActor(const struct FName& InActorName);
	void STATIC_BackupTargetCharacter(class AActor* ViewTarget);
};


// Class TslGame.TslSpectatorPawnMovement
// 0x0030 (0x02E0 - 0x02B0)
class UTslSpectatorPawnMovement : public USpectatorPawnMovement
{
public:
	float                                              SlowMoveModifier;                                         // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFreeMoveSpeed;                                         // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFreeMoveSpeed;                                         // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFreeMoveSpeedHeight;                                   // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFreeMoveSpeedHeight;                                   // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AbsoluteMinZ;                                             // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AbsoluteMaxZ;                                             // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x02CC(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpectatorPawnMovement"));

		return ptr;
	}

};


// Class TslGame.TslStreamer
// 0x0020 (0x0050 - 0x0030)
class UTslStreamer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStreamer"));

		return ptr;
	}

};


// Class TslGame.FoliageCollisionStreamer
// 0x0068 (0x00B8 - 0x0050)
class UFoliageCollisionStreamer : public UTslStreamer
{
public:
	bool                                               bEnabled;                                                 // 0x0050(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              MinDistance;                                              // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxQueryDistance;                                         // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxSimulationDistance;                                    // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseOnlyQueryAndPhysics;                                  // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x57];                                      // 0x0061(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FoliageCollisionStreamer"));

		return ptr;
	}

};


// Class TslGame.LODActorStreamer
// 0x0038 (0x0088 - 0x0050)
class ULODActorStreamer : public UTslStreamer
{
public:
	bool                                               bEnabled;                                                 // 0x0050(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              PreLoadDistance;                                          // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PerFrameShowCount;                                        // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PerFrameShowCountLimit;                                   // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FFloatRange>                         MinDrawDistanceOverride;                                  // 0x0060(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LODActorStreamer"));

		return ptr;
	}

};


// Class TslGame.ParticleEnvrionmentStreamer
// 0x0018 (0x0068 - 0x0050)
class UParticleEnvrionmentStreamer : public UTslStreamer
{
public:
	bool                                               bEnabled;                                                 // 0x0050(0x0001) (ZeroConstructor, Transient, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              ToleranceDeactiveDistance;                                // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0058(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ParticleEnvrionmentStreamer"));

		return ptr;
	}

};


// Class TslGame.TslStreamerManager
// 0x0028 (0x0410 - 0x03E8)
class ATslStreamerManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	TArray<class UClass*>                              StreamerClasses;                                          // 0x03F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTslStreamer*>                        TslStreamers;                                             // 0x0400(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStreamerManager"));

		return ptr;
	}

};


// Class TslGame.TslTDMBoostGauge
// 0x0020 (0x0050 - 0x0030)
class UTslTDMBoostGauge : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTDMBoostGauge"));

		return ptr;
	}

};


// Class TslGame.TslTDMBoostGaugeSystem
// 0x0018 (0x0048 - 0x0030)
class UTslTDMBoostGaugeSystem : public UObject
{
public:
	float                                              SpawnBoostGauge;                                          // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              KillBoostGauge;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AssistBoostGauge;                                         // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleStateDuration;                                      // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecreaseBoostGaugePerSeconds;                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RecoverHealthPerSeconds;                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTDMBoostGaugeSystem"));

		return ptr;
	}

};


// Class TslGame.TslTempFocusableWidgetInterface
// 0x0000 (0x0030 - 0x0030)
class UTslTempFocusableWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTempFocusableWidgetInterface"));

		return ptr;
	}

};


// Class TslGame.TslThrowableAnimInstance
// 0x0008 (0x03A8 - 0x03A0)
class UTslThrowableAnimInstance : public UAnimInstance
{
public:
	class ATslWeapon_Throwable*                        ThrowableRef;                                             // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslThrowableAnimInstance"));

		return ptr;
	}


	void STATIC_OnThrowableStateChanged_BP();
	void STATIC_OnThrowableStateChanged();
	class ATslWeapon_Throwable* STATIC_GetThrowableRef();
};


// Class TslGame.TslThrowableTrajectoryViewComponent
// 0x00E0 (0x0B80 - 0x0AA0)
class UTslThrowableTrajectoryViewComponent : public USplineComponent
{
public:
	class UStaticMesh*                                 SplineSegmentMesh;                                        // 0x0AA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          SplineSegmentMeshMaterial;                                // 0x0AA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   SegmentMeshScale;                                         // 0x0AB0(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UStaticMesh*                                 ImpactMesh;                                               // 0x0AB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          ImpactMeshMaterial;                                       // 0x0AC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ImpactMeshScale;                                          // 0x0AC8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0AD4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x0AD4(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslThrowableTrajectoryViewComponent.TraceObjectTypes
	float                                              PredictionTime;                                           // 0x0B28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceScaleFactor;                                      // 0x0B2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MaterialParam_NearDepthFadeOrigin;                        // 0x0B30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MaterialParam_FarDepthFadeOrigin;                         // 0x0B38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SplineGenerationAngThresholdDeg;                          // 0x0B40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0B44(0x0004) MISSED OFFSET
	class UStaticMeshComponent*                        ImpactMeshComponent;                                      // 0x0B48(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class USplineMeshComponent*>                SplineMeshArray;                                          // 0x0B50(0x0010) (ExportObject, ZeroConstructor)
	class UMaterialInstanceDynamic*                    SplineSegmentMeshMaterialDynamic;                         // 0x0B60(0x0008) (ZeroConstructor, IsPlainOldData)
	TScriptInterface<class UTslTrajectoryProviderInterface> TrajectoryProvider;                                       // 0x0B68(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0B78(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslThrowableTrajectoryViewComponent"));

		return ptr;
	}


	void STATIC_AttachToWeapon(class ATslWeapon* InTrajectoryProvider);
};


// Class TslGame.TslTrain
// 0x0058 (0x0440 - 0x03E8)
class ATslTrain : public AActor
{
public:
	ETrainHeadingDir                                   HeadingDir;                                               // 0x03E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLoop;                                                    // 0x03E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03EA(0x0006) MISSED OFFSET
	class AActor*                                      RailActor;                                                // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RailComponentName;                                        // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RailCarTag;                                               // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RailCarFrontContactTag;                                   // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RailCarBackContactTag;                                    // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                StartRailIndex;                                           // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMultiply;                                            // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FTslRailCar>                         RailCars;                                                 // 0x0420(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0430(0x0008) MISSED OFFSET
	float                                              ElapsedTime;                                              // 0x0438(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x043C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTrain"));

		return ptr;
	}

};


// Class TslGame.TslTransportEjectionComponent
// 0x0000 (0x0200 - 0x0200)
class UTslTransportEjectionComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTransportEjectionComponent"));

		return ptr;
	}


	void STATIC_ToggleActive();
	void STATIC_SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void STATIC_SetTickableWhenPaused(bool bTickableWhenPaused);
	void STATIC_SetIsReplicated(bool ShouldReplicate);
	void STATIC_SetComponentTickInterval(float TickInterval);
	void STATIC_SetComponentTickEnabled(bool bEnabled);
	void STATIC_SetAutoActivate(bool bNewAutoActivate);
	void STATIC_SetActive(bool bNewActive, bool bReset);
	void STATIC_RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_ReceiveTick(float DeltaSeconds);
	void STATIC_ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void STATIC_ReceiveBeginPlay();
	void STATIC_OnRep_IsActive();
	void STATIC_K2_DestroyComponent(class UObject* Object);
	bool STATIC_IsComponentTickEnabled();
	bool STATIC_IsBeingDestroyed();
	bool STATIC_IsActive();
	class AActor* STATIC_GetOwner();
	float STATIC_GetComponentTickInterval();
	void STATIC_Deactivate();
	bool STATIC_ComponentHasTag(const struct FName& Tag);
	void STATIC_AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void STATIC_AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void STATIC_Activate(bool bReset);
};


// Class TslGame.TslAreaTransportEjectionComponent
// 0x0010 (0x0210 - 0x0200)
class UTslAreaTransportEjectionComponent : public UTslTransportEjectionComponent
{
public:
	struct FString                                     EjectionAreaTag;                                          // 0x0200(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslAreaTransportEjectionComponent"));

		return ptr;
	}

};


// Class TslGame.TslUniversalInputComboBoxString
// 0x0008 (0x0DB8 - 0x0DB0)
class UTslUniversalInputComboBoxString : public UComboBoxString
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0DB0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslUniversalInputComboBoxString"));

		return ptr;
	}


	void STATIC_SetSelectedOption(const struct FString& Option);
	bool STATIC_RemoveOption(const struct FString& Option);
	void STATIC_RefreshOptions();
	void STATIC_OnSelectionChangedEvent__DelegateSignature(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void STATIC_OnOpeningEvent__DelegateSignature();
	struct FString STATIC_GetSelectedOption();
	int STATIC_GetOptionCount();
	struct FString STATIC_GetOptionAtIndex(int Index);
	int STATIC_FindOptionIndex(const struct FString& Option);
	void STATIC_ClearSelection();
	void STATIC_ClearOptions();
	void STATIC_AddOption(const struct FString& Option);
};


// Class TslGame.TslUniversalInputVisibilitySwitcher
// 0x0008 (0x0168 - 0x0160)
class UTslUniversalInputVisibilitySwitcher : public UWidgetSwitcher
{
public:
	ESwitcherHideWhen                                  HideIndexZeroWhen;                                        // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslUniversalInputVisibilitySwitcher"));

		return ptr;
	}


	void STATIC_ApplyInputChange(ESwitcherHideWhen UsingInput);
};


// Class TslGame.TslHighlightRenderOption
// 0x0090 (0x03A0 - 0x0310)
class UTslHighlightRenderOption : public UTslUserWidget
{
public:
	class UUserWidget*                                 TopWidget;                                                // 0x0310(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     HighlightTargetName;                                      // 0x0318(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                Idx_Resolutions;                                          // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	struct FString                                     ResolutionsStr;                                           // 0x0330(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                Idx_Quality;                                              // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	struct FString                                     QualityStr;                                               // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bOnHighlightInfo;                                         // 0x0358(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0359(0x0007) MISSED OFFSET
	struct FString                                     Filename;                                                 // 0x0360(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     DirectoryPath;                                            // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     AbsoluteFilePath;                                         // 0x0380(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FString>                             FileNames;                                                // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHighlightRenderOption"));

		return ptr;
	}


	void STATIC_ToggleHighlightInfoOnOff();
	void STATIC_ResolutionsUp();
	void STATIC_ResolutionsDown();
	void STATIC_QualityUp();
	void STATIC_QualityDown();
	void STATIC_InitShow();
	void STATIC_InitExportInfo();
};


// Class TslGame.TslReplayTimeline
// 0x0000 (0x0310 - 0x0310)
class UTslReplayTimeline : public UTslUserWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReplayTimeline"));

		return ptr;
	}


	void STATIC_TslUserWidgetDestroyEvent__DelegateSignature();
	struct FEventReply STATIC_TransferUserFocusThroughReply(const struct FFocusEvent& AcceptedFocusEvent, class UWidget* FocusWidget, bool bInAllUsers, struct FEventReply* Reply);
	void STATIC_StopListeningForInputAxis(const struct FName& AxisName);
	void STATIC_StopListeningForAllInputAxises();
	void STATIC_SetupInputForBlueprint();
	bool STATIC_NavigateUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	void STATIC_ListenForInputAxis(const struct FName& AxisName, float Scale, bool bConsume, const struct FScriptDelegate& Callback);
	bool STATIC_IsSpectating();
	bool STATIC_IsReplaying();
	bool STATIC_IsObserving();
	bool STATIC_IsInLobby();
	class UTslGameUserSettings* STATIC_GetTslGameUserSettings();
	float STATIC_GetRawKeyValue(const struct FKey& InKey);
	class ATslPlayerState* STATIC_GetDemoPlayerState();
	class ATslCharacter* STATIC_GetCachedViewTargetTslCharacter();
	class ATslGameState* STATIC_GetCachedGameState();
	class ATslCharacter* STATIC_GetCachedCharacter();
	float STATIC_GetAxisMultiplier();
	bool STATIC_ContainUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	bool STATIC_ContainOwnerUserFocus();
	void STATIC_ClearUserFocus(class ULocalPlayer* Player);
};


// Class TslGame.BaseLobbyRotationRectWidget
// 0x0008 (0x03F8 - 0x03F0)
class UBaseLobbyRotationRectWidget : public UUmgBaseWidget
{
public:
	float                                              MultiplierRotationX;                                      // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MultiplierRotationY;                                      // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BaseLobbyRotationRectWidget"));

		return ptr;
	}


	void STATIC_OnStopRotation();
	void STATIC_OnLobbyCharacterOrViewModeActorAddAngle_Y(float Y);
	void STATIC_OnLobbyCharacterOrViewModeActorAddAngle_X(float X);
	void STATIC_OnLobbyCharacterOrViewModeActorAddAngle(float X, float Y);
};


// Class TslGame.BaseLobbyWebView
// 0x0000 (0x03F0 - 0x03F0)
class UBaseLobbyWebView : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BaseLobbyWebView"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.FBRMatchResultWidget
// 0x0198 (0x05E0 - 0x0448)
class UFBRMatchResultWidget : public UBlockInputUserWidget
{
public:
	class UTextBlock*                                  PlayerNameText;                                           // 0x0448(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ResultMsgText;                                            // 0x0450(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  FinalRankText;                                            // 0x0458(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TotalPlayersText;                                         // 0x0460(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  RankText;                                                 // 0x0468(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  KillCountText;                                            // 0x0470(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  RewardPointsTotalText;                                    // 0x0478(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  RankBPText;                                               // 0x0480(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  KillBPText;                                               // 0x0488(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  HitBPText;                                                // 0x0490(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  BPBoostingText;                                           // 0x0498(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  LobbyButtonText;                                          // 0x04A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SpectateButtonText;                                       // 0x04A8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             ButtonsSwitcher;                                          // 0x04B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                Buttons_PC;                                               // 0x04B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                Buttons_Console;                                          // 0x04C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     LobbyButton;                                              // 0x04C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     SpectateButton;                                           // 0x04D0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ReportButton;                                             // 0x04D8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            WinAnim;                                                  // 0x04E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            LoseAnim;                                                 // 0x04E8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            DeathAnim;                                                // 0x04F0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            WinRollingAnim;                                           // 0x04F8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       LeaveMatchTitle;                                          // 0x0500(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       LeaveMatchMessage;                                        // 0x0518(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       WinnerMessage;                                            // 0x0530(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       TopTenMessage;                                            // 0x0548(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       NoTopTenMessage;                                          // 0x0560(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       TeamRemainsMessage;                                       // 0x0578(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FLinearColor                                NormalTextButtonColor;                                    // 0x0590(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                HoverTextButtonColor;                                     // 0x05A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UAkAudioEvent*                               AkEvent_Win;                                              // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AkEventDelayTime_Win;                                     // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05BC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             OnGoToLobbyPopupButtonPressed;                            // 0x05C0(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FBRMatchResultWidget"));

		return ptr;
	}


	void STATIC_PlayAkEvent_Win();
	void STATIC_OpenReportForPC();
	void STATIC_OpenReportForConsole();
	void STATIC_OpenGoToLobbyPopup();
	void STATIC_OnUpdateRanking(int Ranking);
	void STATIC_OnUnhoveredSpectateButton();
	void STATIC_OnUnhoveredReportButton();
	void STATIC_OnUnhoveredLobbyButton();
	void STATIC_OnReceivedGoToLobbyPopupResult(EPopupButtonID ButtonID);
	void STATIC_OnMatchStateChanged(const struct FName& InMatchState);
	void STATIC_OnHoveredSpectateButton();
	void STATIC_OnHoveredReportButton();
	void STATIC_OnHoveredLobbyButton();
	void STATIC_GoSpectate();
};


// Class TslGame.TslGameOptionCloudRequestTimeoutCoverWidget
// 0x0100 (0x0548 - 0x0448)
class UTslGameOptionCloudRequestTimeoutCoverWidget : public UBlockInputUserWidget
{
public:
	class UWidgetAnimation*                            Cover_Fade_In;                                            // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Cover_Fade_Out;                                           // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Warning_Fade_In;                                          // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Warning_Fade_Out;                                         // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Waiting_Text;                                             // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    Warning_SizeBox;                                          // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Warning_Text;                                             // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslGameOptionWidget*                        CachedGameOptionWidget;                                   // 0x0480(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0488(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionCloudRequestTimeoutCoverWidget"));

		return ptr;
	}


	void STATIC_OnTimeout();
	void STATIC_OnFinishShowResultMessage();
};


// Class TslGame.TslGameOptionInputBlockerWidget
// 0x0008 (0x0450 - 0x0448)
class UTslGameOptionInputBlockerWidget : public UBlockInputUserWidget
{
public:
	class UTslGameOptionWidget*                        Owner;                                                    // 0x0448(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionInputBlockerWidget"));

		return ptr;
	}

};


// Class TslGame.TslKillMessageWidget
// 0x0060 (0x0450 - 0x03F0)
class UTslKillMessageWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    OnVanishFinished;                                         // 0x03F0(0x0010) (ZeroConstructor, InstancedReference)
	TArray<struct FCauseOfDeathData>                   CauseOfDeathDatas;                                        // 0x0400(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FConditionOfDeathData>               ConditionOfDeathDatas;                                    // 0x0410(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture*>                            WeaponMasteryLevelIcons;                                  // 0x0420(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTslUserPlatformImageWidget*                 KillPlatformImage;                                        // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTslUserPlatformImageWidget*                 VictimPlatformImage;                                      // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0440(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslKillMessageWidget"));

		return ptr;
	}


	void STATIC_StartToVanish();
	void STATIC_SetVanishTimer(float TimeDelay);
	void STATIC_SetDeathMessage(const struct FDeathMessage& InDeathMessage);
	void STATIC_GetTextureFromDamageTypeCategory(EDamageTypeCategory InDamageTypeCategory, class UTexture** OutTexture, float* OutRatio);
	void STATIC_GetTextureFromConditionOfDeathCategory(EConditionOfDeath InConditionOfDeathCategory, class UTexture** OutTexture, float* OutRatio);
	void STATIC_BroadcastOnVanishFinishedEvent();
};


// Class TslGame.TslGamepadKeyIconWidget
// 0x0040 (0x0430 - 0x03F0)
class UTslGamepadKeyIconWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      Image_Binder;                                             // 0x03F0(0x0028) (Edit, DisableEditOnInstance)
	struct FKey                                        Key;                                                      // 0x0418(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadKeyIconWidget"));

		return ptr;
	}

};


// Class TslGame.UiHelperFunctions
// 0x0000 (0x0030 - 0x0030)
class UUiHelperFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.UiHelperFunctions"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionCategoryGroupWidget
// 0x0098 (0x0488 - 0x03F0)
class UTslGameOptionCategoryGroupWidget : public UUmgBaseWidget
{
public:
	struct FName                                       ParentTabName;                                            // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       CategoryName;                                             // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bShowCloudTooltipIcon;                                    // 0x0400(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0401(0x0007) MISSED OFFSET
	class UTslGameOptionWidget*                        CachedGameOptionWidget;                                   // 0x0408(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  DisplayNameText_Binder;                                   // 0x0410(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_VerticalBox                ItemWidgetsVerticalBox_Binder;                            // 0x0430(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UButton*                                     HoverHighlightButton;                                     // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      TooltipIconImage;                                         // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FLinearColor                                ColorNormal;                                              // 0x0468(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                ColorTooltipIconHighlighted;                              // 0x0478(0x0010) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionCategoryGroupWidget"));

		return ptr;
	}


	void STATIC_OnCloudOptionTooltipDeactivated();
	void STATIC_OnCloudOptionTooltipActivated();
};


// Class TslGame.TslGameOptionTabContentsWidget
// 0x0030 (0x0420 - 0x03F0)
class UTslGameOptionTabContentsWidget : public UUmgBaseWidget
{
public:
	struct FName                                       TabName;                                                  // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      CategoryGroupWidgetClass;                                 // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   CategoryGroupsScrollBox_Binder;                           // 0x0400(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionTabContentsWidget"));

		return ptr;
	}

};


// Class TslGame.TslGameOptionWidget
// 0x0520 (0x0968 - 0x0448)
class UTslGameOptionWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x150];                                     // 0x0448(0x0150) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x0448(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslGameOptionWidget.ItemWidgetsChanged
	unsigned char                                      UnknownData02[0x50];                                      // 0x05E8(0x0050) UNKNOWN PROPERTY: SetProperty TslGame.TslGameOptionWidget.ItemWidgetsNotInDefault
	class UWidget*                                     LastInputBlockerInvoker;                                  // 0x0638(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FString                                     GamePadOptionSceneName;                                   // 0x0640(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     SelfIdentityNameString;                                   // 0x0650(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      TabContentsWidgetClass;                                   // 0x0660(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   TabSelectorWidget_Binder;                                 // 0x0668(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TabContentsSwitcher_Binder;                               // 0x0688(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ApplyButton_Binder;                                       // 0x06B0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   CancelButton_Binder;                                      // 0x06D0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CancelButtonText_Binder;                                  // 0x06F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   DefaultButton_Binder;                                     // 0x0710(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DefaultButtonText_Binder;                                 // 0x0730(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   GamepadApplyButton_Binder;                                // 0x0750(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   GamepadCancelButton_Binder;                               // 0x0770(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   GamepadDefaultButton_Binder;                              // 0x0790(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   DetailWidget_Binder;                                      // 0x07B0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BackgroundBlur_Binder;                                    // 0x07D0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InputBlocker_Binder;                                      // 0x07F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   TermsOfService_Binder;                                    // 0x0810(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                CancelButtonNormalColor;                                  // 0x0830(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                CancelButtonHoverColor;                                   // 0x0840(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                CancelButtonPressColor;                                   // 0x0850(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                DefaultButtonNormalColor;                                 // 0x0860(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                DefaultButtonHoverColor;                                  // 0x0870(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                DefaultButtonPressColor;                                  // 0x0880(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                CloudButtonNormalColor;                                   // 0x0890(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                CloudButtonHoverColor;                                    // 0x08A0(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                CloudButtonPressColor;                                    // 0x08B0(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       UnsavedChangesPopupTitleText;                             // 0x08C0(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       UnsavedChangesPopupMessageText;                           // 0x08D8(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	class USizeBox*                                    CloudButtonSizeBox;                                       // 0x08F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     CloudButton;                                              // 0x08F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CloudButtonText;                                          // 0x0900(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslGameOptionCloudPopupWidget*              CloudPopupWidget;                                         // 0x0908(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslGameOptionCloudRequestTimeoutCoverWidget* CloudRequestTimeoutCoverWidget;                           // 0x0910(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslGameOptionTooltipWidget*                 CloudOptionTooltipWidget;                                 // 0x0918(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              CloudRequestWaitTime;                                     // 0x0920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CloudRequestFailMessageTime;                              // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptDelegate                             OnEscapeWidgetActionEvent;                                // 0x0928(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptDelegate                             OnUnsavedChangesPopupButtonPressEvent;                    // 0x0938(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FName                                       CurrentSelectedTabName;                                   // 0x0948(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0950(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGameOptionWidget"));

		return ptr;
	}


	void STATIC_UpdateDefaultButtonTextColor();
	void STATIC_UpdateCloudButtonTextColor();
	void STATIC_UpdateCancelButtonTextColor();
	void STATIC_OnUnsavedChangesPopupButtonPressed(EPopupButtonID ButtonID);
	void STATIC_OnTabLabelSelected(const struct FName& SelectedTabName);
	void STATIC_OnStepperItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, int StepperIndex);
	void STATIC_OnSliderItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, float RawValue);
	void STATIC_OnKeyBinderItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, int SlotIndex, const struct FTslInputKey& InputKey);
	void STATIC_OnDropDownListItemWidgetUpdate(class UTslGameOptionItemWidget* Widget, bool bIsChanged, bool bIsDefault, int ListIndex);
	void STATIC_OnDefaultButtonClicked();
	void STATIC_OnCloudButtonClicked();
	void STATIC_OnCancelButtonClicked();
	void STATIC_OnApplyButtonClicked();
	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslGamepadOptionWidget
// 0x0080 (0x04C8 - 0x0448)
class UTslGamepadOptionWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET
	struct FString                                     GamePadOptionSceneName;                                   // 0x0450(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 DescWidget_Binder;                                        // 0x0460(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             WidgetSwitcher_Binder;                                    // 0x0480(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 TabSelector_Binder;                                       // 0x04A8(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadOptionWidget"));

		return ptr;
	}


	void STATIC_UpdateOptionDesc(const struct FText& InTitleText, const struct FText& InDescText);
	void STATIC_FocuseTargetWidget(const struct FName& InOptionName);
	void STATIC_FirstFocusTargetWidgetName(const struct FName& InOptionName);
};


// Class TslGame.TslGamepadReportWidget
// 0x0058 (0x04A0 - 0x0448)
class UTslGamepadReportWidget : public UBlockInputUserWidget
{
public:
	TArray<EReportCause>                               SupportedReportCauseTypes;                                // 0x0448(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FUmgWidgetBinder_UserWidget                 MainReportStepperWidget_Binder;                           // 0x0458(0x0020) (Edit)
	class UClass*                                      StepperWidgetClass;                                       // 0x0478(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FString                                     SelectedNetId;                                            // 0x0480(0x0010) (BlueprintVisible, ZeroConstructor)
	class UTextBlock*                                  PlayerName;                                               // 0x0490(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslUserPlatformImageWidget*                 PlatformImage;                                            // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslGamepadReportWidget"));

		return ptr;
	}


	void STATIC_OnReportButtonFocused(class UTslGamepadStepperWidget* Widget);
	void STATIC_InitPlayerNameText(ESubjectToReport SubjectToReport);
	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TslInventoryBaseWidget
// 0x0118 (0x0560 - 0x0448)
class UTslInventoryBaseWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0448(0x0068) MISSED OFFSET
	TScriptInterface<class USlotInterface>             FocusItemSlot;                                            // 0x04B0(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    FocusItemSlotContainer;                                   // 0x04C0(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotInterface>             MouseOverSlot;                                            // 0x04D0(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    SlotContainer;                                            // 0x04E0(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              MouseOverEquipableItem;                                   // 0x04F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItem*                                       FocusItem;                                                // 0x04F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UItem*                                       MouseOverItem;                                            // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              MouseOverEquipmentItem;                                   // 0x0508(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAttachableItem*                             MouseOverAttachmentItem;                                  // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEquipableItem*                              FocusEquipableItem;                                       // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAttachableItem*                             FocusAttachmentItem;                                      // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AItemExplorer*                               ItemExplorer;                                             // 0x0528(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslSelfPutHelper*                           SelfPutHelper;                                            // 0x0530(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UUserWidget*>                         FocusableWidgetList;                                      // 0x0538(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UTslItemListBaseWidget*                      CachedEventBackpack;                                      // 0x0548(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0550(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryBaseWidget"));

		return ptr;
	}


	void STATIC_XBoxHelpTextAnimationPlaying();
	void STATIC_SetEasyDropOrDetachMode(bool bNewEasyDropOrDetachMode);
	void STATIC_ReleasedEasyDropOrDetachMode();
	void STATIC_PreasedEasyDropOrDetachMode();
	void STATIC_PlayFadeInAnim(float PlaybackSpeed);
	void STATIC_OnWeaponEquipmentFocusedWeapon(EEquipSlotID SlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnVicinityLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnVicinityEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnTabUpdated(const struct FString& CategoryName);
	void STATIC_OnStackCountUpdated();
	void STATIC_OnItemExplorerProxyUpdated();
	void STATIC_OnInventoryUpdated();
	void STATIC_OnInventoryDrop(class UDragDropOperation* InOperation);
	void STATIC_OnEquipmentLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEquipmentEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnDoSlotAction();
	void STATIC_OnChildWidgetRefresh();
	void STATIC_OnChildSlotFocusVicinity(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnChildSlotFocusBackpack(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnChildFocusSlotIDEquipment(EEquipSlotID SlotID);
	void STATIC_OnBackpackLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnBackpackEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentFocusedWeapon(EWeaponAttachmentSlotID SlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentChangedWeapon(int WeaponSlotID, EWeaponAttachmentSlotID AttachSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslInventoryWidget
// 0x0000 (0x0560 - 0x0560)
class UTslInventoryWidget : public UTslInventoryBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryWidget"));

		return ptr;
	}


	void STATIC_XBoxHelpTextAnimationPlaying();
	void STATIC_SetEasyDropOrDetachMode(bool bNewEasyDropOrDetachMode);
	void STATIC_ReleasedEasyDropOrDetachMode();
	void STATIC_PreasedEasyDropOrDetachMode();
	void STATIC_PlayFadeInAnim(float PlaybackSpeed);
	void STATIC_OnWeaponEquipmentFocusedWeapon(EEquipSlotID SlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnVicinityLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnVicinityEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnTabUpdated(const struct FString& CategoryName);
	void STATIC_OnStackCountUpdated();
	void STATIC_OnItemExplorerProxyUpdated();
	void STATIC_OnInventoryUpdated();
	void STATIC_OnInventoryDrop(class UDragDropOperation* InOperation);
	void STATIC_OnEquipmentLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnEquipmentEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnDoSlotAction();
	void STATIC_OnChildWidgetRefresh();
	void STATIC_OnChildSlotFocusVicinity(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnChildSlotFocusBackpack(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnChildFocusSlotIDEquipment(EEquipSlotID SlotID);
	void STATIC_OnBackpackLeaveSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnBackpackEnterSlot(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentFocusedWeapon(EWeaponAttachmentSlotID SlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnAttachmentChangedWeapon(int WeaponSlotID, EWeaponAttachmentSlotID AttachSlotID, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
};


// Class TslGame.TslInventoryWidget_GamePad
// 0x01B0 (0x0710 - 0x0560)
class UTslInventoryWidget_GamePad : public UTslInventoryBaseWidget
{
public:
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanel_Binder;                                       // 0x0560(0x0028) (Edit)
	struct FUmgWidgetBinder_Border                     BackpackBackground_Binder;                                // 0x0588(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     EquipmentBackground_Binder;                               // 0x05B8(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             MoveGuide_Binder;                                         // 0x05E8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     VicinityBackground_Binder;                                // 0x0610(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     WeaponBackground_Binder;                                  // 0x0640(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             CraftingSwticher_Binder;                                  // 0x0670(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     CraftingBackground_Binder;                                // 0x0698(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CraftingTextblock_Binder;                                 // 0x06C8(0x0020) (Edit, DisableEditOnInstance)
	struct FLinearColor                                NormalBackgroundColor;                                    // 0x06E8(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                FocusBackgroundColor;                                     // 0x06F8(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0708(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslInventoryWidget_GamePad"));

		return ptr;
	}


	void STATIC_VehicleMoveForwardPad_Override(float Scale);
	void STATIC_OnRBPressed();
	void STATIC_OnLBPressed();
	void STATIC_OnChildSlotFocusVicinity(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnChildSlotFocusBackpack(const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InSlotContainer);
	void STATIC_OnBPressed();
	void STATIC_OnBlockActionFunc();
	void STATIC_BindPrevWeapon();
	void STATIC_BindNextWeapon();
	void STATIC_BindInteractGamepad();
};


// Class TslGame.TslMissionListBaseWidget
// 0x00E8 (0x0530 - 0x0448)
class UTslMissionListBaseWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             CheckingCompletedAllSwitcher_Binder;                      // 0x0448(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      NewAchievedMissionList_Binder;                            // 0x0470(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      NonAchievedMissionList_Binder;                            // 0x0490(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      InProgressMissionList_Binder;                             // 0x04B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      AlreadyAchievedMissionList_Binder;                        // 0x04D0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      ScrollBox_Binder;                                         // 0x04F0(0x0020) (Edit, DisableEditOnInstance)
	class UClass*                                      MissionItemBaseWidgetClass;                               // 0x0510(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CompletedAllIndex;                                        // 0x0518(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NotCompletedIndex;                                        // 0x051C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UTslMissionItemBaseWidget*>           MissionItemWidgets;                                       // 0x0520(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMissionListBaseWidget"));

		return ptr;
	}


	void STATIC_ScrollMissionList(float InScrollOffset);
};


// Class TslGame.TslMissionListCanvasWidget
// 0x0020 (0x0468 - 0x0448)
class UTslMissionListCanvasWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 MissionListWidget_Binder;                                 // 0x0448(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslMissionListCanvasWidget"));

		return ptr;
	}

};


// Class TslGame.TslNewWorldMapWidget
// 0x0290 (0x06D8 - 0x0448)
class UTslNewWorldMapWidget : public UBlockInputUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnHideMyself;                                             // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FUmgWidgetBinder_Animation                  MapFadeInBinder;                                          // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   FlaregunScaleBoxBinder;                                   // 0x0478(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 MapWidgetBinder;                                          // 0x04A0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             HelpWidgetXboxSwitcherBinder;                             // 0x04C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             HelpWidgetBinder;                                         // 0x04E8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              XboxHelp_PlaceMarkerBinder;                               // 0x0510(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              XboxHelp_RemoveMarkerBinder;                              // 0x0538(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   MinimizeHelpButtonBinder;                                 // 0x0560(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RestoreHelpButtonBinder;                                  // 0x0580(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             PadGuideSwitcherBinder;                                   // 0x05A0(0x0028) (Edit, DisableEditOnInstance)
	bool                                               bIsFixSize;                                               // 0x05C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05C9(0x0007) MISSED OFFSET
	class UCurveFloat*                                 MapSizeCurve;                                             // 0x05D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 MapSizeChangeTimeCurve;                                   // 0x05D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 PositionMoveTimeCurve;                                    // 0x05E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 MovePadGuideCurve;                                        // 0x05E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 ZoomMultiplierCurve;                                      // 0x05F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   SizeOffset;                                               // 0x05F8(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StartSize;                                                // 0x0600(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StartPosition;                                            // 0x0608(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PositionOffset;                                           // 0x0610(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   MouseDownPosition;                                        // 0x0618(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              TacticalWheelResponseTimeSeconds;                         // 0x0620(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0624(0x0004) MISSED OFFSET
	TWeakObjectPtr<class UMapGridWidget>               MapGrid;                                                  // 0x0628(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0630(0x0008) MISSED OFFSET
	class UTslTacticalMapMarkerWheelWidget*            TacticalMapMarkerWheelWidgetCached;                       // 0x0638(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x0640(0x0038) MISSED OFFSET
	struct FStringClassReference                       SpawnKitWidgetClass;                                      // 0x0678(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	struct FUmgWidgetBinder_Panel                      Panel_SpawnKitParent;                                     // 0x0688(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	class UPanelWidget*                                PlatoonCommandPanel;                                      // 0x06A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      CommandIconOnCursor;                                      // 0x06B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FStringClassReference                       PlatoonCommandWidgetClass;                                // 0x06B8(0x0010) (Edit, DisableEditOnInstance)
	class UTslPlatoonCommandWidget*                    PlatoonCommandWidget;                                     // 0x06C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x06D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslNewWorldMapWidget"));

		return ptr;
	}


	void STATIC_StartChangeMapSize(bool bIsPad);
	void STATIC_SetTacticalMapMarkerWheelWidgetCached(class UTslTacticalMapMarkerWheelWidget* InWidget);
	void STATIC_RunPlatoonCommand();
	void STATIC_OnToggleTacticalMapMarkerPad();
	void STATIC_OnStopSlowWorldMapMove();
	void STATIC_OnStartSlowWorldMapMove();
	void STATIC_OnRestoreHelpButtonClicked();
	void STATIC_OnRequestShowTacticalMapMarker();
	void STATIC_OnRequestCancelTacticalMapMarkerTimerPad();
	void STATIC_OnRequestCancelTacticalMapMarkerAndClearTimer();
	void STATIC_OnReleaseWayPointKey();
	void STATIC_OnPutMarkerPad();
	void STATIC_OnPressWayPointKey();
	void STATIC_OnPadGuideMoveUp(float Add);
	void STATIC_OnPadGuideMoveRight(float Add);
	void STATIC_OnPadGuideMoveingReayReleased();
	void STATIC_OnPadGuideMoveingReayPressed();
	void STATIC_OnMoveMapGridViewCenterToMyIconCenter();
	void STATIC_OnMinimizeHelpButtonClicked();
	void STATIC_OnMarkWayPointKeyboardMouse();
	void STATIC_OnMarkWayPointGamepad();
	void STATIC_OnMarkWayPoint();
	void STATIC_OnMarkerForReplay();
	void STATIC_OnMarkerDelete();
	void STATIC_OnMarker();
	void STATIC_OnMapZoomPad(float AdditaionalZoom);
	void STATIC_OnMapZoom(float AdditaionalZoom);
	void STATIC_OnMapResetZoomGamePad();
	void STATIC_OnMapMoveY(float Value);
	void STATIC_OnMapMoveX(float Value);
	void STATIC_OnMapMoveGamepadY(float Value);
	void STATIC_OnMapMoveGamepadX(float Value);
	void STATIC_OnMapMove();
	void STATIC_OnHideWorldMap();
	void STATIC_OnDeleteWayPoints();
	void STATIC_OffMapMove();
	void STATIC_MovePosition();
	bool STATIC_IsTacticalMapMarkerWheelOpened();
	void STATIC_HidePlatoonCommandWidget();
	class UTslTacticalMapMarkerWheelWidget* STATIC_GetTacticalMapMarkerWheelWidgetCached();
	void STATIC_CreateAndShowPlatoonCommandWidget();
	void STATIC_ClearTacticalMapMarkerTimer();
	void STATIC_CancelTacticalMapMarker();
};


// Class TslGame.TslTDMNewWorldMapWidget
// 0x0040 (0x0718 - 0x06D8)
class UTslTDMNewWorldMapWidget : public UTslNewWorldMapWidget
{
public:
	struct FUmgWidgetBinder_VerticalBox                ScoreBoardBinder;                                         // 0x06D8(0x0028) (Edit, DisableEditOnInstance)
	class UTdmPersonalScoreBoardWidget*                ScoreBoardWidget;                                         // 0x0700(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              FixZoomRadius;                                            // 0x0708(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x070C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTDMNewWorldMapWidget"));

		return ptr;
	}


	void STATIC_OnRequestShowTacticalMapMarker();
};


// Class TslGame.TslPCKeyGuideWidget
// 0x0130 (0x0578 - 0x0448)
class UTslPCKeyGuideWidget : public UBlockInputUserWidget
{
public:
	class UDataTable*                                  KeyGuideDataTable;                                        // 0x0448(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      KeyGuideContentWidgetClass;                               // 0x0450(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     DividerNamePrefix;                                        // 0x0458(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FTslInputKey                                UnassignedKey;                                            // 0x0468(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FString                                     SystemMenuSceneName;                                      // 0x0488(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_InvalidationBox            MainInvalidationBox_Binder;                               // 0x0498(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 KeyboardWidget_Binder;                                    // 0x04C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 MouseWidget_Binder;                                       // 0x04E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      DescriptionPanel_Binder;                                  // 0x0500(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 TabSelectorWidget_Binder;                                 // 0x0520(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UTslKeyboardWidget*                          KeyboardWidget;                                           // 0x0540(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslMouseWidget*                             MouseWidget;                                              // 0x0548(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslTabSelectorWidget*                       TabSelectorWidget;                                        // 0x0550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UPanelWidget*>                        CachedDescriptionColumns;                                 // 0x0558(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0568(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPCKeyGuideWidget"));

		return ptr;
	}


	void STATIC_UpdateCategory(const struct FString& CategoryId);
};


// Class TslGame.TslPopupBoxWidget
// 0x01F8 (0x0640 - 0x0448)
class UTslPopupBoxWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_Border                     WaitingBinder;                                            // 0x0448(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  PopupEmergingBinder;                                      // 0x0478(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonCancelBinder;                                       // 0x0498(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonOKBinder;                                           // 0x04B8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   GamepadButtonCancelBinder;                                // 0x04D8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   GamepadButtonOKBinder;                                    // 0x04F8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextCancelBinder;                                         // 0x0518(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextOKBinder;                                             // 0x0538(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  GamepadTextCancelBinder;                                  // 0x0558(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  GamepadTextOKBinder;                                      // 0x0578(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextTitleBinder;                                          // 0x0598(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextMessageBinder;                                        // 0x05B8(0x0020) (Edit, DisableEditOnInstance)
	struct FText                                       OkText;                                                   // 0x05D8(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       CancelText;                                               // 0x05F0(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       MessageText;                                              // 0x0608(0x0018) (Edit, DisableEditOnInstance)
	TWeakObjectPtr<class UButton>                      BtnCancel;                                                // 0x0620(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FScriptDelegate                             PopupButtonEvent;                                         // 0x0628(0x0010) (ZeroConstructor, InstancedReference)
	EPopupStyle                                        SaveStyle;                                                // 0x0638(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0639(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPopupBoxWidget"));

		return ptr;
	}


	void STATIC_OnGamepadCancel();
	void STATIC_OnBtnOkClicked();
	void STATIC_OnBtnCancelClicked();
	void STATIC_BuildPopupBoxInfo(EPopupStyle PopupStyle, const struct FText& Title, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
};


// Class TslGame.TslRatingPopupBoxWidget
// 0x10A8 (0x16E8 - 0x0640)
class UTslRatingPopupBoxWidget : public UTslPopupBoxWidget
{
public:
	class UButton*                                     LowRatingButton;                                          // 0x0640(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     MiddleRatingButton;                                       // 0x0648(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     HighRatingButton;                                         // 0x0650(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     LowRatingBorder;                                          // 0x0658(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     MiddleRatingBorder;                                       // 0x0660(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     HighRatingBorder;                                         // 0x0668(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              CloseWaitingTimeSeconds;                                  // 0x0670(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0674(0x0004) MISSED OFFSET
	struct FButtonStyle                                NormalButtonStyle[0x3];                                   // 0x0678(0x02A8) (Edit)
	struct FButtonStyle                                SelectedButtonStyle[0x3];                                 // 0x0E70(0x02A8) (Edit)
	struct FLinearColor                                NormalContentsColor;                                      // 0x1668(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                SelectedContentsColor;                                    // 0x1678(0x0010) (Edit, IsPlainOldData)
	class UButton*                                     RatingButtons[0x3];                                       // 0x1688(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     RatingBorders[0x3];                                       // 0x16A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                LowRatingValue;                                           // 0x16B8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MiddleRatingValue;                                        // 0x16BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                HighRatingValue;                                          // 0x16C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x16C4(0x0010) MISSED OFFSET
	struct FTslStickInputHelper                        LStickHelper;                                             // 0x16D4(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRatingPopupBoxWidget"));

		return ptr;
	}


	void STATIC_OnMiddleRatingClicked();
	void STATIC_OnLowRatingClicked();
	void STATIC_OnHighRatingClicked();
	void STATIC_OnGamepadRight();
	void STATIC_OnGamepadLeft();
	void STATIC_OnGamepadB();
	void STATIC_OnGamepadA();
	void STATIC_OnBtnOkClicked();
	void STATIC_OnBtnCancelClicked();
};


// Class TslGame.TslRadioMessageTextWheelWidget
// 0x0190 (0x05D8 - 0x0448)
class UTslRadioMessageTextWheelWidget : public UBlockInputUserWidget
{
public:
	float                                              DoubleClickTime;                                          // 0x0448(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DoubleClickTimePad;                                       // 0x044C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ShowWidgetHoldSeconds;                                    // 0x0450(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RestrictedDistanceFromCenter;                             // 0x0454(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GamepadSafeZoneRadius;                                    // 0x0458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MouseSafeZoneRadius;                                      // 0x045C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTimeBeforeUnfocusOnGamepad;                          // 0x0460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PingAngleThreshold;                                       // 0x0464(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBorder*                                     MainBorder;                                               // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             AffirmativeSwitcher;                                      // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             ThankYouSwitcher;                                         // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             NeedMedSwitcher;                                          // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             NegativeSwitcher;                                         // 0x0488(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             SorrySwitcher;                                            // 0x0490(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             NeedAmmoSwitcher;                                         // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             EnemySpottedSwitcher;                                     // 0x04A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             HelpMeSwitcher;                                           // 0x04A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             PingSwitcher;                                             // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            InitAnim;                                                 // 0x04B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FadeInAnim;                                               // 0x04C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FadeOutAnim;                                              // 0x04C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Affirmative_SelectAnim;                                   // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Negative_SelectAnim;                                      // 0x04D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            ThankYou_SelectAnim;                                      // 0x04E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Sorry_SelectAnim;                                         // 0x04E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            NeedMed_SelectAnim;                                       // 0x04F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            NeedAmmo_SelectAnim;                                      // 0x04F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            EnemySpotted_SelectAnim;                                  // 0x0500(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            HelpMe_SelectAnim;                                        // 0x0508(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            Ping_SelectAnim;                                          // 0x0510(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ATslHUD*                                     CachedTslHud;                                             // 0x0518(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CachedFocusIndex;                                         // 0x0520(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CachedPingAngle;                                          // 0x0524(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentPingAngle;                                         // 0x0528(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x052C(0x0004) MISSED OFFSET
	TArray<struct FRadioMessageWidgetInfo>             RadioMessageWidgetInfoArray;                              // 0x0530(0x0010) (ZeroConstructor, Transient)
	bool                                               bIsSelected;                                              // 0x0540(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5F];                                      // 0x0541(0x005F) MISSED OFFSET
	struct FUmgWidgetBinder_WidgetSwitcher             CancelGuideSwitcher_Binder;                               // 0x05A0(0x0028) (Edit, DisableEditOnInstance)
	TArray<struct FRadioMessageBlockInputsByPreset>    RadioMessageBlockInputArray;                              // 0x05C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslRadioMessageTextWheelWidget"));

		return ptr;
	}


	void STATIC_OnShowWidget();
	void STATIC_OnSelected();
	void STATIC_OnInputRepeatConfirm();
	void STATIC_OnInputReleasedPad();
	void STATIC_OnInputReleasedConfirmPad();
	void STATIC_OnInputReleasedConfirm();
	void STATIC_OnInputReleased();
	void STATIC_OnInputPressedPad();
	void STATIC_OnInputPressedConfirm();
	void STATIC_OnInputPressed();
	void STATIC_OnInputDblClickConfirmPad();
	void STATIC_OnInputDblClickConfirm();
	void STATIC_OnInputClickConfirm();
	void STATIC_OnInputClickCheckPad();
	void STATIC_OnInputClickCheck();
	void STATIC_HideWidget();
};


// Class TslGame.TslReportPlayerWidget
// 0x0120 (0x0568 - 0x0448)
class UTslReportPlayerWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             SelectSubjectWidgetSwitcherBinder;                        // 0x0448(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   SelectSubjectComboBoxBinder;                              // 0x0470(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ReportCausesComboBoxBinder;                               // 0x0490(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonOKBinder;                                           // 0x04B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonCancelBinder;                                       // 0x04D0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  SubjectToReportBinder;                                    // 0x04F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameBinder;                                         // 0x0510(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 DetailReportManagerBinder;                                // 0x0530(0x0020) (Edit, DisableEditOnInstance)
	struct FString                                     SelectedNetId;                                            // 0x0550(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	EReportCause                                       SelectedReportCause;                                      // 0x0560(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ESubjectToReport                                   SubjectToReportType;                                      // 0x0561(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0562(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslReportPlayerWidget"));

		return ptr;
	}


	void STATIC_UpdateSubjectToReportType(ESubjectToReport ReportType);
	void STATIC_OnSelectionChangedBySelecteSubject(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void STATIC_OnSelectionChangedByReportCauses(const struct FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);
	void STATIC_OnRequestHideWidget();
	void STATIC_OnChangeCauser(const struct FString& SelectCauser);
	void STATIC_OnBtnOkClicked();
	void STATIC_OnBtnCancelClicked();
};


// Class TslGame.TslSandboxMasterWidget
// 0x00A0 (0x04E8 - 0x0448)
class UTslSandboxMasterWidget : public UBlockInputUserWidget
{
public:
	class UTextBlock*                                  SpawnSelectorTextBlock;                                   // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxGroupBoxWidget*                   WeaponGroupWidget;                                        // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxGroupBoxWidget*                   ItemGroupWidget;                                          // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxGroupBoxWidget*                   VehicleGroupWidget;                                       // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  PowerTitleText;                                           // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     CloseButton;                                              // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CloseButtonText;                                          // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     Equip3LvButton;                                           // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Equip3LvButtonText;                                       // 0x0488(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     AddAmmoButton;                                            // 0x0490(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  AddAmmoButtonText;                                        // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxPowerItemWidget*                  FlyPowerItemWidget;                                       // 0x04A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxPowerItemWidget*                  InvulnerablePowerItemWidget;                              // 0x04A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxPowerItemWidget*                  CarePackagePowerItemWidget;                               // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxPowerItemWidget*                  RedZonePowerItemWidget;                                   // 0x04B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxQuantityWidget*                   ItemQuantityWidget;                                       // 0x04C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslSandboxQuantityWidget*                   VehicleQuantityWidget;                                    // 0x04C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x04D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSandboxMasterWidget"));

		return ptr;
	}


	void STATIC_OnSelectedSandboxPower();
	void STATIC_OnClicked_Equip3LvButton();
	void STATIC_OnClicked_CloseButton();
	void STATIC_OnClicked_AddAmmoButton();
};


// Class TslGame.TslSpawnKitBaseWidget
// 0x0030 (0x0478 - 0x0448)
class UTslSpawnKitBaseWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET
	struct FStringClassReference                       SpawnKitDataClass;                                        // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	int                                                DefaultIndex;                                             // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	struct FSpawnKitInfoListOfType                     CurrentInfo;                                              // 0x0468(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpawnKitBaseWidget"));

		return ptr;
	}


	void STATIC_ChangeIndex(int NewIndex);
	void STATIC_ApplyCurrentIndex();
};


// Class TslGame.FBRClassSelectWidget
// 0x0170 (0x05E8 - 0x0478)
class UFBRClassSelectWidget : public UTslSpawnKitBaseWidget
{
public:
	class UImage*                                      ClassImage;                                               // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ClassConfirmButton;                                       // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  LobbyTimerTitleText;                                      // 0x0488(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  LobbyTimerNumberText;                                     // 0x0490(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ClassTitleText;                                           // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ClassInfoSubtitleText;                                    // 0x04A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ClassDescriptionText;                                     // 0x04A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                ClassSelectButtonPanel;                                   // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                ClassItemPanel;                                           // 0x04B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                ClassStatGaugePanel;                                      // 0x04C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                ItemToolTipPanel;                                         // 0x04C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItemToolTipWidget*                          ItemToolTipWidget;                                        // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                ItemToolTipPanel_Gamepad;                                 // 0x04D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItemToolTipWidget*                          ItemToolTipWidget_Gamepad;                                // 0x04E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCheckBox*                                   KeepYourOutfitCheckBox;                                   // 0x04E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UTslFakeButton*>                      ClassSelectButtonWidgets;                                 // 0x04F0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UItemWidget*>                         ItemWidgets;                                              // 0x0500(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UImage*>                              StatWidgets;                                              // 0x0510(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FName                                       GaugeMaterialParameter;                                   // 0x0520(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<EFBRClass, struct FFBRClassDescription>       ClassDescriptionData;                                     // 0x0528(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<EEquipSlotID>                               ItemSlotOrder;                                            // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FText                                       TextMatchStartsIn;                                        // 0x0588(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       TextMatchStarted;                                         // 0x05A0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              ItemToolTipEmergingTime_Gamepad;                          // 0x05B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DefaultItemFocusRowOnConsole;                             // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DefaultItemFocusColumnOnConsole;                          // 0x05C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x05C4(0x0004) MISSED OFFSET
	class UItemWidget*                                 CurrentItemFocusOnConsole;                                // 0x05C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x05D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FBRClassSelectWidget"));

		return ptr;
	}


	void STATIC_Show();
	void STATIC_OnTimerEmergeItemToolTipGamepad();
	void STATIC_OnSelectPreviousClass();
	void STATIC_OnSelectNextClass();
	void STATIC_OnRemainingTimeUpdated(int NewRemainingTime);
	void STATIC_OnPadCheckBoxPS4();
	void STATIC_OnPadCheckBox();
	void STATIC_OnMoveUp();
	void STATIC_OnMoveRight();
	void STATIC_OnMoveLeft();
	void STATIC_OnMoveDown();
	void STATIC_OnMatchStateChanged(const struct FName& InMatchState);
	void STATIC_OnItemWidgetUnhovered();
	void STATIC_OnItemWidgetHovered(const TScriptInterface<class USlotInterface>& SlotInterface);
	void STATIC_OnClickedConfirm();
	void STATIC_OnCheckBoxStateChanged(bool InbChecked);
	void STATIC_Hide();
};


// Class TslGame.TDMSpawnKitWidget
// 0x00B8 (0x0530 - 0x0478)
class UTDMSpawnKitWidget : public UTslSpawnKitBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0478(0x0010) MISSED OFFSET
	TArray<class UTDMSpawnKitItemWidget*>              ItemWidgets;                                              // 0x0488(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FStringClassReference                       SpawnKitItemWidgetClass;                                  // 0x0498(0x0010) (Edit, DisableEditOnInstance)
	class UHorizontalBox*                              SpawnKitButtonsHorizontalBox;                             // 0x04A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    PrimaryWeaponSizeBox_01;                                  // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PrimaryWeaponImage_01;                                    // 0x04B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    PrimaryWeaponSizeBox_02;                                  // 0x04C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PrimaryWeaponImage_02;                                    // 0x04C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    SecondaryWeaponSizeBox;                                   // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      SecondaryWeaponImage;                                     // 0x04D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    ThrowableWeaponSizeBox;                                   // 0x04E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ThrowableWeaponImage;                                     // 0x04E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    MeleeWeaponSizeBox;                                       // 0x04F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      MeleeWeaponImage;                                         // 0x04F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    HelmetSizeBox;                                            // 0x0500(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             HelmetSwitcher;                                           // 0x0508(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    VestSizeBox;                                              // 0x0510(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             VestSwitcher;                                             // 0x0518(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    LeftBumperSizeBox;                                        // 0x0520(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    RightBumperSizeBox;                                       // 0x0528(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TDMSpawnKitWidget"));

		return ptr;
	}


	void STATIC_OnRBPressed();
	void STATIC_OnLBPressed();
	void STATIC_ChangeIndex(int NewIndex);
};


// Class TslGame.TslSpawnKitWidget
// 0x00A0 (0x0518 - 0x0478)
class UTslSpawnKitWidget : public UTslSpawnKitBaseWidget
{
public:
	struct FStringClassReference                       SpawnKitItemWidgetClass;                                  // 0x0478(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, NoClear)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0488(0x0008) MISSED OFFSET
	class UPanelWidget*                                ContentVerticalBox;                                       // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  WeaponContent;                                            // 0x0498(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ArmorContent;                                             // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  AmmoContent;                                              // 0x04A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  OptionContent;                                            // 0x04B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                SelectorParent;                                           // 0x04B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              ItemWidgetYOffset;                                        // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04C4(0x0004) MISSED OFFSET
	TMap<int, class UTslSpawnKitItemWidget*>           ItemWidgets;                                              // 0x04C8(0x0050) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSpawnKitWidget"));

		return ptr;
	}


	void STATIC_OnUnHover(int UnHoverIndex);
	void STATIC_OnHover(int HoverIndex);
};


// Class TslGame.TslStackCountHandlingPopupWidget
// 0x01F0 (0x0638 - 0x0448)
class UTslStackCountHandlingPopupWidget : public UBlockInputUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0448(0x0010) MISSED OFFSET
	TScriptInterface<class USlotInterface>             ItemSlot;                                                 // 0x0458(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	TScriptInterface<class USlotContainerInterface>    Container;                                                // 0x0468(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_EditableText               InputAmountText_Binder;                                   // 0x0480(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   OKButton_Binder;                                          // 0x04A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   Cancel_Binder;                                            // 0x04C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   OuterPopupButton_Binder;                                  // 0x04E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   CloseButton_Binder;                                       // 0x0500(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   InputAmountButton_Binder;                                 // 0x0520(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   MaxButton_Binder;                                         // 0x0540(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Gerneral                   MinButton_Binder;                                         // 0x0560(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  ItemName_Binder;                                          // 0x0580(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  MaxTextBlock_Binder;                                      // 0x05A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  MinTextBlock_Binder;                                      // 0x05C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  OkText_Binder;                                            // 0x05E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_WidgetSwitcher             WidgetSwitcher_Bidner;                                    // 0x0600(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UItem*                                       Item;                                                     // 0x0628(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x0630(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStackCountHandlingPopupWidget"));

		return ptr;
	}


	void STATIC_XBoxOneOk();
	void STATIC_OnWidgetMoveUp();
	void STATIC_OnWidgetMoveRight();
	void STATIC_OnWidgetMoveLeft();
	void STATIC_OnWidgetMoveDown();
	void STATIC_OnWidgetInputB();
	void STATIC_OnWidgetInputA();
	void STATIC_OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void STATIC_OnTextChange(const struct FText& Text);
	void STATIC_OnStackCountActionPerformed();
	void STATIC_OnNotifyDropSlotOnOtherContainer(const TScriptInterface<class USlotContainerInterface>& InContainer, const TScriptInterface<class USlotInterface>& InSlot, const TScriptInterface<class USlotContainerInterface>& InOtherContainer);
	void STATIC_OnClosePopup();
	void STATIC_OnClose();
	void STATIC_OnClickOuterButton();
	void STATIC_OnClickOkButton();
	void STATIC_OnClickMinButton();
	void STATIC_OnClickMaxButton();
	void STATIC_OnClickInputAmountButton();
	void STATIC_OnClickCloseButton();
	void STATIC_OnClickCancelButton();
	struct FText STATIC_GetMinButtonText();
	struct FText STATIC_GetMaxButtonText();
	void STATIC_BlockInput();
};


// Class TslGame.TslStackCountHandlingSliderPopupWidget
// 0x01C0 (0x0608 - 0x0448)
class UTslStackCountHandlingSliderPopupWidget : public UBlockInputUserWidget
{
public:
	TScriptInterface<class USlotContainerInterface>    SlotContainer;                                            // 0x0448(0x0010) (ZeroConstructor, IsPlainOldData)
	TScriptInterface<class USlotInterface>             ItemSlot;                                                 // 0x0458(0x0010) (ZeroConstructor, IsPlainOldData)
	class AInventory*                                  Inventory;                                                // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bNeedToFocus;                                             // 0x0470(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInit;                                                    // 0x0471(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bDoOnce;                                                  // 0x0472(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bNeedToFocusWhenChanged;                                  // 0x0473(0x0001) (ZeroConstructor, IsPlainOldData)
	int                                                MinimumStackCount;                                        // 0x0474(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FText                                       OkText;                                                   // 0x0478(0x0018)
	class UMaterialInstanceDynamic*                    IconMat;                                                  // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	class UItem*                                       DropItem;                                                 // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_TextBlock                  ItemNameBinder;                                           // 0x04A0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ActionTypeTextBinder;                                     // 0x04C0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TextOKBinder;                                             // 0x04E0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  MaxQuantityTextBinder;                                    // 0x0500(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      IconBinder;                                               // 0x0520(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InputAmountTextBinder;                                    // 0x0548(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   QuantitySliderBinder;                                     // 0x0568(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonOKBinder;                                           // 0x0588(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   ButtonCancelBinder;                                       // 0x05A8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             WidgetSwitcherBinder;                                     // 0x05C8(0x0028) (Edit, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnStackCountUpdated;                                      // 0x05F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UStringTable*                                UIStringTable;                                            // 0x0600(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslStackCountHandlingSliderPopupWidget"));

		return ptr;
	}


	bool STATIC_UpdateInputAmountTextWhenTextChanged();
	void STATIC_UpdateButtonState();
	void STATIC_SetSlider(float NewValue);
	void STATIC_SetInputAmountText(const struct FText& NewText);
	void STATIC_OnValueChanged(float Value);
	void STATIC_OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod);
	void STATIC_OnTextChanged(const struct FText& Text);
	void STATIC_OnSynchronizationValue(int SelectAmount, int MaxAmount);
	void STATIC_OnPrepass(class UWidget* BoundWidget);
	void STATIC_OnOk();
	void STATIC_OnNotifyDropSlotOnOtherContainer(const TScriptInterface<class USlotContainerInterface>& ContainerInterface, const TScriptInterface<class USlotInterface>& SlotInterface, const TScriptInterface<class USlotContainerInterface>& OtherContainer);
	void STATIC_OnMouseWheelUpDown(float Value);
	void STATIC_OnItemDropOtherContainer(class UItem* Item);
	void STATIC_OkAction();
	void STATIC_NotifyToCapacityWidget();
	void STATIC_NotifyStackCountUpdated();
	bool STATIC_IsPickup();
	bool STATIC_IsInteractionValid();
	void STATIC_InitOkText();
	void STATIC_InitMaxQuantityText();
	void STATIC_InitItemName();
	void STATIC_InitInputAmountText();
	void STATIC_InitIcon();
	int STATIC_GetMaxCount();
	struct FText STATIC_GetMaxButtonText();
	class AInventory* STATIC_GetInventory();
	void STATIC_FocusOnInputAmountText();
	void STATIC_ClosePopup();
	void STATIC_CloseAction();
	bool STATIC_ClampInputAmountText(int Value);
};


// Class TslGame.TslSystemMenu
// 0x0108 (0x0550 - 0x0448)
class UTslSystemMenu : public UBlockInputUserWidget
{
public:
	TScriptInterface<class UTslNaviWidgetInterface>    LastFocusedWidget;                                        // 0x0448(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     SystemMenuSceneName;                                      // 0x0458(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              BlockContructTimeAfterDestruct;                           // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlockDestructTimeAfterConstruct;                          // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_InvalidationBox            MainInvalidationBox_Binder;                               // 0x0470(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FUmgWidgetBinder_Panel                      OutsidePanel_Binder;                                      // 0x0498(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlatformTextBlock_Binder;                                 // 0x04B8(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  VersionTextBlock_Binder;                                  // 0x04D8(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              LastDestructTime;                                         // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Panel                      SystemMenuVerticalBox_Binder;                             // 0x0500(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 LeaveMatchWidget_Binder;                                  // 0x0520(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0540(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSystemMenu"));

		return ptr;
	}


	void STATIC_ShowCanvasPanel(bool bShow);
	void STATIC_SetupInput();
	void STATIC_RestartLobby();
	void STATIC_RecoverFocusToLastFocusedButton();
	void STATIC_OnHiddenWidget();
	void STATIC_NotifySystemMenuEnter(ESystemMenuButtonType eType);
	void STATIC_NotifyHideWidget();
	void STATIC_NotifyEnableMenuButtons(bool bEnable);
	bool STATIC_IsConstructable();
	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadEnter();
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_DoNothing();
	void STATIC_DelayedKeyBinding();
};


// Class TslGame.TslTeamManageBaseWidget
// 0x0088 (0x04D0 - 0x0448)
class UTslTeamManageBaseWidget : public UBlockInputUserWidget
{
public:
	struct FString                                     WidgetName;                                               // 0x0448(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   InfoWidgetPanel_Binder;                                   // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	class UClass*                                      InfoWidgetClass;                                          // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMargin                                     InfoWidgetPadding;                                        // 0x0480(0x0010) (Edit, DisableEditOnInstance)
	float                                              ActualVolumeMax;                                          // 0x0490(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0494(0x0004) MISSED OFFSET
	struct FString                                     ReportPlayerWidgetName;                                   // 0x0498(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UWidget*>                             InfoWidgets;                                              // 0x04A8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class ATeam*>                               TeamMembers;                                              // 0x04B8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTeamManageBaseWidget"));

		return ptr;
	}


	void STATIC_OnTeamMemberVoiceMuteStateChanged(const struct FString& PlayerId, const struct FString& ChannelId, bool bIsMuted);
	void STATIC_OnSuccessfullyReportPlayer(const struct FString& UniqueId);
	void STATIC_OnReport(const struct FTslReportUserInfo& ReportInfo);
	void STATIC_OnNotifyReportTeamMember();
	bool STATIC_OnInfoWidgetToggleVoiceMute(const struct FString& UniqueId, bool bMute, bool bIsMe);
};


// Class TslGame.TslPcTeamManageWidget
// 0x0048 (0x0518 - 0x04D0)
class UTslPcTeamManageWidget : public UTslTeamManageBaseWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   CloseBtn_Binder;                                          // 0x04D0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 ReportWidget_Binder;                                      // 0x04F0(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0510(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslPcTeamManageWidget"));

		return ptr;
	}


	void STATIC_OnCloseButtonClicked();
};


// Class TslGame.TslXboxTeamManageWidget
// 0x0000 (0x04D0 - 0x04D0)
class UTslXboxTeamManageWidget : public UTslTeamManageBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslXboxTeamManageWidget"));

		return ptr;
	}


	void STATIC_OnTeamMemberVoiceMuteStateChanged(const struct FString& PlayerId, const struct FString& ChannelId, bool bIsMuted);
	void STATIC_OnSuccessfullyReportPlayer(const struct FString& UniqueId);
	void STATIC_OnReport(const struct FTslReportUserInfo& ReportInfo);
	void STATIC_OnNotifyReportTeamMember();
	bool STATIC_OnInfoWidgetToggleVoiceMute(const struct FString& UniqueId, bool bMute, bool bIsMe);
};


// Class TslGame.TslTop5NotificationWidget
// 0x0018 (0x0460 - 0x0448)
class UTslTop5NotificationWidget : public UBlockInputUserWidget
{
public:
	int                                                ShowTime;                                                 // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InputPriority;                                            // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RemainTime;                                               // 0x0450(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	struct FTimerHandle                                EverySecondTimer;                                         // 0x0458(0x0008)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTop5NotificationWidget"));

		return ptr;
	}


	void STATIC_OnCPPWin();
	void STATIC_OnContinueGame();
	void STATIC_EverySecond();
};


// Class TslGame.TslWebWidgetConfig
// 0x0018 (0x0048 - 0x0030)
class UTslWebWidgetConfig : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWebWidgetConfig"));

		return ptr;
	}

};


// Class TslGame.TslWebWidget
// 0x0018 (0x0460 - 0x0448)
class UTslWebWidget : public UBlockInputUserWidget
{
public:
	class UWebBrowser*                                 Browser;                                                  // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     Close;                                                    // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWebWidget"));

		return ptr;
	}


	void STATIC_OnWidgetShowChanged(const struct FString& InWidgetName, EWidgetShowType InShowType, class UObject* InOptionalParam, class ATslBaseHUD* InBaseHUD, bool bInWidgetNewShow);
	void STATIC_OnCloseClicked();
};


// Class TslGame.TslWheelBaseWidget
// 0x01E8 (0x0630 - 0x0448)
class UTslWheelBaseWidget : public UBlockInputUserWidget
{
public:
	struct FUmgWidgetBinder_Overlay                    WheelOverlay_Binder;                                      // 0x0448(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MouseCursorIcon_Binder;                                   // 0x0470(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CenterImage_Binder;                                       // 0x0498(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CenterTitleTextBlock_Binder;                              // 0x04C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CenterDescriptionTextBlock_Binder;                        // 0x04E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    CloseGuideSizeBox_Binder;                                 // 0x0500(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeInAnimation_Binder;                                   // 0x0528(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimation_Binder;                                  // 0x0548(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UBorder*                                     WheelBorder;                                              // 0x0568(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FString                                     WidgetName;                                               // 0x0570(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              AngleOffset;                                              // 0x0580(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTimeBeforeUnfocusOnGamepad;                          // 0x0584(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       UnavailableSystemMessageText;                             // 0x0588(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      SubWidgetClass;                                           // 0x05A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FTslWheelSubWidgetClassEntry>        SubWidgetClassPerItemCount;                               // 0x05A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bShowMouseCursor;                                         // 0x05B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05B9(0x0003) MISSED OFFSET
	float                                              GamepadSafeZoneRadius;                                    // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MouseSafeZoneRadius;                                      // 0x05C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ETslWheelWidgetSelectType                          MouseSelectType;                                          // 0x05C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ETslWheelWidgetSelectType                          GamepadSelectType;                                        // 0x05C5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMoveCursorToWidgetCenterWhenShowing;                     // 0x05C6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x05C7(0x0001) MISSED OFFSET
	TArray<class UTslWheelBaseSubWidget*>              SubWidgets;                                               // 0x05C8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x9];                                       // 0x05D8(0x0009) MISSED OFFSET
	ETslWheelWidgetSelectType                          SelectType;                                               // 0x05E1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x05E2(0x0006) MISSED OFFSET
	class UTslWheelContext*                            WheelContext;                                             // 0x05E8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x34];                                      // 0x05F0(0x0034) MISSED OFFSET
	ETslWheelWidgetMouseCursorDirectionType            MouseCursorDirectionType;                                 // 0x0624(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0625(0x0003) MISSED OFFSET
	float                                              RestrictedDistanceFromCenter;                             // 0x0628(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x062C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslWheelBaseWidget"));

		return ptr;
	}


	void STATIC_WidgetShow();
	void STATIC_WidgetHide();
	void STATIC_OnClicked();
	void STATIC_Cancel();
};


// Class TslGame.TslDirectionalWheelWidget
// 0x0008 (0x0638 - 0x0630)
class UTslDirectionalWheelWidget : public UTslWheelBaseWidget
{
public:
	class UWidgetSwitcher*                             WheelSwitcher;                                            // 0x0630(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslDirectionalWheelWidget"));

		return ptr;
	}

};


// Class TslGame.TslEmoteWheelWidget
// 0x0078 (0x06B0 - 0x0638)
class UTslEmoteWheelWidget : public UTslDirectionalWheelWidget
{
public:
	TArray<struct FName>                               EmoteRowNames;                                            // 0x0638(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               EmoteShorcutNames;                                        // 0x0648(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FEmoteDBDataRow>                     EmoteDataRows;                                            // 0x0658(0x0010) (ZeroConstructor)
	TArray<struct FName>                               MovementAxises;                                           // 0x0668(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTslAxisInputCallbackConfig>         GamepadMovementAxises;                                    // 0x0678(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               TurnAxises;                                               // 0x0688(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              BlockMovingTime;                                          // 0x0698(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x069C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslEmoteWheelWidget"));

		return ptr;
	}


	void STATIC_OnSelect9();
	void STATIC_OnSelect8();
	void STATIC_OnSelect7();
	void STATIC_OnSelect6();
	void STATIC_OnSelect5();
	void STATIC_OnSelect4();
	void STATIC_OnSelect3();
	void STATIC_OnSelect2();
	void STATIC_OnSelect12();
	void STATIC_OnSelect11();
	void STATIC_OnSelect10();
	void STATIC_OnSelect1();
	void STATIC_DoNothingFloat(float Value);
	void STATIC_DoNothing();
};


// Class TslGame.TslItemWheelWidget
// 0x0010 (0x0648 - 0x0638)
class UTslItemWheelWidget : public UTslDirectionalWheelWidget
{
public:
	TArray<struct FName>                               ItemIds;                                                  // 0x0638(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemWheelWidget"));

		return ptr;
	}

};


// Class TslGame.TslHealItemWheelWidget
// 0x0000 (0x0648 - 0x0648)
class UTslHealItemWheelWidget : public UTslItemWheelWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHealItemWheelWidget"));

		return ptr;
	}

};


// Class TslGame.TslItemRequestWheelWidget
// 0x0000 (0x0648 - 0x0648)
class UTslItemRequestWheelWidget : public UTslItemWheelWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslItemRequestWheelWidget"));

		return ptr;
	}

};


// Class TslGame.TslThrowableItemWheelWidget
// 0x0000 (0x0648 - 0x0648)
class UTslThrowableItemWheelWidget : public UTslItemWheelWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslThrowableItemWheelWidget"));

		return ptr;
	}

};


// Class TslGame.TslTacticalMapMarkerWheelWidget
// 0x0010 (0x0640 - 0x0630)
class UTslTacticalMapMarkerWheelWidget : public UTslWheelBaseWidget
{
public:
	TArray<struct FMarkerUIInfo>                       MapMarkerInfos;                                           // 0x0630(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslTacticalMapMarkerWheelWidget"));

		return ptr;
	}

};


// Class TslGame.BluezoneGuideWidget
// 0x0000 (0x03F0 - 0x03F0)
class UBluezoneGuideWidget : public UUmgBaseWidget
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneGuideWidget"));

		return ptr;
	}


	void STATIC_UnBindFakeCursor();
	bool STATIC_SetFakeMouseMouseButtonUp(const struct FVector2D& InCursorPositionInViewport);
	bool STATIC_SetFakeMouseMouseButtonDown(const struct FVector2D& InCursorPositionInViewport);
	void STATIC_RuntimeInitBP();
	void STATIC_OnFakeCursorY(float Val);
	void STATIC_OnFakeCursorX(float Val);
	void STATIC_OnFakeCursorUp();
	void STATIC_OnFakeCursorDown();
	bool STATIC_IsMouseOn();
	void STATIC_HandleMainPrepass(class UWidget* Widget);
	bool STATIC_CheckWantRequestRender();
	void STATIC_BindFakeCursor();
};


// Class TslGame.BluezoneGpsBaseWidget
// 0x0370 (0x0760 - 0x03F0)
class UBluezoneGpsBaseWidget : public UBluezoneGuideWidget
{
public:
	struct FUmgWidgetBinder_Image                      BluezoneGaugeImageBinder;                                 // 0x03F0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      PlayerIconImageBinder;                                    // 0x0418(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  MovingAnimationBinder;                                    // 0x0440(0x0020) (Edit, BlueprintVisible)
	TArray<struct FUmgWidgetBinder_Animation>          WarningAnimationList;                                     // 0x0460(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_Animation>          ReleasingTextAnimationList;                               // 0x0470(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FUmgWidgetBinder_Animation                  EnterNextPlayzoneAnimBinder;                              // 0x0480(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  LeaveNextPlayzoneAnimBinder;                              // 0x04A0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  WidgetEmergingAnimBinder;                                 // 0x04C0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  WidgetVanishingAminBinder;                                // 0x04E0(0x0020) (Edit, BlueprintVisible)
	struct FName                                       PlayZoneStartParmName;                                    // 0x0500(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       BluezoneEndParamName;                                     // 0x0508(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ColorMultiplyParmName;                                    // 0x0510(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                InNextPlayzoneColorMultiply;                              // 0x0518(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FSequence_Float                             BluezoneResetSequence;                                    // 0x0528(0x00A0) (Edit, BlueprintVisible)
	struct FSequence_Float                             PlayzoneResetSequence;                                    // 0x05C8(0x00A0) (Edit, BlueprintVisible)
	struct FSequence_Float                             PlayerIconResetSequence;                                  // 0x0668(0x00A0) (Edit, BlueprintVisible)
	float                                              PlayerIconPositionX_Start;                                // 0x0708(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerIconPositionX_End;                                  // 0x070C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0710(0x0008) MISSED OFFSET
	bool                                               bSaveWantShow;                                            // 0x0718(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x47];                                      // 0x0719(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneGpsBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateBluezoneGpsWidget(class UWidget* Widget);
	void STATIC_OnNotifyNextGasIn(const struct FVector& PoisonGasWarningPosition, float PoisonGasWarningRadius);
	void STATIC_OnGameUserSettingApplied();
};


// Class TslGame.BluezonePhaseWidget
// 0x0020 (0x0410 - 0x03F0)
class UBluezonePhaseWidget : public UBluezoneGuideWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  BluezonePhaseTextBinder;                                  // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezonePhaseWidget"));

		return ptr;
	}

};


// Class TslGame.BluezoneTimeWidget
// 0x00F0 (0x04E0 - 0x03F0)
class UBluezoneTimeWidget : public UBluezoneGuideWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  BluezoneTimeTextBinder;                                   // 0x03F0(0x0020) (Edit, BlueprintVisible)
	TArray<struct FUmgWidgetBinder_Animation>          ReleasingTextAnimationList;                               // 0x0410(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       TimeTextFormat;                                           // 0x0420(0x0018) (Edit, BlueprintVisible)
	bool                                               bOverrideWarningTimeText;                                 // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	struct FText                                       OverrideWarningTimeText;                                  // 0x0440(0x0018) (Edit, BlueprintVisible)
	bool                                               bOverrideReleaseTimeText;                                 // 0x0458(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0459(0x0007) MISSED OFFSET
	struct FText                                       OverrideReleaseTimeText;                                  // 0x0460(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0478(0x0050) MISSED OFFSET
	class UImage*                                      CacedCautionImage;                                        // 0x04C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UWidget*                                     CachedTimeTextSpacer;                                     // 0x04D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneTimeWidget"));

		return ptr;
	}

};


// Class TslGame.ObserverBluezoneTimeWidget
// 0x0020 (0x0500 - 0x04E0)
class UObserverBluezoneTimeWidget : public UBluezoneTimeWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x04E0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverBluezoneTimeWidget"));

		return ptr;
	}

};


// Class TslGame.BluezoneWidget
// 0x0018 (0x0408 - 0x03F0)
class UBluezoneWidget : public UUmgBaseWidget
{
public:
	TArray<class UWidget*>                             BluezoneArea;                                             // 0x03F0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0400(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.BluezoneWidget"));

		return ptr;
	}

};


// Class TslGame.CaptureAreaStatusWidget
// 0x0108 (0x04F8 - 0x03F0)
class UCaptureAreaStatusWidget : public UUmgBaseWidget
{
public:
	struct FCaptureObjectWidgetData                    CaptureObjectWidgetData;                                  // 0x03F0(0x0108) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CaptureAreaStatusWidget"));

		return ptr;
	}

};


// Class TslGame.CharacterStanceBaseWidget
// 0x0038 (0x0428 - 0x03F0)
class UCharacterStanceBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      StanceIconImageBinder;                                    // 0x03F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FName                                       IconStateParamName;                                       // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSaveShow;                                                // 0x0420(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	float                                              SaveState;                                                // 0x0424(0x0004) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CharacterStanceBaseWidget"));

		return ptr;
	}

};


// Class TslGame.ConstraintSlotOwnerItemIconWidget
// 0x0020 (0x0410 - 0x03F0)
class UConstraintSlotOwnerItemIconWidget : public UUmgBaseWidget
{
public:
	EEquipSlotID                                       EquipSlotID;                                              // 0x03F0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	class UImage*                                      IconImageBinder;                                          // 0x03F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FLinearColor                                IconColor;                                                // 0x0400(0x0010) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ConstraintSlotOwnerItemIconWidget"));

		return ptr;
	}


	void STATIC_SetEquipSlotID(EEquipSlotID EquipSlotID);
};


// Class TslGame.CraftItemListWidget
// 0x0068 (0x0458 - 0x03F0)
class UCraftItemListWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03F0(0x0018) MISSED OFFSET
	class UVerticalBox*                                CraftingItemVerticalBox;                                  // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	int                                                NumSlotsPerRow;                                           // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	class UClass*                                      CraftItemSlotWidgetClass;                                 // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FCraftableItemAndCount>              CachedCraftableItems;                                     // 0x0420(0x0010) (ZeroConstructor, Transient)
	TArray<class UHorizontalBox*>                      SlotRows;                                                 // 0x0430(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UCraftItemSlotWidget*>                CraftableItemSlots;                                       // 0x0440(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UCraftRuleComponent*                         CachedCraftRuleComponent;                                 // 0x0450(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftItemListWidget"));

		return ptr;
	}


	void STATIC_OnViewTargetUpdated(class AActor* NewViewTarget);
	void STATIC_OnCraftAllowFilterUpdated();
	void STATIC_OnCraftableItemCountChanged();
};


// Class TslGame.CraftItemListWidget_Gamepad
// 0x0010 (0x0468 - 0x0458)
class UCraftItemListWidget_Gamepad : public UCraftItemListWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x0460(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWantFocus;                                               // 0x0464(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0465(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftItemListWidget_Gamepad"));

		return ptr;
	}


	void STATIC_OnFaceA();
	void STATIC_OnDPadUp();
	void STATIC_OnDPadRight();
	void STATIC_OnDPadLeft();
	void STATIC_OnDPadDown();
};


// Class TslGame.CraftItemSlotWidget
// 0x00E8 (0x04D8 - 0x03F0)
class UCraftItemSlotWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FName                                       CraftableItemID;                                          // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0400(0x0018) MISSED OFFSET
	class UCraftItemToolTipWidget*                     CachedCraftToolTip;                                       // 0x0418(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	class UTslInventoryBaseWidget*                     CachedInventory;                                          // 0x0428(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UImage*                                      ItemIconImage;                                            // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemStackTextBox;                                         // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemQuantityTextBox;                                      // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBorder*                                     CraftingItemSlotBorder;                                   // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      CastingBarGaugeImage;                                     // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      HighlightImage;                                           // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBorder*                                     ItemIconBorder;                                           // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBorder*                                     ItemQuantityBorder;                                       // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FLinearColor                                SlotColorEnabled;                                         // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                SlotColorDisabled;                                        // 0x0480(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ItemIconBorderColorDefault;                               // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ItemIconBorderColorHighlight;                             // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ItemQuantityBorderColorDefault;                           // 0x04B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ItemQuantityBorderColorHighlight;                         // 0x04C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               MouseOverSound;                                           // 0x04D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftItemSlotWidget"));

		return ptr;
	}


	void STATIC_OnCraftFinished(bool bSuccess, const struct FName& InCraftItem);
	void STATIC_OnCraftableItemIconAsyncLoadFinish();
};


// Class TslGame.CraftItemSlotWidget_Gamepad
// 0x0008 (0x04E0 - 0x04D8)
class UCraftItemSlotWidget_Gamepad : public UCraftItemSlotWidget
{
public:
	bool                                               bWantFocus;                                               // 0x04D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftItemSlotWidget_Gamepad"));

		return ptr;
	}

};


// Class TslGame.ItemToolTipBaseWidget
// 0x0028 (0x0418 - 0x03F0)
class UItemToolTipBaseWidget : public UUmgBaseWidget
{
public:
	class UWidgetAnimation*                            FadeInToolTip;                                            // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       CapacityLocText;                                          // 0x03F8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UItem*                                       CurrentItem;                                              // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemToolTipBaseWidget"));

		return ptr;
	}


	void STATIC_SetItemByInterface(const TScriptInterface<class USlotInterface>& SlotInterface);
	void STATIC_OnStackCountUpdated();
	void STATIC_OnIconLoaded();
	void STATIC_HideIfMine(class UItem* TargetItem);
};


// Class TslGame.CraftMaterialIconWidget
// 0x0028 (0x0418 - 0x03F0)
class UCraftMaterialIconWidget : public UUmgBaseWidget
{
public:
	class UImage*                                      ItemIconImage;                                            // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemRequiredQuantityTextBox;                              // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FCraftMaterialCount                         CachedCraftMaterialCount;                                 // 0x0400(0x0010) (Transient)
	class UItem*                                       CachedItem;                                               // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftMaterialIconWidget"));

		return ptr;
	}


	void STATIC_OnItemIconImageAsyncLoadFinished();
};


// Class TslGame.CraftItemToolTipWidget
// 0x0060 (0x0478 - 0x0418)
class UCraftItemToolTipWidget : public UItemToolTipBaseWidget
{
public:
	class UTextBlock*                                  ItemNameText;                                             // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemCategoryText;                                         // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USizeBox*                                    IconScaleBoxSizeBlock;                                    // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UImage*                                      IconImage;                                                // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UHorizontalBox*                              IngredientsItemSlotHorizontalBox;                         // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemDescText;                                             // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CapacityText;                                             // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              DefaultDelayTime;                                         // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	struct FName                                       CraftItemID;                                              // 0x0458(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0460(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CraftItemToolTipWidget"));

		return ptr;
	}

};


// Class TslGame.FBRClassSelectGuideWidget
// 0x0010 (0x0400 - 0x03F0)
class UFBRClassSelectGuideWidget : public UUmgBaseWidget
{
public:
	class UImage*                                      HoldProgressCircle;                                       // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              HoldProgressThreshold;                                    // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FBRClassSelectGuideWidget"));

		return ptr;
	}


	void STATIC_OnReleaseWidgetInputX();
	void STATIC_OnPressWidgetInputX();
};


// Class TslGame.FppWeaponSlotHudBaseWidget
// 0x0050 (0x0440 - 0x03F0)
class UFppWeaponSlotHudBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 WeaponSlotListBinder;                                     // 0x03F0(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                WeaponSlotListRetainerBoxBinder;                          // 0x0410(0x0028) (Edit)
	EColorBlindType                                    SavedColorBlindType;                                      // 0x0438(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0439(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FppWeaponSlotHudBaseWidget"));

		return ptr;
	}


	void STATIC_ChangeWeaponListWidgetPosition();
};


// Class TslGame.FppWeaponSlotListWidget
// 0x0038 (0x0428 - 0x03F0)
class UFppWeaponSlotListWidget : public UUmgBaseWidget
{
public:
	class UWeaponProcessorComponent*                   SaveWeaponProcessor;                                      // 0x03F0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ATslWeapon*                                  SaveWeapon;                                               // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       SaveCurrentWeaponClassName;                               // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FName>                               SaveWeaponListClassNames;                                 // 0x0408(0x0010) (ZeroConstructor, Transient)
	bool                                               bSaveIsUnarmed;                                           // 0x0418(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	int                                                SaveLoadedAmmoCount;                                      // 0x041C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                SaveThrowableCount;                                       // 0x0420(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0424(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FppWeaponSlotListWidget"));

		return ptr;
	}

};


// Class TslGame.GameInfoCanvasBaseWidget
// 0x0110 (0x0500 - 0x03F0)
class UGameInfoCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_WidgetSwitcher             GamePlayInfoSwitcherBinder;                               // 0x03F0(0x0028) (Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             KillCountOrTeamCountSwitcherBinder;                       // 0x0418(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 AlivePlayerWidgetBinder;                                  // 0x0440(0x0020) (Edit)
	struct FUmgWidgetBinder_InvalidationBox            AlivePlayerInfoInvalidationBoxBinder;                     // 0x0460(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 KillCountWidgetBinder;                                    // 0x0488(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                TimeLimitRetainerBoxBinder;                               // 0x04A8(0x0028) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TimeLimitTextBinder;                                      // 0x04D0(0x0020) (Edit)
	class UTimerTextBlockUpdater*                      TimeLimitTextUpdater;                                     // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GameInfoCanvasBaseWidget"));

		return ptr;
	}


	void STATIC_OnTimeLimitTextUpdated(const struct FString& TimeText, int Seconds);
};


// Class TslGame.GameProgressTimeWidget
// 0x0020 (0x0410 - 0x03F0)
class UGameProgressTimeWidget : public UUmgBaseWidget
{
public:
	struct FText                                       TimeTextFormat;                                           // 0x03F0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTextBlock*                                  CachedProgressTimeText;                                   // 0x0408(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.GameProgressTimeWidget"));

		return ptr;
	}

};


// Class TslGame.HudMainBaseWidget
// 0x0010 (0x0400 - 0x03F0)
class UHudMainBaseWidget : public UUmgBaseWidget
{
public:
	struct FString                                     UiKey;                                                    // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.HudMainBaseWidget"));

		return ptr;
	}


	bool STATIC_OnInit_Widget(class ATslBaseHUD* TslBaseHUD);
	bool STATIC_OnInit_Replay(class ATslBaseHUD* TslBaseHUD);
	bool STATIC_OnInit_Input(class ATslBaseHUD* TslBaseHUD);
	bool STATIC_OnInit_Delegate(class ATslBaseHUD* TslBaseHUD);
};


// Class TslGame.ImageInTextWidget
// 0x0120 (0x0510 - 0x03F0)
class UImageInTextWidget : public UUmgBaseWidget
{
public:
	struct FText                                       FormatText;                                               // 0x03F0(0x0018) (Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<struct FString, struct FTexture2DAndSizePair> Texture2DAndSizeMap;                                      // 0x0408(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	struct FSlateFontInfo                              FontInfo;                                                 // 0x0458(0x0068) (Edit, BlueprintVisible)
	TEnumAsByte<EVerticalAlignment>                    VecticalAlignment;                                        // 0x04C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04C1(0x0007) MISSED OFFSET
	class UHorizontalBox*                              TextHorizontalBox;                                        // 0x04C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UTextBlock*>                          AvailableTextBlocks;                                      // 0x04D0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UImage*>                              AvailableImages;                                          // 0x04E0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x20];                                      // 0x04F0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ImageInTextWidget"));

		return ptr;
	}


	void STATIC_UpdateText();
};


// Class TslGame.InteractionBaseWidget
// 0x0478 (0x0868 - 0x03F0)
class UInteractionBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     MainLayer;                                                // 0x03F0(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  InteractionMessageTextBinder;                             // 0x0420(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     InteractionMessageTextBgBinder;                           // 0x0440(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  AdditionalTextBinder;                                     // 0x0470(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      SuitableWeaponImageBinder;                                // 0x0490(0x0028) (Edit, BlueprintVisible)
	float                                              SuitableWeaponImageHeight;                                // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      KeyImageBinder;                                           // 0x04C0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  InteractionKeyTextBinder;                                 // 0x04E8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     InteractionKeyTextBorder_Binder;                          // 0x0508(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      InteractionKeyImage_Left_Binder;                          // 0x0538(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      InteractionKeyImage_Right_Binder;                         // 0x0560(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AdditionalMessageBlinkingBinder;                          // 0x0588(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AdditionalMessageNormalBinder;                            // 0x05A8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ShowAnimationBinder;                                      // 0x05C8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  HiddenAnimationBinder;                                    // 0x05E8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             InteractionInputMethodSwitcherBinder;                     // 0x0608(0x0028) (Edit, BlueprintVisible)
	struct FName                                       InteractionKeyName;                                       // 0x0630(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      ProgressCircleX_Binder;                                   // 0x0638(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      ProgressCircleB_Binder;                                   // 0x0660(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_HorizontalBox              SecondaryInteractionHorizontalBoxBinder;                  // 0x0688(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             SecondaryInteractionSwitcherBinder;                       // 0x06B0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SecondaryInteractionMessageTextBinder;                    // 0x06D8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SecondaryInteractionKeyTextBinder;                        // 0x06F8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     SecondaryInteractionKeyTextBorder_Binder;                 // 0x0718(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      SecondaryInteractionKeyImage_Left_Binder;                 // 0x0748(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      SecondaryInteractionKeyImage_Right_Binder;                // 0x0770(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      SecondaryKeyImageBinder;                                  // 0x0798(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 PlatformImage_Binder;                                     // 0x07C0(0x0020) (Edit, DisableEditOnInstance)
	struct FLinearColor                                InteractionTextColor_Interactable;                        // 0x07E0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                InteractionTextShadowColor_Interactable;                  // 0x07F0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                InteractionTextColor_NotInteractable;                     // 0x0800(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                InteractionTextShadowColor_NotInteractable;               // 0x0810(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0820(0x0008) MISSED OFFSET
	class UObject*                                     CachedInteractionObject;                                  // 0x0828(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0830(0x0020) MISSED OFFSET
	class UObject*                                     LastOutlinedCachedInteractionObject;                      // 0x0850(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xA];                                       // 0x0858(0x000A) MISSED OFFSET
	bool                                               bFollowShowInAir;                                         // 0x0862(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bFollowShowInAircraft;                                    // 0x0863(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0864(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InteractionBaseWidget"));

		return ptr;
	}


	void STATIC_SetMainLayerVisibility(ESlateVisibility InVisibility);
	void STATIC_SetInteractionText(const struct FText& InText, const struct FLinearColor& InColor);
	void STATIC_OnNotifyInteractionItemChanged(bool bIsInteractEnable);
	void STATIC_OnInventoryUpdated();
	void STATIC_OnChangeTargetingType(ETargetingType InNewTargetingType);
};


// Class TslGame.InteractionCanvasBaseWidget
// 0x0048 (0x0438 - 0x03F0)
class UInteractionCanvasBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 InteractionWidgetBinder;                                  // 0x03F0(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                InteractionRetainerBoxBinder;                             // 0x0410(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.InteractionCanvasBaseWidget"));

		return ptr;
	}

};


// Class TslGame.ItemThrowInteractionBaseWidget
// 0x0140 (0x0530 - 0x03F0)
class UItemThrowInteractionBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     MainLayer;                                                // 0x03F0(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  InteractionMessageTextBinder;                             // 0x0420(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     InteractionMessageTextBgBinder;                           // 0x0440(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  AdditionalTextBinder;                                     // 0x0470(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Gerneral                   InteractionKey_Binder;                                    // 0x0490(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_WidgetSwitcher             InteractionInputMethodSwitcherBinder;                     // 0x04B0(0x0028) (Edit, BlueprintVisible)
	struct FName                                       InteractionKeyName;                                       // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                InteractionTextColor_Interactable;                        // 0x04E0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                InteractionTextShadowColor_Interactable;                  // 0x04F0(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                InteractionTextColor_NotInteractable;                     // 0x0500(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                InteractionTextShadowColor_NotInteractable;               // 0x0510(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	class ATslCharacter*                               LastOutlinedCharacter;                                    // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTslItemRequestManager*                      CachedItemRequestManager;                                 // 0x0528(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemThrowInteractionBaseWidget"));

		return ptr;
	}

};


// Class TslGame.ItemToolTipWidget
// 0x00A0 (0x04B8 - 0x0418)
class UItemToolTipWidget : public UItemToolTipBaseWidget
{
public:
	class UImage*                                      IconImage;                                                // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    IconSizeBox;                                              // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemNameTextBlock;                                        // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CategoryTextBlock;                                        // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SkinNameTextBlock;                                        // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DescriptionTextBlock;                                     // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  CapacityTextBlock;                                        // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                ComparisonPanel;                                          // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ComparingItemNameTextBlock;                               // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                AmmoInfoPanel;                                            // 0x0460(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  AmmoNameTextBlock;                                        // 0x0468(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  AmmoPerClipTextBlock;                                     // 0x0470(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                WeaponGaugePanel;                                         // 0x0478(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItemToolTipGaugeWidget*                     DamageGauge;                                              // 0x0480(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItemToolTipGaugeWidget*                     EffectRangeGauge;                                         // 0x0488(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItemToolTipGaugeWidget*                     AccuracyGauge;                                            // 0x0490(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UItemToolTipGaugeWidget*                     FiringRateGauge;                                          // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxDamage;                                                // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxEffectRange;                                           // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAccuracy;                                              // 0x04A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFiringRate;                                            // 0x04AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPrintDebugWeaponInfoToScreen;                            // 0x04B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemToolTipWidget"));

		return ptr;
	}


	void STATIC_RefreshSkinInfo();
};


// Class TslGame.ItemToolTipGaugeWidget
// 0x0070 (0x0460 - 0x03F0)
class UItemToolTipGaugeWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      GaugeImage_Binder;                                        // 0x03F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                                ComparingBaseColor;                                       // 0x0418(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ComparingEmphasizingColor;                                // 0x0428(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                NonComparingBaseColor;                                    // 0x0438(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                NonComparingZeroColor;                                    // 0x0448(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemToolTipGaugeWidget"));

		return ptr;
	}


	void STATIC_Update(float BeginGap, float EndGap, bool bCompareMode);
};


// Class TslGame.ItemWidget
// 0x0040 (0x0430 - 0x03F0)
class UItemWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    ItemWidgetOnHovered;                                      // 0x03F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    ItemWidgetOnUnhovered;                                    // 0x0400(0x0010) (ZeroConstructor, InstancedReference)
	class UTslFakeButton*                              ItemIconButton;                                           // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ItemIconImage;                                            // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       ItemImageParam;                                           // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UItem*                                       CachedItem;                                               // 0x0428(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ItemWidget"));

		return ptr;
	}


	void STATIC_UpdateWithCachedItem();
	void STATIC_OnUnHovered();
	void STATIC_OnHovered();
};


// Class TslGame.KillCountBaseWidget
// 0x0050 (0x0440 - 0x03F0)
class UKillCountBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  KillCountTextBinder;                                      // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Animation                  IncreasingAnimBinder;                                     // 0x0410(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              IncreasingKillCountDisplayTime;                           // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LastKillCount;                                            // 0x0434(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLastWantShow;                                            // 0x0438(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	float                                              IncreasingKillCountDisplayStartTime;                      // 0x043C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.KillCountBaseWidget"));

		return ptr;
	}


	int STATIC_GetLastKillCount();
};


// Class TslGame.LifeGaugeEffectBaseWidget
// 0x00B8 (0x04A8 - 0x03F0)
class ULifeGaugeEffectBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	struct FName                                       OldLifeRatioParamName;                                    // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CurrentLifeRatioParamName;                                // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LifeEffectBinder;                                         // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_FloatCurve>       LifeEffectAnimationFloatCurveList;                        // 0x0438(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_VectorCurve>      LifeEffectAnimationVectorCurveList;                       // 0x0448(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      LifeEffectBackgroundBinder;                               // 0x0458(0x0028) (Edit, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_FloatCurve>       LifeEffectBgAnimationFloatCurveList;                      // 0x0480(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_VectorCurve>      LifeEffectBgAnimationVectorCurveList;                     // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAutoDestroyOnEffectPlayFinish;                           // 0x04A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LifeGaugeEffectBaseWidget"));

		return ptr;
	}

};


// Class TslGame.LifeGaugeHitEffectBaseWidget
// 0x0098 (0x0488 - 0x03F0)
class ULifeGaugeHitEffectBaseWidget : public UUmgBaseWidget
{
public:
	TArray<struct FGaugeAlphaCurveType>                AlphaCurveList;                                           // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FUmgWidgetBinder_Image                      HitEffectImage;                                           // 0x0400(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FName                                       BaseColorParamName;                                       // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ColorLerpParamName;                                       // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       BrightAlphaParamName;                                     // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       HitEffectAlphaParamName;                                  // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       HitEffectStartParamName;                                  // 0x0448(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       HitEffectEndParamName;                                    // 0x0450(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0458(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LifeGaugeHitEffectBaseWidget"));

		return ptr;
	}

};


// Class TslGame.LifeGaugeTemplateBaseWidget
// 0x0198 (0x0588 - 0x03F0)
class ULifeGaugeTemplateBaseWidget : public UUmgBaseWidget
{
public:
	class UTslHealthGaugeData*                         LifeGaugeColorData;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LifeGaugeImageBinder;                                     // 0x03F8(0x0028) (Edit, BlueprintVisible)
	struct FName                                       LifeGaugeRatioValueParamName;                             // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       LifeGaugeColorParamName;                                  // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  WarningAnimationBinder;                                   // 0x0430(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      BackgroundImageBinder;                                    // 0x0450(0x0028) (Edit, BlueprintVisible)
	bool                                               bOverrideLifeGaugeMaterial;                               // 0x0478(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0479(0x0007) MISSED OFFSET
	class UMaterialInterface*                          OverrideLifeGaugeMaterial;                                // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideBackgroundMaterial;                              // 0x0488(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0489(0x0007) MISSED OFFSET
	class UMaterialInterface*                          OverrideBackgroundMaterial;                               // 0x0490(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseEffect;                                               // 0x0498(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0499(0x0007) MISSED OFFSET
	class UClass*                                      DamageEffectClass;                                        // 0x04A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      HealEffectClass;                                          // 0x04A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      HealAmountEffectClass;                                    // 0x04B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Overlay                    EffectLayerBinder;                                        // 0x04B8(0x0028) (Edit, BlueprintVisible)
	int                                                DamageEffectMax;                                          // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HealEffectMax;                                            // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  ZombieVirusAnimationBinder;                               // 0x04E8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  ZombieDBNOAnimationBinder;                                // 0x0508(0x0020) (Edit, BlueprintVisible)
	class UMaterialInterface*                          ZombieHealthMat;                                          // 0x0528(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          ZombieHealthBGMat;                                        // 0x0530(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0538(0x0008) MISSED OFFSET
	class UMaterialInterface*                          OriginalHealthMat;                                        // 0x0540(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0548(0x0018) MISSED OFFSET
	TArray<class ULifeGaugeEffectBaseWidget*>          DamageEffects;                                            // 0x0560(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class ULifeGaugeEffectBaseWidget*>          HealEffects;                                              // 0x0570(0x0010) (ExportObject, ZeroConstructor, Transient)
	class ULifeGaugeEffectBaseWidget*                  HealAmountEffect;                                         // 0x0580(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LifeGaugeTemplateBaseWidget"));

		return ptr;
	}


	void STATIC_Update(float Life, float MaxLife, bool bIsGroggy, float Healamount, bool bDisableEffect, bool bViewTargetChanged);
	void STATIC_OnDestoryHealEffect(class ULifeGaugeEffectBaseWidget* HealEffect);
	void STATIC_OnDestoryDamageEffect(class ULifeGaugeEffectBaseWidget* DamageEffect);
	bool STATIC_HasEffect();
};


// Class TslGame.LocationNameWidget
// 0x0088 (0x0478 - 0x03F0)
class ULocationNameWidget : public UUmgBaseWidget
{
public:
	struct FMapLocationData                            MapLocationData;                                          // 0x03F0(0x0028) (BlueprintVisible, BlueprintReadOnly)
	struct FVector2D                                   MaximumSize;                                              // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleDenominator;                                         // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     InBorderBinder;                                           // 0x0428(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  LocationNameTextBlockBinder;                              // 0x0458(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.LocationNameWidget"));

		return ptr;
	}

};


// Class TslGame.MapCaptureAreaWidget
// 0x02D0 (0x06C0 - 0x03F0)
class UMapCaptureAreaWidget : public UUmgBaseWidget
{
public:
	struct FCaptureObjectWidgetData                    CaptureObjectWidgetData;                                  // 0x03F0(0x0108) (Edit)
	class UButton*                                     RespawnButton;                                            // 0x04F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateBrush                                 DefaultRespawnButtonBrush;                                // 0x0500(0x0090) (Edit)
	struct FSlateBrush                                 SelectedRespawnButtonBrush;                               // 0x0590(0x0090) (Edit)
	struct FSlateBrush                                 HoveredRespawnButtonBrush;                                // 0x0620(0x0090) (Edit)
	class ACaptureAreaActor*                           CaptureArea;                                              // 0x06B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x06B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapCaptureAreaWidget"));

		return ptr;
	}


	void STATIC_OnTryingTeamChanged(int TryingTeamId);
	void STATIC_OnRespawnButtonDown();
	void STATIC_OnPlayerRespawnSpotChanged(const struct FName& RespawnSpotName);
	void STATIC_OnCaptureTeamChanged(int CaptureTeamId);
};


// Class TslGame.MapCarePackageItemIconBaseWidget
// 0x0080 (0x0470 - 0x03F0)
class UMapCarePackageItemIconBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     IconImageBorderBinder;                                    // 0x03F0(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x0420(0x0028) (Edit, BlueprintVisible)
	struct FName                                       IconStateParamName;                                       // 0x0448(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       IconColorParamName;                                       // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0458(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapCarePackageItemIconBaseWidget"));

		return ptr;
	}


	struct FEventReply STATIC_OnButtonDown(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvent);
};


// Class TslGame.MapCharacterIconBaseWidget
// 0x05E0 (0x09D0 - 0x03F0)
class UMapCharacterIconBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Border                     IconImageBorderBinder;                                    // 0x03F0(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x0420(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_ScaleBox                   IconScaleBoxBinder;                                       // 0x0448(0x0028) (Edit, BlueprintVisible)
	struct FName                                       IconStateParamName;                                       // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       IconRotationParamName;                                    // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       IconColorParamName;                                       // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Border                     PlayerNameBoderBinder;                                    // 0x0488(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameBinder;                                         // 0x04B8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Overlay                    NameTagOverlayBinder;                                     // 0x04D8(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     ObserverMuzzleFlashBoderBinder;                           // 0x0500(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 ObserverMuzzleFlashWidgetBinder;                          // 0x0530(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     LifeGaugeBorderBinder;                                    // 0x0550(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_UserWidget                 LifeGaugeWidgetBinder;                                    // 0x0580(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  AttackedAnimBinder;                                       // 0x05A0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  HittedAnimBinder;                                         // 0x05C0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  GroggyAnimBinder;                                         // 0x05E0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimBinder;                                        // 0x0600(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Border                     TeamIconBorderBinder;                                     // 0x0620(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      TeamIconImageBinder;                                      // 0x0650(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Spacer                     BackgroundSpacerBinder;                                   // 0x0678(0x0020) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnMapIconClicked;                                         // 0x0698(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference)
	bool                                               bTeamNumber;                                              // 0x06A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x06A9(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  TeamNumberText;                                           // 0x06B0(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Overlay                    RiderLayerBinder;                                         // 0x06D0(0x0028) (Edit, BlueprintVisible)
	class UClass*                                      RiderIconClass;                                           // 0x06F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       DisplayNameFormatWithOtherPlayer;                         // 0x0700(0x0018) (Edit, BlueprintVisible)
	class UTexture*                                    MyDirectionIcon;                                          // 0x0718(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    TeamDirectionIcon;                                        // 0x0720(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    AmmoRequestIcon;                                          // 0x0728(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    HealRequestIcon;                                          // 0x0730(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Border                     SpectatedIconBorder;                                      // 0x0738(0x0030) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      NameTagColorImageBinder;                                  // 0x0768(0x0028) (Edit, BlueprintVisible)
	TArray<class UTexture2D*>                          TeamBackgroundImages;                                     // 0x0790(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UButton*                                     ObserverButton;                                           // 0x07A0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     RespawnButton;                                            // 0x07A8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateBrush                                 DefaultRespawnButtonBrush;                                // 0x07B0(0x0090) (Edit)
	struct FSlateBrush                                 SelectedRespawnButtonBrush;                               // 0x0840(0x0090) (Edit)
	struct FSlateBrush                                 HoveredRespawnButtonBrush;                                // 0x08D0(0x0090) (Edit)
	struct FUmgWidgetBinder_UserWidget                 PlatformImage_Binder;                                     // 0x0960(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0980(0x0010) MISSED OFFSET
	class ULifeGaugeTemplateBaseWidget*                LifeGauge;                                                // 0x0990(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FVector2D                                   CachedPosition_MC;                                        // 0x0998(0x0008) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x09A0(0x0008) MISSED OFFSET
	class UMaterialInterface*                          PendingIconMaterial;                                      // 0x09A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class URiderIconWidget*>                    RiderIconList;                                            // 0x09B0(0x0010) (ExportObject, ZeroConstructor, Transient)
	class UTexture2D*                                  CachedTeamIcon;                                           // 0x09C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x09C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapCharacterIconBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateShowType(bool bShowIcon, bool bShowName);
	void STATIC_OnRespawnButtonDown();
};


// Class TslGame.MapGridWidget
// 0x0F80 (0x1370 - 0x03F0)
class UMapGridWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      MapImageBinder;                                           // 0x03F8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                AircraftRouteLayerBinder;                                 // 0x0420(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                LocationNameLayerBinder;                                  // 0x0448(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                MyMarkerLayerBinder;                                      // 0x0470(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                TeamMarkerLayerBinder;                                    // 0x0498(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      MapMarkerClass;                                           // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                MyWayPointLayerBinder;                                    // 0x04C8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                TeamWayPointLayerBinder;                                  // 0x04F0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      MapWayPointClass;                                         // 0x0518(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      LastCircleMarkImageBinder;                                // 0x0520(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                MyMapIconLayerBinder;                                     // 0x0548(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                OtherMapIconLayerBinder;                                  // 0x0570(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CarePackageItemIconLayerBinder;                           // 0x0598(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                FlareGunDropZoneLayerBinder;                              // 0x05C0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                TeamIconsAtCenterOfMassLayerBinder;                       // 0x05E8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      MapCharacterIconClass;                                    // 0x0610(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MapCarePackageItemIconClass;                              // 0x0618(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ObserverPlayerIconHitEffectClass;                         // 0x0620(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      LocationNameWidgetClass;                                  // 0x0628(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShowAircraftRoute;                                       // 0x0630(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0631(0x0003) MISSED OFFSET
	float                                              AircraftRouteArrowHeadDesiredSizeRatio;                   // 0x0634(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AircraftRouteArrowTailDesiredSizeRatio;                   // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AircraftIconDesiredSizeRatio;                             // 0x063C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           ImageRotatorMaterial;                                     // 0x0640(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           AircraftRouteArrowBodyMaterial;                           // 0x0648(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    AircraftRouteArrowHeadTexture;                            // 0x0650(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    AircraftRouteArrowTailTexture;                            // 0x0658(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    AircraftBombDropRouteTexture;                             // 0x0660(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    AircraftRouteTexture;                                     // 0x0668(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    AircraftTexture;                                          // 0x0670(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ImageRotatorTextureParamName;                             // 0x0678(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       AircraftRouteTextureParamName;                            // 0x0680(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ImageRotatorAngleParamName;                               // 0x0688(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ArrowStartXParamName;                                     // 0x0690(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ArrowStartYParamName;                                     // 0x0698(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ArrowEndXParamName;                                       // 0x06A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ArrowEndYParamName;                                       // 0x06A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CurrentPositionXParamName;                                // 0x06B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CurrentPositionYParamName;                                // 0x06B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       AircraftOnRouteParamName;                                 // 0x06C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ViewScaleParamName;                                       // 0x06C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowNameIfNonObserving;                                  // 0x06D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowNameIfObserving;                                     // 0x06D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMinimap;                                               // 0x06D2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFillBluezone;                                            // 0x06D3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawNextPlayzoneLine;                                    // 0x06D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawBluezoneLine;                                        // 0x06D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x06D6(0x0002) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      RedzoneImageBinder;                                       // 0x06D8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      InnerBlueZoneImageBinder;                                 // 0x0700(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FName                                       RedzoneColorParamName;                                    // 0x0728(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FColorBlindColorSet                         RedzoneColorSet;                                          // 0x0730(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Image                      ReplayzoneImageBinder;                                    // 0x0740(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    ImageSizeBoxBinder;                                       // 0x0768(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FColorBlindColorSet                         BluezoneColorSet;                                         // 0x0790(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FColorBlindColorSet                         InnerBlueZoneColorSet;                                    // 0x07A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FColorBlindColorSet                         OuterBlueZoneColorSet;                                    // 0x07B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              BluezoneDesaturation;                                     // 0x07C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Desaturation;                                             // 0x07C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Contrast;                                                 // 0x07C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowTeamIconAtCenterOfMass;                              // 0x07CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x07CD(0x0003) MISSED OFFSET
	TArray<float>                                      TeamIconAtCenterOfMassDesiredRatioByPhase;                // 0x07D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              TeamIconAtCenterOfMassDesiredAlpha;                       // 0x07E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x07E4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Image                      BlackzoneImageBinder;                                     // 0x07E8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                BlackZoneTargetsLayerBinder;                              // 0x0810(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<class UWidget*, struct FVector2D>             DestroyedBlackZoneTargetMarkerMap;                        // 0x0838(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FUmgWidgetBinder_Animation                  BlackZonePulseAnimationBinder;                            // 0x0888(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                BlackZonePulses;                                          // 0x08A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x08AC(0x0004) MISSED OFFSET
	class UClass*                                      DestroyedBuildingMarkerWidget;                            // 0x08B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DestroyedBuildingMarkerBaseScale;                         // 0x08B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowFlareGunDropZone;                                    // 0x08BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x08BD(0x0003) MISSED OFFSET
	class UMaterial*                                   FlareGunDropZoneMaterial;                                 // 0x08C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlareGunDropZoneIconScale;                                // 0x08C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x08CC(0x0004) MISSED OFFSET
	struct FColorBlindColorSet                         FlareGunDropZoneColorSet;                                 // 0x08D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UCurveFloat*                                 FlareGunAlphaCurve;                                       // 0x08E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FlareGunAlphaCurveLength;                                 // 0x08E8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x08EC(0x0004) MISSED OFFSET
	class UClass*                                      PlatoonFireSupportAreaIndicatorWidgetClass;               // 0x08F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PlatoonCarePackageDropIndicatorWidgetClass;               // 0x08F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCanvasPanel*                                PlatoonMapMarkerLayer;                                    // 0x0900(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                PlatoonFireSupportAreaLayer;                              // 0x0908(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                PlatoonCarePackageDropLayer;                              // 0x0910(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   PlatoonCarePackageIndicatorSize;                          // 0x0918(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0920(0x0004) MISSED OFFSET
	int                                                WayPointMode;                                             // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                maxWayPointNum;                                           // 0x0928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              followLineAlpha;                                          // 0x092C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x20];                                      // 0x0930(0x0020) MISSED OFFSET
	class UDataTable*                                  LocationZoomTable;                                        // 0x0950(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowLocationName;                                        // 0x0958(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0959(0x0003) MISSED OFFSET
	float                                              ZoomLevel;                                                // 0x095C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ShowGridZoomLevel;                                        // 0x0960(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0964(0x0004) MISSED OFFSET
	class UCurveFloat*                                 ViewRatioCurve;                                           // 0x0968(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 IconDistanceAlhpa;                                        // 0x0970(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 MapSizeCurve;                                             // 0x0978(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRectangleViewMode;                                       // 0x0980(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0981(0x0007) MISSED OFFSET
	class UFont*                                       GridFont;                                                 // 0x0988(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       FontTypeFace;                                             // 0x0990(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             GridTextHorizentalArray;                                  // 0x0998(0x0010) (Edit, ZeroConstructor)
	TArray<struct FString>                             GridTextVerticalArray;                                    // 0x09A8(0x0010) (Edit, ZeroConstructor)
	struct FLinearColor                                ColorLargeGrid;                                           // 0x09B8(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ColorSmallGrid;                                           // 0x09C8(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ColorText;                                                // 0x09D8(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ColorSafetyZone;                                          // 0x09E8(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              ThicknessLargeGrid;                                       // 0x09F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ThicknessSmallGrid;                                       // 0x09FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ColorPoisonGasWarning;                                    // 0x0A00(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ShapeShadowColor;                                         // 0x0A10(0x0010) (Edit, IsPlainOldData)
	bool                                               bDrawGridLine;                                            // 0x0A20(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawGridText;                                            // 0x0A21(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawNextPlayzoneGuideLine;                               // 0x0A22(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseZOrderSort;                                           // 0x0A23(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRemoveDeadIcon;                                          // 0x0A24(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0A25(0x0003) MISSED OFFSET
	struct FLinearColor                                DefaultCharacterIconColor;                                // 0x0A28(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                DefaultIconNameTagColor;                                  // 0x0A38(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   MinimapViewSize_MC;                                       // 0x0A48(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              DefaultThicknessMultiplier;                               // 0x0A50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinThicknessMultiplier;                                   // 0x0A54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlatoonMapCharacterIconScale;                             // 0x0A58(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0A5C(0x0004) MISSED OFFSET
	struct FSlateBrush                                 RectangleBlueZoneSlateBrush;                              // 0x0A60(0x0090) (Transient)
	struct FSlateBrush                                 RectangleBlueZoneShadowSlateBrush;                        // 0x0AF0(0x0090) (Transient)
	struct FSlateBrush                                 RectangleInnerBlueZoneSlateBrush;                         // 0x0B80(0x0090) (Transient)
	struct FSlateBrush                                 RectangleInnerBlueZoneShadowSlateBrush;                   // 0x0C10(0x0090) (Transient)
	unsigned char                                      UnknownData16[0x28];                                      // 0x0CA0(0x0028) MISSED OFFSET
	class UMaterialInstanceDynamic*                    MatInst;                                                  // 0x0CC8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x38];                                      // 0x0CD0(0x0038) MISSED OFFSET
	class UMapMarkerBaseWidget*                        MyMapMarker;                                              // 0x0D08(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TMap<class ATeam*, class UMapMarkerBaseWidget*>    TeamPlayerMarkers;                                        // 0x0D10(0x0050) (ExportObject, ZeroConstructor, Transient)
	TArray<class UMapWayPointBaseWidget*>              MyMapWayPointWidArr;                                      // 0x0D60(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData18[0x70];                                      // 0x0D70(0x0070) MISSED OFFSET
	TArray<struct FAircraftRouteData>                  AircraftRouteDataArray;                                   // 0x0DE0(0x0010) (ZeroConstructor, Transient)
	class UMapCharacterIconBaseWidget*                 MyCharacterMapIcon;                                       // 0x0DF0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TMap<struct FString, class UMapCharacterIconBaseWidget*> OtherCharacterMapIcons;                                   // 0x0DF8(0x0050) (ExportObject, ZeroConstructor, Transient)
	TMap<struct FString, struct FMapIconCommonData>    MapIconCommonDatas;                                       // 0x0E48(0x0050) (ZeroConstructor, Transient)
	TMap<class ACarePackageItem*, class UMapCarePackageItemIconBaseWidget*> MapCarePackageItemIcons;                                  // 0x0E98(0x0050) (ExportObject, ZeroConstructor, Transient)
	struct FTimerHandle                                ReplicatedCharacterListUpdateTimer;                       // 0x0EE8(0x0008) (Transient)
	struct FTimerHandle                                ReplicatedCarePackageItemListUpdateTimer;                 // 0x0EF0(0x0008) (Transient)
	TArray<class ATslCharacter*>                       ReplicatedCharacterList;                                  // 0x0EF8(0x0010) (ZeroConstructor, Transient)
	TArray<class AReplicatedCharacterData*>            ReplicatedCharacterDataList;                              // 0x0F08(0x0010) (ZeroConstructor, Transient)
	TArray<class ACarePackageItem*>                    ReplicatedCarePackageItemList;                            // 0x0F18(0x0010) (ZeroConstructor, Transient)
	TArray<class ATeam*>                               ShowMarkerOnwerList;                                      // 0x0F28(0x0010) (ZeroConstructor, Transient)
	TArray<class ATeam*>                               ShowWayPointOwnerList;                                    // 0x0F38(0x0010) (ZeroConstructor, Transient)
	TArray<class ULocationNameWidget*>                 LocationNameWidgetList;                                   // 0x0F48(0x0010) (ExportObject, ZeroConstructor, Transient)
	TMap<int, class UImage*>                           TeamIconsAtCenterOfMassList;                              // 0x0F58(0x0050) (ExportObject, ZeroConstructor, Transient)
	struct FVector2D                                   LocalMousePosition;                                       // 0x0FA8(0x0008) (Transient, IsPlainOldData)
	struct FVector2D                                   MCMousePosition;                                          // 0x0FB0(0x0008) (Transient, IsPlainOldData)
	struct FVector2D                                   LocalGuidePosition;                                       // 0x0FB8(0x0008) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x20];                                      // 0x0FC0(0x0020) MISSED OFFSET
	TArray<struct FFlareGunPackageDropZoneData>        FlareGunPackageDropZoneArray;                             // 0x0FE0(0x0010) (ZeroConstructor, Transient)
	TMap<struct FString, class UMapCharacterIconBaseWidget*> HumanCharacterMapIcons;                                   // 0x0FF0(0x0050) (ExportObject, ZeroConstructor, Transient)
	TMap<struct FString, class UOutsideTeamIconWidget*> OutsideHumanIconWidgets;                                  // 0x1040(0x0050) (ExportObject, ZeroConstructor, Transient)
	TArray<struct FMapIconUpdateData>                  HumanIconDataList;                                        // 0x1090(0x0010) (ZeroConstructor, Transient)
	TArray<class ATslCharacter*>                       OutsideCharacters;                                        // 0x10A0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData20[0x98];                                      // 0x10B0(0x0098) MISSED OFFSET
	class UMaterialInstance*                           MapCharacterIconMaterial;                                 // 0x1148(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialParameterCollection*                MaterialParameterCollection;                              // 0x1150(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x8];                                       // 0x1158(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    CloseMySelf;                                              // 0x1160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideOwner;                                              // 0x1170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FUmgWidgetBinder_CanvasPanel                OutsideIconLayerBinder;                                   // 0x1180(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      OutsideTeamIconWidgetClass;                               // 0x11A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UOutsideTeamIconWidget*>              OutsideTeamIconWidgets;                                   // 0x11B0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData22[0x18];                                      // 0x11C0(0x0018) MISSED OFFSET
	class UCanvasPanel*                                PlayerStartIconLayer;                                     // 0x11D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UClass*                                      MapPlayerStartWidgetClass;                                // 0x11E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UMapPlayerStartWidget*>               MapPlayerStartWidgets;                                    // 0x11E8(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData23[0x8];                                       // 0x11F8(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                MapCaptureAreaLayerBinder;                                // 0x1200(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      MapCaptureAreaWidgetClass;                                // 0x1228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UMapCaptureAreaWidget*>               MapCaptureAreaWidgets;                                    // 0x1230(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<struct FOutsideTeamIconData>                OutsideTeamIconDatas;                                     // 0x1240(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData24[0x8];                                       // 0x1250(0x0008) MISSED OFFSET
	TArray<class UMaterialInstanceDynamic*>            OutsideMapIconMaterials;                                  // 0x1258(0x0010) (ZeroConstructor, Transient)
	TMap<int, struct FPlatoonMapMarkerData>            PlatoonMapMarkerDataMap;                                  // 0x1268(0x0050) (ZeroConstructor, Transient)
	TMap<int, struct FPlatoonFireSupportAreaData>      PlatoonFireSupportAreaDataMap;                            // 0x12B8(0x0050) (ZeroConstructor, Transient)
	TMap<int, struct FPlatoonCarePackageDropData>      PlatoonCarePackageDropDataMap;                            // 0x1308(0x0050) (ZeroConstructor, Transient)
	TArray<class UTslPlatoonCarePackageDropIndicatorWidget*> PlatoonCarePackageDropIndicatorWidgetPool;                // 0x1358(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData25[0x8];                                       // 0x1368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapGridWidget"));

		return ptr;
	}


	void STATIC_UpdateZoomAndWidgetSize(float Zoom, const struct FVector2D& WidgetSize);
	bool STATIC_UpdateWidgetSize_UC(const struct FVector2D& WidgetSize);
	void STATIC_UpdateReplicatedCharacterList();
	void STATIC_UpdateReplicatedCarePackageItemList();
	void STATIC_UpdateRectangleViewByWidgetSize(const struct FVector2D& WidgetSize);
	void STATIC_UpdateRectangleView();
	void STATIC_UpdatePlatoonMapMarker(int PlatoonId, const struct FMapMarker& MapMarker);
	void STATIC_UpdatePlatoonFireSupportArea(const struct FPlatoonFireSupportState& State);
	void STATIC_UpdatePlatoonCarePackageDrop(const struct FPlatoonCarePackageState& State);
	void STATIC_UpdateOutsideHumanIcon(TArray<class ATslCharacter*> OutsideHumanCharacters);
	void STATIC_UpdateMapCharacterIconShowType(bool bShowTeamIcon, bool bShowPlayerName);
	void STATIC_UpdateLocationNameScale(float NewZoom);
	void STATIC_UpdateHumanMarkIconPosition();
	void STATIC_UpdateDestroyedBuildingMarkers();
	struct FVector2D STATIC_UCtoMC(const struct FVector2D& UC);
	void STATIC_StopPulsingBlackZone();
	void STATIC_SetZoomLevel(float NewZoomLevel);
	void STATIC_SetImageBrush(class UMaterialInstanceDynamic* NewMatInst);
	void STATIC_SetCharacterIconPositionAndRotation_UC(const struct FVector2D& Pos_UC, float Angle);
	void STATIC_SetCenter_MC(const struct FVector2D& Center);
	void STATIC_ResetZoomLevel();
	void STATIC_RemovePlatoonCarePackageDrop(int CarePackageId);
	void STATIC_PulseBlackZone();
	void STATIC_ProcessBuildingDestruction();
	void STATIC_OnReset();
	void STATIC_OnPlayerStartActivated(TArray<struct FString> ActivatedPlayerStartNames);
	void STATIC_OnMapIconClicked(class UMapCharacterIconBaseWidget* MapIconWidget);
	void STATIC_OnMapCarePackageItemIconClicked(class UMapCarePackageItemIconBaseWidget* MapIconWidget);
	void STATIC_OnGotoTimelineDone();
	void STATIC_OnGameUserSettingApplied();
	void STATIC_OnCaptureActorActivated(TArray<struct FString> ActivatedCaptureActorNames);
	void STATIC_NotifyDeath(const struct FString& UniqueId);
	struct FVector2D STATIC_MCtoUC(const struct FVector2D& MapCoord);
	void STATIC_MarkBlackZoneTargetDestroyed(const struct FVector& Location, float Size);
	bool STATIC_IsMouseInWayPoint();
	bool STATIC_IsMouseInMarker();
	float STATIC_GetZoomLevel();
	struct FVector2D STATIC_GetWidgetSize();
	struct FVector2D STATIC_GetWidgetPosition();
	struct FVector2D STATIC_GetScreenOffset();
	void STATIC_GetMapImageWigetSizeAndImageOffset(struct FVector2D* WidgetSize, struct FVector2D* ImageOffset);
	struct FVector2D STATIC_GetMapgridPanelSize();
	struct FVector2D STATIC_GetLocalMousePosition();
	struct FString STATIC_GetCharacterGridVertical();
	struct FString STATIC_GetCharacterGridTextHorizental();
	struct FVector2D STATIC_GetAlignment();
	void STATIC_DrawRedZone_UC(const struct FVector2D& Center_UC, float Radius_UC);
	void STATIC_DrawMarker_UC(const struct FVector2D& MarkerCenter_UC);
	void STATIC_DisdetectionHuman();
	void STATIC_DetectionHuman(float DetectionRanage);
	void STATIC_CursorUCtoCenterMC(const struct FVector2D& UC, struct FVector2D* Offest_MC, bool* bUpdate);
	class UOutsideTeamIconWidget* STATIC_CreateOutsideHumanIcon(const struct FString& UniqueId);
	struct FVector2D STATIC_ClampPositionByWidgetSize_UC(const struct FVector2D& Positon, const struct FVector2D& WidgetSize);
	struct FVector2D STATIC_ClampPosition_UC(const struct FVector2D& Positon);
	void STATIC_AddMapIconKillEvent();
	void STATIC_AddCenter_UC(const struct FVector2D& Offset_UC);
};


// Class TslGame.FBRMapGridWidget
// 0x0010 (0x1380 - 0x1370)
class UFBRMapGridWidget : public UMapGridWidget
{
public:
	float                                              FBRCarePackageItemListUpdateCycleInSeconds;               // 0x1370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x1374(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.FBRMapGridWidget"));

		return ptr;
	}

};


// Class TslGame.MapMarkerBaseWidget
// 0x0058 (0x0448 - 0x03F0)
class UMapMarkerBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Animation                  MarkerEmergingAnimBinder;                                 // 0x03F0(0x0020) (Edit, BlueprintVisible)
	class UWidgetSwitcher*                             TacticalSwitcher;                                         // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             MarkerBackgroundSwitcher;                                 // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      TeamNumberImage;                                          // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     MarkerBorder;                                             // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0430(0x0010) MISSED OFFSET
	EMarkerType                                        MarkerType;                                               // 0x0440(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0441(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapMarkerBaseWidget"));

		return ptr;
	}

};


// Class TslGame.MapPlayerStartWidget
// 0x0218 (0x0608 - 0x03F0)
class UMapPlayerStartWidget : public UUmgBaseWidget
{
public:
	class UImage*                                      StartPointImage;                                          // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     RespawnButton;                                            // 0x03F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FSlateBrush                                 DefaultRespawnButtonBrush;                                // 0x0400(0x0090) (Edit)
	struct FSlateBrush                                 SelectedRespawnButtonBrush;                               // 0x0490(0x0090) (Edit)
	struct FSlateBrush                                 HoveredRespawnButtonBrush;                                // 0x0520(0x0090) (Edit)
	TMap<EPlatoonTeam, struct FLinearColor>            TeamColors;                                               // 0x05B0(0x0050) (Edit, ZeroConstructor)
	class ATslPlayerStartAndRespawn*                   TslPlayerStart;                                           // 0x0600(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapPlayerStartWidget"));

		return ptr;
	}


	void STATIC_OnRespawnButtonDown();
	void STATIC_OnPlayerRespawnSpotChanged(const struct FName& RespawnSpotName);
};


// Class TslGame.MapWayPointBaseWidget
// 0x0060 (0x0450 - 0x03F0)
class UMapWayPointBaseWidget : public UUmgBaseWidget
{
public:
	class UWidgetAnimation*                            WayPointEmergingAnimBinder;                               // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   Position;                                                 // 0x03F8(0x0008) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                WayPointMode;                                             // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	class UTexture2D*                                  InterpImage;                                              // 0x0408(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DestImage;                                                // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBorder*                                     WayPointArrow;                                            // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     WayPointCircle;                                           // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      TeamNumberImage;                                          // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      Arrow;                                                    // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     NumBorder;                                                // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  WayPointNumIdx;                                           // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MapWayPointBaseWidget"));

		return ptr;
	}

};


// Class TslGame.MiniMapBaseWidget
// 0x0060 (0x0450 - 0x03F0)
class UMiniMapBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 MapWidgetBinder;                                          // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMapGridWidget*                              CachedMapWidget;                                          // 0x0410(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 ViewScale_AccelerationCurve;                              // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 ViewScale_DecelerationCurve;                              // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DefaultViewScale1D;                                       // 0x0428(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ViewScale1DWithoutNextPlayzone;                           // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewScaleInterpSpeed;                                     // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentMinimapViewScale1D;                                // 0x0434(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SaveMinimapViewScale1D;                                   // 0x0438(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              OldSpeed;                                                 // 0x043C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EMinimapFocus                                      WantMinimapFocus;                                         // 0x0440(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bForceUpdate;                                             // 0x0441(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0442(0x0002) MISSED OFFSET
	struct FVector2D                                   LastMinimapPos;                                           // 0x0444(0x0008) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MiniMapBaseWidget"));

		return ptr;
	}

};


// Class TslGame.MinimapCanvasWidget
// 0x0208 (0x05F8 - 0x03F0)
class UMinimapCanvasWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_UserWidget                 FlaregunWidgetBinder;                                     // 0x03F0(0x0020) (Edit)
	struct FUmgWidgetBinder_UserWidget                 BluezoneGpsWidgetBinder;                                  // 0x0410(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                BluezoneGpsRetainerBoxBinder;                             // 0x0430(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 BluezoneTimeWidgetBinder;                                 // 0x0458(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                BluezoneTimeRetainerBoxBinder;                            // 0x0478(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 BluezonePhaseWidgetBinder;                                // 0x04A0(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                BluezonePhaseRetainerBoxBinder;                           // 0x04C0(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 CompassWidgetBinder;                                      // 0x04E8(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                CompassRetainerBoxBinder;                                 // 0x0508(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 MinimapWidgetBinder;                                      // 0x0530(0x0020) (Edit)
	struct FUmgWidgetBinder_RetainerBox                MinimapRetainerBoxBinder;                                 // 0x0550(0x0028) (Edit)
	struct FUmgWidgetBinder_SizeBox                    MinimapSizeBox;                                           // 0x0578(0x0028) (Edit)
	struct FUmgWidgetBinder_WidgetSwitcher             BluezoneInfoSwitcherBinder;                               // 0x05A0(0x0028) (Edit)
	TArray<struct FExtendedSizeConfig>                 ExtendedSizeConfigs;                                      // 0x05C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FExtendedSizeConfig>                 ExtendedSizeConfigsForObserver;                           // 0x05D8(0x0010) (Edit, ZeroConstructor)
	int                                                DefaultMinimapSizeIndex;                                  // 0x05E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinimapSizeOffset;                                        // 0x05EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SelectMinimapSizeIndex;                                   // 0x05F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bNeedMinimapSizeUpdate;                                   // 0x05F4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05F5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.MinimapCanvasWidget"));

		return ptr;
	}


	void STATIC_ToggleExtendedMinimap();
	void STATIC_ResetMinimapSize();
	void STATIC_PrevMinimapSize();
	void STATIC_NextMinimapSize();
	bool STATIC_IsShowingFlaregunUiWidget();
	bool STATIC_IsExtendedSize();
	bool STATIC_IsBluezoneGpsReset();
};


// Class TslGame.NetworkInfoWidget
// 0x0318 (0x0708 - 0x03F0)
class UNetworkInfoWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_CanvasPanel                NetworkInfoTextCanvasPanel;                               // 0x03F0(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  PingTextBinder;                                           // 0x0418(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  RecvBytesTextBinder;                                      // 0x0438(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SendBytesTextBinder;                                      // 0x0458(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  RecvPacketsTextBinder;                                    // 0x0478(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SendPacketsTextBinder;                                    // 0x0498(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  RecvPktLossTextBinder;                                    // 0x04B8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_TextBlock                  SendPktLossTextBinder;                                    // 0x04D8(0x0020) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      HighPingIconBinder;                                       // 0x04F8(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      HighPingVariationIconBinder;                              // 0x0520(0x0028) (Edit, BlueprintVisible)
	struct FUmgWidgetBinder_Image                      PacketLossIconBinder;                                     // 0x0548(0x0028) (Edit, BlueprintVisible)
	struct FText                                       PingTextFormat;                                           // 0x0570(0x0018) (Edit, BlueprintVisible)
	struct FText                                       RecvBytesTextFormat;                                      // 0x0588(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SendBytesTextFormat;                                      // 0x05A0(0x0018) (Edit, BlueprintVisible)
	struct FText                                       RecvPacketsTextFormat;                                    // 0x05B8(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SendPacketsTextFormat;                                    // 0x05D0(0x0018) (Edit, BlueprintVisible)
	struct FText                                       RecvPktLossTextFormat;                                    // 0x05E8(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SendPktLossTextFormat;                                    // 0x0600(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0618(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NetworkInfoWidget"));

		return ptr;
	}

};


// Class TslGame.NetworkProblemBaseWidget
// 0x0020 (0x0410 - 0x03F0)
class UNetworkProblemBaseWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Animation                  IconBlinkingAnimBinder;                                   // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.NetworkProblemBaseWidget"));

		return ptr;
	}

};


// Class TslGame.ObserverDamageIndicatorManager
// 0x0018 (0x0408 - 0x03F0)
class UObserverDamageIndicatorManager : public UUmgBaseWidget
{
public:
	TArray<class UObserverDamageIndicatorWidget*>      PlayerIndicatorWidgets;                                   // 0x03F0(0x0010) (ExportObject, ZeroConstructor)
	class UClass*                                      WidgetTemplate;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageIndicatorManager"));

		return ptr;
	}


	void STATIC_UpdateReplicateCharacter();
	void STATIC_RemoveReplicateCharacter(TArray<class ATslCharacter*> Characters);
	void STATIC_OnToggleObserverDamageIndicator();
	void STATIC_AddReplicateCharacter(TArray<class ATslCharacter*> Characters);
};


// Class TslGame.ObserverDamageIndicatorWidget
// 0x00A8 (0x0498 - 0x03F0)
class UObserverDamageIndicatorWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	struct FUmgWidgetBinder_CanvasPanel                FreeCamCanvasPanelBinder;                                 // 0x0400(0x0028) (Edit, DisableEditOnInstance)
	class UClass*                                      DamageInfoWidgetTemplate;                                 // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ATslCharacter*                               Character;                                                // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0438(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageIndicatorWidget"));

		return ptr;
	}


	void STATIC_OnFadeOutAnimationFinished(class UWidget* Widget);
};


// Class TslGame.ObserverDamageInfoWidget
// 0x0168 (0x0558 - 0x03F0)
class UObserverDamageInfoWidget : public UUmgBaseWidget
{
public:
	struct FScriptMulticastDelegate                    FadeOutAnimationFinished;                                 // 0x03F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FUmgWidgetBinder_Border                     TeamColorBorderBinder;                                    // 0x0400(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  DamageAmountTextBinder;                                   // 0x0430(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HeadShotSizeBoxBinder;                                    // 0x0450(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeInAnimationBinder;                                    // 0x0478(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimationBinder;                                   // 0x0498(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bFadeOutAnimationPlayStarted;                             // 0x04B8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFadeOutAnimationFinished;                                // 0x04B9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFadeInAnimationPlayStarted;                              // 0x04BA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFadeInAnimationFinished;                                 // 0x04BB(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	class ATslCharacter*                               Character;                                                // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x90];                                      // 0x04C8(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageInfoWidget"));

		return ptr;
	}


	void STATIC_UpdateFontColor(const struct FLinearColor& TeamColor);
};


// Class TslGame.ObserverDamageSpectatorDirectionListWidget
// 0x0040 (0x0430 - 0x03F0)
class UObserverDamageSpectatorDirectionListWidget : public UUmgBaseWidget
{
public:
	TArray<class UObserverDamageSpectatorDirectionWidget*> DamageDirectionPool;                                      // 0x03F0(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      WidgetTemplate;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Overlay                    DirectionOverlayBinder;                                   // 0x0408(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageSpectatorDirectionListWidget"));

		return ptr;
	}


	void STATIC_RemoveDamageInfoDirection(class UWidget* Widget);
};


// Class TslGame.ObserverDamageSpectatorDirectionWidget
// 0x0078 (0x0468 - 0x03F0)
class UObserverDamageSpectatorDirectionWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    FadeOutAnimationFinished;                                 // 0x03F8(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	float                                              HighDamage;                                               // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LowDamage;                                                // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveTranslation;                                     // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Animation                  AnimationBinder;                                          // 0x0420(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             DamageIndicatorSwitcher;                                  // 0x0440(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageSpectatorDirectionWidget"));

		return ptr;
	}

};


// Class TslGame.ObserverDamageSpectatorMessageListWidget
// 0x0058 (0x0448 - 0x03F0)
class UObserverDamageSpectatorMessageListWidget : public UUmgBaseWidget
{
public:
	int                                                MaxMessageSize;                                           // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	TArray<class UObserverDamageSpectatorMessageWidget*> DamageInfoMessagePool;                                    // 0x03F8(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	TArray<class UObserverDamageSpectatorMessageWidget*> DamageInfoMessageDisplay;                                 // 0x0408(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      WidgetTemplate;                                           // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                MessageCanvasPanelBinder;                                 // 0x0420(0x0028) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageSpectatorMessageListWidget"));

		return ptr;
	}


	void STATIC_RemoveDamageInfoMessage(class UWidget* Widget);
};


// Class TslGame.ObserverDamageSpectatorWidget
// 0x0130 (0x0520 - 0x03F0)
class UObserverDamageSpectatorWidget : public UUmgBaseWidget
{
public:
	TMap<struct FString, class UObserverDamageSpectatorMessageListWidget*> DamageSpectatorMessageListMap;                            // 0x03F0(0x0050) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	TMap<struct FString, class UObserverDamageSpectatorDirectionListWidget*> DamageSpectatorDirectionListMap;                          // 0x0440(0x0050) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	struct FUmgWidgetBinder_Overlay                    DamageDirectionOverlayBinder;                             // 0x0490(0x0028) (Edit, DisableEditOnInstance)
	class ATslCharacter*                               CachedCharacter;                                          // 0x04B8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x04C0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageSpectatorWidget"));

		return ptr;
	}


	void STATIC_OnToggleObserverDamageSpectator();
};


// Class TslGame.ObserverDamageSpectatorMessageWidget
// 0x0320 (0x0710 - 0x03F0)
class UObserverDamageSpectatorMessageWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    FadeOutAnimationFinished;                                 // 0x03F8(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0408(0x00B0) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  AnimationBinder;                                          // 0x04B8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamWidgetSwitcher;                                       // 0x04D8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamColorBgImageBinder;                                   // 0x0500(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamStripeBGImageBinder;                                  // 0x0528(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamNumberTextBinder;                                     // 0x0550(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamLogoImageBinder;                                      // 0x0570(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              AttackerInfoHorizontalBoxBinder;                          // 0x0598(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              DamageInfoHorizontalBoxBinder;                            // 0x05C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AttackerIDTextBinder;                                     // 0x05E8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AttackerTeamTextBinder;                                   // 0x0608(0x0020) (Edit, DisableEditOnInstance)
	struct FDamageSpectatorWidgetBinder                Left;                                                     // 0x0628(0x0070) (Edit, DisableEditOnInstance)
	struct FDamageSpectatorWidgetBinder                Right;                                                    // 0x0698(0x0070) (Edit, DisableEditOnInstance)
	class UCurveFloat*                                 AnimCurveTranslation;                                     // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverDamageSpectatorMessageWidget"));

		return ptr;
	}


	void STATIC_UpdateStripeTexture(int TeamNumber);
	void STATIC_StopHeadshotAnimation();
	void STATIC_PlayHeadshotAnimation();
};


// Class TslGame.ObserverPlayerStatInfoWidget
// 0x00E8 (0x04D8 - 0x03F0)
class UObserverPlayerStatInfoWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03F0(0x0028) MISSED OFFSET
	struct FUmgWidgetBinder_TextBlock                  AvglKillTextBinder;                                       // 0x0418(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvglKillRankTextBinder;                                   // 0x0438(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgDamageTextBinder;                                      // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgDamageRankTextBinder;                                  // 0x0478(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgAliveTimeTextBinder;                                   // 0x0498(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  AvgAliveTimeRankTextBinder;                               // 0x04B8(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverPlayerStatInfoWidget"));

		return ptr;
	}


	void STATIC_OnToggleObserverPlayerStatInfo();
};


// Class TslGame.ObserverRankingWidget
// 0x0228 (0x0618 - 0x03F0)
class UObserverRankingWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03F0(0x0020) MISSED OFFSET
	struct FUmgWidgetBinder_HorizontalBox              HorizontalBoxBinder;                                      // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  RankingTextBinder;                                        // 0x0438(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamNumberTextBinder;                                     // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  TeamShortNameTextBinder;                                  // 0x0478(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  ScoreTextBinder;                                          // 0x0498(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  RankingUpTextBinder;                                      // 0x04B8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  RankingDownTextBinder;                                    // 0x04D8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamColorImage_Binder;                                    // 0x04F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TeamLogoImage_Binder;                                     // 0x0520(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             TeamLogoSwitcherBinder;                                   // 0x0548(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionUpRanking;                                        // 0x0570(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionDownRanking;                                      // 0x0590(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionUpRanking;                                       // 0x05B0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionDownRanking;                                     // 0x05D0(0x0020) (Edit, DisableEditOnInstance)
	struct FLinearColor                                RankingUpTextColor;                                       // 0x05F0(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                RankingOriginalTextColor;                                 // 0x0600(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0610(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverRankingWidget"));

		return ptr;
	}


	void STATIC_RefreshRankingUiBP(int TeamId);
};


// Class TslGame.ObserverRankingListWidget
// 0x0070 (0x0460 - 0x03F0)
class UObserverRankingListWidget : public UUmgBaseWidget
{
public:
	TArray<class UObserverRankingWidget*>              ObserverRankingWidgetList;                                // 0x03F0(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InMotionAnimationBinder;                                  // 0x0400(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  OutMotionAnimationBinder;                                 // 0x0420(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0440(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverRankingListWidget"));

		return ptr;
	}

};


// Class TslGame.TslHealthGaugeBaseWidget
// 0x0048 (0x0438 - 0x03F0)
class UTslHealthGaugeBaseWidget : public UUmgBaseWidget
{
public:
	bool                                               bIsGroggy;                                                // 0x03F0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bSmoothMode;                                              // 0x03F1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F2(0x0002) MISSED OFFSET
	float                                              DestinationHealthPercent;                                 // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastHealthPercent;                                        // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class UTslHealthGaugeData*                         HealthGaugeData;                                          // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    HealthGaugeMaterial;                                      // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      GaugeImageBinder;                                         // 0x0410(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHealthGaugeBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateColorGauge();
	void STATIC_StartMove();
	void STATIC_SetHealth(float NewDestination, bool InbIsGroggy);
};


// Class TslGame.TslSquadPlayerInfoBaseWidget
// 0x0238 (0x0628 - 0x03F0)
class UTslSquadPlayerInfoBaseWidget : public UUmgBaseWidget
{
public:
	class ATslCharacter*                               Character;                                                // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AReplicatedCharacterData*                    ReplicatedCharacterData;                                  // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ATslPlayerState*                             PlayerState;                                              // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShow;                                                    // 0x0408(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bChachedSelect;                                           // 0x0409(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x040A(0x0006) MISSED OFFSET
	class UMaterialInstanceDynamic*                    IconMaterial;                                             // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLeftCtrlDown;                                          // 0x0418(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsButtonMouseOvered;                                     // 0x0419(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EDisplayPlayerInfoType                             PlayerInfo;                                               // 0x041A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x041B(0x0001) MISSED OFFSET
	int                                                ShortCutNum;                                              // 0x041C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DeadColor;                                                // 0x0420(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x0430(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FUmgWidgetBinder_SizeBox                    InfoLayerSizeBoxBinder;                                   // 0x0440(0x0028) (Edit)
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x0468(0x0028) (Edit)
	struct FUmgWidgetBinder_SizeBox                    TeamIconSizeBoxBinder;                                    // 0x0490(0x0028) (Edit)
	struct FUmgWidgetBinder_SizeBox                    KillCountBoxBinder;                                       // 0x04B8(0x0028) (Edit)
	struct FUmgWidgetBinder_TextBlock                  KillCountTextBinder;                                      // 0x04E0(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameTextBinder;                                     // 0x0500(0x0020) (Edit)
	struct FUmgWidgetBinder_UserWidget                 PlatformImageBinder;                                      // 0x0520(0x0020) (Edit)
	struct FUmgWidgetBinder_Border                     PlayerInfoBorderBinder;                                   // 0x0540(0x0030) (Edit)
	struct FUmgWidgetBinder_Animation                  ShotAnimationBinder;                                      // 0x0570(0x0020) (Edit)
	struct FUmgWidgetBinder_Animation                  AttackAnimationBinder;                                    // 0x0590(0x0020) (Edit)
	struct FUmgWidgetBinder_SizeBox                    StatusIconSizeBoxBinder;                                  // 0x05B0(0x0028) (Edit)
	struct FUmgWidgetBinder_SizeBox                    HealthGaugeSizeBoxBinder;                                 // 0x05D8(0x0028) (Edit)
	struct FUmgWidgetBinder_UserWidget                 HealthGaugeBinder;                                        // 0x0600(0x0020) (Edit)
	class UTslHealthGaugeBaseWidget*                   HealthGaugeWidget;                                        // 0x0620(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSquadPlayerInfoBaseWidget"));

		return ptr;
	}


	void STATIC_UpdatePlayerName();
	void STATIC_UpdatePlayerInfoBorder();
	void STATIC_UpdatePlatformImage();
	void STATIC_UpdateKillCount();
	void STATIC_UpdateKill();
	void STATIC_UpdateInfoLayer();
	void STATIC_UpdateIconLayer();
	void STATIC_UpdateIconImage();
	void STATIC_UpdateHealthGaugeSizeBox();
	void STATIC_UpdateHealthGauge();
	void STATIC_SetPlayerNameColor(bool bFocused);
};


// Class TslGame.ObserverTeamInfoListBaseWidget
// 0x0050 (0x0440 - 0x03F0)
class UObserverTeamInfoListBaseWidget : public UUmgBaseWidget
{
public:
	EDisplayPlayerInfoType                             InfoType;                                                 // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03F1(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_VerticalBox                TeamPlayerListBinder;                                     // 0x03F8(0x0028) (Edit)
	TArray<class UTslSquadPlayerInfoBaseWidget*>       SquadPlayerInfoPool;                                      // 0x0420(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	class UClass*                                      SquadPlayerListItem;                                      // 0x0430(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0438(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ObserverTeamInfoListBaseWidget"));

		return ptr;
	}


	void STATIC_UpdateTeamInfoList();
	void STATIC_UpdateTeamInfo();
	void STATIC_UpdateReplicatedCharacterDataList();
	void STATIC_StopCustomTick();
	void STATIC_StartCustomTick();
	class UTslSquadPlayerInfoBaseWidget* STATIC_SetSquadReplicatedCharacterData(int Index, class AReplicatedCharacterData* ReplicatedCharacterData, class ATslPlayerState* PlayerState);
	class UTslSquadPlayerInfoBaseWidget* STATIC_SetSquadPlayerInfo(int Index, class ATslCharacter* Character, class ATslPlayerState* PlayerState);
	class ATslCharacter* STATIC_FindSpectatorOrFollowCharacter();
	void STATIC_ConstructSquadPlayerInfoList();
	void STATIC_CallapseAllSquadPlayerInfo();
};


// Class TslGame.OutsideTeamIconWidget
// 0x0028 (0x0418 - 0x03F0)
class UOutsideTeamIconWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      IconImageBinder;                                          // 0x03F0(0x0028) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.OutsideTeamIconWidget"));

		return ptr;
	}

};


// Class TslGame.PlayerCardWidgetV2
// 0x0398 (0x0830 - 0x0498)
class UPlayerCardWidgetV2 : public UPlayerCardWidget
{
public:
	struct FString                                     NameplateImage;                                           // 0x0498(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     NameplateColor;                                           // 0x04A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     EmplemImage;                                              // 0x04B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     DisplayName;                                              // 0x04C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                Level;                                                    // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EOutGamePlatformProvider                           PUBGIdPlatform;                                           // 0x04DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	struct FText                                       StatTitle1;                                               // 0x04E0(0x0018) (Edit, BlueprintVisible)
	struct FText                                       StatSubtitle1;                                            // 0x04F8(0x0018) (Edit, BlueprintVisible)
	struct FText                                       StatValue1;                                               // 0x0510(0x0018) (Edit, BlueprintVisible)
	struct FString                                     StatIcon1;                                                // 0x0528(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       StatTitle2;                                               // 0x0538(0x0018) (Edit, BlueprintVisible)
	struct FText                                       StatSubtitle2;                                            // 0x0550(0x0018) (Edit, BlueprintVisible)
	struct FText                                       StatValue2;                                               // 0x0568(0x0018) (Edit, BlueprintVisible)
	struct FString                                     StatIcon2;                                                // 0x0580(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       StatTitle3;                                               // 0x0590(0x0018) (Edit, BlueprintVisible)
	struct FText                                       StatSubtitle3;                                            // 0x05A8(0x0018) (Edit, BlueprintVisible)
	struct FText                                       StatValue3;                                               // 0x05C0(0x0018) (Edit, BlueprintVisible)
	struct FString                                     StatIcon3;                                                // 0x05D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FReplicatedPUBGIdData                       PUBGIdData;                                               // 0x05E8(0x0228) (Edit, BlueprintVisible)
	struct FString                                     AccountId;                                                // 0x0810(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      BannerControllerClass;                                    // 0x0820(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslSceneCaptureWorld*                       CaptureWorld;                                             // 0x0828(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerCardWidgetV2"));

		return ptr;
	}


	void STATIC_setDataFromPUBGIdData(const struct FReplicatedPUBGIdData& PUBGIdData);
	void STATIC_OpenSelectedGamerCard(const struct FString& FocusedUserUniqueId);
	void STATIC_OnSpawnStudio(class AActor* SpawnedActor);
	void STATIC_OnSpawnController(class AActor* SpawnedActor);
	void STATIC_OnSetPUBGIdData();
	void STATIC_OnSetCaptureWorld();
};


// Class TslGame.PlayerDamageIndicatorWidget
// 0x0028 (0x0418 - 0x03F0)
class UPlayerDamageIndicatorWidget : public UUmgBaseWidget
{
public:
	int                                                DamageInfoWidgetCacheMinimum;                             // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class UClass*                                      DamageInfoWidgetClass;                                    // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCanvasPanel*                                DamageInfoCanvas;                                         // 0x0400(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UPlayerDamageInfoWidget*>             DamageInfoWidgets;                                        // 0x0408(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerDamageIndicatorWidget"));

		return ptr;
	}


	void STATIC_AddTakeHitInfo(class ATslCharacter* Victim, const struct FTakeHitInfo& InTakeHitInfo);
};


// Class TslGame.PlayerDamageInfoWidget
// 0x0068 (0x0458 - 0x03F0)
class UPlayerDamageInfoWidget : public UUmgBaseWidget
{
public:
	class UBorder*                                     OuterBorder;                                              // 0x03F0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  DamageAmountText;                                         // 0x03F8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FadeInAnim;                                               // 0x0400(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetAnimation*                            FadeOutAnim;                                              // 0x0408(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bDesiredSizeToContent;                                    // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	struct FAnchors                                    DesiredAnchor;                                            // 0x0414(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector2D                                   DesiredAlignment;                                         // 0x0424(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                HeadShotColor;                                            // 0x042C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x043C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	class UCanvasPanelSlot*                            SelfCanvasSlot;                                           // 0x0450(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.PlayerDamageInfoWidget"));

		return ptr;
	}

};


// Class TslGame.RandomBRSubtitleWidget
// 0x0098 (0x0488 - 0x03F0)
class URandomBRSubtitleWidget : public UUmgBaseWidget
{
public:
	class UWidget*                                     RandomBRMarkWidget;                                       // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidget*                                     SubtitleWidget;                                           // 0x03F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidget*                                     BlueZoneSubtitleWidget;                                   // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidget*                                     ItemSpawnSubtitleWidget;                                  // 0x0408(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidget*                                     VehicleSpawnSubtitleWidget;                               // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  SubtitleText;                                             // 0x0418(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  BlueZoneSubtitleText;                                     // 0x0420(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  ItemSpawnSubtitleText;                                    // 0x0428(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  VehicleSpawnSubtitleText;                                 // 0x0430(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TAssetPtr<class UStringTable>                      SubtitleStringTable;                                      // 0x0438(0x0020) (Edit)
	TAssetPtr<class UDataTable>                        SubtitleKeyTable;                                         // 0x0458(0x0020) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	float                                              WidgetHideTimeSeconds;                                    // 0x0480(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0484(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RandomBRSubtitleWidget"));

		return ptr;
	}


	void STATIC_OnRandomBRKeySetUp(const struct FString& BlueZoneSubtitleKey, const struct FString& ItemSpawnSubtitleKey, const struct FString& VehicleSpawnSubtitleKey);
	void STATIC_OnHideSubtitileByTimer();
};


// Class TslGame.ReplayProblemBaseWidget
// 0x0080 (0x0470 - 0x03F0)
class UReplayProblemBaseWidget : public UUmgBaseWidget
{
public:
	int                                                CheckElapsedTime;                                         // 0x03F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  IconBlinkingAnimBinder;                                   // 0x03F8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_TextBlock                  DisplayTextBlock;                                         // 0x0418(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       DefaultFailureText;                                       // 0x0438(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       KillcamUnusualMovementText;                               // 0x0450(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ReplayProblemBaseWidget"));

		return ptr;
	}

};


// Class TslGame.ResultTitleWidget
// 0x0170 (0x0560 - 0x03F0)
class UResultTitleWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Animation                  MatchFinishAnimationBinder;                               // 0x03F0(0x0020) (Edit)
	struct FUmgWidgetBinder_Border                     CenterBorderBinder;                                       // 0x0410(0x0030) (Edit)
	struct FUmgWidgetBinder_TextBlock                  ResultTextBinder;                                         // 0x0440(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameTextBinder;                                     // 0x0460(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  TotalPlayersTextBinder;                                   // 0x0480(0x0020) (Edit)
	struct FUmgWidgetBinder_TextBlock                  FinalRankTextBinder;                                      // 0x04A0(0x0020) (Edit)
	struct FLinearColor                                DefaultBackgroundColor;                                   // 0x04C0(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                RedTeamBackgroundColor;                                   // 0x04D0(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                BlueTeamBackgroundColor;                                  // 0x04E0(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                ZombieTeamBackgroundColor;                                // 0x04F0(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                DefaultTextColor;                                         // 0x0500(0x0010) (Edit, IsPlainOldData)
	struct FLinearColor                                PlatoonTextColor;                                         // 0x0510(0x0010) (Edit, IsPlainOldData)
	class UTexture2D*                                  ZombieWinTexture;                                         // 0x0520(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FText                                       BlueTeamWinText;                                          // 0x0528(0x0018) (Edit)
	struct FText                                       RedTeamWinText;                                           // 0x0540(0x0018) (Edit)
	class UAkAudioEvent*                               PlatoonWinAudio;                                          // 0x0558(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ResultTitleWidget"));

		return ptr;
	}


	void STATIC_OnTotalPlayersTextPrepass();
	void STATIC_OnPlayerNameTextPrepass();
	void STATIC_OnFinalRankTextPrepass();
};


// Class TslGame.RiderIconWidget
// 0x0028 (0x0418 - 0x03F0)
class URiderIconWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      RiderIcon;                                                // 0x03F0(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.RiderIconWidget"));

		return ptr;
	}

};


// Class TslGame.ScreenIndicatorBaseWidget
// 0x0028 (0x0418 - 0x03F0)
class UScreenIndicatorBaseWidget : public UUmgBaseWidget
{
public:
	struct FVector2D                                   ScreenEdgeSize;                                           // 0x03F0(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   IndicatorWidgetSize;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0400(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.ScreenIndicatorBaseWidget"));

		return ptr;
	}

};


// Class TslGame.CaptureObjectIndicatorWidget
// 0x0110 (0x0528 - 0x0418)
class UCaptureObjectIndicatorWidget : public UScreenIndicatorBaseWidget
{
public:
	struct FCaptureObjectWidgetData                    CaptureObjectWidgetData;                                  // 0x0418(0x0108) (Edit)
	class ACaptureAreaActor*                           CaptureAreaActor;                                         // 0x0520(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.CaptureObjectIndicatorWidget"));

		return ptr;
	}

};


// Class TslGame.SmokeGrenadeIndicatorWidget
// 0x00F0 (0x0508 - 0x0418)
class USmokeGrenadeIndicatorWidget : public UScreenIndicatorBaseWidget
{
public:
	class ATslPlayerController*                        PlayerController;                                         // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              RemainTime;                                               // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0424(0x0008) MISSED OFFSET
	float                                              BlinkGaugeRate;                                           // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShowRemainTime;                                           // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShowDistance;                                             // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0438(0x0008) MISSED OFFSET
	class UCurveFloat*                                 SmokeRemainCurve;                                         // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SmokeScaleByDistance;                                     // 0x0448(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SmokeAlphaByDistance;                                     // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      SmokeImageBinder;                                         // 0x0458(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    SmokeGaugeOverlay;                                        // 0x0480(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   SmokeGrenadeGaugeScaleBox;                                // 0x04A8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     SmokeGrenadeGaugeBorder;                                  // 0x04D0(0x0030) (Edit, DisableEditOnInstance)
	class UTslSmokePropagationComponent*               CachedTslSmokePropagationComponent;                       // 0x0500(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SmokeGrenadeIndicatorWidget"));

		return ptr;
	}


	void STATIC_PlayToNearlyEmptyAnimation();
};


// Class TslGame.TeamMarkWidget
// 0x0318 (0x0730 - 0x0418)
class UTeamMarkWidget : public UScreenIndicatorBaseWidget
{
public:
	float                                              OffsetZ;                                                  // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ParachutingOffsetZ;                                       // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeadMarkInvisibleTime;                                    // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeadMarkInvisibleDistance;                                // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AnimationMaxPercent;                                      // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AnimationMaxDistance;                                     // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlatoonOtherSquadInTeamScale;                             // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   StateSwitcherBinder;                                      // 0x0438(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameTextBinder;                                     // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      OutLineImageBinder;                                       // 0x0478(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DirectionImageBinder;                                     // 0x04A0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      NormalImageBinder;                                        // 0x04C8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      GroggyImageBinder;                                        // 0x04F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DeadImageBinder;                                          // 0x0518(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      VehicleImageBinder;                                       // 0x0540(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ParachuteImageBinder;                                     // 0x0568(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      QuitterImageBinder;                                       // 0x0590(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      AircraftImageBinder;                                      // 0x05B8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ItemRequestImageBinder;                                   // 0x05E0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ImageMarkBorderBinder;                                    // 0x0608(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   ScaleBoxBinder;                                           // 0x0638(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_UserWidget                 PlatformImageBinder;                                      // 0x0660(0x0020) (Edit, DisableEditOnInstance)
	class ATeam*                                       TeamMember;                                               // 0x0680(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AmingImageAlpha;                                          // 0x0688(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScopingImageAlpha;                                        // 0x068C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AmingTextAlpha;                                           // 0x0690(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScopingTextAlpha;                                         // 0x0694(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    GroggyImage;                                              // 0x0698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    VehicleImage;                                             // 0x06A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    ParachuteImage;                                           // 0x06A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    AircraftImage;                                            // 0x06B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    AmmoRequestImage;                                         // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    HealRequestImage;                                         // 0x06C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FStringAssetReference                       PlatoonCommanderTexture;                                  // 0x06C8(0x0010) (Edit, DisableEditOnInstance)
	class UCurveFloat*                                 AnimCurveMarkOpacity;                                     // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveNameOpacity;                                     // 0x06E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveMarkScale;                                       // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveNameTranslation;                                 // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x06F8(0x0030) MISSED OFFSET
	class ATslPlayerState*                             CachedTeamPlayerState;                                    // 0x0728(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TeamMarkWidget"));

		return ptr;
	}

};


// Class TslGame.TslHumanDetectionMarkWidget
// 0x0260 (0x0678 - 0x0418)
class UTslHumanDetectionMarkWidget : public UScreenIndicatorBaseWidget
{
public:
	float                                              OffsetZ;                                                  // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ParachutingOffsetZ;                                       // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeadMarkInvisibleTime;                                    // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeadMarkInvisibleDistance;                                // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AnimationMaxPercent;                                      // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AnimationMaxDistance;                                     // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlatoonOtherSquadInTeamScale;                             // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   StateSwitcherBinder;                                      // 0x0438(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  PlayerNameTextBinder;                                     // 0x0458(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      OutLineImageBinder;                                       // 0x0478(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DirectionImageBinder;                                     // 0x04A0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      NormalImageBinder;                                        // 0x04C8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      GroggyImageBinder;                                        // 0x04F0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      DeadImageBinder;                                          // 0x0518(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      VehicleImageBinder;                                       // 0x0540(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      ParachuteImageBinder;                                     // 0x0568(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      QuitterImageBinder;                                       // 0x0590(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Border                     ImageMarkBorderBinder;                                    // 0x05B8(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_ScaleBox                   ScaleBoxBinder;                                           // 0x05E8(0x0028) (Edit, DisableEditOnInstance)
	class ATslCharacter*                               DetectionCharacter;                                       // 0x0610(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AmingImageAlpha;                                          // 0x0618(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScopingImageAlpha;                                        // 0x061C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AmingTextAlpha;                                           // 0x0620(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScopingTextAlpha;                                         // 0x0624(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    GroggyImage;                                              // 0x0628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    VehicleImage;                                             // 0x0630(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture*                                    ParachuteImage;                                           // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveMarkOpacity;                                     // 0x0640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveNameOpacity;                                     // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveMarkScale;                                       // 0x0650(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AnimCurveNameTranslation;                                 // 0x0658(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0660(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslHumanDetectionMarkWidget"));

		return ptr;
	}

};


// Class TslGame.TslSignalEliminationMarkWidget
// 0x0078 (0x0490 - 0x0418)
class UTslSignalEliminationMarkWidget : public UScreenIndicatorBaseWidget
{
public:
	float                                              OffsetZ;                                                  // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistance;                                              // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxScale;                                                 // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FUmgWidgetBinder_ScaleBox                   ScaleBoxBinder;                                           // 0x0428(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  EliminationAnimBinder;                                    // 0x0450(0x0020) (Edit, DisableEditOnInstance)
	struct FVector                                     EliminationCharacterLocation;                             // 0x0470(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x047C(0x0004) MISSED OFFSET
	class ATslCharacter*                               EliminationCharacter;                                     // 0x0480(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0488(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TslSignalEliminationMarkWidget"));

		return ptr;
	}

};


// Class TslGame.SignalGaugeEffectBaseWidget
// 0x00B8 (0x04A8 - 0x03F0)
class USignalGaugeEffectBaseWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	struct FName                                       OldSignalRatioParamName;                                  // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CurrentSignalRatioParamName;                              // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Image                      SignalEffectBinder;                                       // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_FloatCurve2>      SignalEffectAnimationFloatCurveList;                      // 0x0438(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_VectorCurve2>     SignalEffectAnimationVectorCurveList;                     // 0x0448(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      SignalEffectBackgroundBinder;                             // 0x0458(0x0028) (Edit, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_FloatCurve2>      SignalEffectBgAnimationFloatCurveList;                    // 0x0480(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUiEffectAnimation_VectorCurve2>     SignalEffectBgAnimationVectorCurveList;                   // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAutoDestroyOnEffectPlayFinish;                           // 0x04A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SignalGaugeEffectBaseWidget"));

		return ptr;
	}

};


// Class TslGame.SkydiveStateWidget
// 0x01A0 (0x0590 - 0x03F0)
class USkydiveStateWidget : public UUmgBaseWidget
{
public:
	bool                                               bIsParachuting;                                           // 0x03F0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMainVisibility;                                          // 0x03F1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F2(0x0002) MISSED OFFSET
	float                                              VerticalVelocity;                                         // 0x03F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HorizontalVelocity;                                       // 0x03F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeOffsetInPX;                                       // 0x03FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ParaOpenAltitudeInPX;                                     // 0x0400(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeGaugeScaleInPx;                                   // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAltitudeInMeters;                                      // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RenderOffsetPerTeammate;                                  // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RenderOffsetInSquadStatic;                                // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	class UTslSkydiveComponent*                        SkydiveCompRef;                                           // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Border                     Border_Main_Binder;                                       // 0x0428(0x0030) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CP_Parachute_Binder;                                      // 0x0458(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_CanvasPanel                CP_Marker_Binder;                                         // 0x0480(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      IMG_Icon_Binder;                                          // 0x04A8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    SB_GaugeParaRange_Binder;                                 // 0x04D0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    SB_GaugeLandHeight_Binder;                                // 0x04F8(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  T_VerticalSpeed_Binder;                                   // 0x0520(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  T_HorizontalSpeed_Binder;                                 // 0x0540(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_HorizontalBox              HB_HorizontalSpeed_Binder;                                // 0x0560(0x0028) (Edit, DisableEditOnInstance)
	float                                              AbsoluteModeScaleFactor;                                  // 0x0588(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x058C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.SkydiveStateWidget"));

		return ptr;
	}


	void STATIC_TickStateCheck();
	void STATIC_HandleSettingsChanged();
};


// Class TslGame.TdmMatchResultWidget
// 0x0068 (0x0458 - 0x03F0)
class UTdmMatchResultWidget : public UUmgBaseWidget
{
public:
	TScriptInterface<class UTslNaviWidgetInterface>    LastFocusedWidget;                                        // 0x03F0(0x0010) (ZeroConstructor, IsPlainOldData)
	class UTextBlock*                                  Team01TotalScore;                                         // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  Team02TotalScore;                                         // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  PlayerMatchResultText;                                    // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTdmPersonalScoreTableWidget*                Team01ScoreBoardWidget;                                   // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTdmPersonalScoreTableWidget*                Team02ScoreBoardWidget;                                   // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  RewardPointsTotal;                                        // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  MissionPointTotal;                                        // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ButtonLobby;                                              // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ButtonReport;                                             // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             ButtonLobbySwitcher;                                      // 0x0448(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             ButtonReportAndGamerCardSwitcher;                         // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TdmMatchResultWidget"));

		return ptr;
	}


	void STATIC_UpdateData_internal();
	void STATIC_UpdateConsoleKeyGuideVisibility(bool bCanReport, bool bCanShowGamerCard);
	void STATIC_OnShowFocusedGamerCard(const struct FString& FocusedUserUniqueId, EOutGamePlatformProvider PlayerPlatform);
	void STATIC_OnReport(const struct FTslReportUserInfo& ReportInfo);
	void STATIC_OnGoToLobby(EPopupButtonID ButtonID);
	void STATIC_OnClicked_ButtonReport();
	void STATIC_OnClicked_ButtonLobby();
	void STATIC_HandleGamepadUpOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadRightOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadLeftOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleGamepadDownOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
	void STATIC_HandleFocusReceivedOfChild(const TScriptInterface<class UTslNaviWidgetInterface>& Widget);
};


// Class TslGame.TdmPersonalScoreBoardWidget
// 0x0018 (0x0408 - 0x03F0)
class UTdmPersonalScoreBoardWidget : public UUmgBaseWidget
{
public:
	class UTdmPersonalScoreTableWidget*                ScoreTableLeft;                                           // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTdmPersonalScoreTableWidget*                ScoreTableRight;                                          // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USizeBox*                                    SizeBox_Map;                                              // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TdmPersonalScoreBoardWidget"));

		return ptr;
	}


	void STATIC_UpdateData_internal();
};


// Class TslGame.TdmPersonalScoreTableWidget
// 0x0070 (0x0460 - 0x03F0)
class UTdmPersonalScoreTableWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class UWidgetSwitcher*                             WidgetSwitcher_BG;                                        // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidgetSwitcher*                             WidgetSwitcher_Banner;                                    // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_HomeTeamName;                                   // 0x0408(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_AwayTeamName;                                   // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UVerticalBox*                                VerticalBox_PersonalScoreList;                            // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_ListTitle_Name;                                 // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_ListTitle_Kill;                                 // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_ListTitle_Assist;                               // 0x0430(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_ListTitle_Death;                                // 0x0438(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_ListTitle_Score;                                // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0448(0x0008) MISSED OFFSET
	TArray<class UTdmPersonalScoreWidget*>             ScoreWidgetArray;                                         // 0x0450(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TdmPersonalScoreTableWidget"));

		return ptr;
	}

};


// Class TslGame.TdmPersonalScoreWidget
// 0x01B0 (0x05A0 - 0x03F0)
class UTdmPersonalScoreWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x138];                                     // 0x03F0(0x0138) MISSED OFFSET
	struct FLinearColor                                HighlightedColor;                                         // 0x0528(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	struct FLinearColor                                NormalColor;                                              // 0x0538(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0548(0x0008) MISSED OFFSET
	class UTslNaviWidgetComp*                          NaviWidgetComp;                                           // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTextBlock*                                  TextBlock_Name;                                           // 0x0558(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_Kill;                                           // 0x0560(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_Assist;                                         // 0x0568(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_Death;                                          // 0x0570(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TextBlock_Score;                                          // 0x0578(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBorder*                                     TDMScoreBoardPlayerBorder;                                // 0x0580(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FLinearColor                                MyCharacterTextColor;                                     // 0x0588(0x0010) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UTslUserPlatformImageWidget*                 PlatformImage;                                            // 0x0598(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr;
		if(!ptr)
			ptr = UObject::FindClass(_xor_("Class TslGame.TdmPersonalScoreWidget"));

		return ptr;
	}


	void STATIC_UpdateDesign_Normal();
	void STATIC_UpdateDesign_Focused();
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
